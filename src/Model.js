/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import * as THREE from 'three'
import { useFrame } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'

export default function Model(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/array.glb')
  useFrame((state) => {
    group.current.children.forEach((child, index) => {
      child.position.y += Math.sin(index * 1000 + state.clock.elapsedTime) / 50
      child.rotation.x += (Math.sin(index * 1000 + state.clock.elapsedTime) * Math.PI) / 2000
      child.rotation.y += (Math.cos(index * 1000 + state.clock.elapsedTime) * Math.PI) / 3000
      child.rotation.z += (Math.sin(index * 1000 + state.clock.elapsedTime) * Math.PI) / 4000
    })
  })

  const Material = new THREE.MeshPhysicalMaterial({
    color: '#0a0a0a',
    roughness: 0.8,
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube007.geometry}
        material={props.dark ? Material : nodes.Cube007.material}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Text.geometry}
          material={props.dark ? Material : nodes.Text.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Text001.geometry}
          material={props.dark ? Material : nodes.Text001.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Text002.geometry}
          material={props.dark ? Material : nodes.Text002.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Text003.geometry}
          material={props.dark ? Material : nodes.Text003.material}
        />
      </mesh>
    </group>
  )
}

useGLTF.preload('/array.glb')
