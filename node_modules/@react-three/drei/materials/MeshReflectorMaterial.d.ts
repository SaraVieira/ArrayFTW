import { Matrix4, MeshStandardMaterial, Texture, Vector2 } from 'three';
export declare class MeshReflectorMaterial extends MeshStandardMaterial {
    private _debug;
    private _tDepth;
    private _distortionMap;
    private _tDiffuse;
    private _u_mipmap_0;
    private _u_mipmap_1;
    private _u_mipmap_2;
    private _u_mipmap_3;
    private _u_mipmap_4;
    private _u_mipmap_5;
    private _u_mipmap_6;
    private _u_mipmap_7;
    private _u_mipmap_res_0;
    private _u_mipmap_res_1;
    private _u_mipmap_res_2;
    private _u_mipmap_res_3;
    private _u_mipmap_res_4;
    private _u_mipmap_res_5;
    private _u_mipmap_res_6;
    private _u_mipmap_res_7;
    private _textureMatrix;
    private _mirror;
    private _mixBlur;
    private _blurStrength;
    private _minDepthThreshold;
    private _maxDepthThreshold;
    private _depthScale;
    private _depthToBlurRatioBias;
    private _distortion;
    constructor(parameters?: {});
    onBeforeCompile(shader: any): void;
    get tDiffuse(): Texture | null;
    set tDiffuse(v: Texture | null);
    get tDepth(): Texture | null;
    set tDepth(v: Texture | null);
    get distortionMap(): Texture | null;
    set distortionMap(v: Texture | null);
    get u_mipmap_0(): Texture | null;
    set u_mipmap_0(v: Texture | null);
    get u_mipmap_1(): Texture | null;
    set u_mipmap_1(v: Texture | null);
    get u_mipmap_2(): Texture | null;
    set u_mipmap_2(v: Texture | null);
    get u_mipmap_3(): Texture | null;
    set u_mipmap_3(v: Texture | null);
    get u_mipmap_4(): Texture | null;
    set u_mipmap_4(v: Texture | null);
    get u_mipmap_5(): Texture | null;
    set u_mipmap_5(v: Texture | null);
    get u_mipmap_6(): Texture | null;
    set u_mipmap_6(v: Texture | null);
    get u_mipmap_7(): Texture | null;
    set u_mipmap_7(v: Texture | null);
    get u_mipmap_res_0(): Vector2 | null;
    set u_mipmap_res_0(v: Vector2 | null);
    get u_mipmap_res_1(): Vector2 | null;
    set u_mipmap_res_1(v: Vector2 | null);
    get u_mipmap_res_2(): Vector2 | null;
    set u_mipmap_res_2(v: Vector2 | null);
    get u_mipmap_res_3(): Vector2 | null;
    set u_mipmap_res_3(v: Vector2 | null);
    get u_mipmap_res_4(): Vector2 | null;
    set u_mipmap_res_4(v: Vector2 | null);
    get u_mipmap_res_5(): Vector2 | null;
    set u_mipmap_res_5(v: Vector2 | null);
    get u_mipmap_res_6(): Vector2 | null;
    set u_mipmap_res_6(v: Vector2 | null);
    get u_mipmap_res_7(): Vector2 | null;
    set u_mipmap_res_7(v: Vector2 | null);
    get textureMatrix(): Matrix4 | null;
    set textureMatrix(v: Matrix4 | null);
    get mirror(): number;
    set mirror(v: number);
    get mixBlur(): number;
    set mixBlur(v: number);
    get mixStrength(): number;
    set mixStrength(v: number);
    get minDepthThreshold(): number;
    set minDepthThreshold(v: number);
    get maxDepthThreshold(): number;
    set maxDepthThreshold(v: number);
    get depthScale(): number;
    set depthScale(v: number);
    get debug(): number;
    set debug(v: number);
    get depthToBlurRatioBias(): number;
    set depthToBlurRatioBias(v: number);
    get distortion(): number;
    set distortion(v: number);
}
export declare type MeshReflectorMaterialImpl = {
    mixBlur: number;
    mixStrength: number;
    mirror: number;
    textureMatrix: Matrix4;
    tDiffuse: Texture;
    distortionMap?: Texture;
    u_mipmap_0?: Texture;
    u_mipmap_1?: Texture;
    u_mipmap_2?: Texture;
    u_mipmap_3?: Texture;
    u_mipmap_4?: Texture;
    u_mipmap_5?: Texture;
    u_mipmap_6?: Texture;
    u_mipmap_7?: Texture;
    u_mipmap_res_0?: Vector2;
    u_mipmap_res_1?: Vector2;
    u_mipmap_res_2?: Vector2;
    u_mipmap_res_3?: Vector2;
    u_mipmap_res_4?: Vector2;
    u_mipmap_res_5?: Vector2;
    u_mipmap_res_6?: Vector2;
    u_mipmap_res_7?: Vector2;
    minDepthThreshold: number;
    maxDepthThreshold: number;
    depthScale: number;
    depthToBlurRatioBias: number;
    distortion: number;
} & JSX.IntrinsicElements['meshStandardMaterial'];
