import { MeshStandardMaterial } from 'three';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';

class MeshReflectorMaterial extends MeshStandardMaterial {
  constructor(parameters = {}) {
    super(parameters);

    _defineProperty(this, "_debug", {
      value: 0
    });

    _defineProperty(this, "_tDepth", {
      value: null
    });

    _defineProperty(this, "_distortionMap", {
      value: null
    });

    _defineProperty(this, "_tDiffuse", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_0", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_1", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_2", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_3", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_4", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_5", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_6", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_7", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_res_0", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_res_1", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_res_2", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_res_3", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_res_4", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_res_5", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_res_6", {
      value: null
    });

    _defineProperty(this, "_u_mipmap_res_7", {
      value: null
    });

    _defineProperty(this, "_textureMatrix", {
      value: null
    });

    _defineProperty(this, "_mirror", {
      value: 0.0
    });

    _defineProperty(this, "_mixBlur", {
      value: 0.0
    });

    _defineProperty(this, "_blurStrength", {
      value: 0.5
    });

    _defineProperty(this, "_minDepthThreshold", {
      value: 0.9
    });

    _defineProperty(this, "_maxDepthThreshold", {
      value: 1
    });

    _defineProperty(this, "_depthScale", {
      value: 0
    });

    _defineProperty(this, "_depthToBlurRatioBias", {
      value: 0.25
    });

    _defineProperty(this, "_distortion", {
      value: 1
    });

    this.setValues(parameters);
  }

  onBeforeCompile(shader) {
    var _shader$defines;

    if (!((_shader$defines = shader.defines) == null ? void 0 : _shader$defines.USE_UV)) {
      shader.defines.USE_UV = '';
    }

    shader.uniforms.debug = this._debug;
    shader.uniforms.tDiffuse = this._tDiffuse;
    shader.uniforms.tDepth = this._tDepth;
    shader.uniforms.distortionMap = this._distortionMap;
    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;
    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;
    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;
    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;
    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;
    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;
    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;
    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;
    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;
    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;
    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;
    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;
    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;
    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;
    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;
    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;
    shader.uniforms.textureMatrix = this._textureMatrix;
    shader.uniforms.mirror = this._mirror;
    shader.uniforms.mixBlur = this._mixBlur;
    shader.uniforms.mixStrength = this._blurStrength;
    shader.uniforms.minDepthThreshold = this._minDepthThreshold;
    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;
    shader.uniforms.depthScale = this._depthScale;
    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;
    shader.uniforms.distortion = this._distortion;
    shader.vertexShader = "\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      " + shader.vertexShader;
    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', "#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );");
    shader.fragmentShader = "\n        uniform int debug;\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform sampler2D u_mipmap_0;\n        uniform sampler2D u_mipmap_1;\n        uniform sampler2D u_mipmap_2;\n        uniform sampler2D u_mipmap_3;\n        uniform sampler2D u_mipmap_4;\n        uniform sampler2D u_mipmap_5;\n        uniform sampler2D u_mipmap_6;\n        uniform sampler2D u_mipmap_7;\n        uniform vec2 u_mipmap_res_0;\n        uniform vec2 u_mipmap_res_1;\n        uniform vec2 u_mipmap_res_2;\n        uniform vec2 u_mipmap_res_3;\n        uniform vec2 u_mipmap_res_4;\n        uniform vec2 u_mipmap_res_5;\n        uniform vec2 u_mipmap_res_6;\n        uniform vec2 u_mipmap_res_7;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;  \n        \n        // from http://www.java-gaming.org/index.php?topic=35123.0\n        vec4 cubic( float v ) {\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\n          vec4 s = n * n * n;\n          float x = s.x;\n          float y = s.y - 4.0 * s.x;\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\n          float w = 6.0 - x - y - z;\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\n        }\n        \n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\n          vec2 invTexSize = 1.0 / texSize;\n          texCoords = texCoords * texSize - 0.5;\n          vec2 fxy = fract( texCoords );\n          texCoords -= fxy;\n\n          vec4 xcubic = cubic( fxy.x );\n          vec4 ycubic = cubic( fxy.y );\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\n\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\n          offset *= invTexSize.xxyy;\n        \n          vec4 sample0 = texture2D( sampler, offset.xz);\n          vec4 sample1 = texture2D( sampler, offset.yz);\n          vec4 sample2 = texture2D( sampler, offset.xw);\n          vec4 sample3 = texture2D( sampler, offset.yw);\n        \n          float sx = s.x / ( s.x + s.y );\n          float sy = s.z / ( s.z + s.w );\n\n          return mix(\n            mix(\n              sample3,\n              sample2,\n              sx\n            ),\n            mix(\n              sample1,\n              sample0,\n              sx\n            ),\n            sy\n          );\n        }\n\n\n        " + shader.fragmentShader;
    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', "#include <emissivemap_fragment>\n    \n      float depthFactor = 1.0;\n      float distortionFactor = 0.0;\n      vec3 my_normal = vec3(0.0);\n      float reflectorRoughnessFactor = roughness;\n      vec3 coord = my_vUv.xyz / my_vUv.w;\n\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      #ifdef USE_NORMALMAP\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\n      #endif\n\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\n      proj_vUv.x += distortionFactor;\n      proj_vUv.y += distortionFactor;\n      \n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2D(tDepth, proj_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\n      #endif\n\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\n      vec4 mixedColor;\n\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\n      if (_lod < 1.) {\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        mixedColor = mix(one, two, _lod);\n      } else if (_lod < 2.) {\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        mixedColor = mix(one, two, _lod - 1.0);\n      } else if (_lod < 3.) {\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        mixedColor = mix(one, two, _lod - 2.0);\n      } else if (_lod < 4.) {\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        mixedColor = mix(one, two, _lod - 3.0);\n      } else if (_lod < 5.) {\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        mixedColor = mix(one, two, _lod - 4.0);\n      } else if (_lod < 6.) {\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        mixedColor = mix(one, two, _lod - 5.0);\n      } else if (_lod < 7.) {\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, two, _lod - 6.0);\n      } else {\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\n        mixedColor = mix(one, baseColor, _lod - 7.0);\n      }\n\n      mixedColor.rgb *= depthFactor;\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \n      diffuseColor = sRGBToLinear(diffuseColor);\n\n      if (debug == 1) {\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\n      }\n      if (debug == 2) {\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\n      }\n      if (debug == 3) {\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\n      }\n      if (debug == 4) {\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\n      }\n      ");
  }

  get tDiffuse() {
    return this._tDiffuse.value;
  }

  set tDiffuse(v) {
    this._tDiffuse.value = v;
  }

  get tDepth() {
    return this._tDepth.value;
  }

  set tDepth(v) {
    this._tDepth.value = v;
  }

  get distortionMap() {
    return this._distortionMap.value;
  }

  set distortionMap(v) {
    this._distortionMap.value = v;
  }

  get u_mipmap_0() {
    return this._u_mipmap_0.value;
  }

  set u_mipmap_0(v) {
    this._u_mipmap_0.value = v;
  }

  get u_mipmap_1() {
    return this._u_mipmap_1.value;
  }

  set u_mipmap_1(v) {
    this._u_mipmap_1.value = v;
  }

  get u_mipmap_2() {
    return this._u_mipmap_2.value;
  }

  set u_mipmap_2(v) {
    this._u_mipmap_2.value = v;
  }

  get u_mipmap_3() {
    return this._u_mipmap_3.value;
  }

  set u_mipmap_3(v) {
    this._u_mipmap_3.value = v;
  }

  get u_mipmap_4() {
    return this._u_mipmap_4.value;
  }

  set u_mipmap_4(v) {
    this._u_mipmap_4.value = v;
  }

  get u_mipmap_5() {
    return this._u_mipmap_5.value;
  }

  set u_mipmap_5(v) {
    this._u_mipmap_5.value = v;
  }

  get u_mipmap_6() {
    return this._u_mipmap_6.value;
  }

  set u_mipmap_6(v) {
    this._u_mipmap_6.value = v;
  }

  get u_mipmap_7() {
    return this._u_mipmap_7.value;
  }

  set u_mipmap_7(v) {
    this._u_mipmap_7.value = v;
  }

  get u_mipmap_res_0() {
    return this._u_mipmap_res_0.value;
  }

  set u_mipmap_res_0(v) {
    this._u_mipmap_res_0.value = v;
  }

  get u_mipmap_res_1() {
    return this._u_mipmap_res_1.value;
  }

  set u_mipmap_res_1(v) {
    this._u_mipmap_res_1.value = v;
  }

  get u_mipmap_res_2() {
    return this._u_mipmap_res_2.value;
  }

  set u_mipmap_res_2(v) {
    this._u_mipmap_res_2.value = v;
  }

  get u_mipmap_res_3() {
    return this._u_mipmap_res_3.value;
  }

  set u_mipmap_res_3(v) {
    this._u_mipmap_res_3.value = v;
  }

  get u_mipmap_res_4() {
    return this._u_mipmap_res_4.value;
  }

  set u_mipmap_res_4(v) {
    this._u_mipmap_res_4.value = v;
  }

  get u_mipmap_res_5() {
    return this._u_mipmap_res_5.value;
  }

  set u_mipmap_res_5(v) {
    this._u_mipmap_res_5.value = v;
  }

  get u_mipmap_res_6() {
    return this._u_mipmap_res_6.value;
  }

  set u_mipmap_res_6(v) {
    this._u_mipmap_res_6.value = v;
  }

  get u_mipmap_res_7() {
    return this._u_mipmap_res_7.value;
  }

  set u_mipmap_res_7(v) {
    this._u_mipmap_res_7.value = v;
  }

  get textureMatrix() {
    return this._textureMatrix.value;
  }

  set textureMatrix(v) {
    this._textureMatrix.value = v;
  }

  get mirror() {
    return this._mirror.value;
  }

  set mirror(v) {
    this._mirror.value = v;
  }

  get mixBlur() {
    return this._mixBlur.value;
  }

  set mixBlur(v) {
    this._mixBlur.value = v;
  }

  get mixStrength() {
    return this._blurStrength.value;
  }

  set mixStrength(v) {
    this._blurStrength.value = v;
  }

  get minDepthThreshold() {
    return this._minDepthThreshold.value;
  }

  set minDepthThreshold(v) {
    this._minDepthThreshold.value = v;
  }

  get maxDepthThreshold() {
    return this._maxDepthThreshold.value;
  }

  set maxDepthThreshold(v) {
    this._maxDepthThreshold.value = v;
  }

  get depthScale() {
    return this._depthScale.value;
  }

  set depthScale(v) {
    this._depthScale.value = v;
  }

  get debug() {
    return this._debug.value;
  }

  set debug(v) {
    this._debug.value = v;
  }

  get depthToBlurRatioBias() {
    return this._depthToBlurRatioBias.value;
  }

  set depthToBlurRatioBias(v) {
    this._depthToBlurRatioBias.value = v;
  }

  get distortion() {
    return this._distortion.value;
  }

  set distortion(v) {
    this._distortion.value = v;
  }

}

export { MeshReflectorMaterial };
