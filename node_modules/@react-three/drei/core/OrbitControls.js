import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { forwardRef, useMemo, useEffect, createElement } from 'react';
import { useThree, useFrame } from '@react-three/fiber';
import { OrbitControls as OrbitControls$1 } from 'three-stdlib';

const OrbitControls = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    camera,
    regress,
    enableDampening = true
  } = _ref,
      restProps = _objectWithoutPropertiesLoose(_ref, ["camera", "regress", "enableDampening"]);

  const invalidate = useThree(({
    invalidate
  }) => invalidate);
  const defaultCamera = useThree(({
    camera
  }) => camera);
  const gl = useThree(({
    gl
  }) => gl);
  const performance = useThree(({
    performance
  }) => performance);
  const explCamera = camera || defaultCamera;
  const controls = useMemo(() => new OrbitControls$1(explCamera), [explCamera]);
  useFrame(() => controls.update());
  useEffect(() => {
    const callback = () => {
      invalidate();
      if (regress) performance.regress();
    };

    controls.connect(gl.domElement);
    controls.addEventListener('change', callback);
    return () => {
      controls.removeEventListener('change', callback);
      controls.dispose();
    };
  }, [regress, controls, invalidate]);
  return /*#__PURE__*/createElement("primitive", _extends({
    ref: ref,
    object: controls,
    enableDampening: enableDampening
  }, restProps));
});

export { OrbitControls };
