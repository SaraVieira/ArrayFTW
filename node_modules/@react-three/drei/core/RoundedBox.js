import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { forwardRef, useMemo, useRef, useLayoutEffect, createElement } from 'react';
import { Shape } from 'three';

const eps = 0.00001;

function createShape(width, height, radius0) {
  const shape = new Shape();
  const radius = radius0 - eps;
  shape.absarc(eps, eps, eps, -Math.PI / 2, -Math.PI, true);
  shape.absarc(eps, height - radius * 2, eps, Math.PI, Math.PI / 2, true);
  shape.absarc(width - radius * 2, height - radius * 2, eps, Math.PI / 2, 0, true);
  shape.absarc(width - radius * 2, eps, eps, 0, -Math.PI / 2, true);
  return shape;
}

const RoundedBox = /*#__PURE__*/forwardRef(function RoundedBox(_ref, ref) {
  let {
    args: [width = 1, height = 1, depth = 1] = [],
    radius = 0.05,
    smoothness = 4,
    children
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["args", "radius", "smoothness", "children"]);

  const shape = useMemo(() => createShape(width, height, radius), [width, height, radius]);
  const params = useMemo(() => ({
    depth: depth - radius * 2,
    bevelEnabled: true,
    bevelSegments: smoothness * 2,
    steps: 1,
    bevelSize: radius - eps,
    bevelThickness: radius,
    curveSegments: smoothness
  }), [depth, radius, smoothness]);
  const geomRef = useRef();
  useLayoutEffect(() => {
    if (geomRef.current) {
      geomRef.current.center();
    }
  }, [shape, params]);
  return /*#__PURE__*/createElement("mesh", _extends({
    ref: ref
  }, rest), /*#__PURE__*/createElement("extrudeBufferGeometry", {
    attach: "geometry",
    ref: geomRef,
    args: [shape, params]
  }), children);
});

export { RoundedBox };
