import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { forwardRef, useState, useEffect, createElement } from 'react';
import { useThree } from '@react-three/fiber';
import { PointerLockControls as PointerLockControls$1 } from 'three-stdlib';

const PointerLockControls = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    selector
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["selector"]);

  const {
    camera
  } = props,
        rest = _objectWithoutPropertiesLoose(props, ["camera"]);

  const gl = useThree(({
    gl
  }) => gl);
  const defaultCamera = useThree(({
    camera
  }) => camera);
  const invalidate = useThree(({
    invalidate
  }) => invalidate);
  const explCamera = camera || defaultCamera;
  const [controls] = useState(() => new PointerLockControls$1(explCamera, gl.domElement));
  useEffect(() => {
    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('change', invalidate);
    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('change', invalidate);
  }, [controls, invalidate]);
  useEffect(() => {
    const handler = () => controls == null ? void 0 : controls.lock();

    const element = selector ? document.querySelector(selector) : document;
    element && element.addEventListener('click', handler);
    return () => element ? element.removeEventListener('click', handler) : undefined;
  }, [controls, selector]);
  return controls ? /*#__PURE__*/createElement("primitive", _extends({
    ref: ref,
    dispose: undefined,
    object: controls
  }, rest)) : null;
});

export { PointerLockControls };
