import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { useRef, useState, useMemo, createElement } from 'react';
import { WebGLCubeRenderTarget, LinearFilter, RGBFormat } from 'three';
import { useThree, useFrame } from '@react-three/fiber';

function CubeCamera(_ref) {
  let {
    children,
    fog,
    frames = Infinity,
    resolution = 256,
    near = 1,
    far = 1000
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "fog", "frames", "resolution", "near", "far"]);

  const ref = useRef();
  const [camera, setCamera] = useState();
  const scene = useThree(({
    scene
  }) => scene);
  const gl = useThree(({
    gl
  }) => gl);
  const fbo = useMemo(() => new WebGLCubeRenderTarget(resolution, {
    minFilter: LinearFilter,
    magFilter: LinearFilter,
    format: RGBFormat,
    encoding: gl.outputEncoding
  }), [resolution]);
  let count = 0;
  useFrame(() => {
    if (camera && ref.current && (frames === Infinity || count < frames)) {
      ref.current.traverse(obj => obj.visible = false);
      const originalFog = scene.fog;
      scene.fog = fog != null ? fog : originalFog;
      camera.update(gl, scene);
      scene.fog = originalFog;
      ref.current.traverse(obj => obj.visible = true);
      count++;
    }
  });
  return /*#__PURE__*/createElement("group", props, /*#__PURE__*/createElement("cubeCamera", {
    ref: setCamera,
    args: [near, far, fbo]
  }), /*#__PURE__*/createElement("group", {
    ref: ref
  }, children(fbo.texture)));
}

export { CubeCamera };
