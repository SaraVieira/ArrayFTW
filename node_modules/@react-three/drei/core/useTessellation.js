import { useRef, useEffect } from 'react';
import { BufferGeometry } from 'three';
import { TessellateModifier } from 'three-stdlib';

function useTessellation(passes = 3, maxEdgeLength) {
  const ref = useRef();
  const original = useRef();
  const modifier = useRef();
  useEffect(() => {
    if (!original.current) {
      original.current = ref.current.geometry.clone();
      modifier.current = new TessellateModifier(parseInt(maxEdgeLength), passes);
    }
  }, [maxEdgeLength, passes]);
  useEffect(() => {
    modifier.current.maxEdgeLength = maxEdgeLength;
  }, [maxEdgeLength]);
  useEffect(() => {
    if (original.current && ref.current) {
      let geometry = new BufferGeometry();
      geometry = original.current.clone();
      geometry = modifier.current.modify(geometry);
      ref.current.geometry = geometry;
    }
  }, [maxEdgeLength, passes]);
  return ref;
}

export { useTessellation };
