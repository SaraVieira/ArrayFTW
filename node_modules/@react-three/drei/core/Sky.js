import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { forwardRef, useMemo, useState, createElement } from 'react';
import { Vector3 } from 'three';
import { Sky as Sky$1 } from 'three-stdlib';

function calcPosFromAngles(inclination, azimuth, vector = new Vector3()) {
  const theta = Math.PI * (inclination - 0.5);
  const phi = 2 * Math.PI * (azimuth - 0.5);
  vector.x = Math.cos(phi);
  vector.y = Math.sin(theta);
  vector.z = Math.sin(phi);
  return vector;
}
const Sky = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    inclination = 0,
    azimuth = 0.25,
    distance = 100,
    mieCoefficient = 0.005,
    mieDirectionalG = 0.8,
    rayleigh = 1,
    turbidity = 2,
    sunPosition = calcPosFromAngles(inclination, azimuth)
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["inclination", "azimuth", "distance", "mieCoefficient", "mieDirectionalG", "rayleigh", "turbidity", "sunPosition"]);

  const scale = useMemo(() => new Vector3().setScalar(distance), [distance]);
  const [sky] = useState(() => new Sky$1());
  return /*#__PURE__*/createElement("primitive", _extends({
    dispose: undefined,
    object: sky,
    ref: ref,
    "material-uniforms-mieCoefficient-value": mieCoefficient,
    "material-uniforms-mieDirectionalG-value": mieDirectionalG,
    "material-uniforms-rayleigh-value": rayleigh,
    "material-uniforms-sunPosition-value": sunPosition,
    "material-uniforms-turbidity-value": turbidity,
    scale: scale
  }, props));
});

export { Sky, calcPosFromAngles };
