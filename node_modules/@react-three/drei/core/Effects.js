import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { forwardRef, useRef, useState, useEffect, createElement } from 'react';
import { WebGLMultisampleRenderTarget, RGBAFormat, sRGBEncoding } from 'three';
import { extend, useThree, useFrame } from '@react-three/fiber';
import mergeRefs from 'react-merge-refs';
import { EffectComposer, RenderPass, ShaderPass, GammaCorrectionShader } from 'three-stdlib';

extend({
  EffectComposer,
  RenderPass,
  ShaderPass
});
const isWebGL2Available = () => {
  try {
    var canvas = document.createElement('canvas');
    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));
  } catch (e) {
    return false;
  }
};
const Effects = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    children,
    multisamping = 8,
    renderIndex = 1,
    disableGamma = false,
    disableRenderPass = false
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "multisamping", "renderIndex", "disableGamma", "disableRenderPass"]);

  const composer = useRef();
  const scene = useThree(({
    scene
  }) => scene);
  const camera = useThree(({
    camera
  }) => camera);
  const gl = useThree(({
    gl
  }) => gl);
  const size = useThree(({
    size
  }) => size);
  const [target] = useState(() => {
    if (isWebGL2Available() && multisamping > 0) {
      const t = new WebGLMultisampleRenderTarget(size.width, size.height, {
        format: RGBAFormat,
        encoding: sRGBEncoding
      });
      t.samples = 8;
      return t;
    }
  });
  useEffect(() => {
    var _composer$current, _composer$current2;

    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);
    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(gl.getPixelRatio());
  }, [gl, size]);
  useFrame(() => {
    var _composer$current3;

    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();
  }, renderIndex);
  return /*#__PURE__*/createElement("effectComposer", _extends({
    ref: mergeRefs([ref, composer]),
    args: [gl, target]
  }, props), !disableRenderPass && /*#__PURE__*/createElement("renderPass", {
    attachArray: "passes",
    args: [scene, camera]
  }), !disableGamma && /*#__PURE__*/createElement("shaderPass", {
    attachArray: "passes",
    args: [GammaCorrectionShader]
  }), children);
});

export { Effects, isWebGL2Available };
