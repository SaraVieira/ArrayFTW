"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("three"),i=function(i,a){t.Mesh.call(this,i,a),this.animationsMap={},this.animationsList=[];var n=Object.keys(this.morphTargetDictionary).length,e="__default",r=n-1,o=n/1;this.createAnimation(e,0,r,o),this.setAnimationWeight(e,1)};i.prototype=Object.assign(Object.create(t.Mesh.prototype),{constructor:i,createAnimation:function(t,i,a,n){var e={start:i,end:a,length:a-i+1,fps:n,duration:(a-i)/n,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[t]=e,this.animationsList.push(e)},autoCreateAnimations:function(t){var i,a=/([a-z]+)_?(\d+)/i,n={},e=0;for(var r in this.morphTargetDictionary){var o=r.match(a);if(o&&o.length>1){var s=o[1];n[s]||(n[s]={start:1/0,end:-1/0}),e<(c=n[s]).start&&(c.start=e),e>c.end&&(c.end=e),i||(i=s)}e++}for(var m in n){var c=n[m];this.createAnimation(m,c.start,c.end,t)}this.firstAnimation=i},setAnimationDirectionForward:function(t){var i=this.animationsMap[t];i&&(i.direction=1,i.directionBackwards=!1)},setAnimationDirectionBackward:function(t){var i=this.animationsMap[t];i&&(i.direction=-1,i.directionBackwards=!0)},setAnimationFPS:function(t,i){var a=this.animationsMap[t];a&&(a.fps=i,a.duration=(a.end-a.start)/a.fps)},setAnimationDuration:function(t,i){var a=this.animationsMap[t];a&&(a.duration=i,a.fps=(a.end-a.start)/a.duration)},setAnimationWeight:function(t,i){var a=this.animationsMap[t];a&&(a.weight=i)},setAnimationTime:function(t,i){var a=this.animationsMap[t];a&&(a.time=i)},getAnimationTime:function(t){var i=0,a=this.animationsMap[t];return a&&(i=a.time),i},getAnimationDuration:function(t){var i=-1,a=this.animationsMap[t];return a&&(i=a.duration),i},playAnimation:function(t){var i=this.animationsMap[t];i?(i.time=0,i.active=!0):console.warn("THREE.MorphBlendMesh: animation["+t+"] undefined in .playAnimation()")},stopAnimation:function(t){var i=this.animationsMap[t];i&&(i.active=!1)},update:function(i){for(var a=0,n=this.animationsList.length;a<n;a++){var e=this.animationsList[a];if(e.active){var r=e.duration/e.length;e.time+=e.direction*i,e.mirroredLoop?(e.time>e.duration||e.time<0)&&(e.direction*=-1,e.time>e.duration&&(e.time=e.duration,e.directionBackwards=!0),e.time<0&&(e.time=0,e.directionBackwards=!1)):(e.time=e.time%e.duration,e.time<0&&(e.time+=e.duration));var o=e.start+t.MathUtils.clamp(Math.floor(e.time/r),0,e.length-1),s=e.weight;o!==e.currentFrame&&(this.morphTargetInfluences[e.lastFrame]=0,this.morphTargetInfluences[e.currentFrame]=1*s,this.morphTargetInfluences[o]=0,e.lastFrame=e.currentFrame,e.currentFrame=o);var m=e.time%r/r;e.directionBackwards&&(m=1-m),e.currentFrame!==e.lastFrame?(this.morphTargetInfluences[e.currentFrame]=m*s,this.morphTargetInfluences[e.lastFrame]=(1-m)*s):this.morphTargetInfluences[e.currentFrame]=s}}}}),exports.MorphBlendMesh=i;
