"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("three"),r=function(r,t){e.Mesh.call(this,r);var o=this,i=void 0!==(t=t||{}).textureWidth?t.textureWidth:512,a=void 0!==t.textureHeight?t.textureHeight:512,n=void 0!==t.clipBias?t.clipBias:0,l=void 0!==t.alpha?t.alpha:1,s=void 0!==t.time?t.time:0,u=void 0!==t.waterNormals?t.waterNormals:null,c=void 0!==t.sunDirection?t.sunDirection:new e.Vector3(.70707,.70707,0),m=new e.Color(void 0!==t.sunColor?t.sunColor:16777215),d=new e.Color(void 0!==t.waterColor?t.waterColor:8355711),v=void 0!==t.eye?t.eye:new e.Vector3(0,0,0),f=void 0!==t.distortionScale?t.distortionScale:20,p=void 0!==t.side?t.side:e.FrontSide,x=void 0!==t.fog&&t.fog,g=new e.Plane,w=new e.Vector3,h=new e.Vector3,y=new e.Vector3,M=new e.Matrix4,C=new e.Vector3(0,0,-1),S=new e.Vector4,_=new e.Vector3,b=new e.Vector3,D=new e.Vector4,L=new e.Matrix4,P=new e.PerspectiveCamera,W={minFilter:e.LinearFilter,magFilter:e.LinearFilter,format:e.RGBFormat},N=new e.WebGLRenderTarget(i,a,W);e.MathUtils.isPowerOfTwo(i)&&e.MathUtils.isPowerOfTwo(a)||(N.texture.generateMipmaps=!1);var V={uniforms:e.UniformsUtils.merge([e.UniformsLib.fog,e.UniformsLib.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new e.Matrix4},sunColor:{value:new e.Color(8355711)},sunDirection:{value:new e.Vector3(.70707,.70707,0)},eye:{value:new e.Vector3},waterColor:{value:new e.Color(5592405)}}]),vertexShader:["uniform mat4 textureMatrix;","uniform float time;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","#include <common>","#include <fog_pars_vertex>","#include <shadowmap_pars_vertex>","#include <logdepthbuf_pars_vertex>","void main() {","\tmirrorCoord = modelMatrix * vec4( position, 1.0 );","\tworldPosition = mirrorCoord.xyzw;","\tmirrorCoord = textureMatrix * mirrorCoord;","\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );","\tgl_Position = projectionMatrix * mvPosition;","#include <beginnormal_vertex>","#include <defaultnormal_vertex>","#include <logdepthbuf_vertex>","#include <fog_vertex>","#include <shadowmap_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D mirrorSampler;","uniform float alpha;","uniform float time;","uniform float size;","uniform float distortionScale;","uniform sampler2D normalSampler;","uniform vec3 sunColor;","uniform vec3 sunDirection;","uniform vec3 eye;","uniform vec3 waterColor;","varying vec4 mirrorCoord;","varying vec4 worldPosition;","vec4 getNoise( vec2 uv ) {","\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);","\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );","\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );","\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );","\tvec4 noise = texture2D( normalSampler, uv0 ) +","\t\ttexture2D( normalSampler, uv1 ) +","\t\ttexture2D( normalSampler, uv2 ) +","\t\ttexture2D( normalSampler, uv3 );","\treturn noise * 0.5 - 1.0;","}","void sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {","\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );","\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );","\tspecularColor += pow( direction, shiny ) * sunColor * spec;","\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;","}","#include <common>","#include <packing>","#include <bsdfs>","#include <fog_pars_fragment>","#include <logdepthbuf_pars_fragment>","#include <lights_pars_begin>","#include <shadowmap_pars_fragment>","#include <shadowmask_pars_fragment>","void main() {","#include <logdepthbuf_fragment>","\tvec4 noise = getNoise( worldPosition.xz * size );","\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );","\tvec3 diffuseLight = vec3(0.0);","\tvec3 specularLight = vec3(0.0);","\tvec3 worldToEye = eye-worldPosition.xyz;","\tvec3 eyeDirection = normalize( worldToEye );","\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );","\tfloat distance = length(worldToEye);","\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;","\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );","\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );","\tfloat rf0 = 0.3;","\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );","\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;","\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);","\tvec3 outgoingLight = albedo;","\tgl_FragColor = vec4( outgoingLight, alpha );","#include <tonemapping_fragment>","#include <fog_fragment>","}"].join("\n")},z=new e.ShaderMaterial({fragmentShader:V.fragmentShader,vertexShader:V.vertexShader,uniforms:e.UniformsUtils.clone(V.uniforms),lights:!0,side:p,fog:x});z.uniforms.mirrorSampler.value=N.texture,z.uniforms.textureMatrix.value=L,z.uniforms.alpha.value=l,z.uniforms.time.value=s,z.uniforms.normalSampler.value=u,z.uniforms.sunColor.value=m,z.uniforms.waterColor.value=d,z.uniforms.sunDirection.value=c,z.uniforms.distortionScale.value=f,z.uniforms.eye.value=v,o.material=z,o.onBeforeRender=function(r,t,i){if(h.setFromMatrixPosition(o.matrixWorld),y.setFromMatrixPosition(i.matrixWorld),M.extractRotation(o.matrixWorld),w.set(0,0,1),w.applyMatrix4(M),_.subVectors(h,y),!(_.dot(w)>0)){_.reflect(w).negate(),_.add(h),M.extractRotation(i.matrixWorld),C.set(0,0,-1),C.applyMatrix4(M),C.add(y),b.subVectors(h,C),b.reflect(w).negate(),b.add(h),P.position.copy(_),P.up.set(0,1,0),P.up.applyMatrix4(M),P.up.reflect(w),P.lookAt(b),P.far=i.far,P.updateMatrixWorld(),P.projectionMatrix.copy(i.projectionMatrix),L.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),L.multiply(P.projectionMatrix),L.multiply(P.matrixWorldInverse),g.setFromNormalAndCoplanarPoint(w,h),g.applyMatrix4(P.matrixWorldInverse),S.set(g.normal.x,g.normal.y,g.normal.z,g.constant);var a=P.projectionMatrix;if(D.x=(Math.sign(S.x)+a.elements[8])/a.elements[0],D.y=(Math.sign(S.y)+a.elements[9])/a.elements[5],D.z=-1,D.w=(1+a.elements[10])/a.elements[14],S.multiplyScalar(2/S.dot(D)),a.elements[2]=S.x,a.elements[6]=S.y,a.elements[10]=S.z+1-n,a.elements[14]=S.w,v.setFromMatrixPosition(i.matrixWorld),r.outputEncoding!==e.LinearEncoding)return console.warn("THREE.Water: WebGLRenderer must use LinearEncoding as outputEncoding."),void(o.onBeforeRender=function(){});if(r.toneMapping!==e.NoToneMapping)return console.warn("THREE.Water: WebGLRenderer must use NoToneMapping as toneMapping."),void(o.onBeforeRender=function(){});var l=r.getRenderTarget(),s=r.xr.enabled,u=r.shadowMap.autoUpdate;o.visible=!1,r.xr.enabled=!1,r.shadowMap.autoUpdate=!1,r.setRenderTarget(N),r.state.buffers.depth.setMask(!0),!1===r.autoClear&&r.clear(),r.render(t,P),o.visible=!0,r.xr.enabled=s,r.shadowMap.autoUpdate=u,r.setRenderTarget(l);var c=i.viewport;void 0!==c&&r.state.viewport(c)}}};(r.prototype=Object.create(e.Mesh.prototype)).constructor=r,exports.Water=r;
