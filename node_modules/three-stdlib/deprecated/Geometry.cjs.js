"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@babel/runtime/helpers/inheritsLoose"),t=require("three");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=r(e),s=new t.Matrix4,n=new t.Object3D,i=new t.Vector3,a=function(e){function r(){var r;return(r=e.call(this)||this).isGeometry=!0,r.uuid=t.MathUtils.generateUUID(),r.name="",r.type="Geometry",r.vertices=[],r.colors=[],r.faces=[],r.faceVertexUvs=[[]],r.morphTargets=[],r.morphNormals=[],r.skinWeights=[],r.skinIndices=[],r.lineDistances=[],r.boundingBox=null,r.boundingSphere=null,r.elementsNeedUpdate=!1,r.verticesNeedUpdate=!1,r.uvsNeedUpdate=!1,r.normalsNeedUpdate=!1,r.colorsNeedUpdate=!1,r.lineDistancesNeedUpdate=!1,r.groupsNeedUpdate=!1,r}o.default(r,e);var a=r.prototype;return a.applyMatrix4=function(e){for(var r=(new t.Matrix3).getNormalMatrix(e),o=0,s=this.vertices.length;o<s;o++){this.vertices[o].applyMatrix4(e)}for(var n=0,i=this.faces.length;n<i;n++){var a=this.faces[n];a.normal.applyMatrix3(r).normalize();for(var h=0,l=a.vertexNormals.length;h<l;h++)a.vertexNormals[h].applyMatrix3(r).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},a.rotateX=function(e){return s.makeRotationX(e),this.applyMatrix4(s),this},a.rotateY=function(e){return s.makeRotationY(e),this.applyMatrix4(s),this},a.rotateZ=function(e){return s.makeRotationZ(e),this.applyMatrix4(s),this},a.translate=function(e,t,r){return s.makeTranslation(e,t,r),this.applyMatrix4(s),this},a.scale=function(e,t,r){return s.makeScale(e,t,r),this.applyMatrix4(s),this},a.lookAt=function(e){return n.lookAt(e),n.updateMatrix(),this.applyMatrix4(n.matrix),this},a.fromBufferGeometry=function(e){var r=this,o=null!==e.index?e.index:void 0,s=e.attributes;if(void 0===s.position)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;var n=s.position,i=s.normal,a=s.color,h=s.uv,c=s.uv2;void 0!==c&&(this.faceVertexUvs[1]=[]);for(var u=0;u<n.count;u++)r.vertices.push((new t.Vector3).fromBufferAttribute(n,u)),void 0!==a&&r.colors.push((new t.Color).fromBufferAttribute(a,u));function v(e,o,s,n){var u=void 0===a?[]:[r.colors[e].clone(),r.colors[o].clone(),r.colors[s].clone()],v=void 0===i?[]:[(new t.Vector3).fromBufferAttribute(i,e),(new t.Vector3).fromBufferAttribute(i,o),(new t.Vector3).fromBufferAttribute(i,s)],f=new l(e,o,s,v,u,n);r.faces.push(f),void 0!==h&&r.faceVertexUvs[0].push([(new t.Vector2).fromBufferAttribute(h,e),(new t.Vector2).fromBufferAttribute(h,o),(new t.Vector2).fromBufferAttribute(h,s)]),void 0!==c&&r.faceVertexUvs[1].push([(new t.Vector2).fromBufferAttribute(c,e),(new t.Vector2).fromBufferAttribute(c,o),(new t.Vector2).fromBufferAttribute(c,s)])}var f=e.groups;if(f.length>0)for(var p=0;p<f.length;p++)for(var m=f[p],d=m.start,g=d,x=d+m.count;g<x;g+=3)void 0!==o?v(o.getX(g),o.getX(g+1),o.getX(g+2),m.materialIndex):v(g,g+1,g+2,m.materialIndex);else if(void 0!==o)for(var y=0;y<o.count;y+=3)v(o.getX(y),o.getX(y+1),o.getX(y+2));else for(var b=0;b<n.count;b+=3)v(b,b+1,b+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},a.center=function(){return this.computeBoundingBox(),this.boundingBox.getCenter(i).negate(),this.translate(i.x,i.y,i.z),this},a.normalize=function(){this.computeBoundingSphere();var e=this.boundingSphere.center,r=this.boundingSphere.radius,o=0===r?1:1/r,s=new t.Matrix4;return s.set(o,0,0,-o*e.x,0,o,0,-o*e.y,0,0,o,-o*e.z,0,0,0,1),this.applyMatrix4(s),this},a.computeFaceNormals=function(){for(var e=new t.Vector3,r=new t.Vector3,o=0,s=this.faces.length;o<s;o++){var n=this.faces[o],i=this.vertices[n.a],a=this.vertices[n.b],h=this.vertices[n.c];e.subVectors(h,a),r.subVectors(i,a),e.cross(r),e.normalize(),n.normal.copy(e)}},a.computeVertexNormals=function(e){void 0===e&&(e=!0);for(var r=new Array(this.vertices.length),o=0,s=this.vertices.length;o<s;o++)r[o]=new t.Vector3;if(e)for(var n=new t.Vector3,i=new t.Vector3,a=0,h=this.faces.length;a<h;a++){var l=this.faces[a],c=this.vertices[l.a],u=this.vertices[l.b],v=this.vertices[l.c];n.subVectors(v,u),i.subVectors(c,u),n.cross(i),r[l.a].add(n),r[l.b].add(n),r[l.c].add(n)}else{this.computeFaceNormals();for(var f=0,p=this.faces.length;f<p;f++){var m=this.faces[f];r[m.a].add(m.normal),r[m.b].add(m.normal),r[m.c].add(m.normal)}}for(var d=0,g=this.vertices.length;d<g;d++)r[d].normalize();for(var x=0,y=this.faces.length;x<y;x++){var b=this.faces[x],N=b.vertexNormals;3===N.length?(N[0].copy(r[b.a]),N[1].copy(r[b.b]),N[2].copy(r[b.c])):(N[0]=r[b.a].clone(),N[1]=r[b.b].clone(),N[2]=r[b.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},a.computeFlatVertexNormals=function(){this.computeFaceNormals();for(var e=0,t=this.faces.length;e<t;e++){var r=this.faces[e],o=r.vertexNormals;3===o.length?(o[0].copy(r.normal),o[1].copy(r.normal),o[2].copy(r.normal)):(o[0]=r.normal.clone(),o[1]=r.normal.clone(),o[2]=r.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},a.computeMorphNormals=function(){for(var e=0,o=this.faces.length;e<o;e++){var s=this.faces[e];s.__originalFaceNormal?s.__originalFaceNormal.copy(s.normal):s.__originalFaceNormal=s.normal.clone(),s.__originalVertexNormals||(s.__originalVertexNormals=[]);for(var n=0,i=s.vertexNormals.length;n<i;n++)s.__originalVertexNormals[n]?s.__originalVertexNormals[n].copy(s.vertexNormals[n]):s.__originalVertexNormals[n]=s.vertexNormals[n].clone()}var a=new r;a.faces=this.faces;for(var h=0,l=this.morphTargets.length;h<l;h++){if(!this.morphNormals[h]){this.morphNormals[h]={},this.morphNormals[h].faceNormals=[],this.morphNormals[h].vertexNormals=[];for(var c=this.morphNormals[h].faceNormals,u=this.morphNormals[h].vertexNormals,v=0,f=this.faces.length;v<f;v++){var p=new t.Vector3,m={a:new t.Vector3,b:new t.Vector3,c:new t.Vector3};c.push(p),u.push(m)}}var d=this.morphNormals[h];a.vertices=this.morphTargets[h].vertices,a.computeFaceNormals(),a.computeVertexNormals();for(var g=0,x=this.faces.length;g<x;g++){var y=this.faces[g],b=d.faceNormals[g],N=d.vertexNormals[g];b.copy(y.normal),N.a.copy(y.vertexNormals[0]),N.b.copy(y.vertexNormals[1]),N.c.copy(y.vertexNormals[2])}}for(var V=0,U=this.faces.length;V<U;V++){var w=this.faces[V];w.normal=w.__originalFaceNormal,w.vertexNormals=w.__originalVertexNormals}},a.computeBoundingBox=function(){null===this.boundingBox&&(this.boundingBox=new t.Box3),this.boundingBox.setFromPoints(this.vertices)},a.computeBoundingSphere=function(){null===this.boundingSphere&&(this.boundingSphere=new t.Sphere),this.boundingSphere.setFromPoints(this.vertices)},a.merge=function(e,r,o){if(void 0===o&&(o=0),e&&e.isGeometry){var s,n=this.vertices.length,i=this.vertices,a=e.vertices,h=this.faces,c=e.faces,u=this.colors,v=e.colors;void 0!==r&&(s=(new t.Matrix3).getNormalMatrix(r));for(var f=0,p=a.length;f<p;f++){var m=a[f].clone();void 0!==r&&m.applyMatrix4(r),i.push(m)}for(var d=0,g=v.length;d<g;d++)u.push(v[d].clone());for(var x=0,y=c.length;x<y;x++){var b=c[x],N=void 0,V=void 0,U=b.vertexNormals,w=b.vertexColors,B=new l(b.a+n,b.b+n,b.c+n);B.normal.copy(b.normal),void 0!==s&&B.normal.applyMatrix3(s).normalize();for(var A=0,M=U.length;A<M;A++)N=U[A].clone(),void 0!==s&&N.applyMatrix3(s).normalize(),B.vertexNormals.push(N);B.color.copy(b.color);for(var S=0,k=w.length;S<k;S++)V=w[S],B.vertexColors.push(V.clone());B.materialIndex=b.materialIndex+o,h.push(B)}for(var G=0,F=e.faceVertexUvs.length;G<F;G++){var T=e.faceVertexUvs[G];void 0===this.faceVertexUvs[G]&&(this.faceVertexUvs[G]=[]);for(var E=0,I=T.length;E<I;E++){for(var _=T[E],D=[],C=0,R=_.length;C<R;C++)D.push(_[C].clone());this.faceVertexUvs[G].push(D)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e)},a.mergeMesh=function(e){e&&e.isMesh?(e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e)},a.mergeVertices=function(e){void 0===e&&(e=4);for(var t={},r=[],o=[],s=Math.pow(10,e),n=0,i=this.vertices.length;n<i;n++){var a=this.vertices[n],h=Math.round(a.x*s)+"_"+Math.round(a.y*s)+"_"+Math.round(a.z*s);void 0===t[h]?(t[h]=n,r.push(this.vertices[n]),o[n]=r.length-1):o[n]=o[t[h]]}for(var l=[],c=0,u=this.faces.length;c<u;c++){var v=this.faces[c];v.a=o[v.a],v.b=o[v.b],v.c=o[v.c];for(var f=[v.a,v.b,v.c],p=0;p<3;p++)if(f[p]===f[(p+1)%3]){l.push(c);break}}for(var m=l.length-1;m>=0;m--){var d=l[m];this.faces.splice(d,1);for(var g=0,x=this.faceVertexUvs.length;g<x;g++)this.faceVertexUvs[g].splice(d,1)}var y=this.vertices.length-r.length;return this.vertices=r,y},a.setFromPoints=function(e){this.vertices=[];for(var r=0,o=e.length;r<o;r++){var s=e[r];this.vertices.push(new t.Vector3(s.x,s.y,s.z||0))}return this},a.sortFacesByMaterialIndex=function(){for(var e=this.faces,t=e.length,r=0;r<t;r++)e[r]._id=r;e.sort((function(e,t){return e.materialIndex-t.materialIndex}));var o,s,n=this.faceVertexUvs[0],i=this.faceVertexUvs[1];n&&n.length===t&&(o=[]),i&&i.length===t&&(s=[]);for(var a=0;a<t;a++){var h=e[a]._id;o&&o.push(n[h]),s&&s.push(i[h])}o&&(this.faceVertexUvs[0]=o),s&&(this.faceVertexUvs[1]=s)},a.toJSON=function(){var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var r in t)void 0!==t[r]&&(e[r]=t[r]);return e}for(var o=[],s=0;s<this.vertices.length;s++){var n=this.vertices[s];o.push(n.x,n.y,n.z)}for(var i=[],a=[],h={},l=[],c={},u=[],v={},f=0;f<this.faces.length;f++){var p=this.faces[f],m=void 0!==this.faceVertexUvs[0][f],d=p.normal.length()>0,g=p.vertexNormals.length>0,x=1!==p.color.r||1!==p.color.g||1!==p.color.b,y=p.vertexColors.length>0,b=0;if(b=w(b,0,0),b=w(b,1,!0),b=w(b,2,!1),b=w(b,3,m),b=w(b,4,d),b=w(b,5,g),b=w(b,6,x),b=w(b,7,y),i.push(b),i.push(p.a,p.b,p.c),i.push(p.materialIndex),m){var N=this.faceVertexUvs[0][f];i.push(M(N[0]),M(N[1]),M(N[2]))}if(d&&i.push(B(p.normal)),g){var V=p.vertexNormals;i.push(B(V[0]),B(V[1]),B(V[2]))}if(x&&i.push(A(p.color)),y){var U=p.vertexColors;i.push(A(U[0]),A(U[1]),A(U[2]))}}function w(e,t,r){return r?e|1<<t:e&~(1<<t)}function B(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==h[t]||(h[t]=a.length/3,a.push(e.x,e.y,e.z)),h[t]}function A(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==c[t]||(c[t]=l.length,l.push(e.getHex())),c[t]}function M(e){var t=e.x.toString()+e.y.toString();return void 0!==v[t]||(v[t]=u.length/2,u.push(e.x,e.y)),v[t]}return e.data={},e.data.vertices=o,e.data.normals=a,l.length>0&&(e.data.colors=l),u.length>0&&(e.data.uvs=[u]),e.data.faces=i,e},a.clone=function(){return(new r).copy(this)},a.copy=function(e){this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;for(var t=e.vertices,r=0,o=t.length;r<o;r++)this.vertices.push(t[r].clone());for(var s=e.colors,n=0,i=s.length;n<i;n++)this.colors.push(s[n].clone());for(var a=e.faces,h=0,l=a.length;h<l;h++)this.faces.push(a[h].clone());for(var c=0,u=e.faceVertexUvs.length;c<u;c++){var v=e.faceVertexUvs[c];void 0===this.faceVertexUvs[c]&&(this.faceVertexUvs[c]=[]);for(var f=0,p=v.length;f<p;f++){for(var m=v[f],d=[],g=0,x=m.length;g<x;g++){var y=m[g];d.push(y.clone())}this.faceVertexUvs[c].push(d)}}for(var b=e.morphTargets,N=0,V=b.length;N<V;N++){var U={};if(U.name=b[N].name,void 0!==b[N].vertices){U.vertices=[];for(var w=0,B=b[N].vertices.length;w<B;w++)U.vertices.push(b[N].vertices[w].clone())}if(void 0!==b[N].normals){U.normals=[];for(var A=0,M=b[N].normals.length;A<M;A++)U.normals.push(b[N].normals[A].clone())}this.morphTargets.push(U)}for(var S=e.morphNormals,k=0,G=S.length;k<G;k++){var F={};if(void 0!==S[k].vertexNormals){F.vertexNormals=[];for(var T=0,E=S[k].vertexNormals.length;T<E;T++){var I=S[k].vertexNormals[T],_={};_.a=I.a.clone(),_.b=I.b.clone(),_.c=I.c.clone(),F.vertexNormals.push(_)}}if(void 0!==S[k].faceNormals){F.faceNormals=[];for(var D=0,C=S[k].faceNormals.length;D<C;D++)F.faceNormals.push(S[k].faceNormals[D].clone())}this.morphNormals.push(F)}for(var R=e.skinWeights,z=0,H=R.length;z<H;z++)this.skinWeights.push(R[z].clone());for(var W=e.skinIndices,X=0,L=W.length;X<L;X++)this.skinIndices.push(W[X].clone());for(var P=e.lineDistances,O=0,j=P.length;O<j;O++)this.lineDistances.push(P[O]);var q=e.boundingBox;null!==q&&(this.boundingBox=q.clone());var J=e.boundingSphere;return null!==J&&(this.boundingSphere=J.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},a.toBufferGeometry=function(){var e=(new h).fromGeometry(this),r=new t.BufferGeometry,o=new Float32Array(3*e.vertices.length);if(r.setAttribute("position",new t.BufferAttribute(o,3).copyVector3sArray(e.vertices)),e.normals.length>0){var s=new Float32Array(3*e.normals.length);r.setAttribute("normal",new t.BufferAttribute(s,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var n=new Float32Array(3*e.colors.length);r.setAttribute("color",new t.BufferAttribute(n,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var i=new Float32Array(2*e.uvs.length);r.setAttribute("uv",new t.BufferAttribute(i,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var a=new Float32Array(2*e.uvs2.length);r.setAttribute("uv2",new t.BufferAttribute(a,2).copyVector2sArray(e.uvs2))}for(var l in r.groups=e.groups,e.morphTargets){for(var c=[],u=e.morphTargets[l],v=0,f=u.length;v<f;v++){var p=u[v],m=new t.Float32BufferAttribute(3*p.data.length,3);m.name=p.name,c.push(m.copyVector3sArray(p.data))}r.morphAttributes[l]=c}if(e.skinIndices.length>0){var d=new t.Float32BufferAttribute(4*e.skinIndices.length,4);r.setAttribute("skinIndex",d.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var g=new t.Float32BufferAttribute(4*e.skinWeights.length,4);r.setAttribute("skinWeight",g.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(r.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(r.boundingBox=e.boundingBox.clone()),r},a.computeTangents=function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},a.computeLineDistances=function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")},a.applyMatrix=function(e){return console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(e)},a.dispose=function(){this.dispatchEvent({type:"dispose"})},r}(t.EventDispatcher);a.createBufferGeometryFromObject=function(e){var r=new t.BufferGeometry,o=e.geometry;if(e.isPoints||e.isLine){var s=new t.Float32BufferAttribute(3*o.vertices.length,3),n=new t.Float32BufferAttribute(3*o.colors.length,3);if(r.setAttribute("position",s.copyVector3sArray(o.vertices)),r.setAttribute("color",n.copyColorsArray(o.colors)),o.lineDistances&&o.lineDistances.length===o.vertices.length){var i=new t.Float32BufferAttribute(o.lineDistances.length,1);r.setAttribute("lineDistance",i.copyArray(o.lineDistances))}null!==o.boundingSphere&&(r.boundingSphere=o.boundingSphere.clone()),null!==o.boundingBox&&(r.boundingBox=o.boundingBox.clone())}else e.isMesh&&(r=o.toBufferGeometry());return r};var h=function(){function e(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}var r=e.prototype;return r.computeGroups=function(e){var t,r,o=[],s=void 0,n=e.faces;for(r=0;r<n.length;r++){var i=n[r];i.materialIndex!==s&&(s=i.materialIndex,void 0!==t&&(t.count=3*r-t.start,o.push(t)),t={start:3*r,materialIndex:s})}void 0!==t&&(t.count=3*r-t.start,o.push(t)),this.groups=o},r.fromGeometry=function(e){var r,o=e.faces,s=e.vertices,n=e.faceVertexUvs,i=n[0]&&n[0].length>0,a=n[1]&&n[1].length>0,h=e.morphTargets,l=h.length;if(l>0){r=[];for(var c=0;c<l;c++)r[c]={name:h[c].name,data:[]};this.morphTargets.position=r}var u,v=e.morphNormals,f=v.length;if(f>0){u=[];for(var p=0;p<f;p++)u[p]={name:v[p].name,data:[]};this.morphTargets.normal=u}var m=e.skinIndices,d=e.skinWeights,g=m.length===s.length,x=d.length===s.length;s.length>0&&0===o.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(var y=0;y<o.length;y++){var b=o[y];this.vertices.push(s[b.a],s[b.b],s[b.c]);var N=b.vertexNormals;if(3===N.length)this.normals.push(N[0],N[1],N[2]);else{var V=b.normal;this.normals.push(V,V,V)}var U=b.vertexColors;if(3===U.length)this.colors.push(U[0],U[1],U[2]);else{var w=b.color;this.colors.push(w,w,w)}if(!0===i){var B=n[0][y];void 0!==B?this.uvs.push(B[0],B[1],B[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",y),this.uvs.push(new t.Vector2,new t.Vector2,new t.Vector2))}if(!0===a){var A=n[1][y];void 0!==A?this.uvs2.push(A[0],A[1],A[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",y),this.uvs2.push(new t.Vector2,new t.Vector2,new t.Vector2))}for(var M=0;M<l;M++){var S=h[M].vertices;r[M].data.push(S[b.a],S[b.b],S[b.c])}for(var k=0;k<f;k++){var G=v[k].vertexNormals[y];u[k].data.push(G.a,G.b,G.c)}g&&this.skinIndices.push(m[b.a],m[b.b],m[b.c]),x&&this.skinWeights.push(d[b.a],d[b.b],d[b.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},e}(),l=function(){function e(e,r,o,s,n,i){void 0===i&&(i=0),this.a=e,this.b=r,this.c=o,this.normal=s&&s.isVector3?s:new t.Vector3,this.vertexNormals=Array.isArray(s)?s:[],this.color=n&&n.isColor?n:new t.Color,this.vertexColors=Array.isArray(n)?n:[],this.materialIndex=i}var r=e.prototype;return r.clone=function(){return(new this.constructor).copy(this)},r.copy=function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,r=e.vertexNormals.length;t<r;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(var o=0,s=e.vertexColors.length;o<s;o++)this.vertexColors[o]=e.vertexColors[o].clone();return this},e}();exports.Face3=l,exports.Geometry=a;
