{"ast":null,"code":"import { TempNode } from './TempNode.js';\n\nfunction InputNode(type, params) {\n  params = params || {};\n  params.shared = params.shared !== undefined ? params.shared : false;\n  TempNode.call(this, type, params);\n  this.readonly = false;\n}\n\nInputNode.prototype = Object.create(TempNode.prototype);\nInputNode.prototype.constructor = InputNode;\n\nInputNode.prototype.setReadonly = function (value) {\n  this.readonly = value;\n  this.hashProperties = this.readonly ? ['value'] : undefined;\n  return this;\n};\n\nInputNode.prototype.getReadonly = function ()\n/* builder */\n{\n  return this.readonly;\n};\n\nInputNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  if (source.readonly !== undefined) this.readonly = source.readonly;\n  return this;\n};\n\nInputNode.prototype.createJSONNode = function (meta) {\n  var data = TempNode.prototype.createJSONNode.call(this, meta);\n  if (this.readonly === true) data.readonly = this.readonly;\n  return data;\n};\n\nInputNode.prototype.generate = function (builder, output, uuid, type, ns, needsUpdate) {\n  uuid = builder.getUuid(uuid || this.getUuid());\n  type = type || this.getType(builder);\n  var data = builder.getNodeData(uuid),\n      readonly = this.getReadonly(builder) && this.generateReadonly !== undefined;\n\n  if (readonly) {\n    return this.generateReadonly(builder, output, uuid, type, ns, needsUpdate);\n  } else {\n    if (builder.isShader('vertex')) {\n      if (!data.vertex) {\n        data.vertex = builder.createVertexUniform(type, this, ns, needsUpdate, this.getLabel());\n      }\n\n      return builder.format(data.vertex.name, type, output);\n    } else {\n      if (!data.fragment) {\n        data.fragment = builder.createFragmentUniform(type, this, ns, needsUpdate, this.getLabel());\n      }\n\n      return builder.format(data.fragment.name, type, output);\n    }\n  }\n};\n\nexport { InputNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/core/InputNode.js"],"names":["TempNode","InputNode","type","params","shared","undefined","call","readonly","prototype","Object","create","constructor","setReadonly","value","hashProperties","getReadonly","copy","source","createJSONNode","meta","data","generate","builder","output","uuid","ns","needsUpdate","getUuid","getType","getNodeData","generateReadonly","isShader","vertex","createVertexUniform","getLabel","format","name","fragment","createFragmentUniform"],"mappings":"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","sourcesContent":["import { TempNode } from './TempNode.js';\n\nfunction InputNode(type, params) {\n  params = params || {};\n  params.shared = params.shared !== undefined ? params.shared : false;\n  TempNode.call(this, type, params);\n  this.readonly = false;\n}\n\nInputNode.prototype = Object.create(TempNode.prototype);\nInputNode.prototype.constructor = InputNode;\n\nInputNode.prototype.setReadonly = function (value) {\n  this.readonly = value;\n  this.hashProperties = this.readonly ? ['value'] : undefined;\n  return this;\n};\n\nInputNode.prototype.getReadonly = function ()\n/* builder */\n{\n  return this.readonly;\n};\n\nInputNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  if (source.readonly !== undefined) this.readonly = source.readonly;\n  return this;\n};\n\nInputNode.prototype.createJSONNode = function (meta) {\n  var data = TempNode.prototype.createJSONNode.call(this, meta);\n  if (this.readonly === true) data.readonly = this.readonly;\n  return data;\n};\n\nInputNode.prototype.generate = function (builder, output, uuid, type, ns, needsUpdate) {\n  uuid = builder.getUuid(uuid || this.getUuid());\n  type = type || this.getType(builder);\n  var data = builder.getNodeData(uuid),\n      readonly = this.getReadonly(builder) && this.generateReadonly !== undefined;\n\n  if (readonly) {\n    return this.generateReadonly(builder, output, uuid, type, ns, needsUpdate);\n  } else {\n    if (builder.isShader('vertex')) {\n      if (!data.vertex) {\n        data.vertex = builder.createVertexUniform(type, this, ns, needsUpdate, this.getLabel());\n      }\n\n      return builder.format(data.vertex.name, type, output);\n    } else {\n      if (!data.fragment) {\n        data.fragment = builder.createFragmentUniform(type, this, ns, needsUpdate, this.getLabel());\n      }\n\n      return builder.format(data.fragment.name, type, output);\n    }\n  }\n};\n\nexport { InputNode };\n"]},"metadata":{},"sourceType":"module"}