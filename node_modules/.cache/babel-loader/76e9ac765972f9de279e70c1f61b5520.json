{"ast":null,"code":"import _assertThisInitialized from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Group, LightProbe, DirectionalLight, WebGLCubeRenderTarget } from 'three';\n\nvar SessionLightProbe = /*#__PURE__*/function () {\n  function SessionLightProbe(xrLight, renderer, lightProbe, environmentEstimation, estimationStartCallback) {\n    var _this = this;\n\n    _classCallCheck(this, SessionLightProbe);\n\n    this.xrLight = xrLight;\n    this.renderer = renderer;\n    this.lightProbe = lightProbe;\n    this.xrWebGLBinding = null;\n    this.estimationStartCallback = estimationStartCallback;\n    this.frameCallback = this.onXRFrame.bind(this);\n    var session = renderer.xr.getSession(); // If the XRWebGLBinding class is available then we can also query an\n    // estimated reflection cube map.\n\n    if (environmentEstimation && 'XRWebGLBinding' in window) {\n      // This is the simplest way I know of to initialize a WebGL cubemap in Three.\n      var cubeRenderTarget = new WebGLCubeRenderTarget(16);\n      xrLight.environment = cubeRenderTarget.texture;\n      var gl = renderer.getContext(); // Ensure that we have any extensions needed to use the preferred cube map format.\n\n      switch (session.preferredReflectionFormat) {\n        case 'srgba8':\n          gl.getExtension('EXT_sRGB');\n          break;\n\n        case 'rgba16f':\n          gl.getExtension('OES_texture_half_float');\n          break;\n      }\n\n      this.xrWebGLBinding = new XRWebGLBinding(session, gl);\n      this.lightProbe.addEventListener('reflectionchange', function () {\n        _this.updateReflection();\n      });\n    } // Start monitoring the XR animation frame loop to look for lighting\n    // estimation changes.\n\n\n    session.requestAnimationFrame(this.frameCallback);\n  }\n\n  _createClass(SessionLightProbe, [{\n    key: \"updateReflection\",\n    value: function updateReflection() {\n      var textureProperties = this.renderer.properties.get(this.xrLight.environment);\n\n      if (textureProperties) {\n        var cubeMap = this.xrWebGLBinding.getReflectionCubeMap(this.lightProbe);\n\n        if (cubeMap) {\n          textureProperties.__webglTexture = cubeMap;\n        }\n      }\n    }\n  }, {\n    key: \"onXRFrame\",\n    value: function onXRFrame(time, xrFrame) {\n      // If either this obejct or the XREstimatedLight has been destroyed, stop\n      // running the frame loop.\n      if (!this.xrLight) {\n        return;\n      }\n\n      var session = xrFrame.session;\n      session.requestAnimationFrame(this.frameCallback);\n      var lightEstimate = xrFrame.getLightEstimate(this.lightProbe);\n\n      if (lightEstimate) {\n        // We can copy the estimate's spherical harmonics array directly into the light probe.\n        this.xrLight.lightProbe.sh.fromArray(lightEstimate.sphericalHarmonicsCoefficients);\n        this.xrLight.lightProbe.intensity = 1.0; // For the directional light we have to normalize the color and set the scalar as the\n        // intensity, since WebXR can return color values that exceed 1.0.\n\n        var intensityScalar = Math.max(1.0, Math.max(lightEstimate.primaryLightIntensity.x, Math.max(lightEstimate.primaryLightIntensity.y, lightEstimate.primaryLightIntensity.z)));\n        this.xrLight.directionalLight.color.setRGB(lightEstimate.primaryLightIntensity.x / intensityScalar, lightEstimate.primaryLightIntensity.y / intensityScalar, lightEstimate.primaryLightIntensity.z / intensityScalar);\n        this.xrLight.directionalLight.intensity = intensityScalar;\n        this.xrLight.directionalLight.position.copy(lightEstimate.primaryLightDirection);\n\n        if (this.estimationStartCallback) {\n          this.estimationStartCallback();\n          this.estimationStartCallback = null;\n        }\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.xrLight = null;\n      this.renderer = null;\n      this.lightProbe = null;\n      this.xrWebGLBinding = null;\n    }\n  }]);\n\n  return SessionLightProbe;\n}();\n\nvar XREstimatedLight = /*#__PURE__*/function (_Group) {\n  _inherits(XREstimatedLight, _Group);\n\n  var _super = _createSuper(XREstimatedLight);\n\n  function XREstimatedLight(renderer) {\n    var _this2;\n\n    var environmentEstimation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    _classCallCheck(this, XREstimatedLight);\n\n    _this2 = _super.call(this);\n    _this2.lightProbe = new LightProbe();\n    _this2.lightProbe.intensity = 0;\n\n    _this2.add(_this2.lightProbe);\n\n    _this2.directionalLight = new DirectionalLight();\n    _this2.directionalLight.intensity = 0;\n\n    _this2.add(_this2.directionalLight); // Will be set to a cube map in the SessionLightProbe is environment estimation is\n    // available and requested.\n\n\n    _this2.environment = null;\n    var sessionLightProbe = null;\n    var estimationStarted = false;\n    renderer.xr.addEventListener('sessionstart', function () {\n      var session = renderer.xr.getSession();\n\n      if ('requestLightProbe' in session) {\n        session.requestLightProbe({\n          reflectionFormat: session.preferredReflectionFormat\n        }).then(function (probe) {\n          sessionLightProbe = new SessionLightProbe(_assertThisInitialized(_this2), renderer, probe, environmentEstimation, function () {\n            estimationStarted = true; // Fired to indicate that the estimated lighting values are now being updated.\n\n            _this2.dispatchEvent({\n              type: 'estimationstart'\n            });\n          });\n        });\n      }\n    });\n    renderer.xr.addEventListener('sessionend', function () {\n      if (sessionLightProbe) {\n        sessionLightProbe.dispose();\n        sessionLightProbe = null;\n      }\n\n      if (estimationStarted) {\n        // Fired to indicate that the estimated lighting values are no longer being updated.\n        _this2.dispatchEvent({\n          type: 'estimationend'\n        });\n      }\n    }); // Done inline to provide access to sessionLightProbe.\n\n    _this2.dispose = function () {\n      if (sessionLightProbe) {\n        sessionLightProbe.dispose();\n        sessionLightProbe = null;\n      }\n\n      _this2.remove(_this2.lightProbe);\n\n      _this2.lightProbe = null;\n\n      _this2.remove(_this2.directionalLight);\n\n      _this2.directionalLight = null;\n      _this2.environment = null;\n    };\n\n    return _this2;\n  }\n\n  return XREstimatedLight;\n}(Group);\n\nexport { XREstimatedLight };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/webxr/XREstimatedLight.js"],"names":["Group","LightProbe","DirectionalLight","WebGLCubeRenderTarget","SessionLightProbe","xrLight","renderer","lightProbe","environmentEstimation","estimationStartCallback","xrWebGLBinding","frameCallback","onXRFrame","bind","session","xr","getSession","window","cubeRenderTarget","environment","texture","gl","getContext","preferredReflectionFormat","getExtension","XRWebGLBinding","addEventListener","updateReflection","requestAnimationFrame","textureProperties","properties","get","cubeMap","getReflectionCubeMap","__webglTexture","time","xrFrame","lightEstimate","getLightEstimate","sh","fromArray","sphericalHarmonicsCoefficients","intensity","intensityScalar","Math","max","primaryLightIntensity","x","y","z","directionalLight","color","setRGB","position","copy","primaryLightDirection","XREstimatedLight","add","sessionLightProbe","estimationStarted","requestLightProbe","reflectionFormat","then","probe","dispatchEvent","type","dispose","remove"],"mappings":"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","sourcesContent":["import { Group, LightProbe, DirectionalLight, WebGLCubeRenderTarget } from 'three';\n\nclass SessionLightProbe {\n  constructor(xrLight, renderer, lightProbe, environmentEstimation, estimationStartCallback) {\n    this.xrLight = xrLight;\n    this.renderer = renderer;\n    this.lightProbe = lightProbe;\n    this.xrWebGLBinding = null;\n    this.estimationStartCallback = estimationStartCallback;\n    this.frameCallback = this.onXRFrame.bind(this);\n    const session = renderer.xr.getSession(); // If the XRWebGLBinding class is available then we can also query an\n    // estimated reflection cube map.\n\n    if (environmentEstimation && 'XRWebGLBinding' in window) {\n      // This is the simplest way I know of to initialize a WebGL cubemap in Three.\n      const cubeRenderTarget = new WebGLCubeRenderTarget(16);\n      xrLight.environment = cubeRenderTarget.texture;\n      const gl = renderer.getContext(); // Ensure that we have any extensions needed to use the preferred cube map format.\n\n      switch (session.preferredReflectionFormat) {\n        case 'srgba8':\n          gl.getExtension('EXT_sRGB');\n          break;\n\n        case 'rgba16f':\n          gl.getExtension('OES_texture_half_float');\n          break;\n      }\n\n      this.xrWebGLBinding = new XRWebGLBinding(session, gl);\n      this.lightProbe.addEventListener('reflectionchange', () => {\n        this.updateReflection();\n      });\n    } // Start monitoring the XR animation frame loop to look for lighting\n    // estimation changes.\n\n\n    session.requestAnimationFrame(this.frameCallback);\n  }\n\n  updateReflection() {\n    const textureProperties = this.renderer.properties.get(this.xrLight.environment);\n\n    if (textureProperties) {\n      const cubeMap = this.xrWebGLBinding.getReflectionCubeMap(this.lightProbe);\n\n      if (cubeMap) {\n        textureProperties.__webglTexture = cubeMap;\n      }\n    }\n  }\n\n  onXRFrame(time, xrFrame) {\n    // If either this obejct or the XREstimatedLight has been destroyed, stop\n    // running the frame loop.\n    if (!this.xrLight) {\n      return;\n    }\n\n    const session = xrFrame.session;\n    session.requestAnimationFrame(this.frameCallback);\n    const lightEstimate = xrFrame.getLightEstimate(this.lightProbe);\n\n    if (lightEstimate) {\n      // We can copy the estimate's spherical harmonics array directly into the light probe.\n      this.xrLight.lightProbe.sh.fromArray(lightEstimate.sphericalHarmonicsCoefficients);\n      this.xrLight.lightProbe.intensity = 1.0; // For the directional light we have to normalize the color and set the scalar as the\n      // intensity, since WebXR can return color values that exceed 1.0.\n\n      const intensityScalar = Math.max(1.0, Math.max(lightEstimate.primaryLightIntensity.x, Math.max(lightEstimate.primaryLightIntensity.y, lightEstimate.primaryLightIntensity.z)));\n      this.xrLight.directionalLight.color.setRGB(lightEstimate.primaryLightIntensity.x / intensityScalar, lightEstimate.primaryLightIntensity.y / intensityScalar, lightEstimate.primaryLightIntensity.z / intensityScalar);\n      this.xrLight.directionalLight.intensity = intensityScalar;\n      this.xrLight.directionalLight.position.copy(lightEstimate.primaryLightDirection);\n\n      if (this.estimationStartCallback) {\n        this.estimationStartCallback();\n        this.estimationStartCallback = null;\n      }\n    }\n  }\n\n  dispose() {\n    this.xrLight = null;\n    this.renderer = null;\n    this.lightProbe = null;\n    this.xrWebGLBinding = null;\n  }\n\n}\n\nclass XREstimatedLight extends Group {\n  constructor(renderer, environmentEstimation = true) {\n    super();\n    this.lightProbe = new LightProbe();\n    this.lightProbe.intensity = 0;\n    this.add(this.lightProbe);\n    this.directionalLight = new DirectionalLight();\n    this.directionalLight.intensity = 0;\n    this.add(this.directionalLight); // Will be set to a cube map in the SessionLightProbe is environment estimation is\n    // available and requested.\n\n    this.environment = null;\n    let sessionLightProbe = null;\n    let estimationStarted = false;\n    renderer.xr.addEventListener('sessionstart', () => {\n      const session = renderer.xr.getSession();\n\n      if ('requestLightProbe' in session) {\n        session.requestLightProbe({\n          reflectionFormat: session.preferredReflectionFormat\n        }).then(probe => {\n          sessionLightProbe = new SessionLightProbe(this, renderer, probe, environmentEstimation, () => {\n            estimationStarted = true; // Fired to indicate that the estimated lighting values are now being updated.\n\n            this.dispatchEvent({\n              type: 'estimationstart'\n            });\n          });\n        });\n      }\n    });\n    renderer.xr.addEventListener('sessionend', () => {\n      if (sessionLightProbe) {\n        sessionLightProbe.dispose();\n        sessionLightProbe = null;\n      }\n\n      if (estimationStarted) {\n        // Fired to indicate that the estimated lighting values are no longer being updated.\n        this.dispatchEvent({\n          type: 'estimationend'\n        });\n      }\n    }); // Done inline to provide access to sessionLightProbe.\n\n    this.dispose = () => {\n      if (sessionLightProbe) {\n        sessionLightProbe.dispose();\n        sessionLightProbe = null;\n      }\n\n      this.remove(this.lightProbe);\n      this.lightProbe = null;\n      this.remove(this.directionalLight);\n      this.directionalLight = null;\n      this.environment = null;\n    };\n  }\n\n}\n\nexport { XREstimatedLight };\n"]},"metadata":{},"sourceType":"module"}