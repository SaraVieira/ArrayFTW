{"ast":null,"code":"/**\n * Depth-of-field shader using mipmaps\n * - from Matt Handley @applmak\n * - requires power-of-2 sized render target with enabled mipmaps\n */\nvar DOFMipMapShader = {\n  uniforms: {\n    tColor: {\n      value: null\n    },\n    tDepth: {\n      value: null\n    },\n    focus: {\n      value: 1.0\n    },\n    maxblur: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float focus;', 'uniform float maxblur;', 'uniform sampler2D tColor;', 'uniform sampler2D tDepth;', 'varying vec2 vUv;', 'void main() {', '\tvec4 depth = texture2D( tDepth, vUv );', '\tfloat factor = depth.x - focus;', '\tvec4 col = texture2D( tColor, vUv, 2.0 * maxblur * abs( focus - depth.x ) );', '\tgl_FragColor = col;', '\tgl_FragColor.a = 1.0;', '}'].join('\\n')\n};\nexport { DOFMipMapShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/DOFMipMapShader.js"],"names":["DOFMipMapShader","uniforms","tColor","value","tDepth","focus","maxblur","vertexShader","join","fragmentShader"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,eAAe,GAAG;AACpBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE;AADD,KADA;AAIRC,IAAAA,MAAM,EAAE;AACND,MAAAA,KAAK,EAAE;AADD,KAJA;AAORE,IAAAA,KAAK,EAAE;AACLF,MAAAA,KAAK,EAAE;AADF,KAPC;AAURG,IAAAA,OAAO,EAAE;AACPH,MAAAA,KAAK,EAAE;AADA;AAVD,GADU;AAepBI,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CAfM;AAgBpBC,EAAAA,cAAc,EAAE,CAAC,sBAAD,EAAyB,wBAAzB,EAAmD,2BAAnD,EAAgF,2BAAhF,EAA6G,mBAA7G,EAAkI,eAAlI,EAAmJ,yCAAnJ,EAA8L,kCAA9L,EAAkO,+EAAlO,EAAmT,sBAAnT,EAA2U,wBAA3U,EAAqW,GAArW,EAA0WD,IAA1W,CAA+W,IAA/W;AAhBI,CAAtB;AAmBA,SAASR,eAAT","sourcesContent":["/**\n * Depth-of-field shader using mipmaps\n * - from Matt Handley @applmak\n * - requires power-of-2 sized render target with enabled mipmaps\n */\nvar DOFMipMapShader = {\n  uniforms: {\n    tColor: {\n      value: null\n    },\n    tDepth: {\n      value: null\n    },\n    focus: {\n      value: 1.0\n    },\n    maxblur: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float focus;', 'uniform float maxblur;', 'uniform sampler2D tColor;', 'uniform sampler2D tDepth;', 'varying vec2 vUv;', 'void main() {', '\tvec4 depth = texture2D( tDepth, vUv );', '\tfloat factor = depth.x - focus;', '\tvec4 col = texture2D( tColor, vUv, 2.0 * maxblur * abs( focus - depth.x ) );', '\tgl_FragColor = col;', '\tgl_FragColor.a = 1.0;', '}'].join('\\n')\n};\n\nexport { DOFMipMapShader };\n"]},"metadata":{},"sourceType":"module"}