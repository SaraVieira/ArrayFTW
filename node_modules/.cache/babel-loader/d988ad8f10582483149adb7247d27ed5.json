{"ast":null,"code":"import _slicedToArray from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useRef, useState, useCallback, useMemo, createElement } from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType, Vector2 } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\nextend({\n  MeshReflectorMaterial: MeshReflectorMaterial\n});\nvar MIPMAP_NUM = 8;\nvar Reflector = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _ref$mixBlur = _ref.mixBlur,\n      mixBlur = _ref$mixBlur === void 0 ? 0.0 : _ref$mixBlur,\n      _ref$mixStrength = _ref.mixStrength,\n      mixStrength = _ref$mixStrength === void 0 ? 0.5 : _ref$mixStrength,\n      _ref$resolution = _ref.resolution,\n      resolution = _ref$resolution === void 0 ? 256 : _ref$resolution,\n      _ref$args = _ref.args,\n      args = _ref$args === void 0 ? [1, 1] : _ref$args,\n      _ref$minDepthThreshol = _ref.minDepthThreshold,\n      minDepthThreshold = _ref$minDepthThreshol === void 0 ? 0.9 : _ref$minDepthThreshol,\n      _ref$maxDepthThreshol = _ref.maxDepthThreshold,\n      maxDepthThreshold = _ref$maxDepthThreshol === void 0 ? 1 : _ref$maxDepthThreshol,\n      _ref$depthScale = _ref.depthScale,\n      depthScale = _ref$depthScale === void 0 ? 0 : _ref$depthScale,\n      _ref$depthToBlurRatio = _ref.depthToBlurRatioBias,\n      depthToBlurRatioBias = _ref$depthToBlurRatio === void 0 ? 0.25 : _ref$depthToBlurRatio,\n      mirror = _ref.mirror,\n      children = _ref.children,\n      _ref$debug = _ref.debug,\n      debug = _ref$debug === void 0 ? 0 : _ref$debug,\n      _ref$distortion = _ref.distortion,\n      distortion = _ref$distortion === void 0 ? 1 : _ref$distortion,\n      distortionMap = _ref.distortionMap,\n      props = _objectWithoutPropertiesLoose(_ref, [\"mixBlur\", \"mixStrength\", \"resolution\", \"args\", \"minDepthThreshold\", \"maxDepthThreshold\", \"depthScale\", \"depthToBlurRatioBias\", \"mirror\", \"children\", \"debug\", \"distortion\", \"distortionMap\"]);\n\n  var gl = useThree(function (_ref2) {\n    var gl = _ref2.gl;\n    return gl;\n  });\n  var camera = useThree(function (_ref3) {\n    var camera = _ref3.camera;\n    return camera;\n  });\n  var scene = useThree(function (_ref4) {\n    var scene = _ref4.scene;\n    return scene;\n  });\n  var meshRef = useRef(null);\n\n  var _useState = useState(function () {\n    return new Plane();\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      reflectorPlane = _useState2[0];\n\n  var _useState3 = useState(function () {\n    return new Vector3();\n  }),\n      _useState4 = _slicedToArray(_useState3, 1),\n      normal = _useState4[0];\n\n  var _useState5 = useState(function () {\n    return new Vector3();\n  }),\n      _useState6 = _slicedToArray(_useState5, 1),\n      reflectorWorldPosition = _useState6[0];\n\n  var _useState7 = useState(function () {\n    return new Vector3();\n  }),\n      _useState8 = _slicedToArray(_useState7, 1),\n      cameraWorldPosition = _useState8[0];\n\n  var _useState9 = useState(function () {\n    return new Matrix4();\n  }),\n      _useState10 = _slicedToArray(_useState9, 1),\n      rotationMatrix = _useState10[0];\n\n  var _useState11 = useState(function () {\n    return new Vector3(0, 0, -1);\n  }),\n      _useState12 = _slicedToArray(_useState11, 1),\n      lookAtPosition = _useState12[0];\n\n  var _useState13 = useState(function () {\n    return new Vector4();\n  }),\n      _useState14 = _slicedToArray(_useState13, 1),\n      clipPlane = _useState14[0];\n\n  var _useState15 = useState(function () {\n    return new Vector3();\n  }),\n      _useState16 = _slicedToArray(_useState15, 1),\n      view = _useState16[0];\n\n  var _useState17 = useState(function () {\n    return new Vector3();\n  }),\n      _useState18 = _slicedToArray(_useState17, 1),\n      target = _useState18[0];\n\n  var _useState19 = useState(function () {\n    return new Vector4();\n  }),\n      _useState20 = _slicedToArray(_useState19, 1),\n      q = _useState20[0];\n\n  var _useState21 = useState(function () {\n    return new Matrix4();\n  }),\n      _useState22 = _slicedToArray(_useState21, 1),\n      textureMatrix = _useState22[0];\n\n  var _useState23 = useState(function () {\n    return new PerspectiveCamera();\n  }),\n      _useState24 = _slicedToArray(_useState23, 1),\n      virtualCamera = _useState24[0];\n\n  var _useState25 = useState(function () {\n    var renderTargets = [];\n    var pars = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n\n    for (var i = 0; i < MIPMAP_NUM; i++) {\n      var res = Math.max(8, Math.round(resolution / Math.pow(2, i)));\n      var renderTarget = new WebGLRenderTarget(res, res, pars);\n      renderTarget.texture.generateMipmaps = false;\n      renderTargets.push(renderTarget);\n    }\n\n    return renderTargets;\n  }),\n      _useState26 = _slicedToArray(_useState25, 1),\n      renderTargets = _useState26[0];\n\n  var beforeRender = useCallback(function () {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    var projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera.far, camera.matrixWorld, camera.projectionMatrix, cameraWorldPosition, clipPlane, lookAtPosition, normal, q, reflectorPlane, reflectorWorldPosition, rotationMatrix, target, textureMatrix, view, virtualCamera]);\n\n  var _useMemo = useMemo(function () {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    var fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n\n    if (depthScale > 0) {\n      fbo1.depthBuffer = true;\n      fbo1.depthTexture = new DepthTexture(resolution, resolution);\n      fbo1.depthTexture.format = DepthFormat;\n      fbo1.depthTexture.type = UnsignedShortType;\n    }\n\n    var mipmaps = renderTargets.reduce(function (acc, fbo, index) {\n      acc[\"u_mipmap_\" + index] = fbo.texture;\n      acc[\"u_mipmap_res_\" + index] = new Vector2(fbo.width, fbo.height);\n      return acc;\n    }, {});\n\n    var reflectorProps = _extends({\n      mirror: mirror,\n      textureMatrix: textureMatrix,\n      mixBlur: mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      mixStrength: mixStrength,\n      minDepthThreshold: minDepthThreshold,\n      maxDepthThreshold: maxDepthThreshold,\n      depthScale: depthScale,\n      depthToBlurRatioBias: depthToBlurRatioBias,\n      debug: debug,\n      distortion: distortion,\n      distortionMap: distortionMap,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': !!distortionMap ? '' : undefined\n    }, mipmaps);\n\n    return [fbo1, reflectorProps];\n  }, [gl, textureMatrix, resolution, mirror, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, renderTargets]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      fbo1 = _useMemo2[0],\n      reflectorProps = _useMemo2[1];\n\n  useFrame(function () {\n    if (!(meshRef == null ? void 0 : meshRef.current)) return;\n    meshRef.current.visible = false;\n    beforeRender();\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    gl.render(scene, virtualCamera);\n\n    if (mixBlur !== 0) {\n      renderTargets.forEach(function (fbo) {\n        gl.setRenderTarget(fbo);\n        gl.state.buffers.depth.setMask(true);\n        gl.render(scene, virtualCamera);\n      });\n    }\n\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/createElement(\"mesh\", _extends({\n    ref: mergeRefs([meshRef, ref])\n  }, props), /*#__PURE__*/createElement(\"planeBufferGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/createElement(\"meshReflectorMaterial\", reflectorProps));\n});\nexport { Reflector };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/@react-three/drei/core/Reflector.js"],"names":["_extends","_objectWithoutPropertiesLoose","forwardRef","useRef","useState","useCallback","useMemo","createElement","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","LinearFilter","RGBFormat","WebGLRenderTarget","DepthTexture","DepthFormat","UnsignedShortType","Vector2","extend","useThree","useFrame","mergeRefs","MeshReflectorMaterial","MIPMAP_NUM","Reflector","_ref","ref","mixBlur","mixStrength","resolution","args","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","mirror","children","debug","distortion","distortionMap","props","gl","camera","scene","meshRef","reflectorPlane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","renderTargets","pars","minFilter","magFilter","format","encoding","outputEncoding","i","res","Math","max","round","pow","renderTarget","texture","generateMipmaps","push","beforeRender","setFromMatrixPosition","current","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","sign","elements","w","multiplyScalar","parameters","fbo1","depthBuffer","depthTexture","type","mipmaps","reduce","acc","fbo","index","width","height","reflectorProps","tDiffuse","tDepth","undefined","visible","setRenderTarget","state","buffers","depth","setMask","render","forEach"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useRef, useState, useCallback, useMemo, createElement } from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType, Vector2 } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\n\nextend({\n  MeshReflectorMaterial\n});\nconst MIPMAP_NUM = 8;\nconst Reflector = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    mixBlur = 0.0,\n    mixStrength = 0.5,\n    resolution = 256,\n    args = [1, 1],\n    minDepthThreshold = 0.9,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25,\n    mirror,\n    children,\n    debug = 0,\n    distortion = 1,\n    distortionMap\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"mixBlur\", \"mixStrength\", \"resolution\", \"args\", \"minDepthThreshold\", \"maxDepthThreshold\", \"depthScale\", \"depthToBlurRatioBias\", \"mirror\", \"children\", \"debug\", \"distortion\", \"distortionMap\"]);\n\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const meshRef = useRef(null);\n  const [reflectorPlane] = useState(() => new Plane());\n  const [normal] = useState(() => new Vector3());\n  const [reflectorWorldPosition] = useState(() => new Vector3());\n  const [cameraWorldPosition] = useState(() => new Vector3());\n  const [rotationMatrix] = useState(() => new Matrix4());\n  const [lookAtPosition] = useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = useState(() => new Vector4());\n  const [view] = useState(() => new Vector3());\n  const [target] = useState(() => new Vector3());\n  const [q] = useState(() => new Vector4());\n  const [textureMatrix] = useState(() => new Matrix4());\n  const [virtualCamera] = useState(() => new PerspectiveCamera());\n  const [renderTargets] = useState(() => {\n    const renderTargets = [];\n    const pars = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n\n    for (let i = 0; i < MIPMAP_NUM; i++) {\n      const res = Math.max(8, Math.round(resolution / Math.pow(2, i)));\n      const renderTarget = new WebGLRenderTarget(res, res, pars);\n      renderTarget.texture.generateMipmaps = false;\n      renderTargets.push(renderTarget);\n    }\n\n    return renderTargets;\n  });\n  const beforeRender = useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera.far, camera.matrixWorld, camera.projectionMatrix, cameraWorldPosition, clipPlane, lookAtPosition, normal, q, reflectorPlane, reflectorWorldPosition, rotationMatrix, target, textureMatrix, view, virtualCamera]);\n  const [fbo1, reflectorProps] = useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n\n    if (depthScale > 0) {\n      fbo1.depthBuffer = true;\n      fbo1.depthTexture = new DepthTexture(resolution, resolution);\n      fbo1.depthTexture.format = DepthFormat;\n      fbo1.depthTexture.type = UnsignedShortType;\n    }\n\n    const mipmaps = renderTargets.reduce((acc, fbo, index) => {\n      acc[\"u_mipmap_\" + index] = fbo.texture;\n      acc[\"u_mipmap_res_\" + index] = new Vector2(fbo.width, fbo.height);\n      return acc;\n    }, {});\n\n    const reflectorProps = _extends({\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      debug,\n      distortion,\n      distortionMap,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': !!distortionMap ? '' : undefined\n    }, mipmaps);\n\n    return [fbo1, reflectorProps];\n  }, [gl, textureMatrix, resolution, mirror, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, renderTargets]);\n  useFrame(() => {\n    if (!(meshRef == null ? void 0 : meshRef.current)) return;\n    meshRef.current.visible = false;\n    beforeRender();\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    gl.render(scene, virtualCamera);\n\n    if (mixBlur !== 0) {\n      renderTargets.forEach(fbo => {\n        gl.setRenderTarget(fbo);\n        gl.state.buffers.depth.setMask(true);\n        gl.render(scene, virtualCamera);\n      });\n    }\n\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/createElement(\"mesh\", _extends({\n    ref: mergeRefs([meshRef, ref])\n  }, props), /*#__PURE__*/createElement(\"planeBufferGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/createElement(\"meshReflectorMaterial\", reflectorProps));\n});\n\nexport { Reflector };\n"]},"metadata":{},"sourceType":"module"}