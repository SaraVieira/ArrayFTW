{"ast":null,"code":"import { Vector3 } from 'three';\nimport { Vector3Node } from '../inputs/Vector3Node.js';\n\nfunction VelocityNode(target, params) {\n  Vector3Node.call(this);\n  this.params = {};\n  this.velocity = new Vector3();\n  this.setTarget(target);\n  this.setParams(params);\n}\n\nVelocityNode.prototype = Object.create(Vector3Node.prototype);\nVelocityNode.prototype.constructor = VelocityNode;\nVelocityNode.prototype.nodeType = 'Velocity';\n\nVelocityNode.prototype.getReadonly = function ()\n/*builder*/\n{\n  return false;\n};\n\nVelocityNode.prototype.setParams = function (params) {\n  switch (this.params.type) {\n    case 'elastic':\n      delete this.moment;\n      delete this.speed;\n      delete this.springVelocity;\n      delete this.lastVelocity;\n      break;\n  }\n\n  this.params = params || {};\n\n  switch (this.params.type) {\n    case 'elastic':\n      this.moment = new Vector3();\n      this.speed = new Vector3();\n      this.springVelocity = new Vector3();\n      this.lastVelocity = new Vector3();\n      break;\n  }\n};\n\nVelocityNode.prototype.setTarget = function (target) {\n  if (this.target) {\n    delete this.position;\n    delete this.oldPosition;\n  }\n\n  this.target = target;\n\n  if (target) {\n    this.position = target.getWorldPosition(this.position || new Vector3());\n    this.oldPosition = this.position.clone();\n  }\n};\n\nVelocityNode.prototype.updateFrameVelocity = function ()\n/*frame*/\n{\n  if (this.target) {\n    this.position = this.target.getWorldPosition(this.position || new Vector3());\n    this.velocity.subVectors(this.position, this.oldPosition);\n    this.oldPosition.copy(this.position);\n  }\n};\n\nVelocityNode.prototype.updateFrame = function (frame) {\n  this.updateFrameVelocity(frame);\n\n  switch (this.params.type) {\n    case 'elastic':\n      // convert to real scale: 0 at 1 values\n      var deltaFps = frame.delta * (this.params.fps || 60);\n      var spring = Math.pow(this.params.spring, deltaFps),\n          damping = Math.pow(this.params.damping, deltaFps); // fix relative frame-rate\n\n      this.velocity.multiplyScalar(Math.exp(-this.params.damping * deltaFps)); // elastic\n\n      this.velocity.add(this.springVelocity);\n      this.velocity.add(this.speed.multiplyScalar(damping).multiplyScalar(1 - spring)); // speed\n\n      this.speed.subVectors(this.velocity, this.lastVelocity); // spring velocity\n\n      this.springVelocity.add(this.speed);\n      this.springVelocity.multiplyScalar(spring); // moment\n\n      this.moment.add(this.springVelocity); // damping\n\n      this.moment.multiplyScalar(damping);\n      this.lastVelocity.copy(this.velocity);\n      this.value.copy(this.moment);\n      break;\n\n    default:\n      this.value.copy(this.velocity);\n  }\n};\n\nVelocityNode.prototype.copy = function (source) {\n  Vector3Node.prototype.copy.call(this, source);\n  if (source.target) this.setTarget(source.target);\n  this.setParams(source.params);\n  return this;\n};\n\nVelocityNode.prototype.toJSON = function (meta) {\n  var data = Vector3Node.prototype.toJSON.call(this, meta);\n  if (this.target) data.target = this.target.uuid; // clone params\n\n  data.params = JSON.parse(JSON.stringify(this.params));\n  return data;\n};\n\nexport { VelocityNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/utils/VelocityNode.js"],"names":["Vector3","Vector3Node","VelocityNode","target","params","call","velocity","setTarget","setParams","prototype","Object","create","constructor","nodeType","getReadonly","type","moment","speed","springVelocity","lastVelocity","position","oldPosition","getWorldPosition","clone","updateFrameVelocity","subVectors","copy","updateFrame","frame","deltaFps","delta","fps","spring","Math","pow","damping","multiplyScalar","exp","add","value","source","toJSON","meta","data","uuid","JSON","parse","stringify"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,0BAA5B;;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;AACpCH,EAAAA,WAAW,CAACI,IAAZ,CAAiB,IAAjB;AACA,OAAKD,MAAL,GAAc,EAAd;AACA,OAAKE,QAAL,GAAgB,IAAIN,OAAJ,EAAhB;AACA,OAAKO,SAAL,CAAeJ,MAAf;AACA,OAAKK,SAAL,CAAeJ,MAAf;AACD;;AAEDF,YAAY,CAACO,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAcV,WAAW,CAACQ,SAA1B,CAAzB;AACAP,YAAY,CAACO,SAAb,CAAuBG,WAAvB,GAAqCV,YAArC;AACAA,YAAY,CAACO,SAAb,CAAuBI,QAAvB,GAAkC,UAAlC;;AAEAX,YAAY,CAACO,SAAb,CAAuBK,WAAvB,GAAqC;AACrC;AACA;AACE,SAAO,KAAP;AACD,CAJD;;AAMAZ,YAAY,CAACO,SAAb,CAAuBD,SAAvB,GAAmC,UAAUJ,MAAV,EAAkB;AACnD,UAAQ,KAAKA,MAAL,CAAYW,IAApB;AACE,SAAK,SAAL;AACE,aAAO,KAAKC,MAAZ;AACA,aAAO,KAAKC,KAAZ;AACA,aAAO,KAAKC,cAAZ;AACA,aAAO,KAAKC,YAAZ;AACA;AANJ;;AASA,OAAKf,MAAL,GAAcA,MAAM,IAAI,EAAxB;;AAEA,UAAQ,KAAKA,MAAL,CAAYW,IAApB;AACE,SAAK,SAAL;AACE,WAAKC,MAAL,GAAc,IAAIhB,OAAJ,EAAd;AACA,WAAKiB,KAAL,GAAa,IAAIjB,OAAJ,EAAb;AACA,WAAKkB,cAAL,GAAsB,IAAIlB,OAAJ,EAAtB;AACA,WAAKmB,YAAL,GAAoB,IAAInB,OAAJ,EAApB;AACA;AANJ;AAQD,CApBD;;AAsBAE,YAAY,CAACO,SAAb,CAAuBF,SAAvB,GAAmC,UAAUJ,MAAV,EAAkB;AACnD,MAAI,KAAKA,MAAT,EAAiB;AACf,WAAO,KAAKiB,QAAZ;AACA,WAAO,KAAKC,WAAZ;AACD;;AAED,OAAKlB,MAAL,GAAcA,MAAd;;AAEA,MAAIA,MAAJ,EAAY;AACV,SAAKiB,QAAL,GAAgBjB,MAAM,CAACmB,gBAAP,CAAwB,KAAKF,QAAL,IAAiB,IAAIpB,OAAJ,EAAzC,CAAhB;AACA,SAAKqB,WAAL,GAAmB,KAAKD,QAAL,CAAcG,KAAd,EAAnB;AACD;AACF,CAZD;;AAcArB,YAAY,CAACO,SAAb,CAAuBe,mBAAvB,GAA6C;AAC7C;AACA;AACE,MAAI,KAAKrB,MAAT,EAAiB;AACf,SAAKiB,QAAL,GAAgB,KAAKjB,MAAL,CAAYmB,gBAAZ,CAA6B,KAAKF,QAAL,IAAiB,IAAIpB,OAAJ,EAA9C,CAAhB;AACA,SAAKM,QAAL,CAAcmB,UAAd,CAAyB,KAAKL,QAA9B,EAAwC,KAAKC,WAA7C;AACA,SAAKA,WAAL,CAAiBK,IAAjB,CAAsB,KAAKN,QAA3B;AACD;AACF,CARD;;AAUAlB,YAAY,CAACO,SAAb,CAAuBkB,WAAvB,GAAqC,UAAUC,KAAV,EAAiB;AACpD,OAAKJ,mBAAL,CAAyBI,KAAzB;;AAEA,UAAQ,KAAKxB,MAAL,CAAYW,IAApB;AACE,SAAK,SAAL;AACE;AACA,UAAIc,QAAQ,GAAGD,KAAK,CAACE,KAAN,IAAe,KAAK1B,MAAL,CAAY2B,GAAZ,IAAmB,EAAlC,CAAf;AACA,UAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAAS,KAAK9B,MAAL,CAAY4B,MAArB,EAA6BH,QAA7B,CAAb;AAAA,UACIM,OAAO,GAAGF,IAAI,CAACC,GAAL,CAAS,KAAK9B,MAAL,CAAY+B,OAArB,EAA8BN,QAA9B,CADd,CAHF,CAIyD;;AAEvD,WAAKvB,QAAL,CAAc8B,cAAd,CAA6BH,IAAI,CAACI,GAAL,CAAS,CAAC,KAAKjC,MAAL,CAAY+B,OAAb,GAAuBN,QAAhC,CAA7B,EANF,CAM2E;;AAEzE,WAAKvB,QAAL,CAAcgC,GAAd,CAAkB,KAAKpB,cAAvB;AACA,WAAKZ,QAAL,CAAcgC,GAAd,CAAkB,KAAKrB,KAAL,CAAWmB,cAAX,CAA0BD,OAA1B,EAAmCC,cAAnC,CAAkD,IAAIJ,MAAtD,CAAlB,EATF,CASoF;;AAElF,WAAKf,KAAL,CAAWQ,UAAX,CAAsB,KAAKnB,QAA3B,EAAqC,KAAKa,YAA1C,EAXF,CAW2D;;AAEzD,WAAKD,cAAL,CAAoBoB,GAApB,CAAwB,KAAKrB,KAA7B;AACA,WAAKC,cAAL,CAAoBkB,cAApB,CAAmCJ,MAAnC,EAdF,CAc8C;;AAE5C,WAAKhB,MAAL,CAAYsB,GAAZ,CAAgB,KAAKpB,cAArB,EAhBF,CAgBwC;;AAEtC,WAAKF,MAAL,CAAYoB,cAAZ,CAA2BD,OAA3B;AACA,WAAKhB,YAAL,CAAkBO,IAAlB,CAAuB,KAAKpB,QAA5B;AACA,WAAKiC,KAAL,CAAWb,IAAX,CAAgB,KAAKV,MAArB;AACA;;AAEF;AACE,WAAKuB,KAAL,CAAWb,IAAX,CAAgB,KAAKpB,QAArB;AAzBJ;AA2BD,CA9BD;;AAgCAJ,YAAY,CAACO,SAAb,CAAuBiB,IAAvB,GAA8B,UAAUc,MAAV,EAAkB;AAC9CvC,EAAAA,WAAW,CAACQ,SAAZ,CAAsBiB,IAAtB,CAA2BrB,IAA3B,CAAgC,IAAhC,EAAsCmC,MAAtC;AACA,MAAIA,MAAM,CAACrC,MAAX,EAAmB,KAAKI,SAAL,CAAeiC,MAAM,CAACrC,MAAtB;AACnB,OAAKK,SAAL,CAAegC,MAAM,CAACpC,MAAtB;AACA,SAAO,IAAP;AACD,CALD;;AAOAF,YAAY,CAACO,SAAb,CAAuBgC,MAAvB,GAAgC,UAAUC,IAAV,EAAgB;AAC9C,MAAIC,IAAI,GAAG1C,WAAW,CAACQ,SAAZ,CAAsBgC,MAAtB,CAA6BpC,IAA7B,CAAkC,IAAlC,EAAwCqC,IAAxC,CAAX;AACA,MAAI,KAAKvC,MAAT,EAAiBwC,IAAI,CAACxC,MAAL,GAAc,KAAKA,MAAL,CAAYyC,IAA1B,CAF6B,CAEG;;AAEjDD,EAAAA,IAAI,CAACvC,MAAL,GAAcyC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAK3C,MAApB,CAAX,CAAd;AACA,SAAOuC,IAAP;AACD,CAND;;AAQA,SAASzC,YAAT","sourcesContent":["import { Vector3 } from 'three';\nimport { Vector3Node } from '../inputs/Vector3Node.js';\n\nfunction VelocityNode(target, params) {\n  Vector3Node.call(this);\n  this.params = {};\n  this.velocity = new Vector3();\n  this.setTarget(target);\n  this.setParams(params);\n}\n\nVelocityNode.prototype = Object.create(Vector3Node.prototype);\nVelocityNode.prototype.constructor = VelocityNode;\nVelocityNode.prototype.nodeType = 'Velocity';\n\nVelocityNode.prototype.getReadonly = function ()\n/*builder*/\n{\n  return false;\n};\n\nVelocityNode.prototype.setParams = function (params) {\n  switch (this.params.type) {\n    case 'elastic':\n      delete this.moment;\n      delete this.speed;\n      delete this.springVelocity;\n      delete this.lastVelocity;\n      break;\n  }\n\n  this.params = params || {};\n\n  switch (this.params.type) {\n    case 'elastic':\n      this.moment = new Vector3();\n      this.speed = new Vector3();\n      this.springVelocity = new Vector3();\n      this.lastVelocity = new Vector3();\n      break;\n  }\n};\n\nVelocityNode.prototype.setTarget = function (target) {\n  if (this.target) {\n    delete this.position;\n    delete this.oldPosition;\n  }\n\n  this.target = target;\n\n  if (target) {\n    this.position = target.getWorldPosition(this.position || new Vector3());\n    this.oldPosition = this.position.clone();\n  }\n};\n\nVelocityNode.prototype.updateFrameVelocity = function ()\n/*frame*/\n{\n  if (this.target) {\n    this.position = this.target.getWorldPosition(this.position || new Vector3());\n    this.velocity.subVectors(this.position, this.oldPosition);\n    this.oldPosition.copy(this.position);\n  }\n};\n\nVelocityNode.prototype.updateFrame = function (frame) {\n  this.updateFrameVelocity(frame);\n\n  switch (this.params.type) {\n    case 'elastic':\n      // convert to real scale: 0 at 1 values\n      var deltaFps = frame.delta * (this.params.fps || 60);\n      var spring = Math.pow(this.params.spring, deltaFps),\n          damping = Math.pow(this.params.damping, deltaFps); // fix relative frame-rate\n\n      this.velocity.multiplyScalar(Math.exp(-this.params.damping * deltaFps)); // elastic\n\n      this.velocity.add(this.springVelocity);\n      this.velocity.add(this.speed.multiplyScalar(damping).multiplyScalar(1 - spring)); // speed\n\n      this.speed.subVectors(this.velocity, this.lastVelocity); // spring velocity\n\n      this.springVelocity.add(this.speed);\n      this.springVelocity.multiplyScalar(spring); // moment\n\n      this.moment.add(this.springVelocity); // damping\n\n      this.moment.multiplyScalar(damping);\n      this.lastVelocity.copy(this.velocity);\n      this.value.copy(this.moment);\n      break;\n\n    default:\n      this.value.copy(this.velocity);\n  }\n};\n\nVelocityNode.prototype.copy = function (source) {\n  Vector3Node.prototype.copy.call(this, source);\n  if (source.target) this.setTarget(source.target);\n  this.setParams(source.params);\n  return this;\n};\n\nVelocityNode.prototype.toJSON = function (meta) {\n  var data = Vector3Node.prototype.toJSON.call(this, meta);\n  if (this.target) data.target = this.target.uuid; // clone params\n\n  data.params = JSON.parse(JSON.stringify(this.params));\n  return data;\n};\n\nexport { VelocityNode };\n"]},"metadata":{},"sourceType":"module"}