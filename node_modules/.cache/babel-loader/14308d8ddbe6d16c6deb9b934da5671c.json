{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { NodeLib } from '../core/NodeLib.js';\n\nfunction NormalNode(scope) {\n  TempNode.call(this, 'v3');\n  this.scope = scope || NormalNode.VIEW;\n}\n\nNormalNode.LOCAL = 'local';\nNormalNode.WORLD = 'world';\nNormalNode.VIEW = 'view';\nNormalNode.prototype = Object.create(TempNode.prototype);\nNormalNode.prototype.constructor = NormalNode;\nNormalNode.prototype.nodeType = 'Normal';\n\nNormalNode.prototype.getShared = function () {\n  // if shared is false, TempNode will not create temp variable (for optimization)\n  return this.scope === NormalNode.WORLD;\n};\n\nNormalNode.prototype.build = function (builder, output, uuid, ns) {\n  var contextNormal = builder.context[this.scope + 'Normal'];\n\n  if (contextNormal) {\n    return contextNormal.build(builder, output, uuid, ns);\n  }\n\n  return TempNode.prototype.build.call(this, builder, output, uuid);\n};\n\nNormalNode.prototype.generate = function (builder, output) {\n  var result;\n\n  switch (this.scope) {\n    case NormalNode.VIEW:\n      if (builder.isShader('vertex')) result = 'transformedNormal';else result = 'geometryNormal';\n      break;\n\n    case NormalNode.LOCAL:\n      if (builder.isShader('vertex')) {\n        result = 'objectNormal';\n      } else {\n        builder.requires.normal = true;\n        result = 'vObjectNormal';\n      }\n\n      break;\n\n    case NormalNode.WORLD:\n      if (builder.isShader('vertex')) {\n        result = 'inverseTransformDirection( transformedNormal, viewMatrix ).xyz';\n      } else {\n        builder.requires.worldNormal = true;\n        result = 'vWNormal';\n      }\n\n      break;\n  }\n\n  return builder.format(result, this.getType(builder), output);\n};\n\nNormalNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.scope = source.scope;\n  return this;\n};\n\nNormalNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.scope = this.scope;\n  }\n\n  return data;\n};\n\nNodeLib.addKeyword('viewNormal', function () {\n  return new NormalNode(NormalNode.VIEW);\n});\nNodeLib.addKeyword('localNormal', function () {\n  return new NormalNode(NormalNode.NORMAL);\n});\nNodeLib.addKeyword('worldNormal', function () {\n  return new NormalNode(NormalNode.WORLD);\n});\nexport { NormalNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/accessors/NormalNode.js"],"names":["TempNode","NodeLib","NormalNode","scope","call","VIEW","LOCAL","WORLD","prototype","Object","create","constructor","nodeType","getShared","build","builder","output","uuid","ns","contextNormal","context","generate","result","isShader","requires","normal","worldNormal","format","getType","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","addKeyword","NORMAL"],"mappings":"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","sourcesContent":["import { TempNode } from '../core/TempNode.js';\nimport { NodeLib } from '../core/NodeLib.js';\n\nfunction NormalNode(scope) {\n  TempNode.call(this, 'v3');\n  this.scope = scope || NormalNode.VIEW;\n}\n\nNormalNode.LOCAL = 'local';\nNormalNode.WORLD = 'world';\nNormalNode.VIEW = 'view';\nNormalNode.prototype = Object.create(TempNode.prototype);\nNormalNode.prototype.constructor = NormalNode;\nNormalNode.prototype.nodeType = 'Normal';\n\nNormalNode.prototype.getShared = function () {\n  // if shared is false, TempNode will not create temp variable (for optimization)\n  return this.scope === NormalNode.WORLD;\n};\n\nNormalNode.prototype.build = function (builder, output, uuid, ns) {\n  var contextNormal = builder.context[this.scope + 'Normal'];\n\n  if (contextNormal) {\n    return contextNormal.build(builder, output, uuid, ns);\n  }\n\n  return TempNode.prototype.build.call(this, builder, output, uuid);\n};\n\nNormalNode.prototype.generate = function (builder, output) {\n  var result;\n\n  switch (this.scope) {\n    case NormalNode.VIEW:\n      if (builder.isShader('vertex')) result = 'transformedNormal';else result = 'geometryNormal';\n      break;\n\n    case NormalNode.LOCAL:\n      if (builder.isShader('vertex')) {\n        result = 'objectNormal';\n      } else {\n        builder.requires.normal = true;\n        result = 'vObjectNormal';\n      }\n\n      break;\n\n    case NormalNode.WORLD:\n      if (builder.isShader('vertex')) {\n        result = 'inverseTransformDirection( transformedNormal, viewMatrix ).xyz';\n      } else {\n        builder.requires.worldNormal = true;\n        result = 'vWNormal';\n      }\n\n      break;\n  }\n\n  return builder.format(result, this.getType(builder), output);\n};\n\nNormalNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.scope = source.scope;\n  return this;\n};\n\nNormalNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.scope = this.scope;\n  }\n\n  return data;\n};\n\nNodeLib.addKeyword('viewNormal', function () {\n  return new NormalNode(NormalNode.VIEW);\n});\nNodeLib.addKeyword('localNormal', function () {\n  return new NormalNode(NormalNode.NORMAL);\n});\nNodeLib.addKeyword('worldNormal', function () {\n  return new NormalNode(NormalNode.WORLD);\n});\n\nexport { NormalNode };\n"]},"metadata":{},"sourceType":"module"}