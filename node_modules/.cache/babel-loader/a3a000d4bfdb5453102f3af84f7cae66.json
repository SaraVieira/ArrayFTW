{"ast":null,"code":"function LWO3Parser(IFFParser) {\n  this.IFF = IFFParser;\n}\n\nLWO3Parser.prototype = {\n  constructor: LWO3Parser,\n  parseBlock: function parseBlock() {\n    this.IFF.debugger.offset = this.IFF.reader.offset;\n    this.IFF.debugger.closeForms();\n    var blockID = this.IFF.reader.getIDTag();\n    var length = this.IFF.reader.getUint32(); // size of data in bytes\n\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n    this.IFF.debugger.length = length; // Data types may be found in either LWO2 OR LWO3 spec\n\n    switch (blockID) {\n      case 'FORM':\n        // form blocks may consist of sub -chunks or sub-forms\n        this.IFF.parseForm(length);\n        break;\n      // SKIPPED CHUNKS\n      // MISC skipped\n\n      case 'ICON': // Thumbnail Icon Image\n\n      case 'VMPA': // Vertex Map Parameter\n\n      case 'BBOX': // bounding box\n      // case 'VMMD':\n      // case 'VTYP':\n      // normal maps can be specified, normally on models imported from other applications. Currently ignored\n\n      case 'NORM': // ENVL FORM skipped\n\n      case 'PRE ':\n      case 'POST':\n      case 'KEY ':\n      case 'SPAN': // CLIP FORM skipped\n\n      case 'TIME':\n      case 'CLRS':\n      case 'CLRA':\n      case 'FILT':\n      case 'DITH':\n      case 'CONT':\n      case 'BRIT':\n      case 'SATR':\n      case 'HUE ':\n      case 'GAMM':\n      case 'NEGA':\n      case 'IFLT':\n      case 'PFLT': // Image Map Layer skipped\n\n      case 'PROJ':\n      case 'AXIS':\n      case 'AAST':\n      case 'PIXB':\n      case 'STCK': // Procedural Textures skipped\n\n      case 'VALU': // Gradient Textures skipped\n\n      case 'PNAM':\n      case 'INAM':\n      case 'GRST':\n      case 'GREN':\n      case 'GRPT':\n      case 'FKEY':\n      case 'IKEY': // Texture Mapping Form skipped\n\n      case 'CSYS': // Surface CHUNKs skipped\n\n      case 'OPAQ': // top level 'opacity' checkbox\n\n      case 'CMAP': // clip map\n      // Surface node CHUNKS skipped\n      // These mainly specify the node editor setup in LW\n\n      case 'NLOC':\n      case 'NZOM':\n      case 'NVER':\n      case 'NSRV':\n      case 'NCRD':\n      case 'NMOD':\n      case 'NSEL':\n      case 'NPRW':\n      case 'NPLA':\n      case 'VERS':\n      case 'ENUM':\n      case 'TAG ': // Car Material CHUNKS\n\n      case 'CGMD':\n      case 'CGTY':\n      case 'CGST':\n      case 'CGEN':\n      case 'CGTS':\n      case 'CGTE':\n      case 'OSMP':\n      case 'OMDE':\n      case 'OUTR':\n      case 'FLAG':\n      case 'TRNL':\n      case 'SHRP':\n      case 'RFOP':\n      case 'RSAN':\n      case 'TROP':\n      case 'RBLR':\n      case 'TBLR':\n      case 'CLRH':\n      case 'CLRF':\n      case 'ADTR':\n      case 'GLOW':\n      case 'LINE':\n      case 'ALPH':\n      case 'VCOL':\n      case 'ENAB':\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n      // Texture node chunks (not in spec)\n\n      case 'IPIX': // usePixelBlending\n\n      case 'IMIP': // useMipMaps\n\n      case 'IMOD': // imageBlendingMode\n\n      case 'AMOD': // unknown\n\n      case 'IINV': // imageInvertAlpha\n\n      case 'INCR': // imageInvertColor\n\n      case 'IAXS': // imageAxis ( for non-UV maps)\n\n      case 'IFOT': // imageFallofType\n\n      case 'ITIM': // timing for animated textures\n\n      case 'IWRL':\n      case 'IUTI':\n      case 'IINX':\n      case 'IINY':\n      case 'IINZ':\n      case 'IREF':\n        // possibly a VX for reused texture nodes\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n        break;\n\n      case 'OTAG':\n        this.IFF.parseObjectTag();\n        break;\n\n      case 'LAYR':\n        this.IFF.parseLayer(length);\n        break;\n\n      case 'PNTS':\n        this.IFF.parsePoints(length);\n        break;\n\n      case 'VMAP':\n        this.IFF.parseVertexMapping(length);\n        break;\n\n      case 'POLS':\n        this.IFF.parsePolygonList(length);\n        break;\n\n      case 'TAGS':\n        this.IFF.parseTagStrings(length);\n        break;\n\n      case 'PTAG':\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n\n      case 'VMAD':\n        this.IFF.parseVertexMapping(length, true);\n        break;\n      // Misc CHUNKS\n\n      case 'DESC':\n        // Description Line\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n\n      case 'TEXT':\n      case 'CMNT':\n      case 'NCOM':\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n      // Envelope Form\n\n      case 'NAME':\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n      // Image Map Layer\n\n      case 'WRAP':\n        this.IFF.currentForm.wrap = {\n          w: this.IFF.reader.getUint16(),\n          h: this.IFF.reader.getUint16()\n        };\n        break;\n\n      case 'IMAG':\n        var index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n      // Texture Mapping Form\n\n      case 'OREF':\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n\n      case 'ROID':\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n      // Surface Blocks\n\n      case 'SSHN':\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n\n      case 'AOVN':\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n      // Nodal Blocks\n\n      case 'NSTA':\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n\n      case 'NRNM':\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n\n      case 'NNME':\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n      // Nodal Blocks : connections\n\n      case 'INME':\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINN':\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINM':\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IONM':\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'FNAM':\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n\n      case 'CHAN':\n        // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n        break;\n      // LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n\n      case 'SMAN':\n        var maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n      // LWO2: Basic Surface Parameters\n\n      case 'COLR':\n        this.IFF.currentSurface.attributes.Color = {\n          value: this.IFF.reader.getFloat32Array(3)\n        };\n        this.IFF.reader.skip(2); // VX: envelope\n\n        break;\n\n      case 'LUMI':\n        this.IFF.currentSurface.attributes.Luminosity = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SPEC':\n        this.IFF.currentSurface.attributes.Specular = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'DIFF':\n        this.IFF.currentSurface.attributes.Diffuse = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'REFL':\n        this.IFF.currentSurface.attributes.Reflection = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'GLOS':\n        this.IFF.currentSurface.attributes.Glossiness = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TRAN':\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'BUMP':\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SIDE':\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n\n      case 'RIMG':\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'RIND':\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TIMG':\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'IMAP':\n        this.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\n        break;\n\n      case 'IUVI':\n        // uv channel name\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n\n      case 'IUTL':\n        // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      case 'IVTL':\n        // heightWrappingMode\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n\n    if (blockID != 'FORM') {\n      this.IFF.debugger.node = 1;\n      this.IFF.debugger.nodeID = blockID;\n      this.IFF.debugger.log();\n    }\n\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n};\nexport { LWO3Parser };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/lwo/LWO3Parser.js"],"names":["LWO3Parser","IFFParser","IFF","prototype","constructor","parseBlock","debugger","offset","reader","closeForms","blockID","getIDTag","length","getUint32","dataOffset","parseForm","skipped","skip","currentNode","getInt32","parseObjectTag","parseLayer","parsePoints","parseVertexMapping","parsePolygonList","parseTagStrings","parsePolygonTagMapping","currentForm","description","getString","comment","channelName","wrap","w","getUint16","h","index","getVariableLengthIndex","imageIndex","referenceObject","referenceObjectID","currentSurface","surfaceShaderName","surfaceCustomAOVName","disabled","realName","refName","nodes","nodeName","push","inputNodeName","inputName","inputOutputName","fileName","textureChannel","maxSmoothingAngle","getFloat32","attributes","smooth","Color","value","getFloat32Array","Luminosity","Specular","Diffuse","Reflection","Glossiness","opacity","bumpStrength","side","reflectionMap","refractiveIndex","refractionMap","imageMapIndex","UVChannel","widthWrappingMode","heightWrappingMode","parseUnknownCHUNK","node","nodeID","log","currentFormEnd","parentForm"],"mappings":"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","sourcesContent":["function LWO3Parser(IFFParser) {\n  this.IFF = IFFParser;\n}\n\nLWO3Parser.prototype = {\n  constructor: LWO3Parser,\n  parseBlock: function () {\n    this.IFF.debugger.offset = this.IFF.reader.offset;\n    this.IFF.debugger.closeForms();\n    var blockID = this.IFF.reader.getIDTag();\n    var length = this.IFF.reader.getUint32(); // size of data in bytes\n\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n    this.IFF.debugger.length = length; // Data types may be found in either LWO2 OR LWO3 spec\n\n    switch (blockID) {\n      case 'FORM':\n        // form blocks may consist of sub -chunks or sub-forms\n        this.IFF.parseForm(length);\n        break;\n      // SKIPPED CHUNKS\n      // MISC skipped\n\n      case 'ICON': // Thumbnail Icon Image\n\n      case 'VMPA': // Vertex Map Parameter\n\n      case 'BBOX': // bounding box\n      // case 'VMMD':\n      // case 'VTYP':\n      // normal maps can be specified, normally on models imported from other applications. Currently ignored\n\n      case 'NORM': // ENVL FORM skipped\n\n      case 'PRE ':\n      case 'POST':\n      case 'KEY ':\n      case 'SPAN': // CLIP FORM skipped\n\n      case 'TIME':\n      case 'CLRS':\n      case 'CLRA':\n      case 'FILT':\n      case 'DITH':\n      case 'CONT':\n      case 'BRIT':\n      case 'SATR':\n      case 'HUE ':\n      case 'GAMM':\n      case 'NEGA':\n      case 'IFLT':\n      case 'PFLT': // Image Map Layer skipped\n\n      case 'PROJ':\n      case 'AXIS':\n      case 'AAST':\n      case 'PIXB':\n      case 'STCK': // Procedural Textures skipped\n\n      case 'VALU': // Gradient Textures skipped\n\n      case 'PNAM':\n      case 'INAM':\n      case 'GRST':\n      case 'GREN':\n      case 'GRPT':\n      case 'FKEY':\n      case 'IKEY': // Texture Mapping Form skipped\n\n      case 'CSYS': // Surface CHUNKs skipped\n\n      case 'OPAQ': // top level 'opacity' checkbox\n\n      case 'CMAP': // clip map\n      // Surface node CHUNKS skipped\n      // These mainly specify the node editor setup in LW\n\n      case 'NLOC':\n      case 'NZOM':\n      case 'NVER':\n      case 'NSRV':\n      case 'NCRD':\n      case 'NMOD':\n      case 'NSEL':\n      case 'NPRW':\n      case 'NPLA':\n      case 'VERS':\n      case 'ENUM':\n      case 'TAG ': // Car Material CHUNKS\n\n      case 'CGMD':\n      case 'CGTY':\n      case 'CGST':\n      case 'CGEN':\n      case 'CGTS':\n      case 'CGTE':\n      case 'OSMP':\n      case 'OMDE':\n      case 'OUTR':\n      case 'FLAG':\n      case 'TRNL':\n      case 'SHRP':\n      case 'RFOP':\n      case 'RSAN':\n      case 'TROP':\n      case 'RBLR':\n      case 'TBLR':\n      case 'CLRH':\n      case 'CLRF':\n      case 'ADTR':\n      case 'GLOW':\n      case 'LINE':\n      case 'ALPH':\n      case 'VCOL':\n      case 'ENAB':\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n      // Texture node chunks (not in spec)\n\n      case 'IPIX': // usePixelBlending\n\n      case 'IMIP': // useMipMaps\n\n      case 'IMOD': // imageBlendingMode\n\n      case 'AMOD': // unknown\n\n      case 'IINV': // imageInvertAlpha\n\n      case 'INCR': // imageInvertColor\n\n      case 'IAXS': // imageAxis ( for non-UV maps)\n\n      case 'IFOT': // imageFallofType\n\n      case 'ITIM': // timing for animated textures\n\n      case 'IWRL':\n      case 'IUTI':\n      case 'IINX':\n      case 'IINY':\n      case 'IINZ':\n      case 'IREF':\n        // possibly a VX for reused texture nodes\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n        break;\n\n      case 'OTAG':\n        this.IFF.parseObjectTag();\n        break;\n\n      case 'LAYR':\n        this.IFF.parseLayer(length);\n        break;\n\n      case 'PNTS':\n        this.IFF.parsePoints(length);\n        break;\n\n      case 'VMAP':\n        this.IFF.parseVertexMapping(length);\n        break;\n\n      case 'POLS':\n        this.IFF.parsePolygonList(length);\n        break;\n\n      case 'TAGS':\n        this.IFF.parseTagStrings(length);\n        break;\n\n      case 'PTAG':\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n\n      case 'VMAD':\n        this.IFF.parseVertexMapping(length, true);\n        break;\n      // Misc CHUNKS\n\n      case 'DESC':\n        // Description Line\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n\n      case 'TEXT':\n      case 'CMNT':\n      case 'NCOM':\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n      // Envelope Form\n\n      case 'NAME':\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n      // Image Map Layer\n\n      case 'WRAP':\n        this.IFF.currentForm.wrap = {\n          w: this.IFF.reader.getUint16(),\n          h: this.IFF.reader.getUint16()\n        };\n        break;\n\n      case 'IMAG':\n        var index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n      // Texture Mapping Form\n\n      case 'OREF':\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n\n      case 'ROID':\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n      // Surface Blocks\n\n      case 'SSHN':\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n\n      case 'AOVN':\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n      // Nodal Blocks\n\n      case 'NSTA':\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n\n      case 'NRNM':\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n\n      case 'NNME':\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n      // Nodal Blocks : connections\n\n      case 'INME':\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINN':\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINM':\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IONM':\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'FNAM':\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n\n      case 'CHAN':\n        // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n        break;\n      // LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n\n      case 'SMAN':\n        var maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n      // LWO2: Basic Surface Parameters\n\n      case 'COLR':\n        this.IFF.currentSurface.attributes.Color = {\n          value: this.IFF.reader.getFloat32Array(3)\n        };\n        this.IFF.reader.skip(2); // VX: envelope\n\n        break;\n\n      case 'LUMI':\n        this.IFF.currentSurface.attributes.Luminosity = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SPEC':\n        this.IFF.currentSurface.attributes.Specular = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'DIFF':\n        this.IFF.currentSurface.attributes.Diffuse = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'REFL':\n        this.IFF.currentSurface.attributes.Reflection = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'GLOS':\n        this.IFF.currentSurface.attributes.Glossiness = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TRAN':\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'BUMP':\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SIDE':\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n\n      case 'RIMG':\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'RIND':\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TIMG':\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'IMAP':\n        this.IFF.currentSurface.attributes.imageMapIndex = this.IFF.reader.getUint32();\n        break;\n\n      case 'IUVI':\n        // uv channel name\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n\n      case 'IUTL':\n        // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      case 'IVTL':\n        // heightWrappingMode\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n\n    if (blockID != 'FORM') {\n      this.IFF.debugger.node = 1;\n      this.IFF.debugger.nodeID = blockID;\n      this.IFF.debugger.log();\n    }\n\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n};\n\nexport { LWO3Parser };\n"]},"metadata":{},"sourceType":"module"}