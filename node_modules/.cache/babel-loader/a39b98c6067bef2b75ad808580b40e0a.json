{"ast":null,"code":"import { Object3D, Vector3, Quaternion } from 'three';\n\nvar Gyroscope = function Gyroscope() {\n  Object3D.call(this);\n};\n\nGyroscope.prototype = Object.create(Object3D.prototype);\nGyroscope.prototype.constructor = Gyroscope;\n\nGyroscope.prototype.updateMatrixWorld = function () {\n  var translationObject = new Vector3();\n  var quaternionObject = new Quaternion();\n  var scaleObject = new Vector3();\n  var translationWorld = new Vector3();\n  var quaternionWorld = new Quaternion();\n  var scaleWorld = new Vector3();\n  return function updateMatrixWorld(force) {\n    this.matrixAutoUpdate && this.updateMatrix(); // update matrixWorld\n\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.parent !== null) {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n        this.matrixWorld.decompose(translationWorld, quaternionWorld, scaleWorld);\n        this.matrix.decompose(translationObject, quaternionObject, scaleObject);\n        this.matrixWorld.compose(translationWorld, quaternionObject, scaleWorld);\n      } else {\n        this.matrixWorld.copy(this.matrix);\n      }\n\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    } // update children\n\n\n    for (var i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].updateMatrixWorld(force);\n    }\n  };\n}();\n\nexport { Gyroscope };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/misc/Gyroscope.js"],"names":["Object3D","Vector3","Quaternion","Gyroscope","call","prototype","Object","create","constructor","updateMatrixWorld","translationObject","quaternionObject","scaleObject","translationWorld","quaternionWorld","scaleWorld","force","matrixAutoUpdate","updateMatrix","matrixWorldNeedsUpdate","parent","matrixWorld","multiplyMatrices","matrix","decompose","compose","copy","i","l","children","length"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,UAA5B,QAA8C,OAA9C;;AAEA,IAAIC,SAAS,GAAG,SAAZA,SAAY,GAAY;AAC1BH,EAAAA,QAAQ,CAACI,IAAT,CAAc,IAAd;AACD,CAFD;;AAIAD,SAAS,CAACE,SAAV,GAAsBC,MAAM,CAACC,MAAP,CAAcP,QAAQ,CAACK,SAAvB,CAAtB;AACAF,SAAS,CAACE,SAAV,CAAoBG,WAApB,GAAkCL,SAAlC;;AAEAA,SAAS,CAACE,SAAV,CAAoBI,iBAApB,GAAwC,YAAY;AAClD,MAAIC,iBAAiB,GAAG,IAAIT,OAAJ,EAAxB;AACA,MAAIU,gBAAgB,GAAG,IAAIT,UAAJ,EAAvB;AACA,MAAIU,WAAW,GAAG,IAAIX,OAAJ,EAAlB;AACA,MAAIY,gBAAgB,GAAG,IAAIZ,OAAJ,EAAvB;AACA,MAAIa,eAAe,GAAG,IAAIZ,UAAJ,EAAtB;AACA,MAAIa,UAAU,GAAG,IAAId,OAAJ,EAAjB;AACA,SAAO,SAASQ,iBAAT,CAA2BO,KAA3B,EAAkC;AACvC,SAAKC,gBAAL,IAAyB,KAAKC,YAAL,EAAzB,CADuC,CACO;;AAE9C,QAAI,KAAKC,sBAAL,IAA+BH,KAAnC,EAA0C;AACxC,UAAI,KAAKI,MAAL,KAAgB,IAApB,EAA0B;AACxB,aAAKC,WAAL,CAAiBC,gBAAjB,CAAkC,KAAKF,MAAL,CAAYC,WAA9C,EAA2D,KAAKE,MAAhE;AACA,aAAKF,WAAL,CAAiBG,SAAjB,CAA2BX,gBAA3B,EAA6CC,eAA7C,EAA8DC,UAA9D;AACA,aAAKQ,MAAL,CAAYC,SAAZ,CAAsBd,iBAAtB,EAAyCC,gBAAzC,EAA2DC,WAA3D;AACA,aAAKS,WAAL,CAAiBI,OAAjB,CAAyBZ,gBAAzB,EAA2CF,gBAA3C,EAA6DI,UAA7D;AACD,OALD,MAKO;AACL,aAAKM,WAAL,CAAiBK,IAAjB,CAAsB,KAAKH,MAA3B;AACD;;AAED,WAAKJ,sBAAL,GAA8B,KAA9B;AACAH,MAAAA,KAAK,GAAG,IAAR;AACD,KAfsC,CAerC;;;AAGF,SAAK,IAAIW,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAKC,QAAL,CAAcC,MAAlC,EAA0CH,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,WAAKE,QAAL,CAAcF,CAAd,EAAiBlB,iBAAjB,CAAmCO,KAAnC;AACD;AACF,GArBD;AAsBD,CA7BuC,EAAxC;;AA+BA,SAASb,SAAT","sourcesContent":["import { Object3D, Vector3, Quaternion } from 'three';\n\nvar Gyroscope = function () {\n  Object3D.call(this);\n};\n\nGyroscope.prototype = Object.create(Object3D.prototype);\nGyroscope.prototype.constructor = Gyroscope;\n\nGyroscope.prototype.updateMatrixWorld = function () {\n  var translationObject = new Vector3();\n  var quaternionObject = new Quaternion();\n  var scaleObject = new Vector3();\n  var translationWorld = new Vector3();\n  var quaternionWorld = new Quaternion();\n  var scaleWorld = new Vector3();\n  return function updateMatrixWorld(force) {\n    this.matrixAutoUpdate && this.updateMatrix(); // update matrixWorld\n\n    if (this.matrixWorldNeedsUpdate || force) {\n      if (this.parent !== null) {\n        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n        this.matrixWorld.decompose(translationWorld, quaternionWorld, scaleWorld);\n        this.matrix.decompose(translationObject, quaternionObject, scaleObject);\n        this.matrixWorld.compose(translationWorld, quaternionObject, scaleWorld);\n      } else {\n        this.matrixWorld.copy(this.matrix);\n      }\n\n      this.matrixWorldNeedsUpdate = false;\n      force = true;\n    } // update children\n\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].updateMatrixWorld(force);\n    }\n  };\n}();\n\nexport { Gyroscope };\n"]},"metadata":{},"sourceType":"module"}