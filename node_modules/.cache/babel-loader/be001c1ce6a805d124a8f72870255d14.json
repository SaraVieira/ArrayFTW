{"ast":null,"code":"import { Vector2 } from 'three';\n/**\n * NVIDIA FXAA by Timothy Lottes\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\n * - WebGL port by @supereggbert\n * http://www.glge.org/demos/fxaa/\n */\n\nvar FXAAShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['precision highp float;', '', 'uniform sampler2D tDiffuse;', '', 'uniform vec2 resolution;', '', 'varying vec2 vUv;', '', '// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)', '', '//----------------------------------------------------------------------------------', '// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag', '// SDK Version: v3.00', '// Email:       gameworks@nvidia.com', '// Site:        http://developer.nvidia.com/', '//', '// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.', '//', '// Redistribution and use in source and binary forms, with or without', '// modification, are permitted provided that the following conditions', '// are met:', '//  * Redistributions of source code must retain the above copyright', '//    notice, this list of conditions and the following disclaimer.', '//  * Redistributions in binary form must reproduce the above copyright', '//    notice, this list of conditions and the following disclaimer in the', '//    documentation and/or other materials provided with the distribution.', '//  * Neither the name of NVIDIA CORPORATION nor the names of its', '//    contributors may be used to endorse or promote products derived', '//    from this software without specific prior written permission.', '//', \"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\", '// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE', '// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR', '// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR', '// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,', '// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,', '// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR', '// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY', '// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', '// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', '// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.', '//', '//----------------------------------------------------------------------------------', '', '#define FXAA_PC 1', '#define FXAA_GLSL_100 1', '#define FXAA_QUALITY_PRESET 12', '', '#define FXAA_GREEN_AS_LUMA 1', '', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_PC_CONSOLE', '    //', '    // The console algorithm for PC is included', '    // for developers targeting really low spec machines.', '    // Likely better to just run FXAA_PC, and use a really low preset.', '    //', '    #define FXAA_PC_CONSOLE 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_GLSL_120', '    #define FXAA_GLSL_120 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_GLSL_130', '    #define FXAA_GLSL_130 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_HLSL_3', '    #define FXAA_HLSL_3 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_HLSL_4', '    #define FXAA_HLSL_4 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_HLSL_5', '    #define FXAA_HLSL_5 0', '#endif', '/*==========================================================================*/', '#ifndef FXAA_GREEN_AS_LUMA', '    //', '    // For those using non-linear color,', '    // and either not able to get luma in alpha, or not wanting to,', '    // this enables FXAA to run using green as a proxy for luma.', '    // So with this enabled, no need to pack luma in alpha.', '    //', '    // This will turn off AA on anything which lacks some amount of green.', '    // Pure red and blue or combination of only R and B, will get no AA.', '    //', '    // Might want to lower the settings for both,', '    //    fxaaConsoleEdgeThresholdMin', '    //    fxaaQualityEdgeThresholdMin', '    // In order to insure AA does not get turned off on colors', '    // which contain a minor amount of green.', '    //', '    // 1 = On.', '    // 0 = Off.', '    //', '    #define FXAA_GREEN_AS_LUMA 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_EARLY_EXIT', '    //', \"    // Controls algorithm's early exit path.\", '    // On PS3 turning this ON adds 2 cycles to the shader.', '    // On 360 turning this OFF adds 10ths of a millisecond to the shader.', '    // Turning this off on console will result in a more blurry image.', '    // So this defaults to on.', '    //', '    // 1 = On.', '    // 0 = Off.', '    //', '    #define FXAA_EARLY_EXIT 1', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_DISCARD', '    //', '    // Only valid for PC OpenGL currently.', '    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.', '    //', \"    // 1 = Use discard on pixels which don't need AA.\", '    //     For APIs which enable concurrent TEX+ROP from same surface.', \"    // 0 = Return unchanged color on pixels which don't need AA.\", '    //', '    #define FXAA_DISCARD 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_FAST_PIXEL_OFFSET', '    //', '    // Used for GLSL 120 only.', '    //', '    // 1 = GL API supports fast pixel offsets', '    // 0 = do not use fast pixel offsets', '    //', '    #ifdef GL_EXT_gpu_shader4', '        #define FXAA_FAST_PIXEL_OFFSET 1', '    #endif', '    #ifdef GL_NV_gpu_shader5', '        #define FXAA_FAST_PIXEL_OFFSET 1', '    #endif', '    #ifdef GL_ARB_gpu_shader5', '        #define FXAA_FAST_PIXEL_OFFSET 1', '    #endif', '    #ifndef FXAA_FAST_PIXEL_OFFSET', '        #define FXAA_FAST_PIXEL_OFFSET 0', '    #endif', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_GATHER4_ALPHA', '    //', '    // 1 = API supports gather4 on alpha channel.', '    // 0 = API does not support gather4 on alpha channel.', '    //', '    #if (FXAA_HLSL_5 == 1)', '        #define FXAA_GATHER4_ALPHA 1', '    #endif', '    #ifdef GL_ARB_gpu_shader5', '        #define FXAA_GATHER4_ALPHA 1', '    #endif', '    #ifdef GL_NV_gpu_shader5', '        #define FXAA_GATHER4_ALPHA 1', '    #endif', '    #ifndef FXAA_GATHER4_ALPHA', '        #define FXAA_GATHER4_ALPHA 0', '    #endif', '#endif', '', '', '/*============================================================================', '                        FXAA QUALITY - TUNING KNOBS', '------------------------------------------------------------------------------', 'NOTE the other tuning knobs are now in the shader function inputs!', '============================================================================*/', '#ifndef FXAA_QUALITY_PRESET', '    //', '    // Choose the quality preset.', '    // This needs to be compiled into the shader as it effects code.', '    // Best option to include multiple presets is to', '    // in each shader define the preset, then include this file.', '    //', '    // OPTIONS', '    // -----------------------------------------------------------------------', '    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)', '    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)', '    // 39       - no dither, very expensive', '    //', '    // NOTES', '    // -----------------------------------------------------------------------', '    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)', '    // 13 = about same speed as FXAA 3.9 and better than 12', '    // 23 = closest to FXAA 3.9 visually and performance wise', '    //  _ = the lowest digit is directly related to performance', '    // _  = the highest digit is directly related to style', '    //', '    #define FXAA_QUALITY_PRESET 12', '#endif', '', '', '/*============================================================================', '', '                           FXAA QUALITY - PRESETS', '', '============================================================================*/', '', '/*============================================================================', '                     FXAA QUALITY - MEDIUM DITHER PRESETS', '============================================================================*/', '#if (FXAA_QUALITY_PRESET == 10)', '    #define FXAA_QUALITY_PS 3', '    #define FXAA_QUALITY_P0 1.5', '    #define FXAA_QUALITY_P1 3.0', '    #define FXAA_QUALITY_P2 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 11)', '    #define FXAA_QUALITY_PS 4', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 3.0', '    #define FXAA_QUALITY_P3 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 12)', '    #define FXAA_QUALITY_PS 5', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 4.0', '    #define FXAA_QUALITY_P4 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 13)', '    #define FXAA_QUALITY_PS 6', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 4.0', '    #define FXAA_QUALITY_P5 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 14)', '    #define FXAA_QUALITY_PS 7', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 4.0', '    #define FXAA_QUALITY_P6 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 15)', '    #define FXAA_QUALITY_PS 8', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 4.0', '    #define FXAA_QUALITY_P7 12.0', '#endif', '', '/*============================================================================', '                     FXAA QUALITY - LOW DITHER PRESETS', '============================================================================*/', '#if (FXAA_QUALITY_PRESET == 20)', '    #define FXAA_QUALITY_PS 3', '    #define FXAA_QUALITY_P0 1.5', '    #define FXAA_QUALITY_P1 2.0', '    #define FXAA_QUALITY_P2 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 21)', '    #define FXAA_QUALITY_PS 4', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 22)', '    #define FXAA_QUALITY_PS 5', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 23)', '    #define FXAA_QUALITY_PS 6', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 24)', '    #define FXAA_QUALITY_PS 7', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 3.0', '    #define FXAA_QUALITY_P6 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 25)', '    #define FXAA_QUALITY_PS 8', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 4.0', '    #define FXAA_QUALITY_P7 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 26)', '    #define FXAA_QUALITY_PS 9', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 4.0', '    #define FXAA_QUALITY_P8 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 27)', '    #define FXAA_QUALITY_PS 10', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 4.0', '    #define FXAA_QUALITY_P9 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 28)', '    #define FXAA_QUALITY_PS 11', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 2.0', '    #define FXAA_QUALITY_P9 4.0', '    #define FXAA_QUALITY_P10 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 29)', '    #define FXAA_QUALITY_PS 12', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 2.0', '    #define FXAA_QUALITY_P9 2.0', '    #define FXAA_QUALITY_P10 4.0', '    #define FXAA_QUALITY_P11 8.0', '#endif', '', '/*============================================================================', '                     FXAA QUALITY - EXTREME QUALITY', '============================================================================*/', '#if (FXAA_QUALITY_PRESET == 39)', '    #define FXAA_QUALITY_PS 12', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.0', '    #define FXAA_QUALITY_P2 1.0', '    #define FXAA_QUALITY_P3 1.0', '    #define FXAA_QUALITY_P4 1.0', '    #define FXAA_QUALITY_P5 1.5', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 2.0', '    #define FXAA_QUALITY_P9 2.0', '    #define FXAA_QUALITY_P10 4.0', '    #define FXAA_QUALITY_P11 8.0', '#endif', '', '', '', '/*============================================================================', '', '                                API PORTING', '', '============================================================================*/', '#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)', '    #define FxaaBool bool', '    #define FxaaDiscard discard', '    #define FxaaFloat float', '    #define FxaaFloat2 vec2', '    #define FxaaFloat3 vec3', '    #define FxaaFloat4 vec4', '    #define FxaaHalf float', '    #define FxaaHalf2 vec2', '    #define FxaaHalf3 vec3', '    #define FxaaHalf4 vec4', '    #define FxaaInt2 ivec2', '    #define FxaaSat(x) clamp(x, 0.0, 1.0)', '    #define FxaaTex sampler2D', '#else', '    #define FxaaBool bool', '    #define FxaaDiscard clip(-1)', '    #define FxaaFloat float', '    #define FxaaFloat2 float2', '    #define FxaaFloat3 float3', '    #define FxaaFloat4 float4', '    #define FxaaHalf half', '    #define FxaaHalf2 half2', '    #define FxaaHalf3 half3', '    #define FxaaHalf4 half4', '    #define FxaaSat(x) saturate(x)', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_GLSL_100 == 1)', '  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)', '  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_GLSL_120 == 1)', '    // Requires,', '    //  #version 120', '    // And at least,', '    //  #extension GL_EXT_gpu_shader4 : enable', '    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)', '    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)', '    #if (FXAA_FAST_PIXEL_OFFSET == 1)', '        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)', '    #else', '        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)', '    #endif', '    #if (FXAA_GATHER4_ALPHA == 1)', '        // use #extension GL_ARB_gpu_shader5 : enable', '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)', '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)', '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)', '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)', '    #endif', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_GLSL_130 == 1)', '    // Requires \"#version 130\" or better', '    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)', '    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)', '    #if (FXAA_GATHER4_ALPHA == 1)', '        // use #extension GL_ARB_gpu_shader5 : enable', '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)', '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)', '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)', '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)', '    #endif', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_HLSL_3 == 1)', '    #define FxaaInt2 float2', '    #define FxaaTex sampler2D', '    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))', '    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_HLSL_4 == 1)', '    #define FxaaInt2 int2', '    struct FxaaTex { SamplerState smpl; Texture2D tex; };', '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)', '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_HLSL_5 == 1)', '    #define FxaaInt2 int2', '    struct FxaaTex { SamplerState smpl; Texture2D tex; };', '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)', '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)', '    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)', '    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)', '    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)', '    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)', '#endif', '', '', '/*============================================================================', '                   GREEN AS LUMA OPTION SUPPORT FUNCTION', '============================================================================*/', '#if (FXAA_GREEN_AS_LUMA == 0)', '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }', '#else', '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }', '#endif', '', '', '', '', '/*============================================================================', '', '                             FXAA3 QUALITY - PC', '', '============================================================================*/', '#if (FXAA_PC == 1)', '/*--------------------------------------------------------------------------*/', 'FxaaFloat4 FxaaPixelShader(', '    //', '    // Use noperspective interpolation here (turn off perspective interpolation).', '    // {xy} = center of pixel', '    FxaaFloat2 pos,', '    //', '    // Used only for FXAA Console, and not used on the 360 version.', '    // Use noperspective interpolation here (turn off perspective interpolation).', '    // {xy_} = upper left of pixel', '    // {_zw} = lower right of pixel', '    FxaaFloat4 fxaaConsolePosPos,', '    //', '    // Input color texture.', '    // {rgb_} = color in linear or perceptual color space', '    // if (FXAA_GREEN_AS_LUMA == 0)', '    //     {__a} = luma in perceptual color space (not linear)', '    FxaaTex tex,', '    //', '    // Only used on the optimized 360 version of FXAA Console.', '    // For everything but 360, just use the same input here as for \"tex\".', '    // For 360, same texture, just alias with a 2nd sampler.', '    // This sampler needs to have an exponent bias of -1.', '    FxaaTex fxaaConsole360TexExpBiasNegOne,', '    //', '    // Only used on the optimized 360 version of FXAA Console.', '    // For everything but 360, just use the same input here as for \"tex\".', '    // For 360, same texture, just alias with a 3nd sampler.', '    // This sampler needs to have an exponent bias of -2.', '    FxaaTex fxaaConsole360TexExpBiasNegTwo,', '    //', '    // Only used on FXAA Quality.', '    // This must be from a constant/uniform.', '    // {x_} = 1.0/screenWidthInPixels', '    // {_y} = 1.0/screenHeightInPixels', '    FxaaFloat2 fxaaQualityRcpFrame,', '    //', '    // Only used on FXAA Console.', '    // This must be from a constant/uniform.', '    // This effects sub-pixel AA quality and inversely sharpness.', '    //   Where N ranges between,', '    //     N = 0.50 (default)', '    //     N = 0.33 (sharper)', '    // {x__} = -N/screenWidthInPixels', '    // {_y_} = -N/screenHeightInPixels', '    // {_z_} =  N/screenWidthInPixels', '    // {__w} =  N/screenHeightInPixels', '    FxaaFloat4 fxaaConsoleRcpFrameOpt,', '    //', '    // Only used on FXAA Console.', '    // Not used on 360, but used on PS3 and PC.', '    // This must be from a constant/uniform.', '    // {x__} = -2.0/screenWidthInPixels', '    // {_y_} = -2.0/screenHeightInPixels', '    // {_z_} =  2.0/screenWidthInPixels', '    // {__w} =  2.0/screenHeightInPixels', '    FxaaFloat4 fxaaConsoleRcpFrameOpt2,', '    //', '    // Only used on FXAA Console.', '    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.', '    // This must be from a constant/uniform.', '    // {x__} =  8.0/screenWidthInPixels', '    // {_y_} =  8.0/screenHeightInPixels', '    // {_z_} = -4.0/screenWidthInPixels', '    // {__w} = -4.0/screenHeightInPixels', '    FxaaFloat4 fxaaConsole360RcpFrameOpt2,', '    //', '    // Only used on FXAA Quality.', '    // This used to be the FXAA_QUALITY_SUBPIX define.', '    // It is here now to allow easier tuning.', '    // Choose the amount of sub-pixel aliasing removal.', '    // This can effect sharpness.', '    //   1.00 - upper limit (softer)', '    //   0.75 - default amount of filtering', '    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)', '    //   0.25 - almost off', '    //   0.00 - completely off', '    FxaaFloat fxaaQualitySubpix,', '    //', '    // Only used on FXAA Quality.', '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.', '    // It is here now to allow easier tuning.', '    // The minimum amount of local contrast required to apply algorithm.', '    //   0.333 - too little (faster)', '    //   0.250 - low quality', '    //   0.166 - default', '    //   0.125 - high quality', '    //   0.063 - overkill (slower)', '    FxaaFloat fxaaQualityEdgeThreshold,', '    //', '    // Only used on FXAA Quality.', '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.', '    // It is here now to allow easier tuning.', '    // Trims the algorithm from processing darks.', '    //   0.0833 - upper limit (default, the start of visible unfiltered edges)', '    //   0.0625 - high quality (faster)', '    //   0.0312 - visible limit (slower)', '    // Special notes when using FXAA_GREEN_AS_LUMA,', '    //   Likely want to set this to zero.', '    //   As colors that are mostly not-green', '    //   will appear very dark in the green channel!', '    //   Tune by looking at mostly non-green content,', '    //   then start at zero and increase until aliasing is a problem.', '    FxaaFloat fxaaQualityEdgeThresholdMin,', '    //', '    // Only used on FXAA Console.', '    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.', '    // It is here now to allow easier tuning.', '    // This does not effect PS3, as this needs to be compiled in.', '    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.', '    //   Due to the PS3 being ALU bound,', '    //   there are only three safe values here: 2 and 4 and 8.', '    //   These options use the shaders ability to a free *|/ by 2|4|8.', '    // For all other platforms can be a non-power of two.', '    //   8.0 is sharper (default!!!)', '    //   4.0 is softer', '    //   2.0 is really soft (good only for vector graphics inputs)', '    FxaaFloat fxaaConsoleEdgeSharpness,', '    //', '    // Only used on FXAA Console.', '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.', '    // It is here now to allow easier tuning.', '    // This does not effect PS3, as this needs to be compiled in.', '    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.', '    //   Due to the PS3 being ALU bound,', '    //   there are only two safe values here: 1/4 and 1/8.', '    //   These options use the shaders ability to a free *|/ by 2|4|8.', '    // The console setting has a different mapping than the quality setting.', '    // Other platforms can use other values.', '    //   0.125 leaves less aliasing, but is softer (default!!!)', '    //   0.25 leaves more aliasing, and is sharper', '    FxaaFloat fxaaConsoleEdgeThreshold,', '    //', '    // Only used on FXAA Console.', '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.', '    // It is here now to allow easier tuning.', '    // Trims the algorithm from processing darks.', '    // The console setting has a different mapping than the quality setting.', '    // This only applies when FXAA_EARLY_EXIT is 1.', '    // This does not apply to PS3,', '    // PS3 was simplified to avoid more shader instructions.', '    //   0.06 - faster but more aliasing in darks', '    //   0.05 - default', '    //   0.04 - slower and less aliasing in darks', '    // Special notes when using FXAA_GREEN_AS_LUMA,', '    //   Likely want to set this to zero.', '    //   As colors that are mostly not-green', '    //   will appear very dark in the green channel!', '    //   Tune by looking at mostly non-green content,', '    //   then start at zero and increase until aliasing is a problem.', '    FxaaFloat fxaaConsoleEdgeThresholdMin,', '    //', '    // Extra constants for 360 FXAA Console only.', '    // Use zeros or anything else for other platforms.', '    // These must be in physical constant registers and NOT immediates.', '    // Immediates will result in compiler un-optimizing.', '    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)', '    FxaaFloat4 fxaaConsole360ConstDir', ') {', '/*--------------------------------------------------------------------------*/', '    FxaaFloat2 posM;', '    posM.x = pos.x;', '    posM.y = pos.y;', '    #if (FXAA_GATHER4_ALPHA == 1)', '        #if (FXAA_DISCARD == 0)', '            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);', '            #if (FXAA_GREEN_AS_LUMA == 0)', '                #define lumaM rgbyM.w', '            #else', '                #define lumaM rgbyM.y', '            #endif', '        #endif', '        #if (FXAA_GREEN_AS_LUMA == 0)', '            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);', '            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));', '        #else', '            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);', '            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));', '        #endif', '        #if (FXAA_DISCARD == 1)', '            #define lumaM luma4A.w', '        #endif', '        #define lumaE luma4A.z', '        #define lumaS luma4A.x', '        #define lumaSE luma4A.y', '        #define lumaNW luma4B.w', '        #define lumaN luma4B.z', '        #define lumaW luma4B.x', '    #else', '        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);', '        #if (FXAA_GREEN_AS_LUMA == 0)', '            #define lumaM rgbyM.w', '        #else', '            #define lumaM rgbyM.y', '        #endif', '        #if (FXAA_GLSL_100 == 1)', '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));', '        #else', '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));', '        #endif', '    #endif', '/*--------------------------------------------------------------------------*/', '    FxaaFloat maxSM = max(lumaS, lumaM);', '    FxaaFloat minSM = min(lumaS, lumaM);', '    FxaaFloat maxESM = max(lumaE, maxSM);', '    FxaaFloat minESM = min(lumaE, minSM);', '    FxaaFloat maxWN = max(lumaN, lumaW);', '    FxaaFloat minWN = min(lumaN, lumaW);', '    FxaaFloat rangeMax = max(maxWN, maxESM);', '    FxaaFloat rangeMin = min(minWN, minESM);', '    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;', '    FxaaFloat range = rangeMax - rangeMin;', '    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);', '    FxaaBool earlyExit = range < rangeMaxClamped;', '/*--------------------------------------------------------------------------*/', '    if(earlyExit)', '        #if (FXAA_DISCARD == 1)', '            FxaaDiscard;', '        #else', '            return rgbyM;', '        #endif', '/*--------------------------------------------------------------------------*/', '    #if (FXAA_GATHER4_ALPHA == 0)', '        #if (FXAA_GLSL_100 == 1)', '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));', '        #else', '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));', '        #endif', '    #else', '        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));', '        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));', '    #endif', '/*--------------------------------------------------------------------------*/', '    FxaaFloat lumaNS = lumaN + lumaS;', '    FxaaFloat lumaWE = lumaW + lumaE;', '    FxaaFloat subpixRcpRange = 1.0/range;', '    FxaaFloat subpixNSWE = lumaNS + lumaWE;', '    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;', '    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat lumaNESE = lumaNE + lumaSE;', '    FxaaFloat lumaNWNE = lumaNW + lumaNE;', '    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;', '    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat lumaNWSW = lumaNW + lumaSW;', '    FxaaFloat lumaSWSE = lumaSW + lumaSE;', '    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);', '    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);', '    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;', '    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;', '    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;', '    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;', '    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;', '    FxaaBool horzSpan = edgeHorz >= edgeVert;', '    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;', '/*--------------------------------------------------------------------------*/', '    if(!horzSpan) lumaN = lumaW;', '    if(!horzSpan) lumaS = lumaE;', '    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;', '    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat gradientN = lumaN - lumaM;', '    FxaaFloat gradientS = lumaS - lumaM;', '    FxaaFloat lumaNN = lumaN + lumaM;', '    FxaaFloat lumaSS = lumaS + lumaM;', '    FxaaBool pairN = abs(gradientN) >= abs(gradientS);', '    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));', '    if(pairN) lengthSign = -lengthSign;', '    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);', '/*--------------------------------------------------------------------------*/', '    FxaaFloat2 posB;', '    posB.x = posM.x;', '    posB.y = posM.y;', '    FxaaFloat2 offNP;', '    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;', '    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;', '    if(!horzSpan) posB.x += lengthSign * 0.5;', '    if( horzSpan) posB.y += lengthSign * 0.5;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat2 posN;', '    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;', '    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;', '    FxaaFloat2 posP;', '    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;', '    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;', '    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;', '    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));', '    FxaaFloat subpixE = subpixC * subpixC;', '    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));', '/*--------------------------------------------------------------------------*/', '    if(!pairN) lumaNN = lumaSS;', '    FxaaFloat gradientScaled = gradient * 1.0/4.0;', '    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;', '    FxaaFloat subpixF = subpixD * subpixE;', '    FxaaBool lumaMLTZero = lumaMM < 0.0;', '/*--------------------------------------------------------------------------*/', '    lumaEndN -= lumaNN * 0.5;', '    lumaEndP -= lumaNN * 0.5;', '    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;', '    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;', '    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;', '    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;', '    FxaaBool doneNP = (!doneN) || (!doneP);', '    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;', '    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;', '/*--------------------------------------------------------------------------*/', '    if(doneNP) {', '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '        doneN = abs(lumaEndN) >= gradientScaled;', '        doneP = abs(lumaEndP) >= gradientScaled;', '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;', '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;', '        doneNP = (!doneN) || (!doneP);', '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;', '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;', '/*--------------------------------------------------------------------------*/', '        #if (FXAA_QUALITY_PS > 3)', '        if(doneNP) {', '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '            doneN = abs(lumaEndN) >= gradientScaled;', '            doneP = abs(lumaEndP) >= gradientScaled;', '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;', '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;', '            doneNP = (!doneN) || (!doneP);', '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;', '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;', '/*--------------------------------------------------------------------------*/', '            #if (FXAA_QUALITY_PS > 4)', '            if(doneNP) {', '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                doneN = abs(lumaEndN) >= gradientScaled;', '                doneP = abs(lumaEndP) >= gradientScaled;', '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;', '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;', '                doneNP = (!doneN) || (!doneP);', '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;', '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;', '/*--------------------------------------------------------------------------*/', '                #if (FXAA_QUALITY_PS > 5)', '                if(doneNP) {', '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                    doneN = abs(lumaEndN) >= gradientScaled;', '                    doneP = abs(lumaEndP) >= gradientScaled;', '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;', '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;', '                    doneNP = (!doneN) || (!doneP);', '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;', '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;', '/*--------------------------------------------------------------------------*/', '                    #if (FXAA_QUALITY_PS > 6)', '                    if(doneNP) {', '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                        doneN = abs(lumaEndN) >= gradientScaled;', '                        doneP = abs(lumaEndP) >= gradientScaled;', '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;', '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;', '                        doneNP = (!doneN) || (!doneP);', '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;', '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;', '/*--------------------------------------------------------------------------*/', '                        #if (FXAA_QUALITY_PS > 7)', '                        if(doneNP) {', '                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                            doneN = abs(lumaEndN) >= gradientScaled;', '                            doneP = abs(lumaEndP) >= gradientScaled;', '                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;', '                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;', '                            doneNP = (!doneN) || (!doneP);', '                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;', '                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;', '/*--------------------------------------------------------------------------*/', '    #if (FXAA_QUALITY_PS > 8)', '    if(doneNP) {', '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '        doneN = abs(lumaEndN) >= gradientScaled;', '        doneP = abs(lumaEndP) >= gradientScaled;', '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;', '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;', '        doneNP = (!doneN) || (!doneP);', '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;', '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;', '/*--------------------------------------------------------------------------*/', '        #if (FXAA_QUALITY_PS > 9)', '        if(doneNP) {', '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '            doneN = abs(lumaEndN) >= gradientScaled;', '            doneP = abs(lumaEndP) >= gradientScaled;', '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;', '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;', '            doneNP = (!doneN) || (!doneP);', '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;', '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;', '/*--------------------------------------------------------------------------*/', '            #if (FXAA_QUALITY_PS > 10)', '            if(doneNP) {', '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                doneN = abs(lumaEndN) >= gradientScaled;', '                doneP = abs(lumaEndP) >= gradientScaled;', '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;', '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;', '                doneNP = (!doneN) || (!doneP);', '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;', '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;', '/*--------------------------------------------------------------------------*/', '                #if (FXAA_QUALITY_PS > 11)', '                if(doneNP) {', '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                    doneN = abs(lumaEndN) >= gradientScaled;', '                    doneP = abs(lumaEndP) >= gradientScaled;', '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;', '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;', '                    doneNP = (!doneN) || (!doneP);', '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;', '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;', '/*--------------------------------------------------------------------------*/', '                    #if (FXAA_QUALITY_PS > 12)', '                    if(doneNP) {', '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                        doneN = abs(lumaEndN) >= gradientScaled;', '                        doneP = abs(lumaEndP) >= gradientScaled;', '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;', '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;', '                        doneNP = (!doneN) || (!doneP);', '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;', '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;', '/*--------------------------------------------------------------------------*/', '                    }', '                    #endif', '/*--------------------------------------------------------------------------*/', '                }', '                #endif', '/*--------------------------------------------------------------------------*/', '            }', '            #endif', '/*--------------------------------------------------------------------------*/', '        }', '        #endif', '/*--------------------------------------------------------------------------*/', '    }', '    #endif', '/*--------------------------------------------------------------------------*/', '                        }', '                        #endif', '/*--------------------------------------------------------------------------*/', '                    }', '                    #endif', '/*--------------------------------------------------------------------------*/', '                }', '                #endif', '/*--------------------------------------------------------------------------*/', '            }', '            #endif', '/*--------------------------------------------------------------------------*/', '        }', '        #endif', '/*--------------------------------------------------------------------------*/', '    }', '/*--------------------------------------------------------------------------*/', '    FxaaFloat dstN = posM.x - posN.x;', '    FxaaFloat dstP = posP.x - posM.x;', '    if(!horzSpan) dstN = posM.y - posN.y;', '    if(!horzSpan) dstP = posP.y - posM.y;', '/*--------------------------------------------------------------------------*/', '    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;', '    FxaaFloat spanLength = (dstP + dstN);', '    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;', '    FxaaFloat spanLengthRcp = 1.0/spanLength;', '/*--------------------------------------------------------------------------*/', '    FxaaBool directionN = dstN < dstP;', '    FxaaFloat dst = min(dstN, dstP);', '    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;', '    FxaaFloat subpixG = subpixF * subpixF;', '    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;', '    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;', '    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);', '    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;', '    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;', '    #if (FXAA_DISCARD == 1)', '        return FxaaTexTop(tex, posM);', '    #else', '        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);', '    #endif', '}', '/*==========================================================================*/', '#endif', '', 'void main() {', '  gl_FragColor = FxaaPixelShader(', '    vUv,', '    vec4(0.0),', '    tDiffuse,', '    tDiffuse,', '    tDiffuse,', '    resolution,', '    vec4(0.0),', '    vec4(0.0),', '    vec4(0.0),', '    0.75,', '    0.166,', '    0.0833,', '    0.0,', '    0.0,', '    0.0,', '    vec4(0.0)', '  );', '', '  // TODO avoid querying texture twice for same texel', '  gl_FragColor.a = texture2D(tDiffuse, vUv).a;', '}'].join('\\n')\n};\nexport { FXAAShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/FXAAShader.js"],"names":["Vector2","FXAAShader","uniforms","tDiffuse","value","resolution","vertexShader","join","fragmentShader"],"mappings":"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","sourcesContent":["import { Vector2 } from 'three';\n\n/**\n * NVIDIA FXAA by Timothy Lottes\n * http://timothylottes.blogspot.com/2011/06/fxaa3-source-released.html\n * - WebGL port by @supereggbert\n * http://www.glge.org/demos/fxaa/\n */\n\nvar FXAAShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['precision highp float;', '', 'uniform sampler2D tDiffuse;', '', 'uniform vec2 resolution;', '', 'varying vec2 vUv;', '', '// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)', '', '//----------------------------------------------------------------------------------', '// File:        es3-keplerFXAAassetsshaders/FXAA_DefaultES.frag', '// SDK Version: v3.00', '// Email:       gameworks@nvidia.com', '// Site:        http://developer.nvidia.com/', '//', '// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.', '//', '// Redistribution and use in source and binary forms, with or without', '// modification, are permitted provided that the following conditions', '// are met:', '//  * Redistributions of source code must retain the above copyright', '//    notice, this list of conditions and the following disclaimer.', '//  * Redistributions in binary form must reproduce the above copyright', '//    notice, this list of conditions and the following disclaimer in the', '//    documentation and/or other materials provided with the distribution.', '//  * Neither the name of NVIDIA CORPORATION nor the names of its', '//    contributors may be used to endorse or promote products derived', '//    from this software without specific prior written permission.', '//', \"// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\", '// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE', '// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR', '// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR', '// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,', '// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,', '// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR', '// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY', '// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT', '// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE', '// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.', '//', '//----------------------------------------------------------------------------------', '', '#define FXAA_PC 1', '#define FXAA_GLSL_100 1', '#define FXAA_QUALITY_PRESET 12', '', '#define FXAA_GREEN_AS_LUMA 1', '', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_PC_CONSOLE', '    //', '    // The console algorithm for PC is included', '    // for developers targeting really low spec machines.', '    // Likely better to just run FXAA_PC, and use a really low preset.', '    //', '    #define FXAA_PC_CONSOLE 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_GLSL_120', '    #define FXAA_GLSL_120 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_GLSL_130', '    #define FXAA_GLSL_130 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_HLSL_3', '    #define FXAA_HLSL_3 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_HLSL_4', '    #define FXAA_HLSL_4 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_HLSL_5', '    #define FXAA_HLSL_5 0', '#endif', '/*==========================================================================*/', '#ifndef FXAA_GREEN_AS_LUMA', '    //', '    // For those using non-linear color,', '    // and either not able to get luma in alpha, or not wanting to,', '    // this enables FXAA to run using green as a proxy for luma.', '    // So with this enabled, no need to pack luma in alpha.', '    //', '    // This will turn off AA on anything which lacks some amount of green.', '    // Pure red and blue or combination of only R and B, will get no AA.', '    //', '    // Might want to lower the settings for both,', '    //    fxaaConsoleEdgeThresholdMin', '    //    fxaaQualityEdgeThresholdMin', '    // In order to insure AA does not get turned off on colors', '    // which contain a minor amount of green.', '    //', '    // 1 = On.', '    // 0 = Off.', '    //', '    #define FXAA_GREEN_AS_LUMA 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_EARLY_EXIT', '    //', \"    // Controls algorithm's early exit path.\", '    // On PS3 turning this ON adds 2 cycles to the shader.', '    // On 360 turning this OFF adds 10ths of a millisecond to the shader.', '    // Turning this off on console will result in a more blurry image.', '    // So this defaults to on.', '    //', '    // 1 = On.', '    // 0 = Off.', '    //', '    #define FXAA_EARLY_EXIT 1', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_DISCARD', '    //', '    // Only valid for PC OpenGL currently.', '    // Probably will not work when FXAA_GREEN_AS_LUMA = 1.', '    //', \"    // 1 = Use discard on pixels which don't need AA.\", '    //     For APIs which enable concurrent TEX+ROP from same surface.', \"    // 0 = Return unchanged color on pixels which don't need AA.\", '    //', '    #define FXAA_DISCARD 0', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_FAST_PIXEL_OFFSET', '    //', '    // Used for GLSL 120 only.', '    //', '    // 1 = GL API supports fast pixel offsets', '    // 0 = do not use fast pixel offsets', '    //', '    #ifdef GL_EXT_gpu_shader4', '        #define FXAA_FAST_PIXEL_OFFSET 1', '    #endif', '    #ifdef GL_NV_gpu_shader5', '        #define FXAA_FAST_PIXEL_OFFSET 1', '    #endif', '    #ifdef GL_ARB_gpu_shader5', '        #define FXAA_FAST_PIXEL_OFFSET 1', '    #endif', '    #ifndef FXAA_FAST_PIXEL_OFFSET', '        #define FXAA_FAST_PIXEL_OFFSET 0', '    #endif', '#endif', '/*--------------------------------------------------------------------------*/', '#ifndef FXAA_GATHER4_ALPHA', '    //', '    // 1 = API supports gather4 on alpha channel.', '    // 0 = API does not support gather4 on alpha channel.', '    //', '    #if (FXAA_HLSL_5 == 1)', '        #define FXAA_GATHER4_ALPHA 1', '    #endif', '    #ifdef GL_ARB_gpu_shader5', '        #define FXAA_GATHER4_ALPHA 1', '    #endif', '    #ifdef GL_NV_gpu_shader5', '        #define FXAA_GATHER4_ALPHA 1', '    #endif', '    #ifndef FXAA_GATHER4_ALPHA', '        #define FXAA_GATHER4_ALPHA 0', '    #endif', '#endif', '', '', '/*============================================================================', '                        FXAA QUALITY - TUNING KNOBS', '------------------------------------------------------------------------------', 'NOTE the other tuning knobs are now in the shader function inputs!', '============================================================================*/', '#ifndef FXAA_QUALITY_PRESET', '    //', '    // Choose the quality preset.', '    // This needs to be compiled into the shader as it effects code.', '    // Best option to include multiple presets is to', '    // in each shader define the preset, then include this file.', '    //', '    // OPTIONS', '    // -----------------------------------------------------------------------', '    // 10 to 15 - default medium dither (10=fastest, 15=highest quality)', '    // 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)', '    // 39       - no dither, very expensive', '    //', '    // NOTES', '    // -----------------------------------------------------------------------', '    // 12 = slightly faster then FXAA 3.9 and higher edge quality (default)', '    // 13 = about same speed as FXAA 3.9 and better than 12', '    // 23 = closest to FXAA 3.9 visually and performance wise', '    //  _ = the lowest digit is directly related to performance', '    // _  = the highest digit is directly related to style', '    //', '    #define FXAA_QUALITY_PRESET 12', '#endif', '', '', '/*============================================================================', '', '                           FXAA QUALITY - PRESETS', '', '============================================================================*/', '', '/*============================================================================', '                     FXAA QUALITY - MEDIUM DITHER PRESETS', '============================================================================*/', '#if (FXAA_QUALITY_PRESET == 10)', '    #define FXAA_QUALITY_PS 3', '    #define FXAA_QUALITY_P0 1.5', '    #define FXAA_QUALITY_P1 3.0', '    #define FXAA_QUALITY_P2 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 11)', '    #define FXAA_QUALITY_PS 4', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 3.0', '    #define FXAA_QUALITY_P3 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 12)', '    #define FXAA_QUALITY_PS 5', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 4.0', '    #define FXAA_QUALITY_P4 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 13)', '    #define FXAA_QUALITY_PS 6', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 4.0', '    #define FXAA_QUALITY_P5 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 14)', '    #define FXAA_QUALITY_PS 7', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 4.0', '    #define FXAA_QUALITY_P6 12.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 15)', '    #define FXAA_QUALITY_PS 8', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 4.0', '    #define FXAA_QUALITY_P7 12.0', '#endif', '', '/*============================================================================', '                     FXAA QUALITY - LOW DITHER PRESETS', '============================================================================*/', '#if (FXAA_QUALITY_PRESET == 20)', '    #define FXAA_QUALITY_PS 3', '    #define FXAA_QUALITY_P0 1.5', '    #define FXAA_QUALITY_P1 2.0', '    #define FXAA_QUALITY_P2 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 21)', '    #define FXAA_QUALITY_PS 4', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 22)', '    #define FXAA_QUALITY_PS 5', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 23)', '    #define FXAA_QUALITY_PS 6', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 24)', '    #define FXAA_QUALITY_PS 7', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 3.0', '    #define FXAA_QUALITY_P6 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 25)', '    #define FXAA_QUALITY_PS 8', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 4.0', '    #define FXAA_QUALITY_P7 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 26)', '    #define FXAA_QUALITY_PS 9', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 4.0', '    #define FXAA_QUALITY_P8 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 27)', '    #define FXAA_QUALITY_PS 10', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 4.0', '    #define FXAA_QUALITY_P9 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 28)', '    #define FXAA_QUALITY_PS 11', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 2.0', '    #define FXAA_QUALITY_P9 4.0', '    #define FXAA_QUALITY_P10 8.0', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_QUALITY_PRESET == 29)', '    #define FXAA_QUALITY_PS 12', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.5', '    #define FXAA_QUALITY_P2 2.0', '    #define FXAA_QUALITY_P3 2.0', '    #define FXAA_QUALITY_P4 2.0', '    #define FXAA_QUALITY_P5 2.0', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 2.0', '    #define FXAA_QUALITY_P9 2.0', '    #define FXAA_QUALITY_P10 4.0', '    #define FXAA_QUALITY_P11 8.0', '#endif', '', '/*============================================================================', '                     FXAA QUALITY - EXTREME QUALITY', '============================================================================*/', '#if (FXAA_QUALITY_PRESET == 39)', '    #define FXAA_QUALITY_PS 12', '    #define FXAA_QUALITY_P0 1.0', '    #define FXAA_QUALITY_P1 1.0', '    #define FXAA_QUALITY_P2 1.0', '    #define FXAA_QUALITY_P3 1.0', '    #define FXAA_QUALITY_P4 1.0', '    #define FXAA_QUALITY_P5 1.5', '    #define FXAA_QUALITY_P6 2.0', '    #define FXAA_QUALITY_P7 2.0', '    #define FXAA_QUALITY_P8 2.0', '    #define FXAA_QUALITY_P9 2.0', '    #define FXAA_QUALITY_P10 4.0', '    #define FXAA_QUALITY_P11 8.0', '#endif', '', '', '', '/*============================================================================', '', '                                API PORTING', '', '============================================================================*/', '#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)', '    #define FxaaBool bool', '    #define FxaaDiscard discard', '    #define FxaaFloat float', '    #define FxaaFloat2 vec2', '    #define FxaaFloat3 vec3', '    #define FxaaFloat4 vec4', '    #define FxaaHalf float', '    #define FxaaHalf2 vec2', '    #define FxaaHalf3 vec3', '    #define FxaaHalf4 vec4', '    #define FxaaInt2 ivec2', '    #define FxaaSat(x) clamp(x, 0.0, 1.0)', '    #define FxaaTex sampler2D', '#else', '    #define FxaaBool bool', '    #define FxaaDiscard clip(-1)', '    #define FxaaFloat float', '    #define FxaaFloat2 float2', '    #define FxaaFloat3 float3', '    #define FxaaFloat4 float4', '    #define FxaaHalf half', '    #define FxaaHalf2 half2', '    #define FxaaHalf3 half3', '    #define FxaaHalf4 half4', '    #define FxaaSat(x) saturate(x)', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_GLSL_100 == 1)', '  #define FxaaTexTop(t, p) texture2D(t, p, 0.0)', '  #define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_GLSL_120 == 1)', '    // Requires,', '    //  #version 120', '    // And at least,', '    //  #extension GL_EXT_gpu_shader4 : enable', '    //  (or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)', '    #define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)', '    #if (FXAA_FAST_PIXEL_OFFSET == 1)', '        #define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)', '    #else', '        #define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)', '    #endif', '    #if (FXAA_GATHER4_ALPHA == 1)', '        // use #extension GL_ARB_gpu_shader5 : enable', '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)', '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)', '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)', '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)', '    #endif', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_GLSL_130 == 1)', '    // Requires \"#version 130\" or better', '    #define FxaaTexTop(t, p) textureLod(t, p, 0.0)', '    #define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)', '    #if (FXAA_GATHER4_ALPHA == 1)', '        // use #extension GL_ARB_gpu_shader5 : enable', '        #define FxaaTexAlpha4(t, p) textureGather(t, p, 3)', '        #define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)', '        #define FxaaTexGreen4(t, p) textureGather(t, p, 1)', '        #define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)', '    #endif', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_HLSL_3 == 1)', '    #define FxaaInt2 float2', '    #define FxaaTex sampler2D', '    #define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))', '    #define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_HLSL_4 == 1)', '    #define FxaaInt2 int2', '    struct FxaaTex { SamplerState smpl; Texture2D tex; };', '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)', '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)', '#endif', '/*--------------------------------------------------------------------------*/', '#if (FXAA_HLSL_5 == 1)', '    #define FxaaInt2 int2', '    struct FxaaTex { SamplerState smpl; Texture2D tex; };', '    #define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)', '    #define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)', '    #define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)', '    #define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)', '    #define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)', '    #define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)', '#endif', '', '', '/*============================================================================', '                   GREEN AS LUMA OPTION SUPPORT FUNCTION', '============================================================================*/', '#if (FXAA_GREEN_AS_LUMA == 0)', '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }', '#else', '    FxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }', '#endif', '', '', '', '', '/*============================================================================', '', '                             FXAA3 QUALITY - PC', '', '============================================================================*/', '#if (FXAA_PC == 1)', '/*--------------------------------------------------------------------------*/', 'FxaaFloat4 FxaaPixelShader(', '    //', '    // Use noperspective interpolation here (turn off perspective interpolation).', '    // {xy} = center of pixel', '    FxaaFloat2 pos,', '    //', '    // Used only for FXAA Console, and not used on the 360 version.', '    // Use noperspective interpolation here (turn off perspective interpolation).', '    // {xy_} = upper left of pixel', '    // {_zw} = lower right of pixel', '    FxaaFloat4 fxaaConsolePosPos,', '    //', '    // Input color texture.', '    // {rgb_} = color in linear or perceptual color space', '    // if (FXAA_GREEN_AS_LUMA == 0)', '    //     {__a} = luma in perceptual color space (not linear)', '    FxaaTex tex,', '    //', '    // Only used on the optimized 360 version of FXAA Console.', '    // For everything but 360, just use the same input here as for \"tex\".', '    // For 360, same texture, just alias with a 2nd sampler.', '    // This sampler needs to have an exponent bias of -1.', '    FxaaTex fxaaConsole360TexExpBiasNegOne,', '    //', '    // Only used on the optimized 360 version of FXAA Console.', '    // For everything but 360, just use the same input here as for \"tex\".', '    // For 360, same texture, just alias with a 3nd sampler.', '    // This sampler needs to have an exponent bias of -2.', '    FxaaTex fxaaConsole360TexExpBiasNegTwo,', '    //', '    // Only used on FXAA Quality.', '    // This must be from a constant/uniform.', '    // {x_} = 1.0/screenWidthInPixels', '    // {_y} = 1.0/screenHeightInPixels', '    FxaaFloat2 fxaaQualityRcpFrame,', '    //', '    // Only used on FXAA Console.', '    // This must be from a constant/uniform.', '    // This effects sub-pixel AA quality and inversely sharpness.', '    //   Where N ranges between,', '    //     N = 0.50 (default)', '    //     N = 0.33 (sharper)', '    // {x__} = -N/screenWidthInPixels', '    // {_y_} = -N/screenHeightInPixels', '    // {_z_} =  N/screenWidthInPixels', '    // {__w} =  N/screenHeightInPixels', '    FxaaFloat4 fxaaConsoleRcpFrameOpt,', '    //', '    // Only used on FXAA Console.', '    // Not used on 360, but used on PS3 and PC.', '    // This must be from a constant/uniform.', '    // {x__} = -2.0/screenWidthInPixels', '    // {_y_} = -2.0/screenHeightInPixels', '    // {_z_} =  2.0/screenWidthInPixels', '    // {__w} =  2.0/screenHeightInPixels', '    FxaaFloat4 fxaaConsoleRcpFrameOpt2,', '    //', '    // Only used on FXAA Console.', '    // Only used on 360 in place of fxaaConsoleRcpFrameOpt2.', '    // This must be from a constant/uniform.', '    // {x__} =  8.0/screenWidthInPixels', '    // {_y_} =  8.0/screenHeightInPixels', '    // {_z_} = -4.0/screenWidthInPixels', '    // {__w} = -4.0/screenHeightInPixels', '    FxaaFloat4 fxaaConsole360RcpFrameOpt2,', '    //', '    // Only used on FXAA Quality.', '    // This used to be the FXAA_QUALITY_SUBPIX define.', '    // It is here now to allow easier tuning.', '    // Choose the amount of sub-pixel aliasing removal.', '    // This can effect sharpness.', '    //   1.00 - upper limit (softer)', '    //   0.75 - default amount of filtering', '    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)', '    //   0.25 - almost off', '    //   0.00 - completely off', '    FxaaFloat fxaaQualitySubpix,', '    //', '    // Only used on FXAA Quality.', '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.', '    // It is here now to allow easier tuning.', '    // The minimum amount of local contrast required to apply algorithm.', '    //   0.333 - too little (faster)', '    //   0.250 - low quality', '    //   0.166 - default', '    //   0.125 - high quality', '    //   0.063 - overkill (slower)', '    FxaaFloat fxaaQualityEdgeThreshold,', '    //', '    // Only used on FXAA Quality.', '    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.', '    // It is here now to allow easier tuning.', '    // Trims the algorithm from processing darks.', '    //   0.0833 - upper limit (default, the start of visible unfiltered edges)', '    //   0.0625 - high quality (faster)', '    //   0.0312 - visible limit (slower)', '    // Special notes when using FXAA_GREEN_AS_LUMA,', '    //   Likely want to set this to zero.', '    //   As colors that are mostly not-green', '    //   will appear very dark in the green channel!', '    //   Tune by looking at mostly non-green content,', '    //   then start at zero and increase until aliasing is a problem.', '    FxaaFloat fxaaQualityEdgeThresholdMin,', '    //', '    // Only used on FXAA Console.', '    // This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.', '    // It is here now to allow easier tuning.', '    // This does not effect PS3, as this needs to be compiled in.', '    //   Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.', '    //   Due to the PS3 being ALU bound,', '    //   there are only three safe values here: 2 and 4 and 8.', '    //   These options use the shaders ability to a free *|/ by 2|4|8.', '    // For all other platforms can be a non-power of two.', '    //   8.0 is sharper (default!!!)', '    //   4.0 is softer', '    //   2.0 is really soft (good only for vector graphics inputs)', '    FxaaFloat fxaaConsoleEdgeSharpness,', '    //', '    // Only used on FXAA Console.', '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.', '    // It is here now to allow easier tuning.', '    // This does not effect PS3, as this needs to be compiled in.', '    //   Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.', '    //   Due to the PS3 being ALU bound,', '    //   there are only two safe values here: 1/4 and 1/8.', '    //   These options use the shaders ability to a free *|/ by 2|4|8.', '    // The console setting has a different mapping than the quality setting.', '    // Other platforms can use other values.', '    //   0.125 leaves less aliasing, but is softer (default!!!)', '    //   0.25 leaves more aliasing, and is sharper', '    FxaaFloat fxaaConsoleEdgeThreshold,', '    //', '    // Only used on FXAA Console.', '    // This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.', '    // It is here now to allow easier tuning.', '    // Trims the algorithm from processing darks.', '    // The console setting has a different mapping than the quality setting.', '    // This only applies when FXAA_EARLY_EXIT is 1.', '    // This does not apply to PS3,', '    // PS3 was simplified to avoid more shader instructions.', '    //   0.06 - faster but more aliasing in darks', '    //   0.05 - default', '    //   0.04 - slower and less aliasing in darks', '    // Special notes when using FXAA_GREEN_AS_LUMA,', '    //   Likely want to set this to zero.', '    //   As colors that are mostly not-green', '    //   will appear very dark in the green channel!', '    //   Tune by looking at mostly non-green content,', '    //   then start at zero and increase until aliasing is a problem.', '    FxaaFloat fxaaConsoleEdgeThresholdMin,', '    //', '    // Extra constants for 360 FXAA Console only.', '    // Use zeros or anything else for other platforms.', '    // These must be in physical constant registers and NOT immediates.', '    // Immediates will result in compiler un-optimizing.', '    // {xyzw} = float4(1.0, -1.0, 0.25, -0.25)', '    FxaaFloat4 fxaaConsole360ConstDir', ') {', '/*--------------------------------------------------------------------------*/', '    FxaaFloat2 posM;', '    posM.x = pos.x;', '    posM.y = pos.y;', '    #if (FXAA_GATHER4_ALPHA == 1)', '        #if (FXAA_DISCARD == 0)', '            FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);', '            #if (FXAA_GREEN_AS_LUMA == 0)', '                #define lumaM rgbyM.w', '            #else', '                #define lumaM rgbyM.y', '            #endif', '        #endif', '        #if (FXAA_GREEN_AS_LUMA == 0)', '            FxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);', '            FxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));', '        #else', '            FxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);', '            FxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));', '        #endif', '        #if (FXAA_DISCARD == 1)', '            #define lumaM luma4A.w', '        #endif', '        #define lumaE luma4A.z', '        #define lumaS luma4A.x', '        #define lumaSE luma4A.y', '        #define lumaNW luma4B.w', '        #define lumaN luma4B.z', '        #define lumaW luma4B.x', '    #else', '        FxaaFloat4 rgbyM = FxaaTexTop(tex, posM);', '        #if (FXAA_GREEN_AS_LUMA == 0)', '            #define lumaM rgbyM.w', '        #else', '            #define lumaM rgbyM.y', '        #endif', '        #if (FXAA_GLSL_100 == 1)', '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));', '        #else', '          FxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));', '        #endif', '    #endif', '/*--------------------------------------------------------------------------*/', '    FxaaFloat maxSM = max(lumaS, lumaM);', '    FxaaFloat minSM = min(lumaS, lumaM);', '    FxaaFloat maxESM = max(lumaE, maxSM);', '    FxaaFloat minESM = min(lumaE, minSM);', '    FxaaFloat maxWN = max(lumaN, lumaW);', '    FxaaFloat minWN = min(lumaN, lumaW);', '    FxaaFloat rangeMax = max(maxWN, maxESM);', '    FxaaFloat rangeMin = min(minWN, minESM);', '    FxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;', '    FxaaFloat range = rangeMax - rangeMin;', '    FxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);', '    FxaaBool earlyExit = range < rangeMaxClamped;', '/*--------------------------------------------------------------------------*/', '    if(earlyExit)', '        #if (FXAA_DISCARD == 1)', '            FxaaDiscard;', '        #else', '            return rgbyM;', '        #endif', '/*--------------------------------------------------------------------------*/', '    #if (FXAA_GATHER4_ALPHA == 0)', '        #if (FXAA_GLSL_100 == 1)', '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));', '        #else', '          FxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));', '          FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));', '        #endif', '    #else', '        FxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));', '        FxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));', '    #endif', '/*--------------------------------------------------------------------------*/', '    FxaaFloat lumaNS = lumaN + lumaS;', '    FxaaFloat lumaWE = lumaW + lumaE;', '    FxaaFloat subpixRcpRange = 1.0/range;', '    FxaaFloat subpixNSWE = lumaNS + lumaWE;', '    FxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;', '    FxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat lumaNESE = lumaNE + lumaSE;', '    FxaaFloat lumaNWNE = lumaNW + lumaNE;', '    FxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;', '    FxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat lumaNWSW = lumaNW + lumaSW;', '    FxaaFloat lumaSWSE = lumaSW + lumaSE;', '    FxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);', '    FxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);', '    FxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;', '    FxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;', '    FxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;', '    FxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;', '    FxaaFloat lengthSign = fxaaQualityRcpFrame.x;', '    FxaaBool horzSpan = edgeHorz >= edgeVert;', '    FxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;', '/*--------------------------------------------------------------------------*/', '    if(!horzSpan) lumaN = lumaW;', '    if(!horzSpan) lumaS = lumaE;', '    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;', '    FxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat gradientN = lumaN - lumaM;', '    FxaaFloat gradientS = lumaS - lumaM;', '    FxaaFloat lumaNN = lumaN + lumaM;', '    FxaaFloat lumaSS = lumaS + lumaM;', '    FxaaBool pairN = abs(gradientN) >= abs(gradientS);', '    FxaaFloat gradient = max(abs(gradientN), abs(gradientS));', '    if(pairN) lengthSign = -lengthSign;', '    FxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);', '/*--------------------------------------------------------------------------*/', '    FxaaFloat2 posB;', '    posB.x = posM.x;', '    posB.y = posM.y;', '    FxaaFloat2 offNP;', '    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;', '    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;', '    if(!horzSpan) posB.x += lengthSign * 0.5;', '    if( horzSpan) posB.y += lengthSign * 0.5;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat2 posN;', '    posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;', '    posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;', '    FxaaFloat2 posP;', '    posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;', '    posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;', '    FxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;', '    FxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));', '    FxaaFloat subpixE = subpixC * subpixC;', '    FxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));', '/*--------------------------------------------------------------------------*/', '    if(!pairN) lumaNN = lumaSS;', '    FxaaFloat gradientScaled = gradient * 1.0/4.0;', '    FxaaFloat lumaMM = lumaM - lumaNN * 0.5;', '    FxaaFloat subpixF = subpixD * subpixE;', '    FxaaBool lumaMLTZero = lumaMM < 0.0;', '/*--------------------------------------------------------------------------*/', '    lumaEndN -= lumaNN * 0.5;', '    lumaEndP -= lumaNN * 0.5;', '    FxaaBool doneN = abs(lumaEndN) >= gradientScaled;', '    FxaaBool doneP = abs(lumaEndP) >= gradientScaled;', '    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;', '    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;', '    FxaaBool doneNP = (!doneN) || (!doneP);', '    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;', '    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;', '/*--------------------------------------------------------------------------*/', '    if(doneNP) {', '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '        doneN = abs(lumaEndN) >= gradientScaled;', '        doneP = abs(lumaEndP) >= gradientScaled;', '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;', '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;', '        doneNP = (!doneN) || (!doneP);', '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;', '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;', '/*--------------------------------------------------------------------------*/', '        #if (FXAA_QUALITY_PS > 3)', '        if(doneNP) {', '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '            doneN = abs(lumaEndN) >= gradientScaled;', '            doneP = abs(lumaEndP) >= gradientScaled;', '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;', '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;', '            doneNP = (!doneN) || (!doneP);', '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;', '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;', '/*--------------------------------------------------------------------------*/', '            #if (FXAA_QUALITY_PS > 4)', '            if(doneNP) {', '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                doneN = abs(lumaEndN) >= gradientScaled;', '                doneP = abs(lumaEndP) >= gradientScaled;', '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;', '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;', '                doneNP = (!doneN) || (!doneP);', '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;', '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;', '/*--------------------------------------------------------------------------*/', '                #if (FXAA_QUALITY_PS > 5)', '                if(doneNP) {', '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                    doneN = abs(lumaEndN) >= gradientScaled;', '                    doneP = abs(lumaEndP) >= gradientScaled;', '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;', '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;', '                    doneNP = (!doneN) || (!doneP);', '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;', '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;', '/*--------------------------------------------------------------------------*/', '                    #if (FXAA_QUALITY_PS > 6)', '                    if(doneNP) {', '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                        doneN = abs(lumaEndN) >= gradientScaled;', '                        doneP = abs(lumaEndP) >= gradientScaled;', '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;', '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;', '                        doneNP = (!doneN) || (!doneP);', '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;', '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;', '/*--------------------------------------------------------------------------*/', '                        #if (FXAA_QUALITY_PS > 7)', '                        if(doneNP) {', '                            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                            doneN = abs(lumaEndN) >= gradientScaled;', '                            doneP = abs(lumaEndP) >= gradientScaled;', '                            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;', '                            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;', '                            doneNP = (!doneN) || (!doneP);', '                            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;', '                            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;', '/*--------------------------------------------------------------------------*/', '    #if (FXAA_QUALITY_PS > 8)', '    if(doneNP) {', '        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '        doneN = abs(lumaEndN) >= gradientScaled;', '        doneP = abs(lumaEndP) >= gradientScaled;', '        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;', '        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;', '        doneNP = (!doneN) || (!doneP);', '        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;', '        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;', '/*--------------------------------------------------------------------------*/', '        #if (FXAA_QUALITY_PS > 9)', '        if(doneNP) {', '            if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '            if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '            if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '            if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '            doneN = abs(lumaEndN) >= gradientScaled;', '            doneP = abs(lumaEndP) >= gradientScaled;', '            if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;', '            if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;', '            doneNP = (!doneN) || (!doneP);', '            if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;', '            if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;', '/*--------------------------------------------------------------------------*/', '            #if (FXAA_QUALITY_PS > 10)', '            if(doneNP) {', '                if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                doneN = abs(lumaEndN) >= gradientScaled;', '                doneP = abs(lumaEndP) >= gradientScaled;', '                if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;', '                if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;', '                doneNP = (!doneN) || (!doneP);', '                if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;', '                if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;', '/*--------------------------------------------------------------------------*/', '                #if (FXAA_QUALITY_PS > 11)', '                if(doneNP) {', '                    if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                    if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                    if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                    if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                    doneN = abs(lumaEndN) >= gradientScaled;', '                    doneP = abs(lumaEndP) >= gradientScaled;', '                    if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;', '                    if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;', '                    doneNP = (!doneN) || (!doneP);', '                    if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;', '                    if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;', '/*--------------------------------------------------------------------------*/', '                    #if (FXAA_QUALITY_PS > 12)', '                    if(doneNP) {', '                        if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));', '                        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));', '                        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;', '                        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;', '                        doneN = abs(lumaEndN) >= gradientScaled;', '                        doneP = abs(lumaEndP) >= gradientScaled;', '                        if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;', '                        if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;', '                        doneNP = (!doneN) || (!doneP);', '                        if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;', '                        if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;', '/*--------------------------------------------------------------------------*/', '                    }', '                    #endif', '/*--------------------------------------------------------------------------*/', '                }', '                #endif', '/*--------------------------------------------------------------------------*/', '            }', '            #endif', '/*--------------------------------------------------------------------------*/', '        }', '        #endif', '/*--------------------------------------------------------------------------*/', '    }', '    #endif', '/*--------------------------------------------------------------------------*/', '                        }', '                        #endif', '/*--------------------------------------------------------------------------*/', '                    }', '                    #endif', '/*--------------------------------------------------------------------------*/', '                }', '                #endif', '/*--------------------------------------------------------------------------*/', '            }', '            #endif', '/*--------------------------------------------------------------------------*/', '        }', '        #endif', '/*--------------------------------------------------------------------------*/', '    }', '/*--------------------------------------------------------------------------*/', '    FxaaFloat dstN = posM.x - posN.x;', '    FxaaFloat dstP = posP.x - posM.x;', '    if(!horzSpan) dstN = posM.y - posN.y;', '    if(!horzSpan) dstP = posP.y - posM.y;', '/*--------------------------------------------------------------------------*/', '    FxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;', '    FxaaFloat spanLength = (dstP + dstN);', '    FxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;', '    FxaaFloat spanLengthRcp = 1.0/spanLength;', '/*--------------------------------------------------------------------------*/', '    FxaaBool directionN = dstN < dstP;', '    FxaaFloat dst = min(dstN, dstP);', '    FxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;', '    FxaaFloat subpixG = subpixF * subpixF;', '    FxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;', '    FxaaFloat subpixH = subpixG * fxaaQualitySubpix;', '/*--------------------------------------------------------------------------*/', '    FxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;', '    FxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);', '    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;', '    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;', '    #if (FXAA_DISCARD == 1)', '        return FxaaTexTop(tex, posM);', '    #else', '        return FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);', '    #endif', '}', '/*==========================================================================*/', '#endif', '', 'void main() {', '  gl_FragColor = FxaaPixelShader(', '    vUv,', '    vec4(0.0),', '    tDiffuse,', '    tDiffuse,', '    tDiffuse,', '    resolution,', '    vec4(0.0),', '    vec4(0.0),', '    vec4(0.0),', '    0.75,', '    0.166,', '    0.0833,', '    0.0,', '    0.0,', '    0.0,', '    vec4(0.0)', '  );', '', '  // TODO avoid querying texture twice for same texel', '  gl_FragColor.a = texture2D(tDiffuse, vUv).a;', '}'].join('\\n')\n};\n\nexport { FXAAShader };\n"]},"metadata":{},"sourceType":"module"}