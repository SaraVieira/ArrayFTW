{"ast":null,"code":"import { Vector2, WebGLRenderTarget, OrthographicCamera, Scene, Mesh, PlaneGeometry, LinearFilter, RGBAFormat } from 'three';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { ScreenNode } from '../inputs/ScreenNode.js';\n\nfunction NodePostProcessing(renderer, renderTarget) {\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat\n    };\n    var size = renderer.getDrawingBufferSize(new Vector2());\n    renderTarget = new WebGLRenderTarget(size.width, size.height, parameters);\n  }\n\n  this.renderer = renderer;\n  this.renderTarget = renderTarget;\n  this.output = new ScreenNode();\n  this.material = new NodeMaterial();\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneGeometry(2, 2), this.material);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.needsUpdate = true;\n}\n\nNodePostProcessing.prototype = {\n  constructor: NodePostProcessing,\n  render: function render(scene, camera, frame) {\n    if (this.needsUpdate) {\n      this.material.dispose();\n      this.material.fragment.value = this.output;\n      this.material.build();\n\n      if (this.material.uniforms.renderTexture) {\n        this.material.uniforms.renderTexture.value = this.renderTarget.texture;\n      }\n\n      this.needsUpdate = false;\n    }\n\n    frame.setRenderer(this.renderer).setRenderTexture(this.renderTarget.texture);\n    this.renderer.setRenderTarget(this.renderTarget);\n    this.renderer.render(scene, camera);\n    frame.updateNode(this.material);\n    this.renderer.setRenderTarget(null);\n    this.renderer.render(this.scene, this.camera);\n  },\n  setPixelRatio: function setPixelRatio(value) {\n    this.renderer.setPixelRatio(value);\n    var size = this.renderer.getSize(new Vector2());\n    this.setSize(size.width, size.height);\n  },\n  setSize: function setSize(width, height) {\n    var pixelRatio = this.renderer.getPixelRatio();\n    this.renderTarget.setSize(width * pixelRatio, height * pixelRatio);\n    this.renderer.setSize(width, height);\n  },\n  copy: function copy(source) {\n    this.output = source.output;\n    return this;\n  },\n  toJSON: function toJSON(meta) {\n    var isRootObject = meta === undefined || typeof meta === 'string';\n\n    if (isRootObject) {\n      meta = {\n        nodes: {}\n      };\n    }\n\n    if (meta && !meta.post) meta.post = {};\n\n    if (!meta.post[this.uuid]) {\n      var data = {};\n      data.uuid = this.uuid;\n      data.type = 'NodePostProcessing';\n      meta.post[this.uuid] = data;\n      if (this.name !== '') data.name = this.name;\n      if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n      data.output = this.output.toJSON(meta).uuid;\n    }\n\n    meta.post = this.uuid;\n    return meta;\n  }\n};\nexport { NodePostProcessing };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/postprocessing/NodePostProcessing.js"],"names":["Vector2","WebGLRenderTarget","OrthographicCamera","Scene","Mesh","PlaneGeometry","LinearFilter","RGBAFormat","NodeMaterial","ScreenNode","NodePostProcessing","renderer","renderTarget","undefined","parameters","minFilter","magFilter","format","size","getDrawingBufferSize","width","height","output","material","camera","scene","quad","frustumCulled","add","needsUpdate","prototype","constructor","render","frame","dispose","fragment","value","build","uniforms","renderTexture","texture","setRenderer","setRenderTexture","setRenderTarget","updateNode","setPixelRatio","getSize","setSize","pixelRatio","getPixelRatio","copy","source","toJSON","meta","isRootObject","nodes","post","uuid","data","type","name","JSON","stringify","userData"],"mappings":"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","sourcesContent":["import { Vector2, WebGLRenderTarget, OrthographicCamera, Scene, Mesh, PlaneGeometry, LinearFilter, RGBAFormat } from 'three';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { ScreenNode } from '../inputs/ScreenNode.js';\n\nfunction NodePostProcessing(renderer, renderTarget) {\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat\n    };\n    var size = renderer.getDrawingBufferSize(new Vector2());\n    renderTarget = new WebGLRenderTarget(size.width, size.height, parameters);\n  }\n\n  this.renderer = renderer;\n  this.renderTarget = renderTarget;\n  this.output = new ScreenNode();\n  this.material = new NodeMaterial();\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneGeometry(2, 2), this.material);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.needsUpdate = true;\n}\n\nNodePostProcessing.prototype = {\n  constructor: NodePostProcessing,\n  render: function (scene, camera, frame) {\n    if (this.needsUpdate) {\n      this.material.dispose();\n      this.material.fragment.value = this.output;\n      this.material.build();\n\n      if (this.material.uniforms.renderTexture) {\n        this.material.uniforms.renderTexture.value = this.renderTarget.texture;\n      }\n\n      this.needsUpdate = false;\n    }\n\n    frame.setRenderer(this.renderer).setRenderTexture(this.renderTarget.texture);\n    this.renderer.setRenderTarget(this.renderTarget);\n    this.renderer.render(scene, camera);\n    frame.updateNode(this.material);\n    this.renderer.setRenderTarget(null);\n    this.renderer.render(this.scene, this.camera);\n  },\n  setPixelRatio: function (value) {\n    this.renderer.setPixelRatio(value);\n    var size = this.renderer.getSize(new Vector2());\n    this.setSize(size.width, size.height);\n  },\n  setSize: function (width, height) {\n    var pixelRatio = this.renderer.getPixelRatio();\n    this.renderTarget.setSize(width * pixelRatio, height * pixelRatio);\n    this.renderer.setSize(width, height);\n  },\n  copy: function (source) {\n    this.output = source.output;\n    return this;\n  },\n  toJSON: function (meta) {\n    var isRootObject = meta === undefined || typeof meta === 'string';\n\n    if (isRootObject) {\n      meta = {\n        nodes: {}\n      };\n    }\n\n    if (meta && !meta.post) meta.post = {};\n\n    if (!meta.post[this.uuid]) {\n      var data = {};\n      data.uuid = this.uuid;\n      data.type = 'NodePostProcessing';\n      meta.post[this.uuid] = data;\n      if (this.name !== '') data.name = this.name;\n      if (JSON.stringify(this.userData) !== '{}') data.userData = this.userData;\n      data.output = this.output.toJSON(meta).uuid;\n    }\n\n    meta.post = this.uuid;\n    return meta;\n  }\n};\n\nexport { NodePostProcessing };\n"]},"metadata":{},"sourceType":"module"}