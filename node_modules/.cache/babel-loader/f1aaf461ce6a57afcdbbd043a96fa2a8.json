{"ast":null,"code":"import { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster } from 'three';\n\nvar RollerCoasterGeometry = function RollerCoasterGeometry(curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var normals = [];\n  var colors = [];\n  var color1 = [1, 1, 1];\n  var color2 = [1, 1, 0];\n  var up = new Vector3(0, 1, 0);\n  var forward = new Vector3();\n  var right = new Vector3();\n  var quaternion = new Quaternion();\n  var prevQuaternion = new Quaternion();\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n  var point = new Vector3();\n  var prevPoint = new Vector3();\n  prevPoint.copy(curve.getPointAt(0)); // shapes\n\n  var step = [new Vector3(-0.225, 0, 0), new Vector3(0, -0.05, 0), new Vector3(0, -0.175, 0), new Vector3(0, -0.05, 0), new Vector3(0.225, 0, 0), new Vector3(0, -0.175, 0)];\n  var PI2 = Math.PI * 2;\n  var sides = 5;\n  var tube1 = [];\n\n  for (var i = 0; i < sides; i++) {\n    var angle = i / sides * PI2;\n    tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n  }\n\n  var sides = 6;\n  var tube2 = [];\n\n  for (var _i = 0; _i < sides; _i++) {\n    var angle = _i / sides * PI2;\n    tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n  }\n\n  var vector = new Vector3();\n  var normal = new Vector3();\n\n  function drawShape(shape, color) {\n    normal.set(0, 0, -1).applyQuaternion(quaternion);\n\n    for (var j = 0; j < shape.length; j++) {\n      vector.copy(shape[j]);\n      vector.applyQuaternion(quaternion);\n      vector.add(point);\n      vertices.push(vector.x, vector.y, vector.z);\n      normals.push(normal.x, normal.y, normal.z);\n      colors.push(color[0], color[1], color[2]);\n    }\n\n    normal.set(0, 0, 1).applyQuaternion(quaternion);\n\n    for (var _j = shape.length - 1; _j >= 0; _j--) {\n      vector.copy(shape[_j]);\n      vector.applyQuaternion(quaternion);\n      vector.add(point);\n      vertices.push(vector.x, vector.y, vector.z);\n      normals.push(normal.x, normal.y, normal.z);\n      colors.push(color[0], color[1], color[2]);\n    }\n  }\n\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  var normal1 = new Vector3();\n  var normal2 = new Vector3();\n  var normal3 = new Vector3();\n  var normal4 = new Vector3();\n\n  function extrudeShape(shape, offset, color) {\n    for (var j = 0, jl = shape.length; j < jl; j++) {\n      var point1 = shape[j];\n      var point2 = shape[(j + 1) % jl];\n      vector1.copy(point1).add(offset);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.copy(point2).add(offset);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.copy(point2).add(offset);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.copy(point1).add(offset);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z); //\n\n      normal1.copy(point1);\n      normal1.applyQuaternion(quaternion);\n      normal1.normalize();\n      normal2.copy(point2);\n      normal2.applyQuaternion(quaternion);\n      normal2.normalize();\n      normal3.copy(point2);\n      normal3.applyQuaternion(prevQuaternion);\n      normal3.normalize();\n      normal4.copy(point1);\n      normal4.applyQuaternion(prevQuaternion);\n      normal4.normalize();\n      normals.push(normal1.x, normal1.y, normal1.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal3.x, normal3.y, normal3.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n    }\n  }\n\n  var offset = new Vector3();\n\n  for (var _i2 = 1; _i2 <= divisions; _i2++) {\n    point.copy(curve.getPointAt(_i2 / divisions));\n    up.set(0, 1, 0);\n    forward.subVectors(point, prevPoint).normalize();\n    right.crossVectors(up, forward).normalize();\n    up.crossVectors(forward, right);\n    var angle = Math.atan2(forward.x, forward.z);\n    quaternion.setFromAxisAngle(up, angle);\n\n    if (_i2 % 2 === 0) {\n      drawShape(step, color2);\n    }\n\n    extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n    extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n    extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n    prevPoint.copy(point);\n    prevQuaternion.copy(quaternion);\n  } // console.log( vertices.length );\n\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n  this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n};\n\nRollerCoasterGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar RollerCoasterLiftersGeometry = function RollerCoasterLiftersGeometry(curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var normals = [];\n  var quaternion = new Quaternion();\n  var up = new Vector3(0, 1, 0);\n  var point = new Vector3();\n  var tangent = new Vector3(); // shapes\n\n  var tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n  var tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n  var tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  var normal1 = new Vector3();\n  var normal2 = new Vector3();\n  var normal3 = new Vector3();\n  var normal4 = new Vector3();\n\n  function extrudeShape(shape, fromPoint, toPoint) {\n    for (var j = 0, jl = shape.length; j < jl; j++) {\n      var point1 = shape[j];\n      var point2 = shape[(j + 1) % jl];\n      vector1.copy(point1);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(fromPoint);\n      vector2.copy(point2);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(fromPoint);\n      vector3.copy(point2);\n      vector3.applyQuaternion(quaternion);\n      vector3.add(toPoint);\n      vector4.copy(point1);\n      vector4.applyQuaternion(quaternion);\n      vector4.add(toPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z); //\n\n      normal1.copy(point1);\n      normal1.applyQuaternion(quaternion);\n      normal1.normalize();\n      normal2.copy(point2);\n      normal2.applyQuaternion(quaternion);\n      normal2.normalize();\n      normal3.copy(point2);\n      normal3.applyQuaternion(quaternion);\n      normal3.normalize();\n      normal4.copy(point1);\n      normal4.applyQuaternion(quaternion);\n      normal4.normalize();\n      normals.push(normal1.x, normal1.y, normal1.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal3.x, normal3.y, normal3.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n    }\n  }\n\n  var fromPoint = new Vector3();\n  var toPoint = new Vector3();\n\n  for (var i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    tangent.copy(curve.getTangentAt(i / divisions));\n    var angle = Math.atan2(tangent.x, tangent.z);\n    quaternion.setFromAxisAngle(up, angle); //\n\n    if (point.y > 10) {\n      fromPoint.set(-0.75, -0.35, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0.75, -0.35, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube1, fromPoint, toPoint);\n      fromPoint.set(-0.7, -0.3, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(-0.7, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube2, fromPoint, toPoint);\n      fromPoint.set(0.7, -0.3, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0.7, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube3, fromPoint, toPoint);\n    } else {\n      fromPoint.set(0, -0.2, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube3, fromPoint, toPoint);\n    }\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n};\n\nRollerCoasterLiftersGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar RollerCoasterShadowGeometry = function RollerCoasterShadowGeometry(curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var up = new Vector3(0, 1, 0);\n  var forward = new Vector3();\n  var quaternion = new Quaternion();\n  var prevQuaternion = new Quaternion();\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n  var point = new Vector3();\n  var prevPoint = new Vector3();\n  prevPoint.copy(curve.getPointAt(0));\n  prevPoint.y = 0;\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n\n  for (var i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    point.y = 0;\n    forward.subVectors(point, prevPoint);\n    var angle = Math.atan2(forward.x, forward.z);\n    quaternion.setFromAxisAngle(up, angle);\n    vector1.set(-0.3, 0, 0);\n    vector1.applyQuaternion(quaternion);\n    vector1.add(point);\n    vector2.set(0.3, 0, 0);\n    vector2.applyQuaternion(quaternion);\n    vector2.add(point);\n    vector3.set(0.3, 0, 0);\n    vector3.applyQuaternion(prevQuaternion);\n    vector3.add(prevPoint);\n    vector4.set(-0.3, 0, 0);\n    vector4.applyQuaternion(prevQuaternion);\n    vector4.add(prevPoint);\n    vertices.push(vector1.x, vector1.y, vector1.z);\n    vertices.push(vector2.x, vector2.y, vector2.z);\n    vertices.push(vector4.x, vector4.y, vector4.z);\n    vertices.push(vector2.x, vector2.y, vector2.z);\n    vertices.push(vector3.x, vector3.y, vector3.z);\n    vertices.push(vector4.x, vector4.y, vector4.z);\n    prevPoint.copy(point);\n    prevQuaternion.copy(quaternion);\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n};\n\nRollerCoasterShadowGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar SkyGeometry = function SkyGeometry() {\n  BufferGeometry.call(this);\n  var vertices = [];\n\n  for (var i = 0; i < 100; i++) {\n    var x = Math.random() * 800 - 400;\n    var y = Math.random() * 50 + 50;\n    var z = Math.random() * 800 - 400;\n    var size = Math.random() * 40 + 20;\n    vertices.push(x - size, y, z - size);\n    vertices.push(x + size, y, z - size);\n    vertices.push(x - size, y, z + size);\n    vertices.push(x + size, y, z - size);\n    vertices.push(x + size, y, z + size);\n    vertices.push(x - size, y, z + size);\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n};\n\nSkyGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar TreesGeometry = function TreesGeometry(landscape) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var colors = [];\n  var raycaster = new Raycaster();\n  raycaster.ray.direction.set(0, -1, 0);\n\n  for (var i = 0; i < 2000; i++) {\n    var x = Math.random() * 500 - 250;\n    var z = Math.random() * 500 - 250;\n    raycaster.ray.origin.set(x, 50, z);\n    var intersections = raycaster.intersectObject(landscape);\n    if (intersections.length === 0) continue;\n    var y = intersections[0].point.y;\n    var height = Math.random() * 5 + 0.5;\n    var angle = Math.random() * Math.PI * 2;\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n    vertices.push(x, y + height, z);\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n    angle += Math.PI / 2;\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n    vertices.push(x, y + height, z);\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n    var random = Math.random() * 0.1;\n\n    for (var j = 0; j < 6; j++) {\n      colors.push(0.2 + random, 0.4 + random, 0);\n    }\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n};\n\nTreesGeometry.prototype = Object.create(BufferGeometry.prototype);\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/misc/RollerCoaster.js"],"names":["BufferGeometry","Vector3","Quaternion","BufferAttribute","Raycaster","RollerCoasterGeometry","curve","divisions","call","vertices","normals","colors","color1","color2","up","forward","right","quaternion","prevQuaternion","setFromAxisAngle","Math","PI","point","prevPoint","copy","getPointAt","step","PI2","sides","tube1","i","angle","push","sin","cos","tube2","vector","normal","drawShape","shape","color","set","applyQuaternion","j","length","add","x","y","z","vector1","vector2","vector3","vector4","normal1","normal2","normal3","normal4","extrudeShape","offset","jl","point1","point2","normalize","subVectors","crossVectors","atan2","setAttribute","Float32Array","prototype","Object","create","RollerCoasterLiftersGeometry","tangent","tube3","fromPoint","toPoint","getTangentAt","RollerCoasterShadowGeometry","SkyGeometry","random","size","TreesGeometry","landscape","raycaster","ray","direction","origin","intersections","intersectObject","height"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,OAAzB,EAAkCC,UAAlC,EAA8CC,eAA9C,EAA+DC,SAA/D,QAAgF,OAAhF;;AAEA,IAAIC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAUC,KAAV,EAAiBC,SAAjB,EAA4B;AACtDP,EAAAA,cAAc,CAACQ,IAAf,CAAoB,IAApB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb;AACA,MAAIC,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb;AACA,MAAIC,EAAE,GAAG,IAAIb,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAT;AACA,MAAIc,OAAO,GAAG,IAAId,OAAJ,EAAd;AACA,MAAIe,KAAK,GAAG,IAAIf,OAAJ,EAAZ;AACA,MAAIgB,UAAU,GAAG,IAAIf,UAAJ,EAAjB;AACA,MAAIgB,cAAc,GAAG,IAAIhB,UAAJ,EAArB;AACAgB,EAAAA,cAAc,CAACC,gBAAf,CAAgCL,EAAhC,EAAoCM,IAAI,CAACC,EAAL,GAAU,CAA9C;AACA,MAAIC,KAAK,GAAG,IAAIrB,OAAJ,EAAZ;AACA,MAAIsB,SAAS,GAAG,IAAItB,OAAJ,EAAhB;AACAsB,EAAAA,SAAS,CAACC,IAAV,CAAelB,KAAK,CAACmB,UAAN,CAAiB,CAAjB,CAAf,EAfsD,CAejB;;AAErC,MAAIC,IAAI,GAAG,CAAC,IAAIzB,OAAJ,CAAY,CAAC,KAAb,EAAoB,CAApB,EAAuB,CAAvB,CAAD,EAA4B,IAAIA,OAAJ,CAAY,CAAZ,EAAe,CAAC,IAAhB,EAAsB,CAAtB,CAA5B,EAAsD,IAAIA,OAAJ,CAAY,CAAZ,EAAe,CAAC,KAAhB,EAAuB,CAAvB,CAAtD,EAAiF,IAAIA,OAAJ,CAAY,CAAZ,EAAe,CAAC,IAAhB,EAAsB,CAAtB,CAAjF,EAA2G,IAAIA,OAAJ,CAAY,KAAZ,EAAmB,CAAnB,EAAsB,CAAtB,CAA3G,EAAqI,IAAIA,OAAJ,CAAY,CAAZ,EAAe,CAAC,KAAhB,EAAuB,CAAvB,CAArI,CAAX;AACA,MAAI0B,GAAG,GAAGP,IAAI,CAACC,EAAL,GAAU,CAApB;AACA,MAAIO,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAApB,EAA2BE,CAAC,EAA5B,EAAgC;AAC9B,QAAIC,KAAK,GAAGD,CAAC,GAAGF,KAAJ,GAAYD,GAAxB;AACAE,IAAAA,KAAK,CAACG,IAAN,CAAW,IAAI/B,OAAJ,CAAYmB,IAAI,CAACa,GAAL,CAASF,KAAT,IAAkB,IAA9B,EAAoCX,IAAI,CAACc,GAAL,CAASH,KAAT,IAAkB,IAAtD,EAA4D,CAA5D,CAAX;AACD;;AAED,MAAIH,KAAK,GAAG,CAAZ;AACA,MAAIO,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIL,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGF,KAApB,EAA2BE,EAAC,EAA5B,EAAgC;AAC9B,QAAIC,KAAK,GAAGD,EAAC,GAAGF,KAAJ,GAAYD,GAAxB;AACAQ,IAAAA,KAAK,CAACH,IAAN,CAAW,IAAI/B,OAAJ,CAAYmB,IAAI,CAACa,GAAL,CAASF,KAAT,IAAkB,KAA9B,EAAqCX,IAAI,CAACc,GAAL,CAASH,KAAT,IAAkB,KAAvD,EAA8D,CAA9D,CAAX;AACD;;AAED,MAAIK,MAAM,GAAG,IAAInC,OAAJ,EAAb;AACA,MAAIoC,MAAM,GAAG,IAAIpC,OAAJ,EAAb;;AAEA,WAASqC,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiC;AAC/BH,IAAAA,MAAM,CAACI,GAAP,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAC,CAAlB,EAAqBC,eAArB,CAAqCzB,UAArC;;AAEA,SAAK,IAAI0B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCP,MAAAA,MAAM,CAACZ,IAAP,CAAYe,KAAK,CAACI,CAAD,CAAjB;AACAP,MAAAA,MAAM,CAACM,eAAP,CAAuBzB,UAAvB;AACAmB,MAAAA,MAAM,CAACS,GAAP,CAAWvB,KAAX;AACAb,MAAAA,QAAQ,CAACuB,IAAT,CAAcI,MAAM,CAACU,CAArB,EAAwBV,MAAM,CAACW,CAA/B,EAAkCX,MAAM,CAACY,CAAzC;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAaK,MAAM,CAACS,CAApB,EAAuBT,MAAM,CAACU,CAA9B,EAAiCV,MAAM,CAACW,CAAxC;AACArC,MAAAA,MAAM,CAACqB,IAAP,CAAYQ,KAAK,CAAC,CAAD,CAAjB,EAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCA,KAAK,CAAC,CAAD,CAArC;AACD;;AAEDH,IAAAA,MAAM,CAACI,GAAP,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoBC,eAApB,CAAoCzB,UAApC;;AAEA,SAAK,IAAI0B,EAAC,GAAGJ,KAAK,CAACK,MAAN,GAAe,CAA5B,EAA+BD,EAAC,IAAI,CAApC,EAAuCA,EAAC,EAAxC,EAA4C;AAC1CP,MAAAA,MAAM,CAACZ,IAAP,CAAYe,KAAK,CAACI,EAAD,CAAjB;AACAP,MAAAA,MAAM,CAACM,eAAP,CAAuBzB,UAAvB;AACAmB,MAAAA,MAAM,CAACS,GAAP,CAAWvB,KAAX;AACAb,MAAAA,QAAQ,CAACuB,IAAT,CAAcI,MAAM,CAACU,CAArB,EAAwBV,MAAM,CAACW,CAA/B,EAAkCX,MAAM,CAACY,CAAzC;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAaK,MAAM,CAACS,CAApB,EAAuBT,MAAM,CAACU,CAA9B,EAAiCV,MAAM,CAACW,CAAxC;AACArC,MAAAA,MAAM,CAACqB,IAAP,CAAYQ,KAAK,CAAC,CAAD,CAAjB,EAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCA,KAAK,CAAC,CAAD,CAArC;AACD;AACF;;AAED,MAAIS,OAAO,GAAG,IAAIhD,OAAJ,EAAd;AACA,MAAIiD,OAAO,GAAG,IAAIjD,OAAJ,EAAd;AACA,MAAIkD,OAAO,GAAG,IAAIlD,OAAJ,EAAd;AACA,MAAImD,OAAO,GAAG,IAAInD,OAAJ,EAAd;AACA,MAAIoD,OAAO,GAAG,IAAIpD,OAAJ,EAAd;AACA,MAAIqD,OAAO,GAAG,IAAIrD,OAAJ,EAAd;AACA,MAAIsD,OAAO,GAAG,IAAItD,OAAJ,EAAd;AACA,MAAIuD,OAAO,GAAG,IAAIvD,OAAJ,EAAd;;AAEA,WAASwD,YAAT,CAAsBlB,KAAtB,EAA6BmB,MAA7B,EAAqClB,KAArC,EAA4C;AAC1C,SAAK,IAAIG,CAAC,GAAG,CAAR,EAAWgB,EAAE,GAAGpB,KAAK,CAACK,MAA3B,EAAmCD,CAAC,GAAGgB,EAAvC,EAA2ChB,CAAC,EAA5C,EAAgD;AAC9C,UAAIiB,MAAM,GAAGrB,KAAK,CAACI,CAAD,CAAlB;AACA,UAAIkB,MAAM,GAAGtB,KAAK,CAAC,CAACI,CAAC,GAAG,CAAL,IAAUgB,EAAX,CAAlB;AACAV,MAAAA,OAAO,CAACzB,IAAR,CAAaoC,MAAb,EAAqBf,GAArB,CAAyBa,MAAzB;AACAT,MAAAA,OAAO,CAACP,eAAR,CAAwBzB,UAAxB;AACAgC,MAAAA,OAAO,CAACJ,GAAR,CAAYvB,KAAZ;AACA4B,MAAAA,OAAO,CAAC1B,IAAR,CAAaqC,MAAb,EAAqBhB,GAArB,CAAyBa,MAAzB;AACAR,MAAAA,OAAO,CAACR,eAAR,CAAwBzB,UAAxB;AACAiC,MAAAA,OAAO,CAACL,GAAR,CAAYvB,KAAZ;AACA6B,MAAAA,OAAO,CAAC3B,IAAR,CAAaqC,MAAb,EAAqBhB,GAArB,CAAyBa,MAAzB;AACAP,MAAAA,OAAO,CAACT,eAAR,CAAwBxB,cAAxB;AACAiC,MAAAA,OAAO,CAACN,GAAR,CAAYtB,SAAZ;AACA6B,MAAAA,OAAO,CAAC5B,IAAR,CAAaoC,MAAb,EAAqBf,GAArB,CAAyBa,MAAzB;AACAN,MAAAA,OAAO,CAACV,eAAR,CAAwBxB,cAAxB;AACAkC,MAAAA,OAAO,CAACP,GAAR,CAAYtB,SAAZ;AACAd,MAAAA,QAAQ,CAACuB,IAAT,CAAciB,OAAO,CAACH,CAAtB,EAAyBG,OAAO,CAACF,CAAjC,EAAoCE,OAAO,CAACD,CAA5C;AACAvC,MAAAA,QAAQ,CAACuB,IAAT,CAAckB,OAAO,CAACJ,CAAtB,EAAyBI,OAAO,CAACH,CAAjC,EAAoCG,OAAO,CAACF,CAA5C;AACAvC,MAAAA,QAAQ,CAACuB,IAAT,CAAcoB,OAAO,CAACN,CAAtB,EAAyBM,OAAO,CAACL,CAAjC,EAAoCK,OAAO,CAACJ,CAA5C;AACAvC,MAAAA,QAAQ,CAACuB,IAAT,CAAckB,OAAO,CAACJ,CAAtB,EAAyBI,OAAO,CAACH,CAAjC,EAAoCG,OAAO,CAACF,CAA5C;AACAvC,MAAAA,QAAQ,CAACuB,IAAT,CAAcmB,OAAO,CAACL,CAAtB,EAAyBK,OAAO,CAACJ,CAAjC,EAAoCI,OAAO,CAACH,CAA5C;AACAvC,MAAAA,QAAQ,CAACuB,IAAT,CAAcoB,OAAO,CAACN,CAAtB,EAAyBM,OAAO,CAACL,CAAjC,EAAoCK,OAAO,CAACJ,CAA5C,EApB8C,CAoBE;;AAEhDK,MAAAA,OAAO,CAAC7B,IAAR,CAAaoC,MAAb;AACAP,MAAAA,OAAO,CAACX,eAAR,CAAwBzB,UAAxB;AACAoC,MAAAA,OAAO,CAACS,SAAR;AACAR,MAAAA,OAAO,CAAC9B,IAAR,CAAaqC,MAAb;AACAP,MAAAA,OAAO,CAACZ,eAAR,CAAwBzB,UAAxB;AACAqC,MAAAA,OAAO,CAACQ,SAAR;AACAP,MAAAA,OAAO,CAAC/B,IAAR,CAAaqC,MAAb;AACAN,MAAAA,OAAO,CAACb,eAAR,CAAwBxB,cAAxB;AACAqC,MAAAA,OAAO,CAACO,SAAR;AACAN,MAAAA,OAAO,CAAChC,IAAR,CAAaoC,MAAb;AACAJ,MAAAA,OAAO,CAACd,eAAR,CAAwBxB,cAAxB;AACAsC,MAAAA,OAAO,CAACM,SAAR;AACApD,MAAAA,OAAO,CAACsB,IAAR,CAAaqB,OAAO,CAACP,CAArB,EAAwBO,OAAO,CAACN,CAAhC,EAAmCM,OAAO,CAACL,CAA3C;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAasB,OAAO,CAACR,CAArB,EAAwBQ,OAAO,CAACP,CAAhC,EAAmCO,OAAO,CAACN,CAA3C;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAawB,OAAO,CAACV,CAArB,EAAwBU,OAAO,CAACT,CAAhC,EAAmCS,OAAO,CAACR,CAA3C;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAasB,OAAO,CAACR,CAArB,EAAwBQ,OAAO,CAACP,CAAhC,EAAmCO,OAAO,CAACN,CAA3C;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAauB,OAAO,CAACT,CAArB,EAAwBS,OAAO,CAACR,CAAhC,EAAmCQ,OAAO,CAACP,CAA3C;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAawB,OAAO,CAACV,CAArB,EAAwBU,OAAO,CAACT,CAAhC,EAAmCS,OAAO,CAACR,CAA3C;AACArC,MAAAA,MAAM,CAACqB,IAAP,CAAYQ,KAAK,CAAC,CAAD,CAAjB,EAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCA,KAAK,CAAC,CAAD,CAArC;AACA7B,MAAAA,MAAM,CAACqB,IAAP,CAAYQ,KAAK,CAAC,CAAD,CAAjB,EAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCA,KAAK,CAAC,CAAD,CAArC;AACA7B,MAAAA,MAAM,CAACqB,IAAP,CAAYQ,KAAK,CAAC,CAAD,CAAjB,EAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCA,KAAK,CAAC,CAAD,CAArC;AACA7B,MAAAA,MAAM,CAACqB,IAAP,CAAYQ,KAAK,CAAC,CAAD,CAAjB,EAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCA,KAAK,CAAC,CAAD,CAArC;AACA7B,MAAAA,MAAM,CAACqB,IAAP,CAAYQ,KAAK,CAAC,CAAD,CAAjB,EAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCA,KAAK,CAAC,CAAD,CAArC;AACA7B,MAAAA,MAAM,CAACqB,IAAP,CAAYQ,KAAK,CAAC,CAAD,CAAjB,EAAsBA,KAAK,CAAC,CAAD,CAA3B,EAAgCA,KAAK,CAAC,CAAD,CAArC;AACD;AACF;;AAED,MAAIkB,MAAM,GAAG,IAAIzD,OAAJ,EAAb;;AAEA,OAAK,IAAI6B,GAAC,GAAG,CAAb,EAAgBA,GAAC,IAAIvB,SAArB,EAAgCuB,GAAC,EAAjC,EAAqC;AACnCR,IAAAA,KAAK,CAACE,IAAN,CAAWlB,KAAK,CAACmB,UAAN,CAAiBK,GAAC,GAAGvB,SAArB,CAAX;AACAO,IAAAA,EAAE,CAAC2B,GAAH,CAAO,CAAP,EAAU,CAAV,EAAa,CAAb;AACA1B,IAAAA,OAAO,CAACgD,UAAR,CAAmBzC,KAAnB,EAA0BC,SAA1B,EAAqCuC,SAArC;AACA9C,IAAAA,KAAK,CAACgD,YAAN,CAAmBlD,EAAnB,EAAuBC,OAAvB,EAAgC+C,SAAhC;AACAhD,IAAAA,EAAE,CAACkD,YAAH,CAAgBjD,OAAhB,EAAyBC,KAAzB;AACA,QAAIe,KAAK,GAAGX,IAAI,CAAC6C,KAAL,CAAWlD,OAAO,CAAC+B,CAAnB,EAAsB/B,OAAO,CAACiC,CAA9B,CAAZ;AACA/B,IAAAA,UAAU,CAACE,gBAAX,CAA4BL,EAA5B,EAAgCiB,KAAhC;;AAEA,QAAID,GAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACfQ,MAAAA,SAAS,CAACZ,IAAD,EAAOb,MAAP,CAAT;AACD;;AAED4C,IAAAA,YAAY,CAAC5B,KAAD,EAAQ6B,MAAM,CAACjB,GAAP,CAAW,CAAX,EAAc,CAAC,KAAf,EAAsB,CAAtB,CAAR,EAAkC5B,MAAlC,CAAZ;AACA4C,IAAAA,YAAY,CAACtB,KAAD,EAAQuB,MAAM,CAACjB,GAAP,CAAW,GAAX,EAAgB,CAAhB,EAAmB,CAAnB,CAAR,EAA+B7B,MAA/B,CAAZ;AACA6C,IAAAA,YAAY,CAACtB,KAAD,EAAQuB,MAAM,CAACjB,GAAP,CAAW,CAAC,GAAZ,EAAiB,CAAjB,EAAoB,CAApB,CAAR,EAAgC7B,MAAhC,CAAZ;AACAW,IAAAA,SAAS,CAACC,IAAV,CAAeF,KAAf;AACAJ,IAAAA,cAAc,CAACM,IAAf,CAAoBP,UAApB;AACD,GA7IqD,CA6IpD;;;AAGF,OAAKiD,YAAL,CAAkB,UAAlB,EAA8B,IAAI/D,eAAJ,CAAoB,IAAIgE,YAAJ,CAAiB1D,QAAjB,CAApB,EAAgD,CAAhD,CAA9B;AACA,OAAKyD,YAAL,CAAkB,QAAlB,EAA4B,IAAI/D,eAAJ,CAAoB,IAAIgE,YAAJ,CAAiBzD,OAAjB,CAApB,EAA+C,CAA/C,CAA5B;AACA,OAAKwD,YAAL,CAAkB,OAAlB,EAA2B,IAAI/D,eAAJ,CAAoB,IAAIgE,YAAJ,CAAiBxD,MAAjB,CAApB,EAA8C,CAA9C,CAA3B;AACD,CAnJD;;AAqJAN,qBAAqB,CAAC+D,SAAtB,GAAkCC,MAAM,CAACC,MAAP,CAActE,cAAc,CAACoE,SAA7B,CAAlC;;AAEA,IAAIG,4BAA4B,GAAG,SAA/BA,4BAA+B,CAAUjE,KAAV,EAAiBC,SAAjB,EAA4B;AAC7DP,EAAAA,cAAc,CAACQ,IAAf,CAAoB,IAApB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIO,UAAU,GAAG,IAAIf,UAAJ,EAAjB;AACA,MAAIY,EAAE,GAAG,IAAIb,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAT;AACA,MAAIqB,KAAK,GAAG,IAAIrB,OAAJ,EAAZ;AACA,MAAIuE,OAAO,GAAG,IAAIvE,OAAJ,EAAd,CAP6D,CAOhC;;AAE7B,MAAI4B,KAAK,GAAG,CAAC,IAAI5B,OAAJ,CAAY,CAAZ,EAAe,IAAf,EAAqB,CAAC,IAAtB,CAAD,EAA8B,IAAIA,OAAJ,CAAY,CAAZ,EAAe,IAAf,EAAqB,IAArB,CAA9B,EAA0D,IAAIA,OAAJ,CAAY,CAAZ,EAAe,CAAC,IAAhB,EAAsB,CAAtB,CAA1D,CAAZ;AACA,MAAIkC,KAAK,GAAG,CAAC,IAAIlC,OAAJ,CAAY,CAAC,IAAb,EAAmB,CAAnB,EAAsB,IAAtB,CAAD,EAA8B,IAAIA,OAAJ,CAAY,CAAC,IAAb,EAAmB,CAAnB,EAAsB,CAAC,IAAvB,CAA9B,EAA4D,IAAIA,OAAJ,CAAY,IAAZ,EAAkB,CAAlB,EAAqB,CAArB,CAA5D,CAAZ;AACA,MAAIwE,KAAK,GAAG,CAAC,IAAIxE,OAAJ,CAAY,IAAZ,EAAkB,CAAlB,EAAqB,CAAC,IAAtB,CAAD,EAA8B,IAAIA,OAAJ,CAAY,IAAZ,EAAkB,CAAlB,EAAqB,IAArB,CAA9B,EAA0D,IAAIA,OAAJ,CAAY,CAAC,IAAb,EAAmB,CAAnB,EAAsB,CAAtB,CAA1D,CAAZ;AACA,MAAIgD,OAAO,GAAG,IAAIhD,OAAJ,EAAd;AACA,MAAIiD,OAAO,GAAG,IAAIjD,OAAJ,EAAd;AACA,MAAIkD,OAAO,GAAG,IAAIlD,OAAJ,EAAd;AACA,MAAImD,OAAO,GAAG,IAAInD,OAAJ,EAAd;AACA,MAAIoD,OAAO,GAAG,IAAIpD,OAAJ,EAAd;AACA,MAAIqD,OAAO,GAAG,IAAIrD,OAAJ,EAAd;AACA,MAAIsD,OAAO,GAAG,IAAItD,OAAJ,EAAd;AACA,MAAIuD,OAAO,GAAG,IAAIvD,OAAJ,EAAd;;AAEA,WAASwD,YAAT,CAAsBlB,KAAtB,EAA6BmC,SAA7B,EAAwCC,OAAxC,EAAiD;AAC/C,SAAK,IAAIhC,CAAC,GAAG,CAAR,EAAWgB,EAAE,GAAGpB,KAAK,CAACK,MAA3B,EAAmCD,CAAC,GAAGgB,EAAvC,EAA2ChB,CAAC,EAA5C,EAAgD;AAC9C,UAAIiB,MAAM,GAAGrB,KAAK,CAACI,CAAD,CAAlB;AACA,UAAIkB,MAAM,GAAGtB,KAAK,CAAC,CAACI,CAAC,GAAG,CAAL,IAAUgB,EAAX,CAAlB;AACAV,MAAAA,OAAO,CAACzB,IAAR,CAAaoC,MAAb;AACAX,MAAAA,OAAO,CAACP,eAAR,CAAwBzB,UAAxB;AACAgC,MAAAA,OAAO,CAACJ,GAAR,CAAY6B,SAAZ;AACAxB,MAAAA,OAAO,CAAC1B,IAAR,CAAaqC,MAAb;AACAX,MAAAA,OAAO,CAACR,eAAR,CAAwBzB,UAAxB;AACAiC,MAAAA,OAAO,CAACL,GAAR,CAAY6B,SAAZ;AACAvB,MAAAA,OAAO,CAAC3B,IAAR,CAAaqC,MAAb;AACAV,MAAAA,OAAO,CAACT,eAAR,CAAwBzB,UAAxB;AACAkC,MAAAA,OAAO,CAACN,GAAR,CAAY8B,OAAZ;AACAvB,MAAAA,OAAO,CAAC5B,IAAR,CAAaoC,MAAb;AACAR,MAAAA,OAAO,CAACV,eAAR,CAAwBzB,UAAxB;AACAmC,MAAAA,OAAO,CAACP,GAAR,CAAY8B,OAAZ;AACAlE,MAAAA,QAAQ,CAACuB,IAAT,CAAciB,OAAO,CAACH,CAAtB,EAAyBG,OAAO,CAACF,CAAjC,EAAoCE,OAAO,CAACD,CAA5C;AACAvC,MAAAA,QAAQ,CAACuB,IAAT,CAAckB,OAAO,CAACJ,CAAtB,EAAyBI,OAAO,CAACH,CAAjC,EAAoCG,OAAO,CAACF,CAA5C;AACAvC,MAAAA,QAAQ,CAACuB,IAAT,CAAcoB,OAAO,CAACN,CAAtB,EAAyBM,OAAO,CAACL,CAAjC,EAAoCK,OAAO,CAACJ,CAA5C;AACAvC,MAAAA,QAAQ,CAACuB,IAAT,CAAckB,OAAO,CAACJ,CAAtB,EAAyBI,OAAO,CAACH,CAAjC,EAAoCG,OAAO,CAACF,CAA5C;AACAvC,MAAAA,QAAQ,CAACuB,IAAT,CAAcmB,OAAO,CAACL,CAAtB,EAAyBK,OAAO,CAACJ,CAAjC,EAAoCI,OAAO,CAACH,CAA5C;AACAvC,MAAAA,QAAQ,CAACuB,IAAT,CAAcoB,OAAO,CAACN,CAAtB,EAAyBM,OAAO,CAACL,CAAjC,EAAoCK,OAAO,CAACJ,CAA5C,EApB8C,CAoBE;;AAEhDK,MAAAA,OAAO,CAAC7B,IAAR,CAAaoC,MAAb;AACAP,MAAAA,OAAO,CAACX,eAAR,CAAwBzB,UAAxB;AACAoC,MAAAA,OAAO,CAACS,SAAR;AACAR,MAAAA,OAAO,CAAC9B,IAAR,CAAaqC,MAAb;AACAP,MAAAA,OAAO,CAACZ,eAAR,CAAwBzB,UAAxB;AACAqC,MAAAA,OAAO,CAACQ,SAAR;AACAP,MAAAA,OAAO,CAAC/B,IAAR,CAAaqC,MAAb;AACAN,MAAAA,OAAO,CAACb,eAAR,CAAwBzB,UAAxB;AACAsC,MAAAA,OAAO,CAACO,SAAR;AACAN,MAAAA,OAAO,CAAChC,IAAR,CAAaoC,MAAb;AACAJ,MAAAA,OAAO,CAACd,eAAR,CAAwBzB,UAAxB;AACAuC,MAAAA,OAAO,CAACM,SAAR;AACApD,MAAAA,OAAO,CAACsB,IAAR,CAAaqB,OAAO,CAACP,CAArB,EAAwBO,OAAO,CAACN,CAAhC,EAAmCM,OAAO,CAACL,CAA3C;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAasB,OAAO,CAACR,CAArB,EAAwBQ,OAAO,CAACP,CAAhC,EAAmCO,OAAO,CAACN,CAA3C;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAawB,OAAO,CAACV,CAArB,EAAwBU,OAAO,CAACT,CAAhC,EAAmCS,OAAO,CAACR,CAA3C;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAasB,OAAO,CAACR,CAArB,EAAwBQ,OAAO,CAACP,CAAhC,EAAmCO,OAAO,CAACN,CAA3C;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAauB,OAAO,CAACT,CAArB,EAAwBS,OAAO,CAACR,CAAhC,EAAmCQ,OAAO,CAACP,CAA3C;AACAtC,MAAAA,OAAO,CAACsB,IAAR,CAAawB,OAAO,CAACV,CAArB,EAAwBU,OAAO,CAACT,CAAhC,EAAmCS,OAAO,CAACR,CAA3C;AACD;AACF;;AAED,MAAI0B,SAAS,GAAG,IAAIzE,OAAJ,EAAhB;AACA,MAAI0E,OAAO,GAAG,IAAI1E,OAAJ,EAAd;;AAEA,OAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIvB,SAArB,EAAgCuB,CAAC,EAAjC,EAAqC;AACnCR,IAAAA,KAAK,CAACE,IAAN,CAAWlB,KAAK,CAACmB,UAAN,CAAiBK,CAAC,GAAGvB,SAArB,CAAX;AACAiE,IAAAA,OAAO,CAAChD,IAAR,CAAalB,KAAK,CAACsE,YAAN,CAAmB9C,CAAC,GAAGvB,SAAvB,CAAb;AACA,QAAIwB,KAAK,GAAGX,IAAI,CAAC6C,KAAL,CAAWO,OAAO,CAAC1B,CAAnB,EAAsB0B,OAAO,CAACxB,CAA9B,CAAZ;AACA/B,IAAAA,UAAU,CAACE,gBAAX,CAA4BL,EAA5B,EAAgCiB,KAAhC,EAJmC,CAIK;;AAExC,QAAIT,KAAK,CAACyB,CAAN,GAAU,EAAd,EAAkB;AAChB2B,MAAAA,SAAS,CAACjC,GAAV,CAAc,CAAC,IAAf,EAAqB,CAAC,IAAtB,EAA4B,CAA5B;AACAiC,MAAAA,SAAS,CAAChC,eAAV,CAA0BzB,UAA1B;AACAyD,MAAAA,SAAS,CAAC7B,GAAV,CAAcvB,KAAd;AACAqD,MAAAA,OAAO,CAAClC,GAAR,CAAY,IAAZ,EAAkB,CAAC,IAAnB,EAAyB,CAAzB;AACAkC,MAAAA,OAAO,CAACjC,eAAR,CAAwBzB,UAAxB;AACA0D,MAAAA,OAAO,CAAC9B,GAAR,CAAYvB,KAAZ;AACAmC,MAAAA,YAAY,CAAC5B,KAAD,EAAQ6C,SAAR,EAAmBC,OAAnB,CAAZ;AACAD,MAAAA,SAAS,CAACjC,GAAV,CAAc,CAAC,GAAf,EAAoB,CAAC,GAArB,EAA0B,CAA1B;AACAiC,MAAAA,SAAS,CAAChC,eAAV,CAA0BzB,UAA1B;AACAyD,MAAAA,SAAS,CAAC7B,GAAV,CAAcvB,KAAd;AACAqD,MAAAA,OAAO,CAAClC,GAAR,CAAY,CAAC,GAAb,EAAkB,CAACnB,KAAK,CAACyB,CAAzB,EAA4B,CAA5B;AACA4B,MAAAA,OAAO,CAACjC,eAAR,CAAwBzB,UAAxB;AACA0D,MAAAA,OAAO,CAAC9B,GAAR,CAAYvB,KAAZ;AACAmC,MAAAA,YAAY,CAACtB,KAAD,EAAQuC,SAAR,EAAmBC,OAAnB,CAAZ;AACAD,MAAAA,SAAS,CAACjC,GAAV,CAAc,GAAd,EAAmB,CAAC,GAApB,EAAyB,CAAzB;AACAiC,MAAAA,SAAS,CAAChC,eAAV,CAA0BzB,UAA1B;AACAyD,MAAAA,SAAS,CAAC7B,GAAV,CAAcvB,KAAd;AACAqD,MAAAA,OAAO,CAAClC,GAAR,CAAY,GAAZ,EAAiB,CAACnB,KAAK,CAACyB,CAAxB,EAA2B,CAA3B;AACA4B,MAAAA,OAAO,CAACjC,eAAR,CAAwBzB,UAAxB;AACA0D,MAAAA,OAAO,CAAC9B,GAAR,CAAYvB,KAAZ;AACAmC,MAAAA,YAAY,CAACgB,KAAD,EAAQC,SAAR,EAAmBC,OAAnB,CAAZ;AACD,KAtBD,MAsBO;AACLD,MAAAA,SAAS,CAACjC,GAAV,CAAc,CAAd,EAAiB,CAAC,GAAlB,EAAuB,CAAvB;AACAiC,MAAAA,SAAS,CAAChC,eAAV,CAA0BzB,UAA1B;AACAyD,MAAAA,SAAS,CAAC7B,GAAV,CAAcvB,KAAd;AACAqD,MAAAA,OAAO,CAAClC,GAAR,CAAY,CAAZ,EAAe,CAACnB,KAAK,CAACyB,CAAtB,EAAyB,CAAzB;AACA4B,MAAAA,OAAO,CAACjC,eAAR,CAAwBzB,UAAxB;AACA0D,MAAAA,OAAO,CAAC9B,GAAR,CAAYvB,KAAZ;AACAmC,MAAAA,YAAY,CAACgB,KAAD,EAAQC,SAAR,EAAmBC,OAAnB,CAAZ;AACD;AACF;;AAED,OAAKT,YAAL,CAAkB,UAAlB,EAA8B,IAAI/D,eAAJ,CAAoB,IAAIgE,YAAJ,CAAiB1D,QAAjB,CAApB,EAAgD,CAAhD,CAA9B;AACA,OAAKyD,YAAL,CAAkB,QAAlB,EAA4B,IAAI/D,eAAJ,CAAoB,IAAIgE,YAAJ,CAAiBzD,OAAjB,CAApB,EAA+C,CAA/C,CAA5B;AACD,CA7GD;;AA+GA6D,4BAA4B,CAACH,SAA7B,GAAyCC,MAAM,CAACC,MAAP,CAActE,cAAc,CAACoE,SAA7B,CAAzC;;AAEA,IAAIS,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAUvE,KAAV,EAAiBC,SAAjB,EAA4B;AAC5DP,EAAAA,cAAc,CAACQ,IAAf,CAAoB,IAApB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIK,EAAE,GAAG,IAAIb,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAT;AACA,MAAIc,OAAO,GAAG,IAAId,OAAJ,EAAd;AACA,MAAIgB,UAAU,GAAG,IAAIf,UAAJ,EAAjB;AACA,MAAIgB,cAAc,GAAG,IAAIhB,UAAJ,EAArB;AACAgB,EAAAA,cAAc,CAACC,gBAAf,CAAgCL,EAAhC,EAAoCM,IAAI,CAACC,EAAL,GAAU,CAA9C;AACA,MAAIC,KAAK,GAAG,IAAIrB,OAAJ,EAAZ;AACA,MAAIsB,SAAS,GAAG,IAAItB,OAAJ,EAAhB;AACAsB,EAAAA,SAAS,CAACC,IAAV,CAAelB,KAAK,CAACmB,UAAN,CAAiB,CAAjB,CAAf;AACAF,EAAAA,SAAS,CAACwB,CAAV,GAAc,CAAd;AACA,MAAIE,OAAO,GAAG,IAAIhD,OAAJ,EAAd;AACA,MAAIiD,OAAO,GAAG,IAAIjD,OAAJ,EAAd;AACA,MAAIkD,OAAO,GAAG,IAAIlD,OAAJ,EAAd;AACA,MAAImD,OAAO,GAAG,IAAInD,OAAJ,EAAd;;AAEA,OAAK,IAAI6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIvB,SAArB,EAAgCuB,CAAC,EAAjC,EAAqC;AACnCR,IAAAA,KAAK,CAACE,IAAN,CAAWlB,KAAK,CAACmB,UAAN,CAAiBK,CAAC,GAAGvB,SAArB,CAAX;AACAe,IAAAA,KAAK,CAACyB,CAAN,GAAU,CAAV;AACAhC,IAAAA,OAAO,CAACgD,UAAR,CAAmBzC,KAAnB,EAA0BC,SAA1B;AACA,QAAIQ,KAAK,GAAGX,IAAI,CAAC6C,KAAL,CAAWlD,OAAO,CAAC+B,CAAnB,EAAsB/B,OAAO,CAACiC,CAA9B,CAAZ;AACA/B,IAAAA,UAAU,CAACE,gBAAX,CAA4BL,EAA5B,EAAgCiB,KAAhC;AACAkB,IAAAA,OAAO,CAACR,GAAR,CAAY,CAAC,GAAb,EAAkB,CAAlB,EAAqB,CAArB;AACAQ,IAAAA,OAAO,CAACP,eAAR,CAAwBzB,UAAxB;AACAgC,IAAAA,OAAO,CAACJ,GAAR,CAAYvB,KAAZ;AACA4B,IAAAA,OAAO,CAACT,GAAR,CAAY,GAAZ,EAAiB,CAAjB,EAAoB,CAApB;AACAS,IAAAA,OAAO,CAACR,eAAR,CAAwBzB,UAAxB;AACAiC,IAAAA,OAAO,CAACL,GAAR,CAAYvB,KAAZ;AACA6B,IAAAA,OAAO,CAACV,GAAR,CAAY,GAAZ,EAAiB,CAAjB,EAAoB,CAApB;AACAU,IAAAA,OAAO,CAACT,eAAR,CAAwBxB,cAAxB;AACAiC,IAAAA,OAAO,CAACN,GAAR,CAAYtB,SAAZ;AACA6B,IAAAA,OAAO,CAACX,GAAR,CAAY,CAAC,GAAb,EAAkB,CAAlB,EAAqB,CAArB;AACAW,IAAAA,OAAO,CAACV,eAAR,CAAwBxB,cAAxB;AACAkC,IAAAA,OAAO,CAACP,GAAR,CAAYtB,SAAZ;AACAd,IAAAA,QAAQ,CAACuB,IAAT,CAAciB,OAAO,CAACH,CAAtB,EAAyBG,OAAO,CAACF,CAAjC,EAAoCE,OAAO,CAACD,CAA5C;AACAvC,IAAAA,QAAQ,CAACuB,IAAT,CAAckB,OAAO,CAACJ,CAAtB,EAAyBI,OAAO,CAACH,CAAjC,EAAoCG,OAAO,CAACF,CAA5C;AACAvC,IAAAA,QAAQ,CAACuB,IAAT,CAAcoB,OAAO,CAACN,CAAtB,EAAyBM,OAAO,CAACL,CAAjC,EAAoCK,OAAO,CAACJ,CAA5C;AACAvC,IAAAA,QAAQ,CAACuB,IAAT,CAAckB,OAAO,CAACJ,CAAtB,EAAyBI,OAAO,CAACH,CAAjC,EAAoCG,OAAO,CAACF,CAA5C;AACAvC,IAAAA,QAAQ,CAACuB,IAAT,CAAcmB,OAAO,CAACL,CAAtB,EAAyBK,OAAO,CAACJ,CAAjC,EAAoCI,OAAO,CAACH,CAA5C;AACAvC,IAAAA,QAAQ,CAACuB,IAAT,CAAcoB,OAAO,CAACN,CAAtB,EAAyBM,OAAO,CAACL,CAAjC,EAAoCK,OAAO,CAACJ,CAA5C;AACAzB,IAAAA,SAAS,CAACC,IAAV,CAAeF,KAAf;AACAJ,IAAAA,cAAc,CAACM,IAAf,CAAoBP,UAApB;AACD;;AAED,OAAKiD,YAAL,CAAkB,UAAlB,EAA8B,IAAI/D,eAAJ,CAAoB,IAAIgE,YAAJ,CAAiB1D,QAAjB,CAApB,EAAgD,CAAhD,CAA9B;AACD,CA9CD;;AAgDAoE,2BAA2B,CAACT,SAA5B,GAAwCC,MAAM,CAACC,MAAP,CAActE,cAAc,CAACoE,SAA7B,CAAxC;;AAEA,IAAIU,WAAW,GAAG,SAAdA,WAAc,GAAY;AAC5B9E,EAAAA,cAAc,CAACQ,IAAf,CAAoB,IAApB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AAEA,OAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B,QAAIgB,CAAC,GAAG1B,IAAI,CAAC2D,MAAL,KAAgB,GAAhB,GAAsB,GAA9B;AACA,QAAIhC,CAAC,GAAG3B,IAAI,CAAC2D,MAAL,KAAgB,EAAhB,GAAqB,EAA7B;AACA,QAAI/B,CAAC,GAAG5B,IAAI,CAAC2D,MAAL,KAAgB,GAAhB,GAAsB,GAA9B;AACA,QAAIC,IAAI,GAAG5D,IAAI,CAAC2D,MAAL,KAAgB,EAAhB,GAAqB,EAAhC;AACAtE,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAC,GAAGkC,IAAlB,EAAwBjC,CAAxB,EAA2BC,CAAC,GAAGgC,IAA/B;AACAvE,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAC,GAAGkC,IAAlB,EAAwBjC,CAAxB,EAA2BC,CAAC,GAAGgC,IAA/B;AACAvE,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAC,GAAGkC,IAAlB,EAAwBjC,CAAxB,EAA2BC,CAAC,GAAGgC,IAA/B;AACAvE,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAC,GAAGkC,IAAlB,EAAwBjC,CAAxB,EAA2BC,CAAC,GAAGgC,IAA/B;AACAvE,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAC,GAAGkC,IAAlB,EAAwBjC,CAAxB,EAA2BC,CAAC,GAAGgC,IAA/B;AACAvE,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAC,GAAGkC,IAAlB,EAAwBjC,CAAxB,EAA2BC,CAAC,GAAGgC,IAA/B;AACD;;AAED,OAAKd,YAAL,CAAkB,UAAlB,EAA8B,IAAI/D,eAAJ,CAAoB,IAAIgE,YAAJ,CAAiB1D,QAAjB,CAApB,EAAgD,CAAhD,CAA9B;AACD,CAlBD;;AAoBAqE,WAAW,CAACV,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAActE,cAAc,CAACoE,SAA7B,CAAxB;;AAEA,IAAIa,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,SAAV,EAAqB;AACvClF,EAAAA,cAAc,CAACQ,IAAf,CAAoB,IAApB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIE,MAAM,GAAG,EAAb;AACA,MAAIwE,SAAS,GAAG,IAAI/E,SAAJ,EAAhB;AACA+E,EAAAA,SAAS,CAACC,GAAV,CAAcC,SAAd,CAAwB5C,GAAxB,CAA4B,CAA5B,EAA+B,CAAC,CAAhC,EAAmC,CAAnC;;AAEA,OAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA+B;AAC7B,QAAIgB,CAAC,GAAG1B,IAAI,CAAC2D,MAAL,KAAgB,GAAhB,GAAsB,GAA9B;AACA,QAAI/B,CAAC,GAAG5B,IAAI,CAAC2D,MAAL,KAAgB,GAAhB,GAAsB,GAA9B;AACAI,IAAAA,SAAS,CAACC,GAAV,CAAcE,MAAd,CAAqB7C,GAArB,CAAyBK,CAAzB,EAA4B,EAA5B,EAAgCE,CAAhC;AACA,QAAIuC,aAAa,GAAGJ,SAAS,CAACK,eAAV,CAA0BN,SAA1B,CAApB;AACA,QAAIK,aAAa,CAAC3C,MAAd,KAAyB,CAA7B,EAAgC;AAChC,QAAIG,CAAC,GAAGwC,aAAa,CAAC,CAAD,CAAb,CAAiBjE,KAAjB,CAAuByB,CAA/B;AACA,QAAI0C,MAAM,GAAGrE,IAAI,CAAC2D,MAAL,KAAgB,CAAhB,GAAoB,GAAjC;AACA,QAAIhD,KAAK,GAAGX,IAAI,CAAC2D,MAAL,KAAgB3D,IAAI,CAACC,EAArB,GAA0B,CAAtC;AACAZ,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAC,GAAG1B,IAAI,CAACa,GAAL,CAASF,KAAT,CAAlB,EAAmCgB,CAAnC,EAAsCC,CAAC,GAAG5B,IAAI,CAACc,GAAL,CAASH,KAAT,CAA1C;AACAtB,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAd,EAAiBC,CAAC,GAAG0C,MAArB,EAA6BzC,CAA7B;AACAvC,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAC,GAAG1B,IAAI,CAACa,GAAL,CAASF,KAAK,GAAGX,IAAI,CAACC,EAAtB,CAAlB,EAA6C0B,CAA7C,EAAgDC,CAAC,GAAG5B,IAAI,CAACc,GAAL,CAASH,KAAK,GAAGX,IAAI,CAACC,EAAtB,CAApD;AACAU,IAAAA,KAAK,IAAIX,IAAI,CAACC,EAAL,GAAU,CAAnB;AACAZ,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAC,GAAG1B,IAAI,CAACa,GAAL,CAASF,KAAT,CAAlB,EAAmCgB,CAAnC,EAAsCC,CAAC,GAAG5B,IAAI,CAACc,GAAL,CAASH,KAAT,CAA1C;AACAtB,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAd,EAAiBC,CAAC,GAAG0C,MAArB,EAA6BzC,CAA7B;AACAvC,IAAAA,QAAQ,CAACuB,IAAT,CAAcc,CAAC,GAAG1B,IAAI,CAACa,GAAL,CAASF,KAAK,GAAGX,IAAI,CAACC,EAAtB,CAAlB,EAA6C0B,CAA7C,EAAgDC,CAAC,GAAG5B,IAAI,CAACc,GAAL,CAASH,KAAK,GAAGX,IAAI,CAACC,EAAtB,CAApD;AACA,QAAI0D,MAAM,GAAG3D,IAAI,CAAC2D,MAAL,KAAgB,GAA7B;;AAEA,SAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BhC,MAAAA,MAAM,CAACqB,IAAP,CAAY,MAAM+C,MAAlB,EAA0B,MAAMA,MAAhC,EAAwC,CAAxC;AACD;AACF;;AAED,OAAKb,YAAL,CAAkB,UAAlB,EAA8B,IAAI/D,eAAJ,CAAoB,IAAIgE,YAAJ,CAAiB1D,QAAjB,CAApB,EAAgD,CAAhD,CAA9B;AACA,OAAKyD,YAAL,CAAkB,OAAlB,EAA2B,IAAI/D,eAAJ,CAAoB,IAAIgE,YAAJ,CAAiBxD,MAAjB,CAApB,EAA8C,CAA9C,CAA3B;AACD,CAhCD;;AAkCAsE,aAAa,CAACb,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAActE,cAAc,CAACoE,SAA7B,CAA1B;AAEA,SAAS/D,qBAAT,EAAgCkE,4BAAhC,EAA8DM,2BAA9D,EAA2FC,WAA3F,EAAwGG,aAAxG","sourcesContent":["import { BufferGeometry, Vector3, Quaternion, BufferAttribute, Raycaster } from 'three';\n\nvar RollerCoasterGeometry = function (curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var normals = [];\n  var colors = [];\n  var color1 = [1, 1, 1];\n  var color2 = [1, 1, 0];\n  var up = new Vector3(0, 1, 0);\n  var forward = new Vector3();\n  var right = new Vector3();\n  var quaternion = new Quaternion();\n  var prevQuaternion = new Quaternion();\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n  var point = new Vector3();\n  var prevPoint = new Vector3();\n  prevPoint.copy(curve.getPointAt(0)); // shapes\n\n  var step = [new Vector3(-0.225, 0, 0), new Vector3(0, -0.05, 0), new Vector3(0, -0.175, 0), new Vector3(0, -0.05, 0), new Vector3(0.225, 0, 0), new Vector3(0, -0.175, 0)];\n  var PI2 = Math.PI * 2;\n  var sides = 5;\n  var tube1 = [];\n\n  for (let i = 0; i < sides; i++) {\n    var angle = i / sides * PI2;\n    tube1.push(new Vector3(Math.sin(angle) * 0.06, Math.cos(angle) * 0.06, 0));\n  }\n\n  var sides = 6;\n  var tube2 = [];\n\n  for (let i = 0; i < sides; i++) {\n    var angle = i / sides * PI2;\n    tube2.push(new Vector3(Math.sin(angle) * 0.025, Math.cos(angle) * 0.025, 0));\n  }\n\n  var vector = new Vector3();\n  var normal = new Vector3();\n\n  function drawShape(shape, color) {\n    normal.set(0, 0, -1).applyQuaternion(quaternion);\n\n    for (let j = 0; j < shape.length; j++) {\n      vector.copy(shape[j]);\n      vector.applyQuaternion(quaternion);\n      vector.add(point);\n      vertices.push(vector.x, vector.y, vector.z);\n      normals.push(normal.x, normal.y, normal.z);\n      colors.push(color[0], color[1], color[2]);\n    }\n\n    normal.set(0, 0, 1).applyQuaternion(quaternion);\n\n    for (let j = shape.length - 1; j >= 0; j--) {\n      vector.copy(shape[j]);\n      vector.applyQuaternion(quaternion);\n      vector.add(point);\n      vertices.push(vector.x, vector.y, vector.z);\n      normals.push(normal.x, normal.y, normal.z);\n      colors.push(color[0], color[1], color[2]);\n    }\n  }\n\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  var normal1 = new Vector3();\n  var normal2 = new Vector3();\n  var normal3 = new Vector3();\n  var normal4 = new Vector3();\n\n  function extrudeShape(shape, offset, color) {\n    for (let j = 0, jl = shape.length; j < jl; j++) {\n      var point1 = shape[j];\n      var point2 = shape[(j + 1) % jl];\n      vector1.copy(point1).add(offset);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(point);\n      vector2.copy(point2).add(offset);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(point);\n      vector3.copy(point2).add(offset);\n      vector3.applyQuaternion(prevQuaternion);\n      vector3.add(prevPoint);\n      vector4.copy(point1).add(offset);\n      vector4.applyQuaternion(prevQuaternion);\n      vector4.add(prevPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z); //\n\n      normal1.copy(point1);\n      normal1.applyQuaternion(quaternion);\n      normal1.normalize();\n      normal2.copy(point2);\n      normal2.applyQuaternion(quaternion);\n      normal2.normalize();\n      normal3.copy(point2);\n      normal3.applyQuaternion(prevQuaternion);\n      normal3.normalize();\n      normal4.copy(point1);\n      normal4.applyQuaternion(prevQuaternion);\n      normal4.normalize();\n      normals.push(normal1.x, normal1.y, normal1.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal3.x, normal3.y, normal3.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n      colors.push(color[0], color[1], color[2]);\n    }\n  }\n\n  var offset = new Vector3();\n\n  for (let i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    up.set(0, 1, 0);\n    forward.subVectors(point, prevPoint).normalize();\n    right.crossVectors(up, forward).normalize();\n    up.crossVectors(forward, right);\n    var angle = Math.atan2(forward.x, forward.z);\n    quaternion.setFromAxisAngle(up, angle);\n\n    if (i % 2 === 0) {\n      drawShape(step, color2);\n    }\n\n    extrudeShape(tube1, offset.set(0, -0.125, 0), color2);\n    extrudeShape(tube2, offset.set(0.2, 0, 0), color1);\n    extrudeShape(tube2, offset.set(-0.2, 0, 0), color1);\n    prevPoint.copy(point);\n    prevQuaternion.copy(quaternion);\n  } // console.log( vertices.length );\n\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n  this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n};\n\nRollerCoasterGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar RollerCoasterLiftersGeometry = function (curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var normals = [];\n  var quaternion = new Quaternion();\n  var up = new Vector3(0, 1, 0);\n  var point = new Vector3();\n  var tangent = new Vector3(); // shapes\n\n  var tube1 = [new Vector3(0, 0.05, -0.05), new Vector3(0, 0.05, 0.05), new Vector3(0, -0.05, 0)];\n  var tube2 = [new Vector3(-0.05, 0, 0.05), new Vector3(-0.05, 0, -0.05), new Vector3(0.05, 0, 0)];\n  var tube3 = [new Vector3(0.05, 0, -0.05), new Vector3(0.05, 0, 0.05), new Vector3(-0.05, 0, 0)];\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  var normal1 = new Vector3();\n  var normal2 = new Vector3();\n  var normal3 = new Vector3();\n  var normal4 = new Vector3();\n\n  function extrudeShape(shape, fromPoint, toPoint) {\n    for (let j = 0, jl = shape.length; j < jl; j++) {\n      var point1 = shape[j];\n      var point2 = shape[(j + 1) % jl];\n      vector1.copy(point1);\n      vector1.applyQuaternion(quaternion);\n      vector1.add(fromPoint);\n      vector2.copy(point2);\n      vector2.applyQuaternion(quaternion);\n      vector2.add(fromPoint);\n      vector3.copy(point2);\n      vector3.applyQuaternion(quaternion);\n      vector3.add(toPoint);\n      vector4.copy(point1);\n      vector4.applyQuaternion(quaternion);\n      vector4.add(toPoint);\n      vertices.push(vector1.x, vector1.y, vector1.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector4.x, vector4.y, vector4.z);\n      vertices.push(vector2.x, vector2.y, vector2.z);\n      vertices.push(vector3.x, vector3.y, vector3.z);\n      vertices.push(vector4.x, vector4.y, vector4.z); //\n\n      normal1.copy(point1);\n      normal1.applyQuaternion(quaternion);\n      normal1.normalize();\n      normal2.copy(point2);\n      normal2.applyQuaternion(quaternion);\n      normal2.normalize();\n      normal3.copy(point2);\n      normal3.applyQuaternion(quaternion);\n      normal3.normalize();\n      normal4.copy(point1);\n      normal4.applyQuaternion(quaternion);\n      normal4.normalize();\n      normals.push(normal1.x, normal1.y, normal1.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n      normals.push(normal2.x, normal2.y, normal2.z);\n      normals.push(normal3.x, normal3.y, normal3.z);\n      normals.push(normal4.x, normal4.y, normal4.z);\n    }\n  }\n\n  var fromPoint = new Vector3();\n  var toPoint = new Vector3();\n\n  for (let i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    tangent.copy(curve.getTangentAt(i / divisions));\n    var angle = Math.atan2(tangent.x, tangent.z);\n    quaternion.setFromAxisAngle(up, angle); //\n\n    if (point.y > 10) {\n      fromPoint.set(-0.75, -0.35, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0.75, -0.35, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube1, fromPoint, toPoint);\n      fromPoint.set(-0.7, -0.3, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(-0.7, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube2, fromPoint, toPoint);\n      fromPoint.set(0.7, -0.3, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0.7, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube3, fromPoint, toPoint);\n    } else {\n      fromPoint.set(0, -0.2, 0);\n      fromPoint.applyQuaternion(quaternion);\n      fromPoint.add(point);\n      toPoint.set(0, -point.y, 0);\n      toPoint.applyQuaternion(quaternion);\n      toPoint.add(point);\n      extrudeShape(tube3, fromPoint, toPoint);\n    }\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('normal', new BufferAttribute(new Float32Array(normals), 3));\n};\n\nRollerCoasterLiftersGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar RollerCoasterShadowGeometry = function (curve, divisions) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var up = new Vector3(0, 1, 0);\n  var forward = new Vector3();\n  var quaternion = new Quaternion();\n  var prevQuaternion = new Quaternion();\n  prevQuaternion.setFromAxisAngle(up, Math.PI / 2);\n  var point = new Vector3();\n  var prevPoint = new Vector3();\n  prevPoint.copy(curve.getPointAt(0));\n  prevPoint.y = 0;\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n\n  for (let i = 1; i <= divisions; i++) {\n    point.copy(curve.getPointAt(i / divisions));\n    point.y = 0;\n    forward.subVectors(point, prevPoint);\n    var angle = Math.atan2(forward.x, forward.z);\n    quaternion.setFromAxisAngle(up, angle);\n    vector1.set(-0.3, 0, 0);\n    vector1.applyQuaternion(quaternion);\n    vector1.add(point);\n    vector2.set(0.3, 0, 0);\n    vector2.applyQuaternion(quaternion);\n    vector2.add(point);\n    vector3.set(0.3, 0, 0);\n    vector3.applyQuaternion(prevQuaternion);\n    vector3.add(prevPoint);\n    vector4.set(-0.3, 0, 0);\n    vector4.applyQuaternion(prevQuaternion);\n    vector4.add(prevPoint);\n    vertices.push(vector1.x, vector1.y, vector1.z);\n    vertices.push(vector2.x, vector2.y, vector2.z);\n    vertices.push(vector4.x, vector4.y, vector4.z);\n    vertices.push(vector2.x, vector2.y, vector2.z);\n    vertices.push(vector3.x, vector3.y, vector3.z);\n    vertices.push(vector4.x, vector4.y, vector4.z);\n    prevPoint.copy(point);\n    prevQuaternion.copy(quaternion);\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n};\n\nRollerCoasterShadowGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar SkyGeometry = function () {\n  BufferGeometry.call(this);\n  var vertices = [];\n\n  for (let i = 0; i < 100; i++) {\n    var x = Math.random() * 800 - 400;\n    var y = Math.random() * 50 + 50;\n    var z = Math.random() * 800 - 400;\n    var size = Math.random() * 40 + 20;\n    vertices.push(x - size, y, z - size);\n    vertices.push(x + size, y, z - size);\n    vertices.push(x - size, y, z + size);\n    vertices.push(x + size, y, z - size);\n    vertices.push(x + size, y, z + size);\n    vertices.push(x - size, y, z + size);\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n};\n\nSkyGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nvar TreesGeometry = function (landscape) {\n  BufferGeometry.call(this);\n  var vertices = [];\n  var colors = [];\n  var raycaster = new Raycaster();\n  raycaster.ray.direction.set(0, -1, 0);\n\n  for (let i = 0; i < 2000; i++) {\n    var x = Math.random() * 500 - 250;\n    var z = Math.random() * 500 - 250;\n    raycaster.ray.origin.set(x, 50, z);\n    var intersections = raycaster.intersectObject(landscape);\n    if (intersections.length === 0) continue;\n    var y = intersections[0].point.y;\n    var height = Math.random() * 5 + 0.5;\n    var angle = Math.random() * Math.PI * 2;\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n    vertices.push(x, y + height, z);\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n    angle += Math.PI / 2;\n    vertices.push(x + Math.sin(angle), y, z + Math.cos(angle));\n    vertices.push(x, y + height, z);\n    vertices.push(x + Math.sin(angle + Math.PI), y, z + Math.cos(angle + Math.PI));\n    var random = Math.random() * 0.1;\n\n    for (let j = 0; j < 6; j++) {\n      colors.push(0.2 + random, 0.4 + random, 0);\n    }\n  }\n\n  this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n  this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 3));\n};\n\nTreesGeometry.prototype = Object.create(BufferGeometry.prototype);\n\nexport { RollerCoasterGeometry, RollerCoasterLiftersGeometry, RollerCoasterShadowGeometry, SkyGeometry, TreesGeometry };\n"]},"metadata":{},"sourceType":"module"}