{"ast":null,"code":"import { TempNode } from './TempNode.js';\n\nfunction FunctionCallNode(func, inputs) {\n  TempNode.call(this);\n  this.setFunction(func, inputs);\n}\n\nFunctionCallNode.prototype = Object.create(TempNode.prototype);\nFunctionCallNode.prototype.constructor = FunctionCallNode;\nFunctionCallNode.prototype.nodeType = 'FunctionCall';\n\nFunctionCallNode.prototype.setFunction = function (func, inputs) {\n  this.value = func;\n  this.inputs = inputs || [];\n};\n\nFunctionCallNode.prototype.getFunction = function () {\n  return this.value;\n};\n\nFunctionCallNode.prototype.getType = function (builder) {\n  return this.value.getType(builder);\n};\n\nFunctionCallNode.prototype.generate = function (builder, output) {\n  var type = this.getType(builder),\n      func = this.value;\n  var code = func.build(builder, output) + '( ',\n      params = [];\n\n  for (var i = 0; i < func.inputs.length; i++) {\n    var inpt = func.inputs[i],\n        param = this.inputs[i] || this.inputs[inpt.name];\n    params.push(param.build(builder, builder.getTypeByFormat(inpt.type)));\n  }\n\n  code += params.join(', ') + ' )';\n  return builder.format(code, type, output);\n};\n\nFunctionCallNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n\n  for (var prop in source.inputs) {\n    this.inputs[prop] = source.inputs[prop];\n  }\n\n  this.value = source.value;\n  return this;\n};\n\nFunctionCallNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    var func = this.value;\n    data = this.createJSONNode(meta);\n    data.value = this.value.toJSON(meta).uuid;\n\n    if (func.inputs.length) {\n      data.inputs = {};\n\n      for (var i = 0; i < func.inputs.length; i++) {\n        var inpt = func.inputs[i],\n            node = this.inputs[i] || this.inputs[inpt.name];\n        data.inputs[inpt.name] = node.toJSON(meta).uuid;\n      }\n    }\n  }\n\n  return data;\n};\n\nexport { FunctionCallNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/core/FunctionCallNode.js"],"names":["TempNode","FunctionCallNode","func","inputs","call","setFunction","prototype","Object","create","constructor","nodeType","value","getFunction","getType","builder","generate","output","type","code","build","params","i","length","inpt","param","name","push","getTypeByFormat","join","format","copy","source","prop","toJSON","meta","data","getJSONNode","createJSONNode","uuid","node"],"mappings":"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","sourcesContent":["import { TempNode } from './TempNode.js';\n\nfunction FunctionCallNode(func, inputs) {\n  TempNode.call(this);\n  this.setFunction(func, inputs);\n}\n\nFunctionCallNode.prototype = Object.create(TempNode.prototype);\nFunctionCallNode.prototype.constructor = FunctionCallNode;\nFunctionCallNode.prototype.nodeType = 'FunctionCall';\n\nFunctionCallNode.prototype.setFunction = function (func, inputs) {\n  this.value = func;\n  this.inputs = inputs || [];\n};\n\nFunctionCallNode.prototype.getFunction = function () {\n  return this.value;\n};\n\nFunctionCallNode.prototype.getType = function (builder) {\n  return this.value.getType(builder);\n};\n\nFunctionCallNode.prototype.generate = function (builder, output) {\n  var type = this.getType(builder),\n      func = this.value;\n  var code = func.build(builder, output) + '( ',\n      params = [];\n\n  for (let i = 0; i < func.inputs.length; i++) {\n    var inpt = func.inputs[i],\n        param = this.inputs[i] || this.inputs[inpt.name];\n    params.push(param.build(builder, builder.getTypeByFormat(inpt.type)));\n  }\n\n  code += params.join(', ') + ' )';\n  return builder.format(code, type, output);\n};\n\nFunctionCallNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n\n  for (let prop in source.inputs) {\n    this.inputs[prop] = source.inputs[prop];\n  }\n\n  this.value = source.value;\n  return this;\n};\n\nFunctionCallNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    var func = this.value;\n    data = this.createJSONNode(meta);\n    data.value = this.value.toJSON(meta).uuid;\n\n    if (func.inputs.length) {\n      data.inputs = {};\n\n      for (let i = 0; i < func.inputs.length; i++) {\n        var inpt = func.inputs[i],\n            node = this.inputs[i] || this.inputs[inpt.name];\n        data.inputs[inpt.name] = node.toJSON(meta).uuid;\n      }\n    }\n  }\n\n  return data;\n};\n\nexport { FunctionCallNode };\n"]},"metadata":{},"sourceType":"module"}