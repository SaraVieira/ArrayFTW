{"ast":null,"code":"/**\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\nvar AfterimageShader = {\n  uniforms: {\n    damp: {\n      value: 0.96\n    },\n    tOld: {\n      value: null\n    },\n    tNew: {\n      value: null\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float damp;', 'uniform sampler2D tOld;', 'uniform sampler2D tNew;', 'varying vec2 vUv;', 'vec4 when_gt( vec4 x, float y ) {', '\treturn max( sign( x - y ), 0.0 );', '}', 'void main() {', '\tvec4 texelOld = texture2D( tOld, vUv );', '\tvec4 texelNew = texture2D( tNew, vUv );', '\ttexelOld *= damp * when_gt( texelOld, 0.1 );', '\tgl_FragColor = max(texelNew, texelOld);', '}'].join('\\n')\n};\nexport { AfterimageShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/AfterimageShader.js"],"names":["AfterimageShader","uniforms","damp","value","tOld","tNew","vertexShader","join","fragmentShader"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAMA,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE;AADH,KADE;AAIRC,IAAAA,IAAI,EAAE;AACJD,MAAAA,KAAK,EAAE;AADH,KAJE;AAORE,IAAAA,IAAI,EAAE;AACJF,MAAAA,KAAK,EAAE;AADH;AAPE,GADa;AAYvBG,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CAZS;AAavBC,EAAAA,cAAc,EAAE,CAAC,qBAAD,EAAwB,yBAAxB,EAAmD,yBAAnD,EAA8E,mBAA9E,EAAmG,mCAAnG,EAAwI,oCAAxI,EAA8K,GAA9K,EAAmL,eAAnL,EAAoM,0CAApM,EAAgP,0CAAhP,EAA4R,+CAA5R,EAA6U,0CAA7U,EAAyX,GAAzX,EAA8XD,IAA9X,CAAmY,IAAnY;AAbO,CAAzB;AAgBA,SAASP,gBAAT","sourcesContent":["/**\n * Afterimage shader\n * I created this effect inspired by a demo on codepen:\n * https://codepen.io/brunoimbrizi/pen/MoRJaN?page=1&\n */\nconst AfterimageShader = {\n  uniforms: {\n    damp: {\n      value: 0.96\n    },\n    tOld: {\n      value: null\n    },\n    tNew: {\n      value: null\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float damp;', 'uniform sampler2D tOld;', 'uniform sampler2D tNew;', 'varying vec2 vUv;', 'vec4 when_gt( vec4 x, float y ) {', '\treturn max( sign( x - y ), 0.0 );', '}', 'void main() {', '\tvec4 texelOld = texture2D( tOld, vUv );', '\tvec4 texelNew = texture2D( tNew, vUv );', '\ttexelOld *= damp * when_gt( texelOld, 0.1 );', '\tgl_FragColor = max(texelNew, texelOld);', '}'].join('\\n')\n};\n\nexport { AfterimageShader };\n"]},"metadata":{},"sourceType":"module"}