{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\nvar DotScreenPass = function DotScreenPass(center, angle, scale) {\n  if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on DotScreenShader');\n  var shader = DotScreenShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (center !== undefined) this.uniforms['center'].value.copy(center);\n  if (angle !== undefined) this.uniforms['angle'].value = angle;\n  if (scale !== undefined) this.uniforms['scale'].value = scale;\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nDotScreenPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: DotScreenPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\nexport { DotScreenPass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/DotScreenPass.js"],"names":["UniformsUtils","ShaderMaterial","FullScreenQuad","Pass","DotScreenShader","DotScreenPass","center","angle","scale","undefined","console","error","shader","uniforms","clone","value","copy","material","vertexShader","fragmentShader","fsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,OAA9C;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,WAArC;AACA,SAASC,eAAT,QAAgC,+BAAhC;;AAEA,IAAIC,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,MAAV,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;AAClD,MAAIJ,eAAe,KAAKK,SAAxB,EAAmCC,OAAO,CAACC,KAAR,CAAc,+CAAd;AACnC,MAAIC,MAAM,GAAGR,eAAb;AACA,OAAKS,QAAL,GAAgBb,aAAa,CAACc,KAAd,CAAoBF,MAAM,CAACC,QAA3B,CAAhB;AACA,MAAIP,MAAM,KAAKG,SAAf,EAA0B,KAAKI,QAAL,CAAc,QAAd,EAAwBE,KAAxB,CAA8BC,IAA9B,CAAmCV,MAAnC;AAC1B,MAAIC,KAAK,KAAKE,SAAd,EAAyB,KAAKI,QAAL,CAAc,OAAd,EAAuBE,KAAvB,GAA+BR,KAA/B;AACzB,MAAIC,KAAK,KAAKC,SAAd,EAAyB,KAAKI,QAAL,CAAc,OAAd,EAAuBE,KAAvB,GAA+BP,KAA/B;AACzB,OAAKS,QAAL,GAAgB,IAAIhB,cAAJ,CAAmB;AACjCY,IAAAA,QAAQ,EAAE,KAAKA,QADkB;AAEjCK,IAAAA,YAAY,EAAEN,MAAM,CAACM,YAFY;AAGjCC,IAAAA,cAAc,EAAEP,MAAM,CAACO;AAHU,GAAnB,CAAhB;AAKA,OAAKC,MAAL,GAAc,IAAIlB,cAAJ,CAAmB,KAAKe,QAAxB,CAAd;AACD,CAbD;;AAeAZ,aAAa,CAACgB,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcrB,IAAI,CAACkB,SAAnB,CAAd,EAA6C;AACrEI,EAAAA,WAAW,EAAEpB,aADwD;AAErEqB,EAAAA,MAAM,EAAE,gBAAUC,QAAV,EAAoBC,WAApB,EAAiCC;AACzC;AADQ,IAEN;AACA,SAAKhB,QAAL,CAAc,UAAd,EAA0BE,KAA1B,GAAkCc,UAAU,CAACC,OAA7C;AACA,SAAKjB,QAAL,CAAc,OAAd,EAAuBE,KAAvB,CAA6BgB,GAA7B,CAAiCF,UAAU,CAACG,KAA5C,EAAmDH,UAAU,CAACI,MAA9D;;AAEA,QAAI,KAAKC,cAAT,EAAyB;AACvBP,MAAAA,QAAQ,CAACQ,eAAT,CAAyB,IAAzB;AACA,WAAKf,MAAL,CAAYM,MAAZ,CAAmBC,QAAnB;AACD,KAHD,MAGO;AACLA,MAAAA,QAAQ,CAACQ,eAAT,CAAyBP,WAAzB;AACA,UAAI,KAAKQ,KAAT,EAAgBT,QAAQ,CAACS,KAAT;AAChB,WAAKhB,MAAL,CAAYM,MAAZ,CAAmBC,QAAnB;AACD;AACF;AAhBoE,CAA7C,CAA1B;AAmBA,SAAStB,aAAT","sourcesContent":["import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\nvar DotScreenPass = function (center, angle, scale) {\n  if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on DotScreenShader');\n  var shader = DotScreenShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (center !== undefined) this.uniforms['center'].value.copy(center);\n  if (angle !== undefined) this.uniforms['angle'].value = angle;\n  if (scale !== undefined) this.uniforms['scale'].value = scale;\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nDotScreenPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: DotScreenPass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\n\nexport { DotScreenPass };\n"]},"metadata":{},"sourceType":"module"}