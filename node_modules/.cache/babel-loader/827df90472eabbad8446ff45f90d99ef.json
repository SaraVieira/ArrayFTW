{"ast":null,"code":"import { Vector3, Color } from 'three';\n/**\n * God-rays (crepuscular rays)\n *\n * Similar implementation to the one used by Crytek for CryEngine 2 [Sousa2008].\n * Blurs a mask generated from the depth map along radial lines emanating from the light\n * source. The blur repeatedly applies a blur filter of increasing support but constant\n * sample count to produce a blur filter with large support.\n *\n * My implementation performs 3 passes, similar to the implementation from Sousa. I found\n * just 6 samples per pass produced acceptible results. The blur is applied three times,\n * with decreasing filter support. The result is equivalent to a single pass with\n * 6*6*6 = 216 samples.\n *\n * References:\n *\n * Sousa2008 - Crysis Next Gen Effects, GDC2008, http://www.crytek.com/sites/default/files/GDC08_SousaT_CrysisEffects.ppt\n */\n\nvar GodRaysDepthMaskShader = {\n  uniforms: {\n    tInput: {\n      value: null\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', ' vUv = uv;', ' gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['varying vec2 vUv;', 'uniform sampler2D tInput;', 'void main() {', '\tgl_FragColor = vec4( 1.0 ) - texture2D( tInput, vUv );', '}'].join('\\n')\n};\n/**\n * The god-ray generation shader.\n *\n * First pass:\n *\n * The depth map is blurred along radial lines towards the \"sun\". The\n * output is written to a temporary render target (I used a 1/4 sized\n * target).\n *\n * Pass two & three:\n *\n * The results of the previous pass are re-blurred, each time with a\n * decreased distance between samples.\n */\n\nvar GodRaysGenerateShader = {\n  uniforms: {\n    tInput: {\n      value: null\n    },\n    fStepSize: {\n      value: 1.0\n    },\n    vSunPositionScreenSpace: {\n      value: new Vector3()\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', ' vUv = uv;', ' gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#define TAPS_PER_PASS 6.0', 'varying vec2 vUv;', 'uniform sampler2D tInput;', 'uniform vec3 vSunPositionScreenSpace;', 'uniform float fStepSize;', // filter step size\n  'void main() {', // delta from current pixel to \"sun\" position\n  '\tvec2 delta = vSunPositionScreenSpace.xy - vUv;', '\tfloat dist = length( delta );', // Step vector (uv space)\n  '\tvec2 stepv = fStepSize * delta / dist;', // Number of iterations between pixel and sun\n  '\tfloat iters = dist/fStepSize;', '\tvec2 uv = vUv.xy;', '\tfloat col = 0.0;', // This breaks ANGLE in Chrome 22\n  //\t- see http://code.google.com/p/chromium/issues/detail?id=153105\n\n  /*\n  // Unrolling didnt do much on my hardware (ATI Mobility Radeon 3450),\n  // so i've just left the loop\n  \"for ( float i = 0.0; i < TAPS_PER_PASS; i += 1.0 ) {\",\n  // Accumulate samples, making sure we dont walk past the light source.\n  // The check for uv.y < 1 would not be necessary with \"border\" UV wrap\n  // mode, with a black border color. I don't think this is currently\n  // exposed by three.js. As a result there might be artifacts when the\n  // sun is to the left, right or bottom of screen as these cases are\n  // not specifically handled.\n  \"\tcol += ( i <= iters && uv.y < 1.0 ? texture2D( tInput, uv ).r : 0.0 );\",\n  \"\tuv += stepv;\",\n  \"}\",\n  */\n  // Unrolling loop manually makes it work in ANGLE\n  '\tfloat f = min( 1.0, max( vSunPositionScreenSpace.z / 1000.0, 0.0 ) );', // used to fade out godrays\n  '\tif ( 0.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', '\tif ( 1.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', '\tif ( 2.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', '\tif ( 3.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', '\tif ( 4.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', '\tif ( 5.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', // Should technically be dividing by 'iters', but 'TAPS_PER_PASS' smooths out\n  // objectionable artifacts, in particular near the sun position. The side\n  // effect is that the result is darker than it should be around the sun, as\n  // TAPS_PER_PASS is greater than the number of samples actually accumulated.\n  // When the result is inverted (in the shader 'godrays_combine', this produces\n  // a slight bright spot at the position of the sun, even when it is occluded.\n  '\tgl_FragColor = vec4( col/TAPS_PER_PASS );', '\tgl_FragColor.a = 1.0;', '}'].join('\\n')\n};\n/**\n * Additively applies god rays from texture tGodRays to a background (tColors).\n * fGodRayIntensity attenuates the god rays.\n */\n\nvar GodRaysCombineShader = {\n  uniforms: {\n    tColors: {\n      value: null\n    },\n    tGodRays: {\n      value: null\n    },\n    fGodRayIntensity: {\n      value: 0.69\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['varying vec2 vUv;', 'uniform sampler2D tColors;', 'uniform sampler2D tGodRays;', 'uniform float fGodRayIntensity;', 'void main() {', // Since THREE.MeshDepthMaterial renders foreground objects white and background\n  // objects black, the god-rays will be white streaks. Therefore value is inverted\n  // before being combined with tColors\n  '\tgl_FragColor = texture2D( tColors, vUv ) + fGodRayIntensity * vec4( 1.0 - texture2D( tGodRays, vUv ).r );', '\tgl_FragColor.a = 1.0;', '}'].join('\\n')\n};\n/**\n * A dodgy sun/sky shader. Makes a bright spot at the sun location. Would be\n * cheaper/faster/simpler to implement this as a simple sun sprite.\n */\n\nvar GodRaysFakeSunShader = {\n  uniforms: {\n    vSunPositionScreenSpace: {\n      value: new Vector3()\n    },\n    fAspect: {\n      value: 1.0\n    },\n    sunColor: {\n      value: new Color(0xffee00)\n    },\n    bgColor: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['varying vec2 vUv;', 'uniform vec3 vSunPositionScreenSpace;', 'uniform float fAspect;', 'uniform vec3 sunColor;', 'uniform vec3 bgColor;', 'void main() {', '\tvec2 diff = vUv - vSunPositionScreenSpace.xy;', // Correct for aspect ratio\n  '\tdiff.x *= fAspect;', '\tfloat prop = clamp( length( diff ) / 0.5, 0.0, 1.0 );', '\tprop = 0.35 * pow( 1.0 - prop, 3.0 );', '\tgl_FragColor.xyz = ( vSunPositionScreenSpace.z > 0.0 ) ? mix( sunColor, bgColor, 1.0 - prop ) : bgColor;', '\tgl_FragColor.w = 1.0;', '}'].join('\\n')\n};\nexport { GodRaysCombineShader, GodRaysDepthMaskShader, GodRaysFakeSunShader, GodRaysGenerateShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/GodRaysShader.js"],"names":["Vector3","Color","GodRaysDepthMaskShader","uniforms","tInput","value","vertexShader","join","fragmentShader","GodRaysGenerateShader","fStepSize","vSunPositionScreenSpace","GodRaysCombineShader","tColors","tGodRays","fGodRayIntensity","GodRaysFakeSunShader","fAspect","sunColor","bgColor"],"mappings":"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","sourcesContent":["import { Vector3, Color } from 'three';\n\n/**\n * God-rays (crepuscular rays)\n *\n * Similar implementation to the one used by Crytek for CryEngine 2 [Sousa2008].\n * Blurs a mask generated from the depth map along radial lines emanating from the light\n * source. The blur repeatedly applies a blur filter of increasing support but constant\n * sample count to produce a blur filter with large support.\n *\n * My implementation performs 3 passes, similar to the implementation from Sousa. I found\n * just 6 samples per pass produced acceptible results. The blur is applied three times,\n * with decreasing filter support. The result is equivalent to a single pass with\n * 6*6*6 = 216 samples.\n *\n * References:\n *\n * Sousa2008 - Crysis Next Gen Effects, GDC2008, http://www.crytek.com/sites/default/files/GDC08_SousaT_CrysisEffects.ppt\n */\n\nvar GodRaysDepthMaskShader = {\n  uniforms: {\n    tInput: {\n      value: null\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', ' vUv = uv;', ' gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['varying vec2 vUv;', 'uniform sampler2D tInput;', 'void main() {', '\tgl_FragColor = vec4( 1.0 ) - texture2D( tInput, vUv );', '}'].join('\\n')\n};\n/**\n * The god-ray generation shader.\n *\n * First pass:\n *\n * The depth map is blurred along radial lines towards the \"sun\". The\n * output is written to a temporary render target (I used a 1/4 sized\n * target).\n *\n * Pass two & three:\n *\n * The results of the previous pass are re-blurred, each time with a\n * decreased distance between samples.\n */\n\nvar GodRaysGenerateShader = {\n  uniforms: {\n    tInput: {\n      value: null\n    },\n    fStepSize: {\n      value: 1.0\n    },\n    vSunPositionScreenSpace: {\n      value: new Vector3()\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', ' vUv = uv;', ' gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#define TAPS_PER_PASS 6.0', 'varying vec2 vUv;', 'uniform sampler2D tInput;', 'uniform vec3 vSunPositionScreenSpace;', 'uniform float fStepSize;', // filter step size\n  'void main() {', // delta from current pixel to \"sun\" position\n  '\tvec2 delta = vSunPositionScreenSpace.xy - vUv;', '\tfloat dist = length( delta );', // Step vector (uv space)\n  '\tvec2 stepv = fStepSize * delta / dist;', // Number of iterations between pixel and sun\n  '\tfloat iters = dist/fStepSize;', '\tvec2 uv = vUv.xy;', '\tfloat col = 0.0;', // This breaks ANGLE in Chrome 22\n  //\t- see http://code.google.com/p/chromium/issues/detail?id=153105\n\n  /*\n  // Unrolling didnt do much on my hardware (ATI Mobility Radeon 3450),\n  // so i've just left the loop\n  \"for ( float i = 0.0; i < TAPS_PER_PASS; i += 1.0 ) {\",\n  // Accumulate samples, making sure we dont walk past the light source.\n  // The check for uv.y < 1 would not be necessary with \"border\" UV wrap\n  // mode, with a black border color. I don't think this is currently\n  // exposed by three.js. As a result there might be artifacts when the\n  // sun is to the left, right or bottom of screen as these cases are\n  // not specifically handled.\n  \"\tcol += ( i <= iters && uv.y < 1.0 ? texture2D( tInput, uv ).r : 0.0 );\",\n  \"\tuv += stepv;\",\n  \"}\",\n  */\n  // Unrolling loop manually makes it work in ANGLE\n  '\tfloat f = min( 1.0, max( vSunPositionScreenSpace.z / 1000.0, 0.0 ) );', // used to fade out godrays\n  '\tif ( 0.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', '\tif ( 1.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', '\tif ( 2.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', '\tif ( 3.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', '\tif ( 4.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', '\tif ( 5.0 <= iters && uv.y < 1.0 ) col += texture2D( tInput, uv ).r * f;', '\tuv += stepv;', // Should technically be dividing by 'iters', but 'TAPS_PER_PASS' smooths out\n  // objectionable artifacts, in particular near the sun position. The side\n  // effect is that the result is darker than it should be around the sun, as\n  // TAPS_PER_PASS is greater than the number of samples actually accumulated.\n  // When the result is inverted (in the shader 'godrays_combine', this produces\n  // a slight bright spot at the position of the sun, even when it is occluded.\n  '\tgl_FragColor = vec4( col/TAPS_PER_PASS );', '\tgl_FragColor.a = 1.0;', '}'].join('\\n')\n};\n/**\n * Additively applies god rays from texture tGodRays to a background (tColors).\n * fGodRayIntensity attenuates the god rays.\n */\n\nvar GodRaysCombineShader = {\n  uniforms: {\n    tColors: {\n      value: null\n    },\n    tGodRays: {\n      value: null\n    },\n    fGodRayIntensity: {\n      value: 0.69\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['varying vec2 vUv;', 'uniform sampler2D tColors;', 'uniform sampler2D tGodRays;', 'uniform float fGodRayIntensity;', 'void main() {', // Since THREE.MeshDepthMaterial renders foreground objects white and background\n  // objects black, the god-rays will be white streaks. Therefore value is inverted\n  // before being combined with tColors\n  '\tgl_FragColor = texture2D( tColors, vUv ) + fGodRayIntensity * vec4( 1.0 - texture2D( tGodRays, vUv ).r );', '\tgl_FragColor.a = 1.0;', '}'].join('\\n')\n};\n/**\n * A dodgy sun/sky shader. Makes a bright spot at the sun location. Would be\n * cheaper/faster/simpler to implement this as a simple sun sprite.\n */\n\nvar GodRaysFakeSunShader = {\n  uniforms: {\n    vSunPositionScreenSpace: {\n      value: new Vector3()\n    },\n    fAspect: {\n      value: 1.0\n    },\n    sunColor: {\n      value: new Color(0xffee00)\n    },\n    bgColor: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['varying vec2 vUv;', 'uniform vec3 vSunPositionScreenSpace;', 'uniform float fAspect;', 'uniform vec3 sunColor;', 'uniform vec3 bgColor;', 'void main() {', '\tvec2 diff = vUv - vSunPositionScreenSpace.xy;', // Correct for aspect ratio\n  '\tdiff.x *= fAspect;', '\tfloat prop = clamp( length( diff ) / 0.5, 0.0, 1.0 );', '\tprop = 0.35 * pow( 1.0 - prop, 3.0 );', '\tgl_FragColor.xyz = ( vSunPositionScreenSpace.z > 0.0 ) ? mix( sunColor, bgColor, 1.0 - prop ) : bgColor;', '\tgl_FragColor.w = 1.0;', '}'].join('\\n')\n};\n\nexport { GodRaysCombineShader, GodRaysDepthMaskShader, GodRaysFakeSunShader, GodRaysGenerateShader };\n"]},"metadata":{},"sourceType":"module"}