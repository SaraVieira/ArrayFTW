{"ast":null,"code":"import { Vector2 } from 'three';\n/**\n * Normal map shader\n * - compute normals from heightmap\n */\n\nvar NormalMapShader = {\n  uniforms: {\n    heightMap: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(512, 512)\n    },\n    scale: {\n      value: new Vector2(1, 1)\n    },\n    height: {\n      value: 0.05\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float height;', 'uniform vec2 resolution;', 'uniform sampler2D heightMap;', 'varying vec2 vUv;', 'void main() {', '\tfloat val = texture2D( heightMap, vUv ).x;', '\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;', '\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;', '\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );', '}'].join('\\n')\n};\nexport { NormalMapShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/NormalMapShader.js"],"names":["Vector2","NormalMapShader","uniforms","heightMap","value","resolution","scale","height","vertexShader","join","fragmentShader"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAG;AACpBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AADE,KADH;AAIRC,IAAAA,UAAU,EAAE;AACVD,MAAAA,KAAK,EAAE,IAAIJ,OAAJ,CAAY,GAAZ,EAAiB,GAAjB;AADG,KAJJ;AAORM,IAAAA,KAAK,EAAE;AACLF,MAAAA,KAAK,EAAE,IAAIJ,OAAJ,CAAY,CAAZ,EAAe,CAAf;AADF,KAPC;AAURO,IAAAA,MAAM,EAAE;AACNH,MAAAA,KAAK,EAAE;AADD;AAVA,GADU;AAepBI,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CAfM;AAgBpBC,EAAAA,cAAc,EAAE,CAAC,uBAAD,EAA0B,0BAA1B,EAAsD,8BAAtD,EAAsF,mBAAtF,EAA2G,eAA3G,EAA4H,6CAA5H,EAA2K,gFAA3K,EAA6P,gFAA7P,EAA+U,oGAA/U,EAAqb,GAArb,EAA0bD,IAA1b,CAA+b,IAA/b;AAhBI,CAAtB;AAmBA,SAASR,eAAT","sourcesContent":["import { Vector2 } from 'three';\n\n/**\n * Normal map shader\n * - compute normals from heightmap\n */\n\nvar NormalMapShader = {\n  uniforms: {\n    heightMap: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(512, 512)\n    },\n    scale: {\n      value: new Vector2(1, 1)\n    },\n    height: {\n      value: 0.05\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float height;', 'uniform vec2 resolution;', 'uniform sampler2D heightMap;', 'varying vec2 vUv;', 'void main() {', '\tfloat val = texture2D( heightMap, vUv ).x;', '\tfloat valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;', '\tfloat valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;', '\tgl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );', '}'].join('\\n')\n};\n\nexport { NormalMapShader };\n"]},"metadata":{},"sourceType":"module"}