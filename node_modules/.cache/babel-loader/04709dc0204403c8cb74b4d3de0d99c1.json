{"ast":null,"code":"import { WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending, Vector2, LinearFilter, RGBAFormat } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nvar BloomPass = function BloomPass(strength, kernelSize, sigma, resolution) {\n  strength = strength !== undefined ? strength : 1;\n  kernelSize = kernelSize !== undefined ? kernelSize : 25;\n  sigma = sigma !== undefined ? sigma : 4.0;\n  resolution = resolution !== undefined ? resolution : 256; // render targets\n\n  var pars = {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  };\n  this.renderTargetX = new WebGLRenderTarget(resolution, resolution, pars);\n  this.renderTargetX.texture.name = 'BloomPass.x';\n  this.renderTargetY = new WebGLRenderTarget(resolution, resolution, pars);\n  this.renderTargetY.texture.name = 'BloomPass.y'; // copy material\n\n  if (CopyShader === undefined) console.error('THREE.BloomPass relies on CopyShader');\n  var copyShader = CopyShader;\n  this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms['opacity'].value = strength;\n  this.materialCopy = new ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: AdditiveBlending,\n    transparent: true\n  }); // convolution material\n\n  if (ConvolutionShader === undefined) console.error('THREE.BloomPass relies on ConvolutionShader');\n  var convolutionShader = ConvolutionShader;\n  this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n  this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n  this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n  this.materialConvolution = new ShaderMaterial({\n    uniforms: this.convolutionUniforms,\n    vertexShader: convolutionShader.vertexShader,\n    fragmentShader: convolutionShader.fragmentShader,\n    defines: {\n      KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n      KERNEL_SIZE_INT: kernelSize.toFixed(0)\n    }\n  });\n  this.needsSwap = false;\n  this.fsQuad = new FullScreenQuad(null);\n};\n\nBloomPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: BloomPass,\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n});\nBloomPass.blurX = new Vector2(0.001953125, 0.0);\nBloomPass.blurY = new Vector2(0.0, 0.001953125);\nexport { BloomPass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/BloomPass.js"],"names":["WebGLRenderTarget","UniformsUtils","ShaderMaterial","AdditiveBlending","Vector2","LinearFilter","RGBAFormat","FullScreenQuad","Pass","CopyShader","ConvolutionShader","BloomPass","strength","kernelSize","sigma","resolution","undefined","pars","minFilter","magFilter","format","renderTargetX","texture","name","renderTargetY","console","error","copyShader","copyUniforms","clone","uniforms","value","materialCopy","vertexShader","fragmentShader","blending","transparent","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY"],"mappings":"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","sourcesContent":["import { WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending, Vector2, LinearFilter, RGBAFormat } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nvar BloomPass = function (strength, kernelSize, sigma, resolution) {\n  strength = strength !== undefined ? strength : 1;\n  kernelSize = kernelSize !== undefined ? kernelSize : 25;\n  sigma = sigma !== undefined ? sigma : 4.0;\n  resolution = resolution !== undefined ? resolution : 256; // render targets\n\n  var pars = {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  };\n  this.renderTargetX = new WebGLRenderTarget(resolution, resolution, pars);\n  this.renderTargetX.texture.name = 'BloomPass.x';\n  this.renderTargetY = new WebGLRenderTarget(resolution, resolution, pars);\n  this.renderTargetY.texture.name = 'BloomPass.y'; // copy material\n\n  if (CopyShader === undefined) console.error('THREE.BloomPass relies on CopyShader');\n  var copyShader = CopyShader;\n  this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms['opacity'].value = strength;\n  this.materialCopy = new ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: AdditiveBlending,\n    transparent: true\n  }); // convolution material\n\n  if (ConvolutionShader === undefined) console.error('THREE.BloomPass relies on ConvolutionShader');\n  var convolutionShader = ConvolutionShader;\n  this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n  this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n  this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n  this.materialConvolution = new ShaderMaterial({\n    uniforms: this.convolutionUniforms,\n    vertexShader: convolutionShader.vertexShader,\n    fragmentShader: convolutionShader.fragmentShader,\n    defines: {\n      KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n      KERNEL_SIZE_INT: kernelSize.toFixed(0)\n    }\n  });\n  this.needsSwap = false;\n  this.fsQuad = new FullScreenQuad(null);\n};\n\nBloomPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: BloomPass,\n  render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = BloomPass.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n});\nBloomPass.blurX = new Vector2(0.001953125, 0.0);\nBloomPass.blurY = new Vector2(0.0, 0.001953125);\n\nexport { BloomPass };\n"]},"metadata":{},"sourceType":"module"}