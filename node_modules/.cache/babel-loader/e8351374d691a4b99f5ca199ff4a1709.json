{"ast":null,"code":"import { ExpressionNode } from '../core/ExpressionNode.js';\nimport { Matrix3Node } from '../inputs/Matrix3Node.js';\nimport { UVNode } from '../accessors/UVNode.js';\n\nfunction UVTransformNode(uv, position) {\n  ExpressionNode.call(this, '( uvTransform * vec3( uvNode, 1 ) ).xy', 'vec2');\n  this.uv = uv || new UVNode();\n  this.position = position || new Matrix3Node();\n}\n\nUVTransformNode.prototype = Object.create(ExpressionNode.prototype);\nUVTransformNode.prototype.constructor = UVTransformNode;\nUVTransformNode.prototype.nodeType = 'UVTransform';\n\nUVTransformNode.prototype.generate = function (builder, output) {\n  this.keywords['uvNode'] = this.uv;\n  this.keywords['uvTransform'] = this.position;\n  return ExpressionNode.prototype.generate.call(this, builder, output);\n};\n\nUVTransformNode.prototype.setUvTransform = function (tx, ty, sx, sy, rotation, cx, cy) {\n  cx = cx !== undefined ? cx : 0.5;\n  cy = cy !== undefined ? cy : 0.5;\n  this.position.value.setUvTransform(tx, ty, sx, sy, rotation, cx, cy);\n};\n\nUVTransformNode.prototype.copy = function (source) {\n  ExpressionNode.prototype.copy.call(this, source);\n  this.uv = source.uv;\n  this.position = source.position;\n  return this;\n};\n\nUVTransformNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.uv = this.uv.toJSON(meta).uuid;\n    data.position = this.position.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { UVTransformNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/utils/UVTransformNode.js"],"names":["ExpressionNode","Matrix3Node","UVNode","UVTransformNode","uv","position","call","prototype","Object","create","constructor","nodeType","generate","builder","output","keywords","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","undefined","value","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"AAAA,SAASA,cAAT,QAA+B,2BAA/B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,MAAT,QAAuB,wBAAvB;;AAEA,SAASC,eAAT,CAAyBC,EAAzB,EAA6BC,QAA7B,EAAuC;AACrCL,EAAAA,cAAc,CAACM,IAAf,CAAoB,IAApB,EAA0B,wCAA1B,EAAoE,MAApE;AACA,OAAKF,EAAL,GAAUA,EAAE,IAAI,IAAIF,MAAJ,EAAhB;AACA,OAAKG,QAAL,GAAgBA,QAAQ,IAAI,IAAIJ,WAAJ,EAA5B;AACD;;AAEDE,eAAe,CAACI,SAAhB,GAA4BC,MAAM,CAACC,MAAP,CAAcT,cAAc,CAACO,SAA7B,CAA5B;AACAJ,eAAe,CAACI,SAAhB,CAA0BG,WAA1B,GAAwCP,eAAxC;AACAA,eAAe,CAACI,SAAhB,CAA0BI,QAA1B,GAAqC,aAArC;;AAEAR,eAAe,CAACI,SAAhB,CAA0BK,QAA1B,GAAqC,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC9D,OAAKC,QAAL,CAAc,QAAd,IAA0B,KAAKX,EAA/B;AACA,OAAKW,QAAL,CAAc,aAAd,IAA+B,KAAKV,QAApC;AACA,SAAOL,cAAc,CAACO,SAAf,CAAyBK,QAAzB,CAAkCN,IAAlC,CAAuC,IAAvC,EAA6CO,OAA7C,EAAsDC,MAAtD,CAAP;AACD,CAJD;;AAMAX,eAAe,CAACI,SAAhB,CAA0BS,cAA1B,GAA2C,UAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,QAA1B,EAAoCC,EAApC,EAAwCC,EAAxC,EAA4C;AACrFD,EAAAA,EAAE,GAAGA,EAAE,KAAKE,SAAP,GAAmBF,EAAnB,GAAwB,GAA7B;AACAC,EAAAA,EAAE,GAAGA,EAAE,KAAKC,SAAP,GAAmBD,EAAnB,GAAwB,GAA7B;AACA,OAAKlB,QAAL,CAAcoB,KAAd,CAAoBT,cAApB,CAAmCC,EAAnC,EAAuCC,EAAvC,EAA2CC,EAA3C,EAA+CC,EAA/C,EAAmDC,QAAnD,EAA6DC,EAA7D,EAAiEC,EAAjE;AACD,CAJD;;AAMApB,eAAe,CAACI,SAAhB,CAA0BmB,IAA1B,GAAiC,UAAUC,MAAV,EAAkB;AACjD3B,EAAAA,cAAc,CAACO,SAAf,CAAyBmB,IAAzB,CAA8BpB,IAA9B,CAAmC,IAAnC,EAAyCqB,MAAzC;AACA,OAAKvB,EAAL,GAAUuB,MAAM,CAACvB,EAAjB;AACA,OAAKC,QAAL,GAAgBsB,MAAM,CAACtB,QAAvB;AACA,SAAO,IAAP;AACD,CALD;;AAOAF,eAAe,CAACI,SAAhB,CAA0BqB,MAA1B,GAAmC,UAAUC,IAAV,EAAgB;AACjD,MAAIC,IAAI,GAAG,KAAKC,WAAL,CAAiBF,IAAjB,CAAX;;AAEA,MAAI,CAACC,IAAL,EAAW;AACTA,IAAAA,IAAI,GAAG,KAAKE,cAAL,CAAoBH,IAApB,CAAP;AACAC,IAAAA,IAAI,CAAC1B,EAAL,GAAU,KAAKA,EAAL,CAAQwB,MAAR,CAAeC,IAAf,EAAqBI,IAA/B;AACAH,IAAAA,IAAI,CAACzB,QAAL,GAAgB,KAAKA,QAAL,CAAcuB,MAAd,CAAqBC,IAArB,EAA2BI,IAA3C;AACD;;AAED,SAAOH,IAAP;AACD,CAVD;;AAYA,SAAS3B,eAAT","sourcesContent":["import { ExpressionNode } from '../core/ExpressionNode.js';\nimport { Matrix3Node } from '../inputs/Matrix3Node.js';\nimport { UVNode } from '../accessors/UVNode.js';\n\nfunction UVTransformNode(uv, position) {\n  ExpressionNode.call(this, '( uvTransform * vec3( uvNode, 1 ) ).xy', 'vec2');\n  this.uv = uv || new UVNode();\n  this.position = position || new Matrix3Node();\n}\n\nUVTransformNode.prototype = Object.create(ExpressionNode.prototype);\nUVTransformNode.prototype.constructor = UVTransformNode;\nUVTransformNode.prototype.nodeType = 'UVTransform';\n\nUVTransformNode.prototype.generate = function (builder, output) {\n  this.keywords['uvNode'] = this.uv;\n  this.keywords['uvTransform'] = this.position;\n  return ExpressionNode.prototype.generate.call(this, builder, output);\n};\n\nUVTransformNode.prototype.setUvTransform = function (tx, ty, sx, sy, rotation, cx, cy) {\n  cx = cx !== undefined ? cx : 0.5;\n  cy = cy !== undefined ? cy : 0.5;\n  this.position.value.setUvTransform(tx, ty, sx, sy, rotation, cx, cy);\n};\n\nUVTransformNode.prototype.copy = function (source) {\n  ExpressionNode.prototype.copy.call(this, source);\n  this.uv = source.uv;\n  this.position = source.position;\n  return this;\n};\n\nUVTransformNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.uv = this.uv.toJSON(meta).uuid;\n    data.position = this.position.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { UVTransformNode };\n"]},"metadata":{},"sourceType":"module"}