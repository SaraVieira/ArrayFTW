{"ast":null,"code":"var GPUPrimitiveTopology = {\n  PointList: 'point-list',\n  LineList: 'line-list',\n  LineStrip: 'line-strip',\n  TriangleList: 'triangle-list',\n  TriangleStrip: 'triangle-strip'\n};\nvar GPUCompareFunction = {\n  Never: 'never',\n  Less: 'less',\n  Equal: 'equal',\n  LessEqual: 'less-equal',\n  Greater: 'greater',\n  NotEqual: 'not-equal',\n  GreaterEqual: 'greater-equal',\n  Always: 'always'\n};\nvar GPUStoreOp = {\n  Store: 'store',\n  Clear: 'clear'\n};\nvar GPULoadOp = {\n  Load: 'load'\n};\nvar GPUFrontFace = {\n  CCW: 'ccw',\n  CW: 'cw'\n};\nvar GPUCullMode = {\n  None: 'none',\n  Front: 'front',\n  Back: 'back'\n};\nvar GPUIndexFormat = {\n  Uint16: 'uint16',\n  Uint32: 'uint32'\n};\nvar GPUVertexFormat = {\n  Uchar2: 'uchar2',\n  Uchar4: 'uchar4',\n  Char2: 'char2',\n  Char4: 'char4',\n  Uchar2Norm: 'uchar2norm',\n  Uchar4Norm: 'uchar4norm',\n  Char2Norm: 'char2norm',\n  Char4Norm: 'char4norm',\n  Ushort2: 'ushort2',\n  Ushort4: 'ushort4',\n  Short2: 'short2',\n  Short4: 'short4',\n  Ushort2Norm: 'ushort2norm',\n  Ushort4Norm: 'ushort4norm',\n  Short2Norm: 'short2norm',\n  Short4Norm: 'short4norm',\n  Half2: 'half2',\n  Half4: 'half4',\n  Float: 'float',\n  Float2: 'float2',\n  Float3: 'float3',\n  Float4: 'float4',\n  Uint: 'uint',\n  Uint2: 'uint2',\n  Uint3: 'uint3',\n  Uint4: 'uint4',\n  Int: 'int',\n  Int2: 'int2',\n  Int3: 'int3',\n  Int4: 'int4'\n};\nvar GPUTextureFormat = {\n  // 8-bit formats\n  R8Unorm: 'r8unorm',\n  R8Snorm: 'r8snorm',\n  R8Uint: 'r8uint',\n  R8Sint: 'r8sint',\n  // 16-bit formats\n  R16Uint: 'r16uint',\n  R16Sint: 'r16sint',\n  R16Float: 'r16float',\n  RG8Unorm: 'rg8unorm',\n  RG8Snorm: 'rg8snorm',\n  RG8Uint: 'rg8uint',\n  RG8Sint: 'rg8sint',\n  // 32-bit formats\n  R32Uint: 'r32uint',\n  R32Sint: 'r32sint',\n  R32Float: 'r32float',\n  RG16Uint: 'rg16uint',\n  RG16Sint: 'rg16sint',\n  RG16Float: 'rg16float',\n  RGBA8Unorm: 'rgba8unorm',\n  RGBA8UnormSRGB: 'rgba8unorm-srgb',\n  RGBA8Snorm: 'rgba8snorm',\n  RGBA8Uint: 'rgba8uint',\n  RGBA8Sint: 'rgba8sint',\n  BRGA8Unorm: 'bgra8unorm',\n  BRGA8UnormSRGB: 'bgra8unorm-srgb',\n  // Packed 32-bit formats\n  RGB9E5UFloat: 'rgb9e5ufloat',\n  RGB10A2Unorm: 'rgb10a2unorm',\n  RG11B10uFloat: 'rgb10a2unorm',\n  // 64-bit formats\n  RG32Uint: 'rg32uint',\n  RG32Sint: 'rg32sint',\n  RG32Float: 'rg32float',\n  RGBA16Uint: 'rgba16uint',\n  RGBA16Sint: 'rgba16sint',\n  RGBA16Float: 'rgba16float',\n  // 128-bit formats\n  RGBA32Uint: 'rgba32uint',\n  RGBA32Sint: 'rgba32sint',\n  RGBA32Float: 'rgba32float',\n  // Depth and stencil formats\n  Stencil8: 'stencil8',\n  Depth16Unorm: 'depth16unorm',\n  Depth24Plus: 'depth24plus',\n  Depth24PlusStencil8: 'depth24plus-stencil8',\n  Depth32Float: 'depth32float',\n  // BC compressed formats usable if 'texture-compression-bc' is both\n  // supported by the device/user agent and enabled in requestDevice.\n  BC1RGBAUnorm: 'bc1-rgba-unorm',\n  BC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\n  BC2RGBAUnorm: 'bc2-rgba-unorm',\n  BC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\n  BC3RGBAUnorm: 'bc3-rgba-unorm',\n  BC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\n  BC4RUnorm: 'bc4-r-unorm',\n  BC4RSNorm: 'bc4-r-snorm',\n  BC5RGUnorm: 'bc5-rg-unorm',\n  BC5RGSnorm: 'bc5-rg-snorm',\n  BC6HRGBUFloat: 'bc6h-rgb-ufloat',\n  BC6HRGBFloat: 'bc6h-rgb-float',\n  BC7RGBAUnorm: 'bc7-rgba-unorm',\n  BC7RGBAUnormSRGB: 'bc7-rgba-srgb',\n  // 'depth24unorm-stencil8' extension\n  Depth24UnormStencil8: 'depth24unorm-stencil8',\n  // 'depth32float-stencil8' extension\n  Depth32FloatStencil8: 'depth32float-stencil8'\n};\nvar GPUAddressMode = {\n  ClampToEdge: 'clamp-to-edge',\n  Repeat: 'repeat',\n  MirrorRepeat: 'mirror-repeat'\n};\nvar GPUFilterMode = {\n  Linear: 'linear',\n  Nearest: 'nearest'\n};\nvar GPUBlendFactor = {\n  Zero: 'zero',\n  One: 'one',\n  SrcColor: 'src-color',\n  OneMinusSrcColor: 'one-minus-src-color',\n  SrcAlpha: 'src-alpha',\n  OneMinusSrcAlpha: 'one-minus-src-alpha',\n  DstColor: 'dst-color',\n  OneMinusDstColor: 'one-minus-dst-color',\n  DstAlpha: 'dst-alpha',\n  OneMinusDstAlpha: 'one-minus-dst-alpha',\n  SrcAlphaSaturated: 'src-alpha-saturated',\n  BlendColor: 'blend-color',\n  OneMinusBlendColor: 'one-minus-blend-color'\n};\nvar GPUBlendOperation = {\n  Add: 'add',\n  Subtract: 'subtract',\n  ReverseSubtract: 'reverse-subtract',\n  Min: 'min',\n  Max: 'max'\n};\nvar GPUColorWriteFlags = {\n  None: 0,\n  Red: 0x1,\n  Green: 0x2,\n  Blue: 0x4,\n  Alpha: 0x8,\n  All: 0xf\n};\nvar GPUStencilOperation = {\n  Keep: 'keep',\n  Zero: 'zero',\n  Replace: 'replace',\n  Invert: 'invert',\n  IncrementClamp: 'increment-clamp',\n  DecrementClamp: 'decrement-clamp',\n  IncrementWrap: 'increment-wrap',\n  DecrementWrap: 'decrement-wrap'\n};\nvar GPUBindingType = {\n  UniformBuffer: 'uniform-buffer',\n  StorageBuffer: 'storage-buffer',\n  ReadonlyStorageBuffer: 'readonly-storage-buffer',\n  Sampler: 'sampler',\n  ComparisonSampler: 'comparison-sampler',\n  SampledTexture: 'sampled-texture',\n  MultisampledTexture: 'multisampled-texture',\n  ReadonlyStorageTexture: 'readonly-storage-texture',\n  WriteonlyStorageTexture: 'writeonly-storage-texture'\n};\nvar GPUTextureDimension = {\n  OneD: '1d',\n  TwoD: '2d',\n  ThreeD: '3d'\n};\nvar GPUTextureViewDimension = {\n  OneD: '1d',\n  TwoD: '2d',\n  TwoDArray: '2d-array',\n  Cube: 'cube',\n  CubeArray: 'cube-array',\n  ThreeD: '3d'\n};\nvar GPUInputStepMode = {\n  Vertex: 'vertex',\n  Instance: 'instance'\n}; // @TODO: Move to src/constants.js\n\nvar BlendColorFactor = 211;\nvar OneMinusBlendColorFactor = 212;\nexport { BlendColorFactor, GPUAddressMode, GPUBindingType, GPUBlendFactor, GPUBlendOperation, GPUColorWriteFlags, GPUCompareFunction, GPUCullMode, GPUFilterMode, GPUFrontFace, GPUIndexFormat, GPUInputStepMode, GPULoadOp, GPUPrimitiveTopology, GPUStencilOperation, GPUStoreOp, GPUTextureDimension, GPUTextureFormat, GPUTextureViewDimension, GPUVertexFormat, OneMinusBlendColorFactor };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/renderers/webgpu/constants.js"],"names":["GPUPrimitiveTopology","PointList","LineList","LineStrip","TriangleList","TriangleStrip","GPUCompareFunction","Never","Less","Equal","LessEqual","Greater","NotEqual","GreaterEqual","Always","GPUStoreOp","Store","Clear","GPULoadOp","Load","GPUFrontFace","CCW","CW","GPUCullMode","None","Front","Back","GPUIndexFormat","Uint16","Uint32","GPUVertexFormat","Uchar2","Uchar4","Char2","Char4","Uchar2Norm","Uchar4Norm","Char2Norm","Char4Norm","Ushort2","Ushort4","Short2","Short4","Ushort2Norm","Ushort4Norm","Short2Norm","Short4Norm","Half2","Half4","Float","Float2","Float3","Float4","Uint","Uint2","Uint3","Uint4","Int","Int2","Int3","Int4","GPUTextureFormat","R8Unorm","R8Snorm","R8Uint","R8Sint","R16Uint","R16Sint","R16Float","RG8Unorm","RG8Snorm","RG8Uint","RG8Sint","R32Uint","R32Sint","R32Float","RG16Uint","RG16Sint","RG16Float","RGBA8Unorm","RGBA8UnormSRGB","RGBA8Snorm","RGBA8Uint","RGBA8Sint","BRGA8Unorm","BRGA8UnormSRGB","RGB9E5UFloat","RGB10A2Unorm","RG11B10uFloat","RG32Uint","RG32Sint","RG32Float","RGBA16Uint","RGBA16Sint","RGBA16Float","RGBA32Uint","RGBA32Sint","RGBA32Float","Stencil8","Depth16Unorm","Depth24Plus","Depth24PlusStencil8","Depth32Float","BC1RGBAUnorm","BC1RGBAUnormSRGB","BC2RGBAUnorm","BC2RGBAUnormSRGB","BC3RGBAUnorm","BC3RGBAUnormSRGB","BC4RUnorm","BC4RSNorm","BC5RGUnorm","BC5RGSnorm","BC6HRGBUFloat","BC6HRGBFloat","BC7RGBAUnorm","BC7RGBAUnormSRGB","Depth24UnormStencil8","Depth32FloatStencil8","GPUAddressMode","ClampToEdge","Repeat","MirrorRepeat","GPUFilterMode","Linear","Nearest","GPUBlendFactor","Zero","One","SrcColor","OneMinusSrcColor","SrcAlpha","OneMinusSrcAlpha","DstColor","OneMinusDstColor","DstAlpha","OneMinusDstAlpha","SrcAlphaSaturated","BlendColor","OneMinusBlendColor","GPUBlendOperation","Add","Subtract","ReverseSubtract","Min","Max","GPUColorWriteFlags","Red","Green","Blue","Alpha","All","GPUStencilOperation","Keep","Replace","Invert","IncrementClamp","DecrementClamp","IncrementWrap","DecrementWrap","GPUBindingType","UniformBuffer","StorageBuffer","ReadonlyStorageBuffer","Sampler","ComparisonSampler","SampledTexture","MultisampledTexture","ReadonlyStorageTexture","WriteonlyStorageTexture","GPUTextureDimension","OneD","TwoD","ThreeD","GPUTextureViewDimension","TwoDArray","Cube","CubeArray","GPUInputStepMode","Vertex","Instance","BlendColorFactor","OneMinusBlendColorFactor"],"mappings":"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","sourcesContent":["const GPUPrimitiveTopology = {\n  PointList: 'point-list',\n  LineList: 'line-list',\n  LineStrip: 'line-strip',\n  TriangleList: 'triangle-list',\n  TriangleStrip: 'triangle-strip'\n};\nconst GPUCompareFunction = {\n  Never: 'never',\n  Less: 'less',\n  Equal: 'equal',\n  LessEqual: 'less-equal',\n  Greater: 'greater',\n  NotEqual: 'not-equal',\n  GreaterEqual: 'greater-equal',\n  Always: 'always'\n};\nconst GPUStoreOp = {\n  Store: 'store',\n  Clear: 'clear'\n};\nconst GPULoadOp = {\n  Load: 'load'\n};\nconst GPUFrontFace = {\n  CCW: 'ccw',\n  CW: 'cw'\n};\nconst GPUCullMode = {\n  None: 'none',\n  Front: 'front',\n  Back: 'back'\n};\nconst GPUIndexFormat = {\n  Uint16: 'uint16',\n  Uint32: 'uint32'\n};\nconst GPUVertexFormat = {\n  Uchar2: 'uchar2',\n  Uchar4: 'uchar4',\n  Char2: 'char2',\n  Char4: 'char4',\n  Uchar2Norm: 'uchar2norm',\n  Uchar4Norm: 'uchar4norm',\n  Char2Norm: 'char2norm',\n  Char4Norm: 'char4norm',\n  Ushort2: 'ushort2',\n  Ushort4: 'ushort4',\n  Short2: 'short2',\n  Short4: 'short4',\n  Ushort2Norm: 'ushort2norm',\n  Ushort4Norm: 'ushort4norm',\n  Short2Norm: 'short2norm',\n  Short4Norm: 'short4norm',\n  Half2: 'half2',\n  Half4: 'half4',\n  Float: 'float',\n  Float2: 'float2',\n  Float3: 'float3',\n  Float4: 'float4',\n  Uint: 'uint',\n  Uint2: 'uint2',\n  Uint3: 'uint3',\n  Uint4: 'uint4',\n  Int: 'int',\n  Int2: 'int2',\n  Int3: 'int3',\n  Int4: 'int4'\n};\nconst GPUTextureFormat = {\n  // 8-bit formats\n  R8Unorm: 'r8unorm',\n  R8Snorm: 'r8snorm',\n  R8Uint: 'r8uint',\n  R8Sint: 'r8sint',\n  // 16-bit formats\n  R16Uint: 'r16uint',\n  R16Sint: 'r16sint',\n  R16Float: 'r16float',\n  RG8Unorm: 'rg8unorm',\n  RG8Snorm: 'rg8snorm',\n  RG8Uint: 'rg8uint',\n  RG8Sint: 'rg8sint',\n  // 32-bit formats\n  R32Uint: 'r32uint',\n  R32Sint: 'r32sint',\n  R32Float: 'r32float',\n  RG16Uint: 'rg16uint',\n  RG16Sint: 'rg16sint',\n  RG16Float: 'rg16float',\n  RGBA8Unorm: 'rgba8unorm',\n  RGBA8UnormSRGB: 'rgba8unorm-srgb',\n  RGBA8Snorm: 'rgba8snorm',\n  RGBA8Uint: 'rgba8uint',\n  RGBA8Sint: 'rgba8sint',\n  BRGA8Unorm: 'bgra8unorm',\n  BRGA8UnormSRGB: 'bgra8unorm-srgb',\n  // Packed 32-bit formats\n  RGB9E5UFloat: 'rgb9e5ufloat',\n  RGB10A2Unorm: 'rgb10a2unorm',\n  RG11B10uFloat: 'rgb10a2unorm',\n  // 64-bit formats\n  RG32Uint: 'rg32uint',\n  RG32Sint: 'rg32sint',\n  RG32Float: 'rg32float',\n  RGBA16Uint: 'rgba16uint',\n  RGBA16Sint: 'rgba16sint',\n  RGBA16Float: 'rgba16float',\n  // 128-bit formats\n  RGBA32Uint: 'rgba32uint',\n  RGBA32Sint: 'rgba32sint',\n  RGBA32Float: 'rgba32float',\n  // Depth and stencil formats\n  Stencil8: 'stencil8',\n  Depth16Unorm: 'depth16unorm',\n  Depth24Plus: 'depth24plus',\n  Depth24PlusStencil8: 'depth24plus-stencil8',\n  Depth32Float: 'depth32float',\n  // BC compressed formats usable if 'texture-compression-bc' is both\n  // supported by the device/user agent and enabled in requestDevice.\n  BC1RGBAUnorm: 'bc1-rgba-unorm',\n  BC1RGBAUnormSRGB: 'bc1-rgba-unorm-srgb',\n  BC2RGBAUnorm: 'bc2-rgba-unorm',\n  BC2RGBAUnormSRGB: 'bc2-rgba-unorm-srgb',\n  BC3RGBAUnorm: 'bc3-rgba-unorm',\n  BC3RGBAUnormSRGB: 'bc3-rgba-unorm-srgb',\n  BC4RUnorm: 'bc4-r-unorm',\n  BC4RSNorm: 'bc4-r-snorm',\n  BC5RGUnorm: 'bc5-rg-unorm',\n  BC5RGSnorm: 'bc5-rg-snorm',\n  BC6HRGBUFloat: 'bc6h-rgb-ufloat',\n  BC6HRGBFloat: 'bc6h-rgb-float',\n  BC7RGBAUnorm: 'bc7-rgba-unorm',\n  BC7RGBAUnormSRGB: 'bc7-rgba-srgb',\n  // 'depth24unorm-stencil8' extension\n  Depth24UnormStencil8: 'depth24unorm-stencil8',\n  // 'depth32float-stencil8' extension\n  Depth32FloatStencil8: 'depth32float-stencil8'\n};\nconst GPUAddressMode = {\n  ClampToEdge: 'clamp-to-edge',\n  Repeat: 'repeat',\n  MirrorRepeat: 'mirror-repeat'\n};\nconst GPUFilterMode = {\n  Linear: 'linear',\n  Nearest: 'nearest'\n};\nconst GPUBlendFactor = {\n  Zero: 'zero',\n  One: 'one',\n  SrcColor: 'src-color',\n  OneMinusSrcColor: 'one-minus-src-color',\n  SrcAlpha: 'src-alpha',\n  OneMinusSrcAlpha: 'one-minus-src-alpha',\n  DstColor: 'dst-color',\n  OneMinusDstColor: 'one-minus-dst-color',\n  DstAlpha: 'dst-alpha',\n  OneMinusDstAlpha: 'one-minus-dst-alpha',\n  SrcAlphaSaturated: 'src-alpha-saturated',\n  BlendColor: 'blend-color',\n  OneMinusBlendColor: 'one-minus-blend-color'\n};\nconst GPUBlendOperation = {\n  Add: 'add',\n  Subtract: 'subtract',\n  ReverseSubtract: 'reverse-subtract',\n  Min: 'min',\n  Max: 'max'\n};\nconst GPUColorWriteFlags = {\n  None: 0,\n  Red: 0x1,\n  Green: 0x2,\n  Blue: 0x4,\n  Alpha: 0x8,\n  All: 0xf\n};\nconst GPUStencilOperation = {\n  Keep: 'keep',\n  Zero: 'zero',\n  Replace: 'replace',\n  Invert: 'invert',\n  IncrementClamp: 'increment-clamp',\n  DecrementClamp: 'decrement-clamp',\n  IncrementWrap: 'increment-wrap',\n  DecrementWrap: 'decrement-wrap'\n};\nconst GPUBindingType = {\n  UniformBuffer: 'uniform-buffer',\n  StorageBuffer: 'storage-buffer',\n  ReadonlyStorageBuffer: 'readonly-storage-buffer',\n  Sampler: 'sampler',\n  ComparisonSampler: 'comparison-sampler',\n  SampledTexture: 'sampled-texture',\n  MultisampledTexture: 'multisampled-texture',\n  ReadonlyStorageTexture: 'readonly-storage-texture',\n  WriteonlyStorageTexture: 'writeonly-storage-texture'\n};\nconst GPUTextureDimension = {\n  OneD: '1d',\n  TwoD: '2d',\n  ThreeD: '3d'\n};\nconst GPUTextureViewDimension = {\n  OneD: '1d',\n  TwoD: '2d',\n  TwoDArray: '2d-array',\n  Cube: 'cube',\n  CubeArray: 'cube-array',\n  ThreeD: '3d'\n};\nconst GPUInputStepMode = {\n  Vertex: 'vertex',\n  Instance: 'instance'\n}; // @TODO: Move to src/constants.js\n\nconst BlendColorFactor = 211;\nconst OneMinusBlendColorFactor = 212;\n\nexport { BlendColorFactor, GPUAddressMode, GPUBindingType, GPUBlendFactor, GPUBlendOperation, GPUColorWriteFlags, GPUCompareFunction, GPUCullMode, GPUFilterMode, GPUFrontFace, GPUIndexFormat, GPUInputStepMode, GPULoadOp, GPUPrimitiveTopology, GPUStencilOperation, GPUStoreOp, GPUTextureDimension, GPUTextureFormat, GPUTextureViewDimension, GPUVertexFormat, OneMinusBlendColorFactor };\n"]},"metadata":{},"sourceType":"module"}