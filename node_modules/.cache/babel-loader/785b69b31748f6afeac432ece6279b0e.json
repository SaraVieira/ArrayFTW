{"ast":null,"code":"import { CubeUVRefractionMapping, CubeUVReflectionMapping, CubeRefractionMapping, CubeReflectionMapping, LinearEncoding, GammaEncoding } from 'three';\nimport { NodeUniform } from './NodeUniform.js';\nimport { NodeUtils } from './NodeUtils.js';\nimport { NodeLib } from './NodeLib.js';\nimport { FunctionNode } from './FunctionNode.js';\nimport { ConstNode } from './ConstNode.js';\nimport { StructNode } from './StructNode.js';\nimport { Vector2Node } from '../inputs/Vector2Node.js';\nimport { Vector3Node } from '../inputs/Vector3Node.js';\nimport { Vector4Node } from '../inputs/Vector4Node.js';\nimport { TextureNode } from '../inputs/TextureNode.js';\nimport { CubeTextureNode } from '../inputs/CubeTextureNode.js';\nimport { TextureCubeNode } from '../misc/TextureCubeNode.js';\nvar elements = NodeUtils.elements,\n    constructors = ['float', 'vec2', 'vec3', 'vec4'],\n    convertFormatToType = {\n  float: 'f',\n  vec2: 'v2',\n  vec3: 'v3',\n  vec4: 'v4',\n  mat4: 'v4',\n  int: 'i',\n  bool: 'b'\n},\n    convertTypeToFormat = {\n  t: 'sampler2D',\n  tc: 'samplerCube',\n  b: 'bool',\n  i: 'int',\n  f: 'float',\n  c: 'vec3',\n  v2: 'vec2',\n  v3: 'vec3',\n  v4: 'vec4',\n  m3: 'mat3',\n  m4: 'mat4'\n};\n\nfunction NodeBuilder() {\n  this.slots = [];\n  this.caches = [];\n  this.contexts = [];\n  this.keywords = {};\n  this.nodeData = {};\n  this.requires = {\n    uv: [],\n    color: [],\n    lights: false,\n    fog: false,\n    transparent: false,\n    irradiance: false\n  };\n  this.includes = {\n    consts: [],\n    functions: [],\n    structs: []\n  };\n  this.attributes = {};\n  this.prefixCode = ['#ifdef TEXTURE_LOD_EXT', '\t#define texCube(a, b) textureCube(a, b)', '\t#define texCubeBias(a, b, c) textureCubeLodEXT(a, b, c)', '\t#define tex2D(a, b) texture2D(a, b)', '\t#define tex2DBias(a, b, c) texture2DLodEXT(a, b, c)', '#else', '\t#define texCube(a, b) textureCube(a, b)', '\t#define texCubeBias(a, b, c) textureCube(a, b, c)', '\t#define tex2D(a, b) texture2D(a, b)', '\t#define tex2DBias(a, b, c) texture2D(a, b, c)', '#endif', '#include <packing>', '#include <common>'].join('\\n');\n  this.parsCode = {\n    vertex: '',\n    fragment: ''\n  };\n  this.code = {\n    vertex: '',\n    fragment: ''\n  };\n  this.nodeCode = {\n    vertex: '',\n    fragment: ''\n  };\n  this.resultCode = {\n    vertex: '',\n    fragment: ''\n  };\n  this.finalCode = {\n    vertex: '',\n    fragment: ''\n  };\n  this.inputs = {\n    uniforms: {\n      list: [],\n      vertex: [],\n      fragment: []\n    },\n    vars: {\n      varying: [],\n      vertex: [],\n      fragment: []\n    }\n  }; // send to material\n\n  this.defines = {};\n  this.uniforms = {};\n  this.extensions = {};\n  this.updaters = [];\n  this.nodes = []; // --\n\n  this.analyzing = false;\n}\n\nNodeBuilder.prototype = {\n  constructor: NodeBuilder,\n  build: function build(vertex, fragment) {\n    this.buildShader('vertex', vertex);\n    this.buildShader('fragment', fragment);\n\n    for (var i = 0; i < this.requires.uv.length; i++) {\n      if (this.requires.uv[i]) {\n        var uvIndex = i > 0 ? i + 1 : '';\n        this.addVaryCode('varying vec2 vUv' + uvIndex + ';');\n\n        if (i > 0) {\n          this.addVertexParsCode('attribute vec2 uv' + uvIndex + ';');\n        }\n\n        this.addVertexFinalCode('vUv' + uvIndex + ' = uv' + uvIndex + ';');\n      }\n    }\n\n    if (this.requires.color[0]) {\n      this.addVaryCode('varying vec4 vColor;');\n      this.addVertexParsCode('attribute vec4 color;');\n      this.addVertexFinalCode('vColor = color;');\n    }\n\n    if (this.requires.color[1]) {\n      this.addVaryCode('varying vec4 vColor2;');\n      this.addVertexParsCode('attribute vec4 color2;');\n      this.addVertexFinalCode('vColor2 = color2;');\n    }\n\n    if (this.requires.position) {\n      this.addVaryCode('varying vec3 vPosition;');\n      this.addVertexFinalCode('vPosition = transformed;');\n    }\n\n    if (this.requires.worldPosition) {\n      this.addVaryCode('varying vec3 vWPosition;');\n      this.addVertexFinalCode('vWPosition = ( modelMatrix * vec4( transformed, 1.0 ) ).xyz;');\n    }\n\n    if (this.requires.normal) {\n      this.addVaryCode('varying vec3 vObjectNormal;');\n      this.addVertexFinalCode('vObjectNormal = normal;');\n    }\n\n    if (this.requires.worldNormal) {\n      this.addVaryCode('varying vec3 vWNormal;');\n      this.addVertexFinalCode('vWNormal = inverseTransformDirection( transformedNormal, viewMatrix ).xyz;');\n    }\n\n    return this;\n  },\n  buildShader: function buildShader(shader, node) {\n    this.resultCode[shader] = node.build(this.setShader(shader), 'v4');\n  },\n  setMaterial: function setMaterial(material, renderer) {\n    this.material = material;\n    this.renderer = renderer;\n    this.requires.lights = material.lights;\n    this.requires.fog = material.fog;\n    this.mergeDefines(material.defines);\n    return this;\n  },\n  addFlow: function addFlow(slot, cache, context) {\n    return this.addSlot(slot).addCache(cache).addContext(context);\n  },\n  removeFlow: function removeFlow() {\n    return this.removeSlot().removeCache().removeContext();\n  },\n  addCache: function addCache(name) {\n    this.cache = name || '';\n    this.caches.push(this.cache);\n    return this;\n  },\n  removeCache: function removeCache() {\n    this.caches.pop();\n    this.cache = this.caches[this.caches.length - 1] || '';\n    return this;\n  },\n  addContext: function addContext(context) {\n    this.context = Object.assign({}, this.context, context);\n    this.context.extra = this.context.extra || {};\n    this.contexts.push(this.context);\n    return this;\n  },\n  removeContext: function removeContext() {\n    this.contexts.pop();\n    this.context = this.contexts[this.contexts.length - 1] || {};\n    return this;\n  },\n  addSlot: function addSlot(name) {\n    this.slot = name || '';\n    this.slots.push(this.slot);\n    return this;\n  },\n  removeSlot: function removeSlot() {\n    this.slots.pop();\n    this.slot = this.slots[this.slots.length - 1] || '';\n    return this;\n  },\n  addVertexCode: function addVertexCode(code) {\n    this.addCode(code, 'vertex');\n  },\n  addFragmentCode: function addFragmentCode(code) {\n    this.addCode(code, 'fragment');\n  },\n  addCode: function addCode(code, shader) {\n    this.code[shader || this.shader] += code + '\\n';\n  },\n  addVertexNodeCode: function addVertexNodeCode(code) {\n    this.addNodeCode(code, 'vertex');\n  },\n  addFragmentNodeCode: function addFragmentNodeCode(code) {\n    this.addNodeCode(code, 'fragment');\n  },\n  addNodeCode: function addNodeCode(code, shader) {\n    this.nodeCode[shader || this.shader] += code + '\\n';\n  },\n  clearNodeCode: function clearNodeCode(shader) {\n    shader = shader || this.shader;\n    var code = this.nodeCode[shader];\n    this.nodeCode[shader] = '';\n    return code;\n  },\n  clearVertexNodeCode: function clearVertexNodeCode() {\n    return this.clearNodeCode('vertex');\n  },\n  clearFragmentNodeCode: function clearFragmentNodeCode() {\n    return this.clearNodeCode('fragment');\n  },\n  addVertexFinalCode: function addVertexFinalCode(code) {\n    this.addFinalCode(code, 'vertex');\n  },\n  addFragmentFinalCode: function addFragmentFinalCode(code) {\n    this.addFinalCode(code, 'fragment');\n  },\n  addFinalCode: function addFinalCode(code, shader) {\n    this.finalCode[shader || this.shader] += code + '\\n';\n  },\n  addVertexParsCode: function addVertexParsCode(code) {\n    this.addParsCode(code, 'vertex');\n  },\n  addFragmentParsCode: function addFragmentParsCode(code) {\n    this.addParsCode(code, 'fragment');\n  },\n  addParsCode: function addParsCode(code, shader) {\n    this.parsCode[shader || this.shader] += code + '\\n';\n  },\n  addVaryCode: function addVaryCode(code) {\n    this.addVertexParsCode(code);\n    this.addFragmentParsCode(code);\n  },\n  isCache: function isCache(name) {\n    return this.caches.indexOf(name) !== -1;\n  },\n  isSlot: function isSlot(name) {\n    return this.slots.indexOf(name) !== -1;\n  },\n  define: function define(name, value) {\n    this.defines[name] = value === undefined ? 1 : value;\n  },\n  require: function require(name) {\n    this.requires[name] = true;\n  },\n  isDefined: function isDefined(name) {\n    return this.defines[name] !== undefined;\n  },\n  getVar: function getVar(uuid, type, ns) {\n    var shader = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'varying';\n    var prefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'V';\n    var label = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n    var vars = this.getVars(shader),\n        data = vars[uuid];\n\n    if (!data) {\n      var index = vars.length,\n          name = ns ? ns : 'node' + prefix + index + (label ? '_' + label : '');\n      data = {\n        name: name,\n        type: type\n      };\n      vars.push(data);\n      vars[uuid] = data;\n    }\n\n    return data;\n  },\n  getTempVar: function getTempVar(uuid, type, ns, label) {\n    return this.getVar(uuid, type, ns, this.shader, 'T', label);\n  },\n  getAttribute: function getAttribute(name, type) {\n    if (!this.attributes[name]) {\n      var varying = this.getVar(name, type);\n      this.addVertexParsCode('attribute ' + type + ' ' + name + ';');\n      this.addVertexFinalCode(varying.name + ' = ' + name + ';');\n      this.attributes[name] = {\n        varying: varying,\n        name: name,\n        type: type\n      };\n    }\n\n    return this.attributes[name];\n  },\n  getCode: function getCode(shader) {\n    return [this.prefixCode, this.parsCode[shader], this.getVarListCode(this.getVars('varying'), 'varying'), this.getVarListCode(this.inputs.uniforms[shader], 'uniform'), this.getIncludesCode('consts', shader), this.getIncludesCode('structs', shader), this.getIncludesCode('functions', shader), 'void main() {', this.getVarListCode(this.getVars(shader)), this.code[shader], this.resultCode[shader], this.finalCode[shader], '}'].join('\\n');\n  },\n  getVarListCode: function getVarListCode(vars, prefix) {\n    prefix = prefix || '';\n    var code = '';\n\n    for (var i = 0, l = vars.length; i < l; ++i) {\n      var nVar = vars[i],\n          type = nVar.type,\n          name = nVar.name;\n      var formatType = this.getFormatByType(type);\n\n      if (formatType === undefined) {\n        throw new Error('Node pars ' + formatType + ' not found.');\n      }\n\n      code += prefix + ' ' + formatType + ' ' + name + ';\\n';\n    }\n\n    return code;\n  },\n  getVars: function getVars(shader) {\n    return this.inputs.vars[shader || this.shader];\n  },\n  getNodeData: function getNodeData(node) {\n    var uuid = node.isNode ? node.uuid : node;\n    return this.nodeData[uuid] = this.nodeData[uuid] || {};\n  },\n  createUniform: function createUniform(shader, type, node, ns, needsUpdate, label) {\n    var uniforms = this.inputs.uniforms,\n        index = uniforms.list.length;\n    var uniform = new NodeUniform({\n      type: type,\n      name: ns ? ns : 'nodeU' + index + (label ? '_' + label : ''),\n      node: node,\n      needsUpdate: needsUpdate\n    });\n    uniforms.list.push(uniform);\n    uniforms[shader].push(uniform);\n    uniforms[shader][uniform.name] = uniform;\n    this.uniforms[uniform.name] = uniform;\n    return uniform;\n  },\n  createVertexUniform: function createVertexUniform(type, node, ns, needsUpdate, label) {\n    return this.createUniform('vertex', type, node, ns, needsUpdate, label);\n  },\n  createFragmentUniform: function createFragmentUniform(type, node, ns, needsUpdate, label) {\n    return this.createUniform('fragment', type, node, ns, needsUpdate, label);\n  },\n  include: function include(node, parent, source) {\n    var includesStruct;\n    node = typeof node === 'string' ? NodeLib.get(node) : node;\n\n    if (this.context.include === false) {\n      return node.name;\n    }\n\n    if (node instanceof FunctionNode) {\n      includesStruct = this.includes.functions;\n    } else if (node instanceof ConstNode) {\n      includesStruct = this.includes.consts;\n    } else if (node instanceof StructNode) {\n      includesStruct = this.includes.structs;\n    }\n\n    var includes = includesStruct[this.shader] = includesStruct[this.shader] || [];\n\n    if (node) {\n      var included = includes[node.name];\n\n      if (!included) {\n        included = includes[node.name] = {\n          node: node,\n          deps: []\n        };\n        includes.push(included);\n        included.src = node.build(this, 'source');\n      }\n\n      if (node instanceof FunctionNode && parent && includes[parent.name] && includes[parent.name].deps.indexOf(node) == -1) {\n        includes[parent.name].deps.push(node);\n\n        if (node.includes && node.includes.length) {\n          var i = 0;\n\n          do {\n            this.include(node.includes[i++], parent);\n          } while (i < node.includes.length);\n        }\n      }\n\n      if (source) {\n        included.src = source;\n      }\n\n      return node.name;\n    } else {\n      throw new Error('Include not found.');\n    }\n  },\n  colorToVectorProperties: function colorToVectorProperties(color) {\n    return color.replace('r', 'x').replace('g', 'y').replace('b', 'z').replace('a', 'w');\n  },\n  colorToVector: function colorToVector(color) {\n    return color.replace(/c/g, 'v3');\n  },\n  getIncludes: function getIncludes(type, shader) {\n    return this.includes[type][shader || this.shader];\n  },\n  getIncludesCode: function () {\n    function sortByPosition(a, b) {\n      return a.deps.length - b.deps.length;\n    }\n\n    return function getIncludesCode(type, shader) {\n      var includes = this.getIncludes(type, shader);\n      if (!includes) return '';\n      var code = '',\n          includes = includes.sort(sortByPosition);\n\n      for (var i = 0; i < includes.length; i++) {\n        if (includes[i].src) code += includes[i].src + '\\n';\n      }\n\n      return code;\n    };\n  }(),\n  getConstructorFromLength: function getConstructorFromLength(len) {\n    return constructors[len - 1];\n  },\n  isTypeMatrix: function isTypeMatrix(format) {\n    return /^m/.test(format);\n  },\n  getTypeLength: function getTypeLength(type) {\n    if (type === 'f') return 1;\n    return parseInt(this.colorToVector(type).substr(1));\n  },\n  getTypeFromLength: function getTypeFromLength(len) {\n    if (len === 1) return 'f';\n    return 'v' + len;\n  },\n  findNode: function findNode() {\n    for (var i = 0; i < arguments.length; i++) {\n      var nodeCandidate = arguments[i];\n\n      if (nodeCandidate !== undefined && nodeCandidate.isNode) {\n        return nodeCandidate;\n      }\n    }\n  },\n  resolve: function resolve() {\n    for (var i = 0; i < arguments.length; i++) {\n      var nodeCandidate = arguments[i];\n\n      if (nodeCandidate !== undefined) {\n        if (nodeCandidate.isNode) {\n          return nodeCandidate;\n        } else if (nodeCandidate.isTexture) {\n          switch (nodeCandidate.mapping) {\n            case CubeReflectionMapping:\n            case CubeRefractionMapping:\n              return new CubeTextureNode(nodeCandidate);\n\n            case CubeUVReflectionMapping:\n            case CubeUVRefractionMapping:\n              return new TextureCubeNode(new TextureNode(nodeCandidate));\n\n            default:\n              return new TextureNode(nodeCandidate);\n          }\n        } else if (nodeCandidate.isVector2) {\n          return new Vector2Node(nodeCandidate);\n        } else if (nodeCandidate.isVector3) {\n          return new Vector3Node(nodeCandidate);\n        } else if (nodeCandidate.isVector4) {\n          return new Vector4Node(nodeCandidate);\n        }\n      }\n    }\n  },\n  format: function format(code, from, to) {\n    var typeToType = this.colorToVector(to + ' <- ' + from);\n\n    switch (typeToType) {\n      case 'f <- v2':\n        return code + '.x';\n\n      case 'f <- v3':\n        return code + '.x';\n\n      case 'f <- v4':\n        return code + '.x';\n\n      case 'f <- i':\n      case 'f <- b':\n        return 'float( ' + code + ' )';\n\n      case 'v2 <- f':\n        return 'vec2( ' + code + ' )';\n\n      case 'v2 <- v3':\n        return code + '.xy';\n\n      case 'v2 <- v4':\n        return code + '.xy';\n\n      case 'v2 <- i':\n      case 'v2 <- b':\n        return 'vec2( float( ' + code + ' ) )';\n\n      case 'v3 <- f':\n        return 'vec3( ' + code + ' )';\n\n      case 'v3 <- v2':\n        return 'vec3( ' + code + ', 0.0 )';\n\n      case 'v3 <- v4':\n        return code + '.xyz';\n\n      case 'v3 <- i':\n      case 'v3 <- b':\n        return 'vec2( float( ' + code + ' ) )';\n\n      case 'v4 <- f':\n        return 'vec4( ' + code + ' )';\n\n      case 'v4 <- v2':\n        return 'vec4( ' + code + ', 0.0, 1.0 )';\n\n      case 'v4 <- v3':\n        return 'vec4( ' + code + ', 1.0 )';\n\n      case 'v4 <- i':\n      case 'v4 <- b':\n        return 'vec4( float( ' + code + ' ) )';\n\n      case 'i <- f':\n      case 'i <- b':\n        return 'int( ' + code + ' )';\n\n      case 'i <- v2':\n        return 'int( ' + code + '.x )';\n\n      case 'i <- v3':\n        return 'int( ' + code + '.x )';\n\n      case 'i <- v4':\n        return 'int( ' + code + '.x )';\n\n      case 'b <- f':\n        return '( ' + code + ' != 0.0 )';\n\n      case 'b <- v2':\n        return '( ' + code + ' != vec2( 0.0 ) )';\n\n      case 'b <- v3':\n        return '( ' + code + ' != vec3( 0.0 ) )';\n\n      case 'b <- v4':\n        return '( ' + code + ' != vec4( 0.0 ) )';\n\n      case 'b <- i':\n        return '( ' + code + ' != 0 )';\n    }\n\n    return code;\n  },\n  getTypeByFormat: function getTypeByFormat(format) {\n    return convertFormatToType[format] || format;\n  },\n  getFormatByType: function getFormatByType(type) {\n    return convertTypeToFormat[type] || type;\n  },\n  getUuid: function getUuid(uuid, useCache) {\n    useCache = useCache !== undefined ? useCache : true;\n    if (useCache && this.cache) uuid = this.cache + '-' + uuid;\n    return uuid;\n  },\n  getElementByIndex: function getElementByIndex(index) {\n    return elements[index];\n  },\n  getIndexByElement: function getIndexByElement(elm) {\n    return elements.indexOf(elm);\n  },\n  isShader: function isShader(shader) {\n    return this.shader === shader;\n  },\n  setShader: function setShader(shader) {\n    this.shader = shader;\n    return this;\n  },\n  mergeDefines: function mergeDefines(defines) {\n    for (var name in defines) {\n      this.defines[name] = defines[name];\n    }\n\n    return this.defines;\n  },\n  mergeUniform: function mergeUniform(uniforms) {\n    for (var name in uniforms) {\n      this.uniforms[name] = uniforms[name];\n    }\n\n    return this.uniforms;\n  },\n  getTextureEncodingFromMap: function getTextureEncodingFromMap(map) {\n    var encoding;\n\n    if (!map) {\n      encoding = LinearEncoding;\n    } else if (map.isTexture) {\n      encoding = map.encoding;\n    } else if (map.isWebGLRenderTarget) {\n      console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n      encoding = map.texture.encoding;\n    }\n\n    if (encoding === LinearEncoding && this.context.gamma) {\n      encoding = GammaEncoding;\n    }\n\n    return encoding;\n  }\n};\nexport { NodeBuilder };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/core/NodeBuilder.js"],"names":["CubeUVRefractionMapping","CubeUVReflectionMapping","CubeRefractionMapping","CubeReflectionMapping","LinearEncoding","GammaEncoding","NodeUniform","NodeUtils","NodeLib","FunctionNode","ConstNode","StructNode","Vector2Node","Vector3Node","Vector4Node","TextureNode","CubeTextureNode","TextureCubeNode","elements","constructors","convertFormatToType","float","vec2","vec3","vec4","mat4","int","bool","convertTypeToFormat","t","tc","b","i","f","c","v2","v3","v4","m3","m4","NodeBuilder","slots","caches","contexts","keywords","nodeData","requires","uv","color","lights","fog","transparent","irradiance","includes","consts","functions","structs","attributes","prefixCode","join","parsCode","vertex","fragment","code","nodeCode","resultCode","finalCode","inputs","uniforms","list","vars","varying","defines","extensions","updaters","nodes","analyzing","prototype","constructor","build","buildShader","length","uvIndex","addVaryCode","addVertexParsCode","addVertexFinalCode","position","worldPosition","normal","worldNormal","shader","node","setShader","setMaterial","material","renderer","mergeDefines","addFlow","slot","cache","context","addSlot","addCache","addContext","removeFlow","removeSlot","removeCache","removeContext","name","push","pop","Object","assign","extra","addVertexCode","addCode","addFragmentCode","addVertexNodeCode","addNodeCode","addFragmentNodeCode","clearNodeCode","clearVertexNodeCode","clearFragmentNodeCode","addFinalCode","addFragmentFinalCode","addParsCode","addFragmentParsCode","isCache","indexOf","isSlot","define","value","undefined","require","isDefined","getVar","uuid","type","ns","prefix","label","getVars","data","index","getTempVar","getAttribute","getCode","getVarListCode","getIncludesCode","l","nVar","formatType","getFormatByType","Error","getNodeData","isNode","createUniform","needsUpdate","uniform","createVertexUniform","createFragmentUniform","include","parent","source","includesStruct","get","included","deps","src","colorToVectorProperties","replace","colorToVector","getIncludes","sortByPosition","a","sort","getConstructorFromLength","len","isTypeMatrix","format","test","getTypeLength","parseInt","substr","getTypeFromLength","findNode","arguments","nodeCandidate","resolve","isTexture","mapping","isVector2","isVector3","isVector4","from","to","typeToType","getTypeByFormat","getUuid","useCache","getElementByIndex","getIndexByElement","elm","isShader","mergeUniform","getTextureEncodingFromMap","map","encoding","isWebGLRenderTarget","console","warn","texture","gamma"],"mappings":"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","sourcesContent":["import { CubeUVRefractionMapping, CubeUVReflectionMapping, CubeRefractionMapping, CubeReflectionMapping, LinearEncoding, GammaEncoding } from 'three';\nimport { NodeUniform } from './NodeUniform.js';\nimport { NodeUtils } from './NodeUtils.js';\nimport { NodeLib } from './NodeLib.js';\nimport { FunctionNode } from './FunctionNode.js';\nimport { ConstNode } from './ConstNode.js';\nimport { StructNode } from './StructNode.js';\nimport { Vector2Node } from '../inputs/Vector2Node.js';\nimport { Vector3Node } from '../inputs/Vector3Node.js';\nimport { Vector4Node } from '../inputs/Vector4Node.js';\nimport { TextureNode } from '../inputs/TextureNode.js';\nimport { CubeTextureNode } from '../inputs/CubeTextureNode.js';\nimport { TextureCubeNode } from '../misc/TextureCubeNode.js';\n\nvar elements = NodeUtils.elements,\n    constructors = ['float', 'vec2', 'vec3', 'vec4'],\n    convertFormatToType = {\n  float: 'f',\n  vec2: 'v2',\n  vec3: 'v3',\n  vec4: 'v4',\n  mat4: 'v4',\n  int: 'i',\n  bool: 'b'\n},\n    convertTypeToFormat = {\n  t: 'sampler2D',\n  tc: 'samplerCube',\n  b: 'bool',\n  i: 'int',\n  f: 'float',\n  c: 'vec3',\n  v2: 'vec2',\n  v3: 'vec3',\n  v4: 'vec4',\n  m3: 'mat3',\n  m4: 'mat4'\n};\n\nfunction NodeBuilder() {\n  this.slots = [];\n  this.caches = [];\n  this.contexts = [];\n  this.keywords = {};\n  this.nodeData = {};\n  this.requires = {\n    uv: [],\n    color: [],\n    lights: false,\n    fog: false,\n    transparent: false,\n    irradiance: false\n  };\n  this.includes = {\n    consts: [],\n    functions: [],\n    structs: []\n  };\n  this.attributes = {};\n  this.prefixCode = ['#ifdef TEXTURE_LOD_EXT', '\t#define texCube(a, b) textureCube(a, b)', '\t#define texCubeBias(a, b, c) textureCubeLodEXT(a, b, c)', '\t#define tex2D(a, b) texture2D(a, b)', '\t#define tex2DBias(a, b, c) texture2DLodEXT(a, b, c)', '#else', '\t#define texCube(a, b) textureCube(a, b)', '\t#define texCubeBias(a, b, c) textureCube(a, b, c)', '\t#define tex2D(a, b) texture2D(a, b)', '\t#define tex2DBias(a, b, c) texture2D(a, b, c)', '#endif', '#include <packing>', '#include <common>'].join('\\n');\n  this.parsCode = {\n    vertex: '',\n    fragment: ''\n  };\n  this.code = {\n    vertex: '',\n    fragment: ''\n  };\n  this.nodeCode = {\n    vertex: '',\n    fragment: ''\n  };\n  this.resultCode = {\n    vertex: '',\n    fragment: ''\n  };\n  this.finalCode = {\n    vertex: '',\n    fragment: ''\n  };\n  this.inputs = {\n    uniforms: {\n      list: [],\n      vertex: [],\n      fragment: []\n    },\n    vars: {\n      varying: [],\n      vertex: [],\n      fragment: []\n    }\n  }; // send to material\n\n  this.defines = {};\n  this.uniforms = {};\n  this.extensions = {};\n  this.updaters = [];\n  this.nodes = []; // --\n\n  this.analyzing = false;\n}\n\nNodeBuilder.prototype = {\n  constructor: NodeBuilder,\n  build: function (vertex, fragment) {\n    this.buildShader('vertex', vertex);\n    this.buildShader('fragment', fragment);\n\n    for (let i = 0; i < this.requires.uv.length; i++) {\n      if (this.requires.uv[i]) {\n        var uvIndex = i > 0 ? i + 1 : '';\n        this.addVaryCode('varying vec2 vUv' + uvIndex + ';');\n\n        if (i > 0) {\n          this.addVertexParsCode('attribute vec2 uv' + uvIndex + ';');\n        }\n\n        this.addVertexFinalCode('vUv' + uvIndex + ' = uv' + uvIndex + ';');\n      }\n    }\n\n    if (this.requires.color[0]) {\n      this.addVaryCode('varying vec4 vColor;');\n      this.addVertexParsCode('attribute vec4 color;');\n      this.addVertexFinalCode('vColor = color;');\n    }\n\n    if (this.requires.color[1]) {\n      this.addVaryCode('varying vec4 vColor2;');\n      this.addVertexParsCode('attribute vec4 color2;');\n      this.addVertexFinalCode('vColor2 = color2;');\n    }\n\n    if (this.requires.position) {\n      this.addVaryCode('varying vec3 vPosition;');\n      this.addVertexFinalCode('vPosition = transformed;');\n    }\n\n    if (this.requires.worldPosition) {\n      this.addVaryCode('varying vec3 vWPosition;');\n      this.addVertexFinalCode('vWPosition = ( modelMatrix * vec4( transformed, 1.0 ) ).xyz;');\n    }\n\n    if (this.requires.normal) {\n      this.addVaryCode('varying vec3 vObjectNormal;');\n      this.addVertexFinalCode('vObjectNormal = normal;');\n    }\n\n    if (this.requires.worldNormal) {\n      this.addVaryCode('varying vec3 vWNormal;');\n      this.addVertexFinalCode('vWNormal = inverseTransformDirection( transformedNormal, viewMatrix ).xyz;');\n    }\n\n    return this;\n  },\n  buildShader: function (shader, node) {\n    this.resultCode[shader] = node.build(this.setShader(shader), 'v4');\n  },\n  setMaterial: function (material, renderer) {\n    this.material = material;\n    this.renderer = renderer;\n    this.requires.lights = material.lights;\n    this.requires.fog = material.fog;\n    this.mergeDefines(material.defines);\n    return this;\n  },\n  addFlow: function (slot, cache, context) {\n    return this.addSlot(slot).addCache(cache).addContext(context);\n  },\n  removeFlow: function () {\n    return this.removeSlot().removeCache().removeContext();\n  },\n  addCache: function (name) {\n    this.cache = name || '';\n    this.caches.push(this.cache);\n    return this;\n  },\n  removeCache: function () {\n    this.caches.pop();\n    this.cache = this.caches[this.caches.length - 1] || '';\n    return this;\n  },\n  addContext: function (context) {\n    this.context = Object.assign({}, this.context, context);\n    this.context.extra = this.context.extra || {};\n    this.contexts.push(this.context);\n    return this;\n  },\n  removeContext: function () {\n    this.contexts.pop();\n    this.context = this.contexts[this.contexts.length - 1] || {};\n    return this;\n  },\n  addSlot: function (name) {\n    this.slot = name || '';\n    this.slots.push(this.slot);\n    return this;\n  },\n  removeSlot: function () {\n    this.slots.pop();\n    this.slot = this.slots[this.slots.length - 1] || '';\n    return this;\n  },\n  addVertexCode: function (code) {\n    this.addCode(code, 'vertex');\n  },\n  addFragmentCode: function (code) {\n    this.addCode(code, 'fragment');\n  },\n  addCode: function (code, shader) {\n    this.code[shader || this.shader] += code + '\\n';\n  },\n  addVertexNodeCode: function (code) {\n    this.addNodeCode(code, 'vertex');\n  },\n  addFragmentNodeCode: function (code) {\n    this.addNodeCode(code, 'fragment');\n  },\n  addNodeCode: function (code, shader) {\n    this.nodeCode[shader || this.shader] += code + '\\n';\n  },\n  clearNodeCode: function (shader) {\n    shader = shader || this.shader;\n    var code = this.nodeCode[shader];\n    this.nodeCode[shader] = '';\n    return code;\n  },\n  clearVertexNodeCode: function () {\n    return this.clearNodeCode('vertex');\n  },\n  clearFragmentNodeCode: function () {\n    return this.clearNodeCode('fragment');\n  },\n  addVertexFinalCode: function (code) {\n    this.addFinalCode(code, 'vertex');\n  },\n  addFragmentFinalCode: function (code) {\n    this.addFinalCode(code, 'fragment');\n  },\n  addFinalCode: function (code, shader) {\n    this.finalCode[shader || this.shader] += code + '\\n';\n  },\n  addVertexParsCode: function (code) {\n    this.addParsCode(code, 'vertex');\n  },\n  addFragmentParsCode: function (code) {\n    this.addParsCode(code, 'fragment');\n  },\n  addParsCode: function (code, shader) {\n    this.parsCode[shader || this.shader] += code + '\\n';\n  },\n  addVaryCode: function (code) {\n    this.addVertexParsCode(code);\n    this.addFragmentParsCode(code);\n  },\n  isCache: function (name) {\n    return this.caches.indexOf(name) !== -1;\n  },\n  isSlot: function (name) {\n    return this.slots.indexOf(name) !== -1;\n  },\n  define: function (name, value) {\n    this.defines[name] = value === undefined ? 1 : value;\n  },\n  require: function (name) {\n    this.requires[name] = true;\n  },\n  isDefined: function (name) {\n    return this.defines[name] !== undefined;\n  },\n  getVar: function (uuid, type, ns, shader = 'varying', prefix = 'V', label = '') {\n    var vars = this.getVars(shader),\n        data = vars[uuid];\n\n    if (!data) {\n      var index = vars.length,\n          name = ns ? ns : 'node' + prefix + index + (label ? '_' + label : '');\n      data = {\n        name: name,\n        type: type\n      };\n      vars.push(data);\n      vars[uuid] = data;\n    }\n\n    return data;\n  },\n  getTempVar: function (uuid, type, ns, label) {\n    return this.getVar(uuid, type, ns, this.shader, 'T', label);\n  },\n  getAttribute: function (name, type) {\n    if (!this.attributes[name]) {\n      var varying = this.getVar(name, type);\n      this.addVertexParsCode('attribute ' + type + ' ' + name + ';');\n      this.addVertexFinalCode(varying.name + ' = ' + name + ';');\n      this.attributes[name] = {\n        varying: varying,\n        name: name,\n        type: type\n      };\n    }\n\n    return this.attributes[name];\n  },\n  getCode: function (shader) {\n    return [this.prefixCode, this.parsCode[shader], this.getVarListCode(this.getVars('varying'), 'varying'), this.getVarListCode(this.inputs.uniforms[shader], 'uniform'), this.getIncludesCode('consts', shader), this.getIncludesCode('structs', shader), this.getIncludesCode('functions', shader), 'void main() {', this.getVarListCode(this.getVars(shader)), this.code[shader], this.resultCode[shader], this.finalCode[shader], '}'].join('\\n');\n  },\n  getVarListCode: function (vars, prefix) {\n    prefix = prefix || '';\n    var code = '';\n\n    for (let i = 0, l = vars.length; i < l; ++i) {\n      var nVar = vars[i],\n          type = nVar.type,\n          name = nVar.name;\n      var formatType = this.getFormatByType(type);\n\n      if (formatType === undefined) {\n        throw new Error('Node pars ' + formatType + ' not found.');\n      }\n\n      code += prefix + ' ' + formatType + ' ' + name + ';\\n';\n    }\n\n    return code;\n  },\n  getVars: function (shader) {\n    return this.inputs.vars[shader || this.shader];\n  },\n  getNodeData: function (node) {\n    var uuid = node.isNode ? node.uuid : node;\n    return this.nodeData[uuid] = this.nodeData[uuid] || {};\n  },\n  createUniform: function (shader, type, node, ns, needsUpdate, label) {\n    var uniforms = this.inputs.uniforms,\n        index = uniforms.list.length;\n    var uniform = new NodeUniform({\n      type: type,\n      name: ns ? ns : 'nodeU' + index + (label ? '_' + label : ''),\n      node: node,\n      needsUpdate: needsUpdate\n    });\n    uniforms.list.push(uniform);\n    uniforms[shader].push(uniform);\n    uniforms[shader][uniform.name] = uniform;\n    this.uniforms[uniform.name] = uniform;\n    return uniform;\n  },\n  createVertexUniform: function (type, node, ns, needsUpdate, label) {\n    return this.createUniform('vertex', type, node, ns, needsUpdate, label);\n  },\n  createFragmentUniform: function (type, node, ns, needsUpdate, label) {\n    return this.createUniform('fragment', type, node, ns, needsUpdate, label);\n  },\n  include: function (node, parent, source) {\n    var includesStruct;\n    node = typeof node === 'string' ? NodeLib.get(node) : node;\n\n    if (this.context.include === false) {\n      return node.name;\n    }\n\n    if (node instanceof FunctionNode) {\n      includesStruct = this.includes.functions;\n    } else if (node instanceof ConstNode) {\n      includesStruct = this.includes.consts;\n    } else if (node instanceof StructNode) {\n      includesStruct = this.includes.structs;\n    }\n\n    var includes = includesStruct[this.shader] = includesStruct[this.shader] || [];\n\n    if (node) {\n      var included = includes[node.name];\n\n      if (!included) {\n        included = includes[node.name] = {\n          node: node,\n          deps: []\n        };\n        includes.push(included);\n        included.src = node.build(this, 'source');\n      }\n\n      if (node instanceof FunctionNode && parent && includes[parent.name] && includes[parent.name].deps.indexOf(node) == -1) {\n        includes[parent.name].deps.push(node);\n\n        if (node.includes && node.includes.length) {\n          var i = 0;\n\n          do {\n            this.include(node.includes[i++], parent);\n          } while (i < node.includes.length);\n        }\n      }\n\n      if (source) {\n        included.src = source;\n      }\n\n      return node.name;\n    } else {\n      throw new Error('Include not found.');\n    }\n  },\n  colorToVectorProperties: function (color) {\n    return color.replace('r', 'x').replace('g', 'y').replace('b', 'z').replace('a', 'w');\n  },\n  colorToVector: function (color) {\n    return color.replace(/c/g, 'v3');\n  },\n  getIncludes: function (type, shader) {\n    return this.includes[type][shader || this.shader];\n  },\n  getIncludesCode: function () {\n    function sortByPosition(a, b) {\n      return a.deps.length - b.deps.length;\n    }\n\n    return function getIncludesCode(type, shader) {\n      var includes = this.getIncludes(type, shader);\n      if (!includes) return '';\n      var code = '',\n          includes = includes.sort(sortByPosition);\n\n      for (let i = 0; i < includes.length; i++) {\n        if (includes[i].src) code += includes[i].src + '\\n';\n      }\n\n      return code;\n    };\n  }(),\n  getConstructorFromLength: function (len) {\n    return constructors[len - 1];\n  },\n  isTypeMatrix: function (format) {\n    return /^m/.test(format);\n  },\n  getTypeLength: function (type) {\n    if (type === 'f') return 1;\n    return parseInt(this.colorToVector(type).substr(1));\n  },\n  getTypeFromLength: function (len) {\n    if (len === 1) return 'f';\n    return 'v' + len;\n  },\n  findNode: function () {\n    for (let i = 0; i < arguments.length; i++) {\n      var nodeCandidate = arguments[i];\n\n      if (nodeCandidate !== undefined && nodeCandidate.isNode) {\n        return nodeCandidate;\n      }\n    }\n  },\n  resolve: function () {\n    for (let i = 0; i < arguments.length; i++) {\n      var nodeCandidate = arguments[i];\n\n      if (nodeCandidate !== undefined) {\n        if (nodeCandidate.isNode) {\n          return nodeCandidate;\n        } else if (nodeCandidate.isTexture) {\n          switch (nodeCandidate.mapping) {\n            case CubeReflectionMapping:\n            case CubeRefractionMapping:\n              return new CubeTextureNode(nodeCandidate);\n\n            case CubeUVReflectionMapping:\n            case CubeUVRefractionMapping:\n              return new TextureCubeNode(new TextureNode(nodeCandidate));\n\n            default:\n              return new TextureNode(nodeCandidate);\n          }\n        } else if (nodeCandidate.isVector2) {\n          return new Vector2Node(nodeCandidate);\n        } else if (nodeCandidate.isVector3) {\n          return new Vector3Node(nodeCandidate);\n        } else if (nodeCandidate.isVector4) {\n          return new Vector4Node(nodeCandidate);\n        }\n      }\n    }\n  },\n  format: function (code, from, to) {\n    var typeToType = this.colorToVector(to + ' <- ' + from);\n\n    switch (typeToType) {\n      case 'f <- v2':\n        return code + '.x';\n\n      case 'f <- v3':\n        return code + '.x';\n\n      case 'f <- v4':\n        return code + '.x';\n\n      case 'f <- i':\n      case 'f <- b':\n        return 'float( ' + code + ' )';\n\n      case 'v2 <- f':\n        return 'vec2( ' + code + ' )';\n\n      case 'v2 <- v3':\n        return code + '.xy';\n\n      case 'v2 <- v4':\n        return code + '.xy';\n\n      case 'v2 <- i':\n      case 'v2 <- b':\n        return 'vec2( float( ' + code + ' ) )';\n\n      case 'v3 <- f':\n        return 'vec3( ' + code + ' )';\n\n      case 'v3 <- v2':\n        return 'vec3( ' + code + ', 0.0 )';\n\n      case 'v3 <- v4':\n        return code + '.xyz';\n\n      case 'v3 <- i':\n      case 'v3 <- b':\n        return 'vec2( float( ' + code + ' ) )';\n\n      case 'v4 <- f':\n        return 'vec4( ' + code + ' )';\n\n      case 'v4 <- v2':\n        return 'vec4( ' + code + ', 0.0, 1.0 )';\n\n      case 'v4 <- v3':\n        return 'vec4( ' + code + ', 1.0 )';\n\n      case 'v4 <- i':\n      case 'v4 <- b':\n        return 'vec4( float( ' + code + ' ) )';\n\n      case 'i <- f':\n      case 'i <- b':\n        return 'int( ' + code + ' )';\n\n      case 'i <- v2':\n        return 'int( ' + code + '.x )';\n\n      case 'i <- v3':\n        return 'int( ' + code + '.x )';\n\n      case 'i <- v4':\n        return 'int( ' + code + '.x )';\n\n      case 'b <- f':\n        return '( ' + code + ' != 0.0 )';\n\n      case 'b <- v2':\n        return '( ' + code + ' != vec2( 0.0 ) )';\n\n      case 'b <- v3':\n        return '( ' + code + ' != vec3( 0.0 ) )';\n\n      case 'b <- v4':\n        return '( ' + code + ' != vec4( 0.0 ) )';\n\n      case 'b <- i':\n        return '( ' + code + ' != 0 )';\n    }\n\n    return code;\n  },\n  getTypeByFormat: function (format) {\n    return convertFormatToType[format] || format;\n  },\n  getFormatByType: function (type) {\n    return convertTypeToFormat[type] || type;\n  },\n  getUuid: function (uuid, useCache) {\n    useCache = useCache !== undefined ? useCache : true;\n    if (useCache && this.cache) uuid = this.cache + '-' + uuid;\n    return uuid;\n  },\n  getElementByIndex: function (index) {\n    return elements[index];\n  },\n  getIndexByElement: function (elm) {\n    return elements.indexOf(elm);\n  },\n  isShader: function (shader) {\n    return this.shader === shader;\n  },\n  setShader: function (shader) {\n    this.shader = shader;\n    return this;\n  },\n  mergeDefines: function (defines) {\n    for (let name in defines) {\n      this.defines[name] = defines[name];\n    }\n\n    return this.defines;\n  },\n  mergeUniform: function (uniforms) {\n    for (let name in uniforms) {\n      this.uniforms[name] = uniforms[name];\n    }\n\n    return this.uniforms;\n  },\n  getTextureEncodingFromMap: function (map) {\n    var encoding;\n\n    if (!map) {\n      encoding = LinearEncoding;\n    } else if (map.isTexture) {\n      encoding = map.encoding;\n    } else if (map.isWebGLRenderTarget) {\n      console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n      encoding = map.texture.encoding;\n    }\n\n    if (encoding === LinearEncoding && this.context.gamma) {\n      encoding = GammaEncoding;\n    }\n\n    return encoding;\n  }\n};\n\nexport { NodeBuilder };\n"]},"metadata":{},"sourceType":"module"}