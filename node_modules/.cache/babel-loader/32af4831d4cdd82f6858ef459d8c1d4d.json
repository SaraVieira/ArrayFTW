{"ast":null,"code":"import { Loader, FileLoader, BufferGeometry, BufferAttribute } from 'three';\n\nvar DRACOLoader = function DRACOLoader(manager) {\n  Loader.call(this, manager);\n  this.decoderPath = '';\n  this.decoderConfig = {};\n  this.decoderBinary = null;\n  this.decoderPending = null;\n  this.workerLimit = 4;\n  this.workerPool = [];\n  this.workerNextTaskID = 1;\n  this.workerSourceURL = '';\n  this.defaultAttributeIDs = {\n    position: 'POSITION',\n    normal: 'NORMAL',\n    color: 'COLOR',\n    uv: 'TEX_COORD'\n  };\n  this.defaultAttributeTypes = {\n    position: 'Float32Array',\n    normal: 'Float32Array',\n    color: 'Float32Array',\n    uv: 'Float32Array'\n  };\n};\n\nDRACOLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: DRACOLoader,\n  setDecoderPath: function setDecoderPath(path) {\n    this.decoderPath = path;\n    return this;\n  },\n  setDecoderConfig: function setDecoderConfig(config) {\n    this.decoderConfig = config;\n    return this;\n  },\n  setWorkerLimit: function setWorkerLimit(workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  },\n\n  /** @deprecated */\n  setVerbosity: function setVerbosity() {\n    console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');\n  },\n\n  /** @deprecated */\n  setDrawMode: function setDrawMode() {\n    console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');\n  },\n\n  /** @deprecated */\n  setSkipDequantization: function setSkipDequantization() {\n    console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');\n  },\n  load: function load(url, onLoad, onProgress, onError) {\n    var _this = this;\n\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      var taskConfig = {\n        attributeIDs: _this.defaultAttributeIDs,\n        attributeTypes: _this.defaultAttributeTypes,\n        useUniqueIDs: false\n      };\n\n      _this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  },\n\n  /** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n  decodeDracoFile: function decodeDracoFile(buffer, callback, attributeIDs, attributeTypes) {\n    var taskConfig = {\n      attributeIDs: attributeIDs || this.defaultAttributeIDs,\n      attributeTypes: attributeTypes || this.defaultAttributeTypes,\n      useUniqueIDs: !!attributeIDs\n    };\n    this.decodeGeometry(buffer, taskConfig).then(callback);\n  },\n  decodeGeometry: function decodeGeometry(buffer, taskConfig) {\n    var _this2 = this;\n\n    // TODO: For backward-compatibility, support 'attributeTypes' objects containing\n    // references (rather than names) to typed array constructors. These must be\n    // serialized before sending them to the worker.\n    for (var attribute in taskConfig.attributeTypes) {\n      var type = taskConfig.attributeTypes[attribute];\n\n      if (type.BYTES_PER_ELEMENT !== undefined) {\n        taskConfig.attributeTypes[attribute] = type.name;\n      }\n    } //\n\n\n    var taskKey = JSON.stringify(taskConfig); // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n    // again from this thread.\n\n    if (DRACOLoader.taskCache.has(buffer)) {\n      var cachedTask = DRACOLoader.taskCache.get(buffer);\n\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        // Technically, it would be possible to wait for the previous task to complete,\n        // transfer the buffer back, and decode again with the second configuration. That\n        // is complex, and I don't know of any reason to decode a Draco buffer twice in\n        // different ways, so this is left unimplemented.\n        throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\n      }\n    } //\n\n\n    var worker;\n    var taskID = this.workerNextTaskID++;\n    var taskCost = buffer.byteLength; // Obtain a worker and assign a task, and construct a geometry instance\n    // when the task completes.\n\n    var geometryPending = this._getWorker(taskID, taskCost).then(function (_worker) {\n      worker = _worker;\n      return new Promise(function (resolve, reject) {\n        worker._callbacks[taskID] = {\n          resolve: resolve,\n          reject: reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          taskConfig: taskConfig,\n          buffer: buffer\n        }, [buffer]); // this.debug();\n      });\n    }).then(function (message) {\n      return _this2._createGeometry(message.geometry);\n    }); // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    geometryPending.catch(function () {\n      return true;\n    }).then(function () {\n      if (worker && taskID) {\n        _this2._releaseTask(worker, taskID); // this.debug();\n\n      }\n    }); // Cache the task result.\n\n    DRACOLoader.taskCache.set(buffer, {\n      key: taskKey,\n      promise: geometryPending\n    });\n    return geometryPending;\n  },\n  _createGeometry: function _createGeometry(geometryData) {\n    var geometry = new BufferGeometry();\n\n    if (geometryData.index) {\n      geometry.setIndex(new BufferAttribute(geometryData.index.array, 1));\n    }\n\n    for (var i = 0; i < geometryData.attributes.length; i++) {\n      var attribute = geometryData.attributes[i];\n      var name = attribute.name;\n      var array = attribute.array;\n      var itemSize = attribute.itemSize;\n      geometry.setAttribute(name, new BufferAttribute(array, itemSize));\n    }\n\n    return geometry;\n  },\n  _loadLibrary: function _loadLibrary(url, responseType) {\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.decoderPath);\n    loader.setResponseType(responseType);\n    loader.setWithCredentials(this.withCredentials);\n    return new Promise(function (resolve, reject) {\n      loader.load(url, resolve, undefined, reject);\n    });\n  },\n  preload: function preload() {\n    this._initDecoder();\n\n    return this;\n  },\n  _initDecoder: function _initDecoder() {\n    var _this3 = this;\n\n    if (this.decoderPending) return this.decoderPending;\n    var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n    var librariesPending = [];\n\n    if (useJS) {\n      librariesPending.push(this._loadLibrary('draco_decoder.js', 'text'));\n    } else {\n      librariesPending.push(this._loadLibrary('draco_wasm_wrapper.js', 'text'));\n      librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\n    }\n\n    this.decoderPending = Promise.all(librariesPending).then(function (libraries) {\n      var jsContent = libraries[0];\n\n      if (!useJS) {\n        _this3.decoderConfig.wasmBinary = libraries[1];\n      }\n\n      var fn = DRACOLoader.DRACOWorker.toString();\n      var body = ['/* draco decoder */', jsContent, '', '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n      _this3.workerSourceURL = URL.createObjectURL(new Blob([body]));\n    });\n    return this.decoderPending;\n  },\n  _getWorker: function _getWorker(taskID, taskCost) {\n    var _this4 = this;\n\n    return this._initDecoder().then(function () {\n      if (_this4.workerPool.length < _this4.workerLimit) {\n        var worker = new Worker(_this4.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          decoderConfig: _this4.decoderConfig\n        });\n\n        worker.onmessage = function (e) {\n          var message = e.data;\n\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        _this4.workerPool.push(worker);\n      } else {\n        _this4.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      var worker = _this4.workerPool[_this4.workerPool.length - 1];\n      worker._taskCosts[taskID] = taskCost;\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  },\n  _releaseTask: function _releaseTask(worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  },\n  debug: function debug() {\n    console.log('Task load: ', this.workerPool.map(function (worker) {\n      return worker._taskLoad;\n    }));\n  },\n  dispose: function dispose() {\n    for (var i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n});\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n  var decoderConfig;\n  var decoderPending;\n\n  onmessage = function onmessage(e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        decoderConfig = message.decoderConfig;\n        decoderPending = new Promise(function (resolve\n        /*, reject*/\n        ) {\n          decoderConfig.onModuleLoaded = function (draco) {\n            // Module is Promise-like. Wrap before resolving to avoid loop.\n            resolve({\n              draco: draco\n            });\n          };\n\n          DracoDecoderModule(decoderConfig); // eslint-disable-line no-undef\n        });\n        break;\n\n      case 'decode':\n        var buffer = message.buffer;\n        var taskConfig = message.taskConfig;\n        decoderPending.then(function (module) {\n          var draco = module.draco;\n          var decoder = new draco.Decoder();\n          var decoderBuffer = new draco.DecoderBuffer();\n          decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n\n          try {\n            var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n            var buffers = geometry.attributes.map(function (attr) {\n              return attr.array.buffer;\n            });\n            if (geometry.index) buffers.push(geometry.index.array.buffer);\n            self.postMessage({\n              type: 'decode',\n              id: message.id,\n              geometry: geometry\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          } finally {\n            draco.destroy(decoderBuffer);\n            draco.destroy(decoder);\n          }\n        });\n        break;\n    }\n  };\n\n  function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n    var attributeIDs = taskConfig.attributeIDs;\n    var attributeTypes = taskConfig.attributeTypes;\n    var dracoGeometry;\n    var decodingStatus;\n    var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      dracoGeometry = new draco.Mesh();\n      decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n    } else if (geometryType === draco.POINT_CLOUD) {\n      dracoGeometry = new draco.PointCloud();\n      decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n    } else {\n      throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\n    }\n\n    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n      throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\n    }\n\n    var geometry = {\n      index: null,\n      attributes: []\n    }; // Gather all vertex attributes.\n\n    for (var attributeName in attributeIDs) {\n      var attributeType = self[attributeTypes[attributeName]];\n      var attribute;\n      var attributeID; // A Draco file may be created with default vertex attributes, whose attribute IDs\n      // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n      // a Draco file may contain a custom set of attributes, identified by known unique\n      // IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\n      if (taskConfig.useUniqueIDs) {\n        attributeID = attributeIDs[attributeName];\n        attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n      } else {\n        attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n        if (attributeID === -1) continue;\n        attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n      }\n\n      geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n    } // Add index.\n\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      geometry.index = decodeIndex(draco, decoder, dracoGeometry);\n    }\n\n    draco.destroy(dracoGeometry);\n    return geometry;\n  }\n\n  function decodeIndex(draco, decoder, dracoGeometry) {\n    var numFaces = dracoGeometry.num_faces();\n    var numIndices = numFaces * 3;\n    var byteLength = numIndices * 4;\n\n    var ptr = draco._malloc(byteLength);\n\n    decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n    var index = new Uint32Array(draco.HEAPF32.buffer, ptr, numIndices).slice();\n\n    draco._free(ptr);\n\n    return {\n      array: index,\n      itemSize: 1\n    };\n  }\n\n  function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n    var numComponents = attribute.num_components();\n    var numPoints = dracoGeometry.num_points();\n    var numValues = numPoints * numComponents;\n    var byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n    var dataType = getDracoDataType(draco, attributeType);\n\n    var ptr = draco._malloc(byteLength);\n\n    decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, dataType, byteLength, ptr);\n    var array = new attributeType(draco.HEAPF32.buffer, ptr, numValues).slice();\n\n    draco._free(ptr);\n\n    return {\n      name: attributeName,\n      array: array,\n      itemSize: numComponents\n    };\n  }\n\n  function getDracoDataType(draco, attributeType) {\n    switch (attributeType) {\n      case Float32Array:\n        return draco.DT_FLOAT32;\n\n      case Int8Array:\n        return draco.DT_INT8;\n\n      case Int16Array:\n        return draco.DT_INT16;\n\n      case Int32Array:\n        return draco.DT_INT32;\n\n      case Uint8Array:\n        return draco.DT_UINT8;\n\n      case Uint16Array:\n        return draco.DT_UINT16;\n\n      case Uint32Array:\n        return draco.DT_UINT32;\n    }\n  }\n};\n\nDRACOLoader.taskCache = new WeakMap();\n/** Deprecated static methods */\n\n/** @deprecated */\n\nDRACOLoader.setDecoderPath = function () {\n  console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');\n};\n/** @deprecated */\n\n\nDRACOLoader.setDecoderConfig = function () {\n  console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');\n};\n/** @deprecated */\n\n\nDRACOLoader.releaseDecoderModule = function () {\n  console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');\n};\n/** @deprecated */\n\n\nDRACOLoader.getDecoderModule = function () {\n  console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');\n};\n\nexport { DRACOLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/DRACOLoader.js"],"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","DRACOLoader","manager","call","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","position","normal","color","uv","defaultAttributeTypes","prototype","Object","assign","create","constructor","setDecoderPath","path","setDecoderConfig","config","setWorkerLimit","setVerbosity","console","warn","setDrawMode","setSkipDequantization","load","url","onLoad","onProgress","onError","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","then","catch","decodeDracoFile","callback","attribute","type","BYTES_PER_ELEMENT","undefined","name","taskKey","JSON","stringify","taskCache","has","cachedTask","get","key","promise","byteLength","Error","worker","taskID","taskCost","geometryPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","_createGeometry","geometry","_releaseTask","set","geometryData","index","setIndex","array","i","attributes","length","itemSize","setAttribute","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","push","all","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","e","data","error","sort","a","b","debug","log","map","dispose","terminate","onModuleLoaded","draco","DracoDecoderModule","module","decoder","Decoder","decoderBuffer","DecoderBuffer","Init","Int8Array","buffers","attr","self","destroy","dracoGeometry","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","Mesh","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeName","attributeType","attributeID","GetAttributeByUniqueId","GetAttributeId","GetAttribute","decodeAttribute","decodeIndex","numFaces","num_faces","numIndices","_malloc","GetTrianglesUInt32Array","Uint32Array","HEAPF32","slice","_free","numComponents","num_components","numPoints","num_points","numValues","dataType","getDracoDataType","GetAttributeDataArrayForAllPoints","Float32Array","DT_FLOAT32","DT_INT8","Int16Array","DT_INT16","Int32Array","DT_INT32","Uint8Array","DT_UINT8","Uint16Array","DT_UINT16","DT_UINT32","WeakMap","releaseDecoderModule","getDecoderModule"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute } from 'three';\n\nvar DRACOLoader = function (manager) {\n  Loader.call(this, manager);\n  this.decoderPath = '';\n  this.decoderConfig = {};\n  this.decoderBinary = null;\n  this.decoderPending = null;\n  this.workerLimit = 4;\n  this.workerPool = [];\n  this.workerNextTaskID = 1;\n  this.workerSourceURL = '';\n  this.defaultAttributeIDs = {\n    position: 'POSITION',\n    normal: 'NORMAL',\n    color: 'COLOR',\n    uv: 'TEX_COORD'\n  };\n  this.defaultAttributeTypes = {\n    position: 'Float32Array',\n    normal: 'Float32Array',\n    color: 'Float32Array',\n    uv: 'Float32Array'\n  };\n};\n\nDRACOLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: DRACOLoader,\n  setDecoderPath: function (path) {\n    this.decoderPath = path;\n    return this;\n  },\n  setDecoderConfig: function (config) {\n    this.decoderConfig = config;\n    return this;\n  },\n  setWorkerLimit: function (workerLimit) {\n    this.workerLimit = workerLimit;\n    return this;\n  },\n\n  /** @deprecated */\n  setVerbosity: function () {\n    console.warn('THREE.DRACOLoader: The .setVerbosity() method has been removed.');\n  },\n\n  /** @deprecated */\n  setDrawMode: function () {\n    console.warn('THREE.DRACOLoader: The .setDrawMode() method has been removed.');\n  },\n\n  /** @deprecated */\n  setSkipDequantization: function () {\n    console.warn('THREE.DRACOLoader: The .setSkipDequantization() method has been removed.');\n  },\n  load: function (url, onLoad, onProgress, onError) {\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      var taskConfig = {\n        attributeIDs: this.defaultAttributeIDs,\n        attributeTypes: this.defaultAttributeTypes,\n        useUniqueIDs: false\n      };\n      this.decodeGeometry(buffer, taskConfig).then(onLoad).catch(onError);\n    }, onProgress, onError);\n  },\n\n  /** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n  decodeDracoFile: function (buffer, callback, attributeIDs, attributeTypes) {\n    var taskConfig = {\n      attributeIDs: attributeIDs || this.defaultAttributeIDs,\n      attributeTypes: attributeTypes || this.defaultAttributeTypes,\n      useUniqueIDs: !!attributeIDs\n    };\n    this.decodeGeometry(buffer, taskConfig).then(callback);\n  },\n  decodeGeometry: function (buffer, taskConfig) {\n    // TODO: For backward-compatibility, support 'attributeTypes' objects containing\n    // references (rather than names) to typed array constructors. These must be\n    // serialized before sending them to the worker.\n    for (let attribute in taskConfig.attributeTypes) {\n      var type = taskConfig.attributeTypes[attribute];\n\n      if (type.BYTES_PER_ELEMENT !== undefined) {\n        taskConfig.attributeTypes[attribute] = type.name;\n      }\n    } //\n\n\n    var taskKey = JSON.stringify(taskConfig); // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n    // again from this thread.\n\n    if (DRACOLoader.taskCache.has(buffer)) {\n      var cachedTask = DRACOLoader.taskCache.get(buffer);\n\n      if (cachedTask.key === taskKey) {\n        return cachedTask.promise;\n      } else if (buffer.byteLength === 0) {\n        // Technically, it would be possible to wait for the previous task to complete,\n        // transfer the buffer back, and decode again with the second configuration. That\n        // is complex, and I don't know of any reason to decode a Draco buffer twice in\n        // different ways, so this is left unimplemented.\n        throw new Error('THREE.DRACOLoader: Unable to re-decode a buffer with different ' + 'settings. Buffer has already been transferred.');\n      }\n    } //\n\n\n    var worker;\n    var taskID = this.workerNextTaskID++;\n    var taskCost = buffer.byteLength; // Obtain a worker and assign a task, and construct a geometry instance\n    // when the task completes.\n\n    var geometryPending = this._getWorker(taskID, taskCost).then(_worker => {\n      worker = _worker;\n      return new Promise((resolve, reject) => {\n        worker._callbacks[taskID] = {\n          resolve,\n          reject\n        };\n        worker.postMessage({\n          type: 'decode',\n          id: taskID,\n          taskConfig,\n          buffer\n        }, [buffer]); // this.debug();\n      });\n    }).then(message => this._createGeometry(message.geometry)); // Remove task from the task list.\n    // Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\n\n\n    geometryPending.catch(() => true).then(() => {\n      if (worker && taskID) {\n        this._releaseTask(worker, taskID); // this.debug();\n\n      }\n    }); // Cache the task result.\n\n    DRACOLoader.taskCache.set(buffer, {\n      key: taskKey,\n      promise: geometryPending\n    });\n    return geometryPending;\n  },\n  _createGeometry: function (geometryData) {\n    var geometry = new BufferGeometry();\n\n    if (geometryData.index) {\n      geometry.setIndex(new BufferAttribute(geometryData.index.array, 1));\n    }\n\n    for (let i = 0; i < geometryData.attributes.length; i++) {\n      var attribute = geometryData.attributes[i];\n      var name = attribute.name;\n      var array = attribute.array;\n      var itemSize = attribute.itemSize;\n      geometry.setAttribute(name, new BufferAttribute(array, itemSize));\n    }\n\n    return geometry;\n  },\n  _loadLibrary: function (url, responseType) {\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.decoderPath);\n    loader.setResponseType(responseType);\n    loader.setWithCredentials(this.withCredentials);\n    return new Promise((resolve, reject) => {\n      loader.load(url, resolve, undefined, reject);\n    });\n  },\n  preload: function () {\n    this._initDecoder();\n\n    return this;\n  },\n  _initDecoder: function () {\n    if (this.decoderPending) return this.decoderPending;\n    var useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n    var librariesPending = [];\n\n    if (useJS) {\n      librariesPending.push(this._loadLibrary('draco_decoder.js', 'text'));\n    } else {\n      librariesPending.push(this._loadLibrary('draco_wasm_wrapper.js', 'text'));\n      librariesPending.push(this._loadLibrary('draco_decoder.wasm', 'arraybuffer'));\n    }\n\n    this.decoderPending = Promise.all(librariesPending).then(libraries => {\n      var jsContent = libraries[0];\n\n      if (!useJS) {\n        this.decoderConfig.wasmBinary = libraries[1];\n      }\n\n      var fn = DRACOLoader.DRACOWorker.toString();\n      var body = ['/* draco decoder */', jsContent, '', '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n      this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n    });\n    return this.decoderPending;\n  },\n  _getWorker: function (taskID, taskCost) {\n    return this._initDecoder().then(() => {\n      if (this.workerPool.length < this.workerLimit) {\n        var worker = new Worker(this.workerSourceURL);\n        worker._callbacks = {};\n        worker._taskCosts = {};\n        worker._taskLoad = 0;\n        worker.postMessage({\n          type: 'init',\n          decoderConfig: this.decoderConfig\n        });\n\n        worker.onmessage = function (e) {\n          var message = e.data;\n\n          switch (message.type) {\n            case 'decode':\n              worker._callbacks[message.id].resolve(message);\n\n              break;\n\n            case 'error':\n              worker._callbacks[message.id].reject(message);\n\n              break;\n\n            default:\n              console.error('THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"');\n          }\n        };\n\n        this.workerPool.push(worker);\n      } else {\n        this.workerPool.sort(function (a, b) {\n          return a._taskLoad > b._taskLoad ? -1 : 1;\n        });\n      }\n\n      var worker = this.workerPool[this.workerPool.length - 1];\n      worker._taskCosts[taskID] = taskCost;\n      worker._taskLoad += taskCost;\n      return worker;\n    });\n  },\n  _releaseTask: function (worker, taskID) {\n    worker._taskLoad -= worker._taskCosts[taskID];\n    delete worker._callbacks[taskID];\n    delete worker._taskCosts[taskID];\n  },\n  debug: function () {\n    console.log('Task load: ', this.workerPool.map(worker => worker._taskLoad));\n  },\n  dispose: function () {\n    for (let i = 0; i < this.workerPool.length; ++i) {\n      this.workerPool[i].terminate();\n    }\n\n    this.workerPool.length = 0;\n    return this;\n  }\n});\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n  var decoderConfig;\n  var decoderPending;\n\n  onmessage = function (e) {\n    var message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        decoderConfig = message.decoderConfig;\n        decoderPending = new Promise(function (resolve\n        /*, reject*/\n        ) {\n          decoderConfig.onModuleLoaded = function (draco) {\n            // Module is Promise-like. Wrap before resolving to avoid loop.\n            resolve({\n              draco: draco\n            });\n          };\n\n          DracoDecoderModule(decoderConfig); // eslint-disable-line no-undef\n        });\n        break;\n\n      case 'decode':\n        var buffer = message.buffer;\n        var taskConfig = message.taskConfig;\n        decoderPending.then(module => {\n          var draco = module.draco;\n          var decoder = new draco.Decoder();\n          var decoderBuffer = new draco.DecoderBuffer();\n          decoderBuffer.Init(new Int8Array(buffer), buffer.byteLength);\n\n          try {\n            var geometry = decodeGeometry(draco, decoder, decoderBuffer, taskConfig);\n            var buffers = geometry.attributes.map(attr => attr.array.buffer);\n            if (geometry.index) buffers.push(geometry.index.array.buffer);\n            self.postMessage({\n              type: 'decode',\n              id: message.id,\n              geometry\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          } finally {\n            draco.destroy(decoderBuffer);\n            draco.destroy(decoder);\n          }\n        });\n        break;\n    }\n  };\n\n  function decodeGeometry(draco, decoder, decoderBuffer, taskConfig) {\n    var attributeIDs = taskConfig.attributeIDs;\n    var attributeTypes = taskConfig.attributeTypes;\n    var dracoGeometry;\n    var decodingStatus;\n    var geometryType = decoder.GetEncodedGeometryType(decoderBuffer);\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      dracoGeometry = new draco.Mesh();\n      decodingStatus = decoder.DecodeBufferToMesh(decoderBuffer, dracoGeometry);\n    } else if (geometryType === draco.POINT_CLOUD) {\n      dracoGeometry = new draco.PointCloud();\n      decodingStatus = decoder.DecodeBufferToPointCloud(decoderBuffer, dracoGeometry);\n    } else {\n      throw new Error('THREE.DRACOLoader: Unexpected geometry type.');\n    }\n\n    if (!decodingStatus.ok() || dracoGeometry.ptr === 0) {\n      throw new Error('THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg());\n    }\n\n    var geometry = {\n      index: null,\n      attributes: []\n    }; // Gather all vertex attributes.\n\n    for (let attributeName in attributeIDs) {\n      var attributeType = self[attributeTypes[attributeName]];\n      var attribute;\n      var attributeID; // A Draco file may be created with default vertex attributes, whose attribute IDs\n      // are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n      // a Draco file may contain a custom set of attributes, identified by known unique\n      // IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\n      if (taskConfig.useUniqueIDs) {\n        attributeID = attributeIDs[attributeName];\n        attribute = decoder.GetAttributeByUniqueId(dracoGeometry, attributeID);\n      } else {\n        attributeID = decoder.GetAttributeId(dracoGeometry, draco[attributeIDs[attributeName]]);\n        if (attributeID === -1) continue;\n        attribute = decoder.GetAttribute(dracoGeometry, attributeID);\n      }\n\n      geometry.attributes.push(decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute));\n    } // Add index.\n\n\n    if (geometryType === draco.TRIANGULAR_MESH) {\n      geometry.index = decodeIndex(draco, decoder, dracoGeometry);\n    }\n\n    draco.destroy(dracoGeometry);\n    return geometry;\n  }\n\n  function decodeIndex(draco, decoder, dracoGeometry) {\n    var numFaces = dracoGeometry.num_faces();\n    var numIndices = numFaces * 3;\n    var byteLength = numIndices * 4;\n\n    var ptr = draco._malloc(byteLength);\n\n    decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n    var index = new Uint32Array(draco.HEAPF32.buffer, ptr, numIndices).slice();\n\n    draco._free(ptr);\n\n    return {\n      array: index,\n      itemSize: 1\n    };\n  }\n\n  function decodeAttribute(draco, decoder, dracoGeometry, attributeName, attributeType, attribute) {\n    var numComponents = attribute.num_components();\n    var numPoints = dracoGeometry.num_points();\n    var numValues = numPoints * numComponents;\n    var byteLength = numValues * attributeType.BYTES_PER_ELEMENT;\n    var dataType = getDracoDataType(draco, attributeType);\n\n    var ptr = draco._malloc(byteLength);\n\n    decoder.GetAttributeDataArrayForAllPoints(dracoGeometry, attribute, dataType, byteLength, ptr);\n    var array = new attributeType(draco.HEAPF32.buffer, ptr, numValues).slice();\n\n    draco._free(ptr);\n\n    return {\n      name: attributeName,\n      array: array,\n      itemSize: numComponents\n    };\n  }\n\n  function getDracoDataType(draco, attributeType) {\n    switch (attributeType) {\n      case Float32Array:\n        return draco.DT_FLOAT32;\n\n      case Int8Array:\n        return draco.DT_INT8;\n\n      case Int16Array:\n        return draco.DT_INT16;\n\n      case Int32Array:\n        return draco.DT_INT32;\n\n      case Uint8Array:\n        return draco.DT_UINT8;\n\n      case Uint16Array:\n        return draco.DT_UINT16;\n\n      case Uint32Array:\n        return draco.DT_UINT32;\n    }\n  }\n};\n\nDRACOLoader.taskCache = new WeakMap();\n/** Deprecated static methods */\n\n/** @deprecated */\n\nDRACOLoader.setDecoderPath = function () {\n  console.warn('THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.');\n};\n/** @deprecated */\n\n\nDRACOLoader.setDecoderConfig = function () {\n  console.warn('THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.');\n};\n/** @deprecated */\n\n\nDRACOLoader.releaseDecoderModule = function () {\n  console.warn('THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.');\n};\n/** @deprecated */\n\n\nDRACOLoader.getDecoderModule = function () {\n  console.warn('THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.');\n};\n\nexport { DRACOLoader };\n"]},"metadata":{},"sourceType":"module"}