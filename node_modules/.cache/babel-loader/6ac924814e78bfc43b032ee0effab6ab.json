{"ast":null,"code":"import _regeneratorRuntime from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar VRButton = /*#__PURE__*/function () {\n  function VRButton() {\n    _classCallCheck(this, VRButton);\n  }\n\n  _createClass(VRButton, null, [{\n    key: \"createButton\",\n    value: function createButton(renderer, options) {\n      if (options) {\n        console.error('THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.');\n      }\n\n      var button = document.createElement('button');\n\n      function showEnterVR()\n      /*device*/\n      {\n        var currentSession = null;\n\n        function onSessionStarted(_x) {\n          return _onSessionStarted.apply(this, arguments);\n        }\n\n        function _onSessionStarted() {\n          _onSessionStarted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(session) {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    session.addEventListener('end', onSessionEnded);\n                    _context.next = 3;\n                    return renderer.xr.setSession(session);\n\n                  case 3:\n                    button.textContent = 'EXIT VR';\n                    currentSession = session;\n\n                  case 5:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n          return _onSessionStarted.apply(this, arguments);\n        }\n\n        function onSessionEnded()\n        /*event*/\n        {\n          currentSession.removeEventListener('end', onSessionEnded);\n          button.textContent = 'ENTER VR';\n          currentSession = null;\n        } //\n\n\n        button.style.display = '';\n        button.style.cursor = 'pointer';\n        button.style.left = 'calc(50% - 50px)';\n        button.style.width = '100px';\n        button.textContent = 'ENTER VR';\n\n        button.onmouseenter = function () {\n          button.style.opacity = '1.0';\n        };\n\n        button.onmouseleave = function () {\n          button.style.opacity = '0.5';\n        };\n\n        button.onclick = function () {\n          if (currentSession === null) {\n            // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n            var sessionInit = {\n              optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\n            };\n            navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);\n          } else {\n            currentSession.end();\n          }\n        };\n      }\n\n      function disableButton() {\n        button.style.display = '';\n        button.style.cursor = 'auto';\n        button.style.left = 'calc(50% - 75px)';\n        button.style.width = '150px';\n        button.onmouseenter = null;\n        button.onmouseleave = null;\n        button.onclick = null;\n      }\n\n      function showWebXRNotFound() {\n        disableButton();\n        button.textContent = 'VR NOT SUPPORTED';\n      }\n\n      function stylizeElement(element) {\n        element.style.position = 'absolute';\n        element.style.bottom = '20px';\n        element.style.padding = '12px 6px';\n        element.style.border = '1px solid #fff';\n        element.style.borderRadius = '4px';\n        element.style.background = 'rgba(0,0,0,0.1)';\n        element.style.color = '#fff';\n        element.style.font = 'normal 13px sans-serif';\n        element.style.textAlign = 'center';\n        element.style.opacity = '0.5';\n        element.style.outline = 'none';\n        element.style.zIndex = '999';\n      }\n\n      if ('xr' in navigator) {\n        button.id = 'VRButton';\n        button.style.display = 'none';\n        stylizeElement(button);\n        navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n          supported ? showEnterVR() : showWebXRNotFound();\n        });\n        return button;\n      } else {\n        var message = document.createElement('a');\n\n        if (window.isSecureContext === false) {\n          message.href = document.location.href.replace(/^http:/, 'https:');\n          message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n        } else {\n          message.href = 'https://immersiveweb.dev/';\n          message.innerHTML = 'WEBXR NOT AVAILABLE';\n        }\n\n        message.style.left = 'calc(50% - 90px)';\n        message.style.width = '180px';\n        message.style.textDecoration = 'none';\n        stylizeElement(message);\n        return message;\n      }\n    }\n  }]);\n\n  return VRButton;\n}();\n\nexport { VRButton };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/webxr/VRButton.js"],"names":["VRButton","renderer","options","console","error","button","document","createElement","showEnterVR","currentSession","onSessionStarted","session","addEventListener","onSessionEnded","xr","setSession","textContent","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","sessionInit","optionalFeatures","navigator","requestSession","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration"],"mappings":"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","sourcesContent":["class VRButton {\n  static createButton(renderer, options) {\n    if (options) {\n      console.error('THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.');\n    }\n\n    const button = document.createElement('button');\n\n    function showEnterVR()\n    /*device*/\n    {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function onSessionEnded()\n      /*event*/\n      {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = function () {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const sessionInit = {\n            optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\n          };\n          navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n        supported ? showEnterVR() : showWebXRNotFound();\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n}\n\nexport { VRButton };\n"]},"metadata":{},"sourceType":"module"}