{"ast":null,"code":"import { Texture, LinearFilter, ClampToEdgeWrapping, MeshBasicMaterial, DoubleSide, Mesh, PlaneGeometry } from 'three';\n/**\n * This class has been made to hold a slice of a volume data\n * @class\n * @param   {Volume} volume    The associated volume\n * @param   {number}       [index=0] The index of the slice\n * @param   {string}       [axis='z']      For now only 'x', 'y' or 'z' but later it will change to a normal vector\n * @see Volume\n */\n\nvar VolumeSlice = function VolumeSlice(volume, index, axis) {\n  var slice = this;\n  /**\n   * @member {Volume} volume The associated volume\n   */\n\n  this.volume = volume;\n  /**\n   * @member {Number} index The index of the slice, if changed, will automatically call updateGeometry at the next repaint\n   */\n\n  index = index || 0;\n  Object.defineProperty(this, 'index', {\n    get: function get() {\n      return index;\n    },\n    set: function set(value) {\n      index = value;\n      slice.geometryNeedsUpdate = true;\n      return index;\n    }\n  });\n  /**\n   * @member {String} axis The normal axis\n   */\n\n  this.axis = axis || 'z';\n  /**\n   * @member {HTMLCanvasElement} canvas The final canvas used for the texture\n   */\n\n  /**\n   * @member {CanvasRenderingContext2D} ctx Context of the canvas\n   */\n\n  this.canvas = document.createElement('canvas');\n  /**\n   * @member {HTMLCanvasElement} canvasBuffer The intermediary canvas used to paint the data\n   */\n\n  /**\n   * @member {CanvasRenderingContext2D} ctxBuffer Context of the canvas buffer\n   */\n\n  this.canvasBuffer = document.createElement('canvas');\n  this.updateGeometry();\n  var canvasMap = new Texture(this.canvas);\n  canvasMap.minFilter = LinearFilter;\n  canvasMap.wrapS = canvasMap.wrapT = ClampToEdgeWrapping;\n  var material = new MeshBasicMaterial({\n    map: canvasMap,\n    side: DoubleSide,\n    transparent: true\n  });\n  /**\n   * @member {Mesh} mesh The mesh ready to get used in the scene\n   */\n\n  this.mesh = new Mesh(this.geometry, material);\n  this.mesh.matrixAutoUpdate = false;\n  /**\n   * @member {Boolean} geometryNeedsUpdate If set to true, updateGeometry will be triggered at the next repaint\n   */\n\n  this.geometryNeedsUpdate = true;\n  this.repaint();\n  /**\n   * @member {Number} iLength Width of slice in the original coordinate system, corresponds to the width of the buffer canvas\n   */\n\n  /**\n   * @member {Number} jLength Height of slice in the original coordinate system, corresponds to the height of the buffer canvas\n   */\n\n  /**\n   * @member {Function} sliceAccess Function that allow the slice to access right data\n   * @see Volume.extractPerpendicularPlane\n   * @param {Number} i The first coordinate\n   * @param {Number} j The second coordinate\n   * @returns {Number} the index corresponding to the voxel in volume.data of the given position in the slice\n   */\n};\n\nVolumeSlice.prototype = {\n  constructor: VolumeSlice,\n\n  /**\n   * @member {Function} repaint Refresh the texture and the geometry if geometryNeedsUpdate is set to true\n   * @memberof VolumeSlice\n   */\n  repaint: function repaint() {\n    if (this.geometryNeedsUpdate) {\n      this.updateGeometry();\n    }\n\n    var iLength = this.iLength,\n        jLength = this.jLength,\n        sliceAccess = this.sliceAccess,\n        volume = this.volume,\n        canvas = this.canvasBuffer,\n        ctx = this.ctxBuffer; // get the imageData and pixel array from the canvas\n\n    var imgData = ctx.getImageData(0, 0, iLength, jLength);\n    var data = imgData.data;\n    var volumeData = volume.data;\n    var upperThreshold = volume.upperThreshold;\n    var lowerThreshold = volume.lowerThreshold;\n    var windowLow = volume.windowLow;\n    var windowHigh = volume.windowHigh; // manipulate some pixel elements\n\n    var pixelCount = 0;\n\n    if (volume.dataType === 'label') {\n      //this part is currently useless but will be used when colortables will be handled\n      for (var j = 0; j < jLength; j++) {\n        for (var i = 0; i < iLength; i++) {\n          var label = volumeData[sliceAccess(i, j)];\n          label = label >= this.colorMap.length ? label % this.colorMap.length + 1 : label;\n          var color = this.colorMap[label];\n          data[4 * pixelCount] = color >> 24 & 0xff;\n          data[4 * pixelCount + 1] = color >> 16 & 0xff;\n          data[4 * pixelCount + 2] = color >> 8 & 0xff;\n          data[4 * pixelCount + 3] = color & 0xff;\n          pixelCount++;\n        }\n      }\n    } else {\n      for (var _j = 0; _j < jLength; _j++) {\n        for (var _i = 0; _i < iLength; _i++) {\n          var value = volumeData[sliceAccess(_i, _j)];\n          var alpha = 0xff; //apply threshold\n\n          alpha = upperThreshold >= value ? lowerThreshold <= value ? alpha : 0 : 0; //apply window level\n\n          value = Math.floor(255 * (value - windowLow) / (windowHigh - windowLow));\n          value = value > 255 ? 255 : value < 0 ? 0 : value | 0;\n          data[4 * pixelCount] = value;\n          data[4 * pixelCount + 1] = value;\n          data[4 * pixelCount + 2] = value;\n          data[4 * pixelCount + 3] = alpha;\n          pixelCount++;\n        }\n      }\n    }\n\n    ctx.putImageData(imgData, 0, 0);\n    this.ctx.drawImage(canvas, 0, 0, iLength, jLength, 0, 0, this.canvas.width, this.canvas.height);\n    this.mesh.material.map.needsUpdate = true;\n  },\n\n  /**\n   * @member {Function} Refresh the geometry according to axis and index\n   * @see Volume.extractPerpendicularPlane\n   * @memberof VolumeSlice\n   */\n  updateGeometry: function updateGeometry() {\n    var extracted = this.volume.extractPerpendicularPlane(this.axis, this.index);\n    this.sliceAccess = extracted.sliceAccess;\n    this.jLength = extracted.jLength;\n    this.iLength = extracted.iLength;\n    this.matrix = extracted.matrix;\n    this.canvas.width = extracted.planeWidth;\n    this.canvas.height = extracted.planeHeight;\n    this.canvasBuffer.width = this.iLength;\n    this.canvasBuffer.height = this.jLength;\n    this.ctx = this.canvas.getContext('2d');\n    this.ctxBuffer = this.canvasBuffer.getContext('2d');\n    if (this.geometry) this.geometry.dispose(); // dispose existing geometry\n\n    this.geometry = new PlaneGeometry(extracted.planeWidth, extracted.planeHeight);\n\n    if (this.mesh) {\n      this.mesh.geometry = this.geometry; //reset mesh matrix\n\n      this.mesh.matrix.identity();\n      this.mesh.applyMatrix4(this.matrix);\n    }\n\n    this.geometryNeedsUpdate = false;\n  }\n};\nexport { VolumeSlice };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/misc/VolumeSlice.js"],"names":["Texture","LinearFilter","ClampToEdgeWrapping","MeshBasicMaterial","DoubleSide","Mesh","PlaneGeometry","VolumeSlice","volume","index","axis","slice","Object","defineProperty","get","set","value","geometryNeedsUpdate","canvas","document","createElement","canvasBuffer","updateGeometry","canvasMap","minFilter","wrapS","wrapT","material","map","side","transparent","mesh","geometry","matrixAutoUpdate","repaint","prototype","constructor","iLength","jLength","sliceAccess","ctx","ctxBuffer","imgData","getImageData","data","volumeData","upperThreshold","lowerThreshold","windowLow","windowHigh","pixelCount","dataType","j","i","label","colorMap","length","color","alpha","Math","floor","putImageData","drawImage","width","height","needsUpdate","extracted","extractPerpendicularPlane","matrix","planeWidth","planeHeight","getContext","dispose","identity","applyMatrix4"],"mappings":"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","sourcesContent":["import { Texture, LinearFilter, ClampToEdgeWrapping, MeshBasicMaterial, DoubleSide, Mesh, PlaneGeometry } from 'three';\n\n/**\n * This class has been made to hold a slice of a volume data\n * @class\n * @param   {Volume} volume    The associated volume\n * @param   {number}       [index=0] The index of the slice\n * @param   {string}       [axis='z']      For now only 'x', 'y' or 'z' but later it will change to a normal vector\n * @see Volume\n */\n\nvar VolumeSlice = function (volume, index, axis) {\n  var slice = this;\n  /**\n   * @member {Volume} volume The associated volume\n   */\n\n  this.volume = volume;\n  /**\n   * @member {Number} index The index of the slice, if changed, will automatically call updateGeometry at the next repaint\n   */\n\n  index = index || 0;\n  Object.defineProperty(this, 'index', {\n    get: function () {\n      return index;\n    },\n    set: function (value) {\n      index = value;\n      slice.geometryNeedsUpdate = true;\n      return index;\n    }\n  });\n  /**\n   * @member {String} axis The normal axis\n   */\n\n  this.axis = axis || 'z';\n  /**\n   * @member {HTMLCanvasElement} canvas The final canvas used for the texture\n   */\n\n  /**\n   * @member {CanvasRenderingContext2D} ctx Context of the canvas\n   */\n\n  this.canvas = document.createElement('canvas');\n  /**\n   * @member {HTMLCanvasElement} canvasBuffer The intermediary canvas used to paint the data\n   */\n\n  /**\n   * @member {CanvasRenderingContext2D} ctxBuffer Context of the canvas buffer\n   */\n\n  this.canvasBuffer = document.createElement('canvas');\n  this.updateGeometry();\n  var canvasMap = new Texture(this.canvas);\n  canvasMap.minFilter = LinearFilter;\n  canvasMap.wrapS = canvasMap.wrapT = ClampToEdgeWrapping;\n  var material = new MeshBasicMaterial({\n    map: canvasMap,\n    side: DoubleSide,\n    transparent: true\n  });\n  /**\n   * @member {Mesh} mesh The mesh ready to get used in the scene\n   */\n\n  this.mesh = new Mesh(this.geometry, material);\n  this.mesh.matrixAutoUpdate = false;\n  /**\n   * @member {Boolean} geometryNeedsUpdate If set to true, updateGeometry will be triggered at the next repaint\n   */\n\n  this.geometryNeedsUpdate = true;\n  this.repaint();\n  /**\n   * @member {Number} iLength Width of slice in the original coordinate system, corresponds to the width of the buffer canvas\n   */\n\n  /**\n   * @member {Number} jLength Height of slice in the original coordinate system, corresponds to the height of the buffer canvas\n   */\n\n  /**\n   * @member {Function} sliceAccess Function that allow the slice to access right data\n   * @see Volume.extractPerpendicularPlane\n   * @param {Number} i The first coordinate\n   * @param {Number} j The second coordinate\n   * @returns {Number} the index corresponding to the voxel in volume.data of the given position in the slice\n   */\n};\n\nVolumeSlice.prototype = {\n  constructor: VolumeSlice,\n\n  /**\n   * @member {Function} repaint Refresh the texture and the geometry if geometryNeedsUpdate is set to true\n   * @memberof VolumeSlice\n   */\n  repaint: function () {\n    if (this.geometryNeedsUpdate) {\n      this.updateGeometry();\n    }\n\n    var iLength = this.iLength,\n        jLength = this.jLength,\n        sliceAccess = this.sliceAccess,\n        volume = this.volume,\n        canvas = this.canvasBuffer,\n        ctx = this.ctxBuffer; // get the imageData and pixel array from the canvas\n\n    var imgData = ctx.getImageData(0, 0, iLength, jLength);\n    var data = imgData.data;\n    var volumeData = volume.data;\n    var upperThreshold = volume.upperThreshold;\n    var lowerThreshold = volume.lowerThreshold;\n    var windowLow = volume.windowLow;\n    var windowHigh = volume.windowHigh; // manipulate some pixel elements\n\n    var pixelCount = 0;\n\n    if (volume.dataType === 'label') {\n      //this part is currently useless but will be used when colortables will be handled\n      for (let j = 0; j < jLength; j++) {\n        for (let i = 0; i < iLength; i++) {\n          var label = volumeData[sliceAccess(i, j)];\n          label = label >= this.colorMap.length ? label % this.colorMap.length + 1 : label;\n          var color = this.colorMap[label];\n          data[4 * pixelCount] = color >> 24 & 0xff;\n          data[4 * pixelCount + 1] = color >> 16 & 0xff;\n          data[4 * pixelCount + 2] = color >> 8 & 0xff;\n          data[4 * pixelCount + 3] = color & 0xff;\n          pixelCount++;\n        }\n      }\n    } else {\n      for (let j = 0; j < jLength; j++) {\n        for (let i = 0; i < iLength; i++) {\n          var value = volumeData[sliceAccess(i, j)];\n          var alpha = 0xff; //apply threshold\n\n          alpha = upperThreshold >= value ? lowerThreshold <= value ? alpha : 0 : 0; //apply window level\n\n          value = Math.floor(255 * (value - windowLow) / (windowHigh - windowLow));\n          value = value > 255 ? 255 : value < 0 ? 0 : value | 0;\n          data[4 * pixelCount] = value;\n          data[4 * pixelCount + 1] = value;\n          data[4 * pixelCount + 2] = value;\n          data[4 * pixelCount + 3] = alpha;\n          pixelCount++;\n        }\n      }\n    }\n\n    ctx.putImageData(imgData, 0, 0);\n    this.ctx.drawImage(canvas, 0, 0, iLength, jLength, 0, 0, this.canvas.width, this.canvas.height);\n    this.mesh.material.map.needsUpdate = true;\n  },\n\n  /**\n   * @member {Function} Refresh the geometry according to axis and index\n   * @see Volume.extractPerpendicularPlane\n   * @memberof VolumeSlice\n   */\n  updateGeometry: function () {\n    var extracted = this.volume.extractPerpendicularPlane(this.axis, this.index);\n    this.sliceAccess = extracted.sliceAccess;\n    this.jLength = extracted.jLength;\n    this.iLength = extracted.iLength;\n    this.matrix = extracted.matrix;\n    this.canvas.width = extracted.planeWidth;\n    this.canvas.height = extracted.planeHeight;\n    this.canvasBuffer.width = this.iLength;\n    this.canvasBuffer.height = this.jLength;\n    this.ctx = this.canvas.getContext('2d');\n    this.ctxBuffer = this.canvasBuffer.getContext('2d');\n    if (this.geometry) this.geometry.dispose(); // dispose existing geometry\n\n    this.geometry = new PlaneGeometry(extracted.planeWidth, extracted.planeHeight);\n\n    if (this.mesh) {\n      this.mesh.geometry = this.geometry; //reset mesh matrix\n\n      this.mesh.matrix.identity();\n      this.mesh.applyMatrix4(this.matrix);\n    }\n\n    this.geometryNeedsUpdate = false;\n  }\n};\n\nexport { VolumeSlice };\n"]},"metadata":{},"sourceType":"module"}