{"ast":null,"code":"/**\n * Focus shader\n * based on PaintEffect postprocess from ro.me\n * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n */\nvar FocusShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    screenWidth: {\n      value: 1024\n    },\n    screenHeight: {\n      value: 1024\n    },\n    sampleDistance: {\n      value: 0.94\n    },\n    waveFactor: {\n      value: 0.00125\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float screenWidth;', 'uniform float screenHeight;', 'uniform float sampleDistance;', 'uniform float waveFactor;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 color, org, tmp, add;', '\tfloat sample_dist, f;', '\tvec2 vin;', '\tvec2 uv = vUv;', '\tadd = color = org = texture2D( tDiffuse, uv );', '\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );', '\tsample_dist = dot( vin, vin ) * 2.0;', '\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;', '\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );', '\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );', '\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );', '}'].join('\\n')\n};\nexport { FocusShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/FocusShader.js"],"names":["FocusShader","uniforms","tDiffuse","value","screenWidth","screenHeight","sampleDistance","waveFactor","vertexShader","join","fragmentShader"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,WAAW,GAAG;AAChBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,WAAW,EAAE;AACXD,MAAAA,KAAK,EAAE;AADI,KAJL;AAORE,IAAAA,YAAY,EAAE;AACZF,MAAAA,KAAK,EAAE;AADK,KAPN;AAURG,IAAAA,cAAc,EAAE;AACdH,MAAAA,KAAK,EAAE;AADO,KAVR;AAaRI,IAAAA,UAAU,EAAE;AACVJ,MAAAA,KAAK,EAAE;AADG;AAbJ,GADM;AAkBhBK,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CAlBE;AAmBhBC,EAAAA,cAAc,EAAE,CAAC,4BAAD,EAA+B,6BAA/B,EAA8D,+BAA9D,EAA+F,2BAA/F,EAA4H,6BAA5H,EAA2J,mBAA3J,EAAgL,eAAhL,EAAiM,6BAAjM,EAAgO,wBAAhO,EAA0P,YAA1P,EAAwQ,iBAAxQ,EAA2R,iDAA3R,EAA8U,4CAA9U,EAA4X,uCAA5X,EAAqa,mEAAra,EAA0e,gFAA1e,EAA4jB,oFAA5jB,EAAkpB,qCAAlpB,EAAyrB,oFAAzrB,EAA+wB,qCAA/wB,EAAszB,qFAAtzB,EAA64B,qCAA74B,EAAo7B,qFAAp7B,EAA2gC,qCAA3gC,EAAkjC,sFAAljC,EAA0oC,qCAA1oC,EAAirC,sFAAjrC,EAAywC,qCAAzwC,EAAgzC,qFAAhzC,EAAu4C,qCAAv4C,EAA86C,uDAA96C,EAAu+C,+FAAv+C,EAAwkD,gFAAxkD,EAA0pD,GAA1pD,EAA+pDD,IAA/pD,CAAoqD,IAApqD;AAnBA,CAAlB;AAsBA,SAAST,WAAT","sourcesContent":["/**\n * Focus shader\n * based on PaintEffect postprocess from ro.me\n * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n */\nvar FocusShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    screenWidth: {\n      value: 1024\n    },\n    screenHeight: {\n      value: 1024\n    },\n    sampleDistance: {\n      value: 0.94\n    },\n    waveFactor: {\n      value: 0.00125\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float screenWidth;', 'uniform float screenHeight;', 'uniform float sampleDistance;', 'uniform float waveFactor;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 color, org, tmp, add;', '\tfloat sample_dist, f;', '\tvec2 vin;', '\tvec2 uv = vUv;', '\tadd = color = org = texture2D( tDiffuse, uv );', '\tvin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );', '\tsample_dist = dot( vin, vin ) * 2.0;', '\tf = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;', '\tvec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tadd += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );', '\tif( tmp.b < color.b ) color = tmp;', '\tcolor = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );', '\tcolor = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );', '\tgl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );', '}'].join('\\n')\n};\n\nexport { FocusShader };\n"]},"metadata":{},"sourceType":"module"}