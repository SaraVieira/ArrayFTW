{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nvar ShaderPass = /*#__PURE__*/function (_Pass) {\n  _inherits(ShaderPass, _Pass);\n\n  var _super = _createSuper(ShaderPass);\n\n  function ShaderPass(shader) {\n    var _this;\n\n    var textureID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'tDiffuse';\n\n    _classCallCheck(this, ShaderPass);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"textureID\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"uniforms\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"material\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"fsQuad\", void 0);\n\n    _this.textureID = textureID;\n\n    if (shader instanceof ShaderMaterial) {\n      _this.uniforms = shader.uniforms;\n      _this.material = shader;\n    } else {\n      _this.uniforms = UniformsUtils.clone(shader.uniforms);\n      _this.material = new ShaderMaterial({\n        defines: Object.assign({}, shader.defines),\n        uniforms: _this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      });\n    }\n\n    _this.fsQuad = new FullScreenQuad(_this.material);\n    return _this;\n  }\n\n  _createClass(ShaderPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      if (this.uniforms[this.textureID]) {\n        this.uniforms[this.textureID].value = readBuffer.texture;\n      }\n\n      this.fsQuad.material = this.material;\n\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n        this.fsQuad.render(renderer);\n      } else {\n        renderer.setRenderTarget(writeBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n        if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n        this.fsQuad.render(renderer);\n      }\n    }\n  }]);\n\n  return ShaderPass;\n}(Pass);\n\nexport { ShaderPass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/ShaderPass.js"],"names":["_defineProperty","ShaderMaterial","UniformsUtils","Pass","FullScreenQuad","ShaderPass","shader","textureID","uniforms","material","clone","defines","Object","assign","vertexShader","fragmentShader","fsQuad","renderer","writeBuffer","readBuffer","value","texture","renderToScreen","setRenderTarget","render","clear","autoClearColor","autoClearDepth","autoClearStencil"],"mappings":";;;;;AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,OAA9C;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,WAArC;;IAEMC,U;;;;;AACJ,sBAAYC,MAAZ,EAA4C;AAAA;;AAAA,QAAxBC,SAAwB,uEAAZ,UAAY;;AAAA;;AAC1C;;AAEAP,IAAAA,eAAe,gCAAO,WAAP,EAAoB,KAAK,CAAzB,CAAf;;AAEAA,IAAAA,eAAe,gCAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;AAEAA,IAAAA,eAAe,gCAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;AAEAA,IAAAA,eAAe,gCAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;AAEA,UAAKO,SAAL,GAAiBA,SAAjB;;AAEA,QAAID,MAAM,YAAYL,cAAtB,EAAsC;AACpC,YAAKO,QAAL,GAAgBF,MAAM,CAACE,QAAvB;AACA,YAAKC,QAAL,GAAgBH,MAAhB;AACD,KAHD,MAGO;AACL,YAAKE,QAAL,GAAgBN,aAAa,CAACQ,KAAd,CAAoBJ,MAAM,CAACE,QAA3B,CAAhB;AACA,YAAKC,QAAL,GAAgB,IAAIR,cAAJ,CAAmB;AACjCU,QAAAA,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,MAAM,CAACK,OAAzB,CADwB;AAEjCH,QAAAA,QAAQ,EAAE,MAAKA,QAFkB;AAGjCM,QAAAA,YAAY,EAAER,MAAM,CAACQ,YAHY;AAIjCC,QAAAA,cAAc,EAAET,MAAM,CAACS;AAJU,OAAnB,CAAhB;AAMD;;AAED,UAAKC,MAAL,GAAc,IAAIZ,cAAJ,CAAmB,MAAKK,QAAxB,CAAd;AA1B0C;AA2B3C;;;;WAED,gBAAOQ,QAAP,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0C;AACxC,UAAI,KAAKX,QAAL,CAAc,KAAKD,SAAnB,CAAJ,EAAmC;AACjC,aAAKC,QAAL,CAAc,KAAKD,SAAnB,EAA8Ba,KAA9B,GAAsCD,UAAU,CAACE,OAAjD;AACD;;AAED,WAAKL,MAAL,CAAYP,QAAZ,GAAuB,KAAKA,QAA5B;;AAEA,UAAI,KAAKa,cAAT,EAAyB;AACvBL,QAAAA,QAAQ,CAACM,eAAT,CAAyB,IAAzB;AACA,aAAKP,MAAL,CAAYQ,MAAZ,CAAmBP,QAAnB;AACD,OAHD,MAGO;AACLA,QAAAA,QAAQ,CAACM,eAAT,CAAyBL,WAAzB,EADK,CACkC;;AAEvC,YAAI,KAAKO,KAAT,EAAgBR,QAAQ,CAACQ,KAAT,CAAeR,QAAQ,CAACS,cAAxB,EAAwCT,QAAQ,CAACU,cAAjD,EAAiEV,QAAQ,CAACW,gBAA1E;AAChB,aAAKZ,MAAL,CAAYQ,MAAZ,CAAmBP,QAAnB;AACD;AACF;;;;EA9CsBd,I;;AAkDzB,SAASE,UAAT","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { ShaderMaterial, UniformsUtils } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n  constructor(shader, textureID = 'tDiffuse') {\n    super();\n\n    _defineProperty(this, \"textureID\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    this.textureID = textureID;\n\n    if (shader instanceof ShaderMaterial) {\n      this.uniforms = shader.uniforms;\n      this.material = shader;\n    } else {\n      this.uniforms = UniformsUtils.clone(shader.uniforms);\n      this.material = new ShaderMaterial({\n        defines: Object.assign({}, shader.defines),\n        uniforms: this.uniforms,\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      });\n    }\n\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.fsQuad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { ShaderPass };\n"]},"metadata":{},"sourceType":"module"}