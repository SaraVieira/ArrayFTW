{"ast":null,"code":"import { GammaEncoding, RGBDEncoding, RGBM16Encoding, RGBM7Encoding, RGBEEncoding, sRGBEncoding, LinearEncoding } from 'three';\nimport { TempNode } from '../core/TempNode.js';\nimport { ConstNode } from '../core/ConstNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { ExpressionNode } from '../core/ExpressionNode.js';\n\nfunction ColorSpaceNode(input, method) {\n  TempNode.call(this, 'v4');\n  this.input = input;\n  this.method = method || ColorSpaceNode.LINEAR_TO_LINEAR;\n}\n\nColorSpaceNode.Nodes = function () {\n  // For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\n  var LinearToLinear = new FunctionNode(['vec4 LinearToLinear( in vec4 value ) {', '\treturn value;', '}'].join('\\n'));\n  var GammaToLinear = new FunctionNode(['vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {', '\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );', '}'].join('\\n'));\n  var LinearToGamma = new FunctionNode(['vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {', '\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );', '}'].join('\\n'));\n  var sRGBToLinear = new FunctionNode(['vec4 sRGBToLinear( in vec4 value ) {', '\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );', '}'].join('\\n'));\n  var LinearTosRGB = new FunctionNode(['vec4 LinearTosRGB( in vec4 value ) {', '\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );', '}'].join('\\n'));\n  var RGBEToLinear = new FunctionNode(['vec4 RGBEToLinear( in vec4 value ) {', '\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );', '}'].join('\\n'));\n  var LinearToRGBE = new FunctionNode(['vec4 LinearToRGBE( in vec4 value ) {', '\tfloat maxComponent = max( max( value.r, value.g ), value.b );', '\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );', '\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );', //  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\n  '}'].join('\\n')); // reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\n\n  var RGBMToLinear = new FunctionNode(['vec3 RGBMToLinear( in vec4 value, in float maxRange ) {', '\treturn vec4( value.xyz * value.w * maxRange, 1.0 );', '}'].join('\\n'));\n  var LinearToRGBM = new FunctionNode(['vec3 LinearToRGBM( in vec4 value, in float maxRange ) {', '\tfloat maxRGB = max( value.x, max( value.g, value.b ) );', '\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );', '\tM            = ceil( M * 255.0 ) / 255.0;', '\treturn vec4( value.rgb / ( M * maxRange ), M );', '}'].join('\\n')); // reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\n\n  var RGBDToLinear = new FunctionNode(['vec3 RGBDToLinear( in vec4 value, in float maxRange ) {', '\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );', '}'].join('\\n'));\n  var LinearToRGBD = new FunctionNode(['vec3 LinearToRGBD( in vec4 value, in float maxRange ) {', '\tfloat maxRGB = max( value.x, max( value.g, value.b ) );', '\tfloat D      = max( maxRange / maxRGB, 1.0 );', '\tD            = clamp( floor( D ) / 255.0, 0.0, 1.0 );', '\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );', '}'].join('\\n')); // LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\n  // M matrix, for encoding\n\n  var cLogLuvM = new ConstNode('const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );');\n  var LinearToLogLuv = new FunctionNode(['vec4 LinearToLogLuv( in vec4 value ) {', '\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;', '\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));', '\tvec4 vResult;', '\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;', '\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;', '\tvResult.w = fract(Le);', '\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;', '\treturn vResult;', '}'].join('\\n'), [cLogLuvM]); // Inverse M matrix, for decoding\n\n  var cLogLuvInverseM = new ConstNode('const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );');\n  var LogLuvToLinear = new FunctionNode(['vec4 LogLuvToLinear( in vec4 value ) {', '\tfloat Le = value.z * 255.0 + value.w;', '\tvec3 Xp_Y_XYZp;', '\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);', '\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;', '\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;', '\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;', '\treturn vec4( max(vRGB, 0.0), 1.0 );', '}'].join('\\n'), [cLogLuvInverseM]);\n  return {\n    LinearToLinear: LinearToLinear,\n    GammaToLinear: GammaToLinear,\n    LinearToGamma: LinearToGamma,\n    sRGBToLinear: sRGBToLinear,\n    LinearTosRGB: LinearTosRGB,\n    RGBEToLinear: RGBEToLinear,\n    LinearToRGBE: LinearToRGBE,\n    RGBMToLinear: RGBMToLinear,\n    LinearToRGBM: LinearToRGBM,\n    RGBDToLinear: RGBDToLinear,\n    LinearToRGBD: LinearToRGBD,\n    cLogLuvM: cLogLuvM,\n    LinearToLogLuv: LinearToLogLuv,\n    cLogLuvInverseM: cLogLuvInverseM,\n    LogLuvToLinear: LogLuvToLinear\n  };\n}();\n\nColorSpaceNode.LINEAR_TO_LINEAR = 'LinearToLinear';\nColorSpaceNode.GAMMA_TO_LINEAR = 'GammaToLinear';\nColorSpaceNode.LINEAR_TO_GAMMA = 'LinearToGamma';\nColorSpaceNode.SRGB_TO_LINEAR = 'sRGBToLinear';\nColorSpaceNode.LINEAR_TO_SRGB = 'LinearTosRGB';\nColorSpaceNode.RGBE_TO_LINEAR = 'RGBEToLinear';\nColorSpaceNode.LINEAR_TO_RGBE = 'LinearToRGBE';\nColorSpaceNode.RGBM_TO_LINEAR = 'RGBMToLinear';\nColorSpaceNode.LINEAR_TO_RGBM = 'LinearToRGBM';\nColorSpaceNode.RGBD_TO_LINEAR = 'RGBDToLinear';\nColorSpaceNode.LINEAR_TO_RGBD = 'LinearToRGBD';\nColorSpaceNode.LINEAR_TO_LOG_LUV = 'LinearToLogLuv';\nColorSpaceNode.LOG_LUV_TO_LINEAR = 'LogLuvToLinear';\n\nColorSpaceNode.getEncodingComponents = function (encoding) {\n  switch (encoding) {\n    case LinearEncoding:\n      return ['Linear'];\n\n    case sRGBEncoding:\n      return ['sRGB'];\n\n    case RGBEEncoding:\n      return ['RGBE'];\n\n    case RGBM7Encoding:\n      return ['RGBM', new FloatNode(7.0).setReadonly(true)];\n\n    case RGBM16Encoding:\n      return ['RGBM', new FloatNode(16.0).setReadonly(true)];\n\n    case RGBDEncoding:\n      return ['RGBD', new FloatNode(256.0).setReadonly(true)];\n\n    case GammaEncoding:\n      return ['Gamma', new ExpressionNode('float( GAMMA_FACTOR )', 'f')];\n  }\n};\n\nColorSpaceNode.prototype = Object.create(TempNode.prototype);\nColorSpaceNode.prototype.constructor = ColorSpaceNode;\nColorSpaceNode.prototype.nodeType = 'ColorSpace';\nColorSpaceNode.prototype.hashProperties = ['method'];\n\nColorSpaceNode.prototype.generate = function (builder, output) {\n  var input = this.input.build(builder, 'v4');\n  var outputType = this.getType(builder);\n  var methodNode = ColorSpaceNode.Nodes[this.method];\n  var method = builder.include(methodNode);\n\n  if (method === ColorSpaceNode.LINEAR_TO_LINEAR) {\n    return builder.format(input, outputType, output);\n  } else {\n    if (methodNode.inputs.length === 2) {\n      var factor = this.factor.build(builder, 'f');\n      return builder.format(method + '( ' + input + ', ' + factor + ' )', outputType, output);\n    } else {\n      return builder.format(method + '( ' + input + ' )', outputType, output);\n    }\n  }\n};\n\nColorSpaceNode.prototype.fromEncoding = function (encoding) {\n  var components = ColorSpaceNode.getEncodingComponents(encoding);\n  this.method = 'LinearTo' + components[0];\n  this.factor = components[1];\n};\n\nColorSpaceNode.prototype.fromDecoding = function (encoding) {\n  var components = ColorSpaceNode.getEncodingComponents(encoding);\n  this.method = components[0] + 'ToLinear';\n  this.factor = components[1];\n};\n\nColorSpaceNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.input = source.input;\n  this.method = source.method;\n  return this;\n};\n\nColorSpaceNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.input = this.input.toJSON(meta).uuid;\n    data.method = this.method;\n  }\n\n  return data;\n};\n\nexport { ColorSpaceNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/utils/ColorSpaceNode.js"],"names":["GammaEncoding","RGBDEncoding","RGBM16Encoding","RGBM7Encoding","RGBEEncoding","sRGBEncoding","LinearEncoding","TempNode","ConstNode","FloatNode","FunctionNode","ExpressionNode","ColorSpaceNode","input","method","call","LINEAR_TO_LINEAR","Nodes","LinearToLinear","join","GammaToLinear","LinearToGamma","sRGBToLinear","LinearTosRGB","RGBEToLinear","LinearToRGBE","RGBMToLinear","LinearToRGBM","RGBDToLinear","LinearToRGBD","cLogLuvM","LinearToLogLuv","cLogLuvInverseM","LogLuvToLinear","GAMMA_TO_LINEAR","LINEAR_TO_GAMMA","SRGB_TO_LINEAR","LINEAR_TO_SRGB","RGBE_TO_LINEAR","LINEAR_TO_RGBE","RGBM_TO_LINEAR","LINEAR_TO_RGBM","RGBD_TO_LINEAR","LINEAR_TO_RGBD","LINEAR_TO_LOG_LUV","LOG_LUV_TO_LINEAR","getEncodingComponents","encoding","setReadonly","prototype","Object","create","constructor","nodeType","hashProperties","generate","builder","output","build","outputType","getType","methodNode","include","format","inputs","length","factor","fromEncoding","components","fromDecoding","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"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","sourcesContent":["import { GammaEncoding, RGBDEncoding, RGBM16Encoding, RGBM7Encoding, RGBEEncoding, sRGBEncoding, LinearEncoding } from 'three';\nimport { TempNode } from '../core/TempNode.js';\nimport { ConstNode } from '../core/ConstNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { ExpressionNode } from '../core/ExpressionNode.js';\n\nfunction ColorSpaceNode(input, method) {\n  TempNode.call(this, 'v4');\n  this.input = input;\n  this.method = method || ColorSpaceNode.LINEAR_TO_LINEAR;\n}\n\nColorSpaceNode.Nodes = function () {\n  // For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\n  var LinearToLinear = new FunctionNode(['vec4 LinearToLinear( in vec4 value ) {', '\treturn value;', '}'].join('\\n'));\n  var GammaToLinear = new FunctionNode(['vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {', '\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );', '}'].join('\\n'));\n  var LinearToGamma = new FunctionNode(['vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {', '\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );', '}'].join('\\n'));\n  var sRGBToLinear = new FunctionNode(['vec4 sRGBToLinear( in vec4 value ) {', '\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );', '}'].join('\\n'));\n  var LinearTosRGB = new FunctionNode(['vec4 LinearTosRGB( in vec4 value ) {', '\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );', '}'].join('\\n'));\n  var RGBEToLinear = new FunctionNode(['vec4 RGBEToLinear( in vec4 value ) {', '\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );', '}'].join('\\n'));\n  var LinearToRGBE = new FunctionNode(['vec4 LinearToRGBE( in vec4 value ) {', '\tfloat maxComponent = max( max( value.r, value.g ), value.b );', '\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );', '\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );', //  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\n  '}'].join('\\n')); // reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\n\n  var RGBMToLinear = new FunctionNode(['vec3 RGBMToLinear( in vec4 value, in float maxRange ) {', '\treturn vec4( value.xyz * value.w * maxRange, 1.0 );', '}'].join('\\n'));\n  var LinearToRGBM = new FunctionNode(['vec3 LinearToRGBM( in vec4 value, in float maxRange ) {', '\tfloat maxRGB = max( value.x, max( value.g, value.b ) );', '\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );', '\tM            = ceil( M * 255.0 ) / 255.0;', '\treturn vec4( value.rgb / ( M * maxRange ), M );', '}'].join('\\n')); // reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\n\n  var RGBDToLinear = new FunctionNode(['vec3 RGBDToLinear( in vec4 value, in float maxRange ) {', '\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );', '}'].join('\\n'));\n  var LinearToRGBD = new FunctionNode(['vec3 LinearToRGBD( in vec4 value, in float maxRange ) {', '\tfloat maxRGB = max( value.x, max( value.g, value.b ) );', '\tfloat D      = max( maxRange / maxRGB, 1.0 );', '\tD            = clamp( floor( D ) / 255.0, 0.0, 1.0 );', '\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );', '}'].join('\\n')); // LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\n  // M matrix, for encoding\n\n  var cLogLuvM = new ConstNode('const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );');\n  var LinearToLogLuv = new FunctionNode(['vec4 LinearToLogLuv( in vec4 value ) {', '\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;', '\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));', '\tvec4 vResult;', '\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;', '\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;', '\tvResult.w = fract(Le);', '\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;', '\treturn vResult;', '}'].join('\\n'), [cLogLuvM]); // Inverse M matrix, for decoding\n\n  var cLogLuvInverseM = new ConstNode('const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );');\n  var LogLuvToLinear = new FunctionNode(['vec4 LogLuvToLinear( in vec4 value ) {', '\tfloat Le = value.z * 255.0 + value.w;', '\tvec3 Xp_Y_XYZp;', '\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);', '\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;', '\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;', '\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;', '\treturn vec4( max(vRGB, 0.0), 1.0 );', '}'].join('\\n'), [cLogLuvInverseM]);\n  return {\n    LinearToLinear: LinearToLinear,\n    GammaToLinear: GammaToLinear,\n    LinearToGamma: LinearToGamma,\n    sRGBToLinear: sRGBToLinear,\n    LinearTosRGB: LinearTosRGB,\n    RGBEToLinear: RGBEToLinear,\n    LinearToRGBE: LinearToRGBE,\n    RGBMToLinear: RGBMToLinear,\n    LinearToRGBM: LinearToRGBM,\n    RGBDToLinear: RGBDToLinear,\n    LinearToRGBD: LinearToRGBD,\n    cLogLuvM: cLogLuvM,\n    LinearToLogLuv: LinearToLogLuv,\n    cLogLuvInverseM: cLogLuvInverseM,\n    LogLuvToLinear: LogLuvToLinear\n  };\n}();\n\nColorSpaceNode.LINEAR_TO_LINEAR = 'LinearToLinear';\nColorSpaceNode.GAMMA_TO_LINEAR = 'GammaToLinear';\nColorSpaceNode.LINEAR_TO_GAMMA = 'LinearToGamma';\nColorSpaceNode.SRGB_TO_LINEAR = 'sRGBToLinear';\nColorSpaceNode.LINEAR_TO_SRGB = 'LinearTosRGB';\nColorSpaceNode.RGBE_TO_LINEAR = 'RGBEToLinear';\nColorSpaceNode.LINEAR_TO_RGBE = 'LinearToRGBE';\nColorSpaceNode.RGBM_TO_LINEAR = 'RGBMToLinear';\nColorSpaceNode.LINEAR_TO_RGBM = 'LinearToRGBM';\nColorSpaceNode.RGBD_TO_LINEAR = 'RGBDToLinear';\nColorSpaceNode.LINEAR_TO_RGBD = 'LinearToRGBD';\nColorSpaceNode.LINEAR_TO_LOG_LUV = 'LinearToLogLuv';\nColorSpaceNode.LOG_LUV_TO_LINEAR = 'LogLuvToLinear';\n\nColorSpaceNode.getEncodingComponents = function (encoding) {\n  switch (encoding) {\n    case LinearEncoding:\n      return ['Linear'];\n\n    case sRGBEncoding:\n      return ['sRGB'];\n\n    case RGBEEncoding:\n      return ['RGBE'];\n\n    case RGBM7Encoding:\n      return ['RGBM', new FloatNode(7.0).setReadonly(true)];\n\n    case RGBM16Encoding:\n      return ['RGBM', new FloatNode(16.0).setReadonly(true)];\n\n    case RGBDEncoding:\n      return ['RGBD', new FloatNode(256.0).setReadonly(true)];\n\n    case GammaEncoding:\n      return ['Gamma', new ExpressionNode('float( GAMMA_FACTOR )', 'f')];\n  }\n};\n\nColorSpaceNode.prototype = Object.create(TempNode.prototype);\nColorSpaceNode.prototype.constructor = ColorSpaceNode;\nColorSpaceNode.prototype.nodeType = 'ColorSpace';\nColorSpaceNode.prototype.hashProperties = ['method'];\n\nColorSpaceNode.prototype.generate = function (builder, output) {\n  var input = this.input.build(builder, 'v4');\n  var outputType = this.getType(builder);\n  var methodNode = ColorSpaceNode.Nodes[this.method];\n  var method = builder.include(methodNode);\n\n  if (method === ColorSpaceNode.LINEAR_TO_LINEAR) {\n    return builder.format(input, outputType, output);\n  } else {\n    if (methodNode.inputs.length === 2) {\n      var factor = this.factor.build(builder, 'f');\n      return builder.format(method + '( ' + input + ', ' + factor + ' )', outputType, output);\n    } else {\n      return builder.format(method + '( ' + input + ' )', outputType, output);\n    }\n  }\n};\n\nColorSpaceNode.prototype.fromEncoding = function (encoding) {\n  var components = ColorSpaceNode.getEncodingComponents(encoding);\n  this.method = 'LinearTo' + components[0];\n  this.factor = components[1];\n};\n\nColorSpaceNode.prototype.fromDecoding = function (encoding) {\n  var components = ColorSpaceNode.getEncodingComponents(encoding);\n  this.method = components[0] + 'ToLinear';\n  this.factor = components[1];\n};\n\nColorSpaceNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.input = source.input;\n  this.method = source.method;\n  return this;\n};\n\nColorSpaceNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.input = this.input.toJSON(meta).uuid;\n    data.method = this.method;\n  }\n\n  return data;\n};\n\nexport { ColorSpaceNode };\n"]},"metadata":{},"sourceType":"module"}