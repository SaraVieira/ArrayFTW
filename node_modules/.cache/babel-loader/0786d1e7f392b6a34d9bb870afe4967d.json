{"ast":null,"code":"import { Triangle, Vector3 } from 'three';\n/**\n * Utility class for sampling weighted random points on the surface of a mesh.\n *\n * Building the sampler is a one-time O(n) operation. Once built, any number of\n * random samples may be selected in O(logn) time. Memory usage is O(n).\n *\n * References:\n * - http://www.joesfer.com/?p=84\n * - https://stackoverflow.com/a/4322940/1314762\n */\n\nvar MeshSurfaceSampler = function () {\n  var _face = new Triangle();\n\n  var _color = new Vector3();\n\n  function MeshSurfaceSampler(mesh) {\n    var geometry = mesh.geometry;\n\n    if (!geometry.isBufferGeometry || geometry.attributes.position.itemSize !== 3) {\n      throw new Error('THREE.MeshSurfaceSampler: Requires BufferGeometry triangle mesh.');\n    }\n\n    if (geometry.index) {\n      console.warn('THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry.');\n      geometry = geometry.toNonIndexed();\n    }\n\n    this.geometry = geometry;\n    this.randomFunction = Math.random;\n    this.positionAttribute = this.geometry.getAttribute('position');\n    this.colorAttribute = this.geometry.getAttribute('color');\n    this.weightAttribute = null;\n    this.distribution = null;\n  }\n\n  MeshSurfaceSampler.prototype = {\n    constructor: MeshSurfaceSampler,\n    setWeightAttribute: function setWeightAttribute(name) {\n      this.weightAttribute = name ? this.geometry.getAttribute(name) : null;\n      return this;\n    },\n    build: function build() {\n      var positionAttribute = this.positionAttribute;\n      var weightAttribute = this.weightAttribute;\n      var faceWeights = new Float32Array(positionAttribute.count / 3); // Accumulate weights for each mesh face.\n\n      for (var i = 0; i < positionAttribute.count; i += 3) {\n        var faceWeight = 1;\n\n        if (weightAttribute) {\n          faceWeight = weightAttribute.getX(i) + weightAttribute.getX(i + 1) + weightAttribute.getX(i + 2);\n        }\n\n        _face.a.fromBufferAttribute(positionAttribute, i);\n\n        _face.b.fromBufferAttribute(positionAttribute, i + 1);\n\n        _face.c.fromBufferAttribute(positionAttribute, i + 2);\n\n        faceWeight *= _face.getArea();\n        faceWeights[i / 3] = faceWeight;\n      } // Store cumulative total face weights in an array, where weight index\n      // corresponds to face index.\n\n\n      this.distribution = new Float32Array(positionAttribute.count / 3);\n      var cumulativeTotal = 0;\n\n      for (var _i = 0; _i < faceWeights.length; _i++) {\n        cumulativeTotal += faceWeights[_i];\n        this.distribution[_i] = cumulativeTotal;\n      }\n\n      return this;\n    },\n    setRandomGenerator: function setRandomGenerator(randomFunction) {\n      this.randomFunction = randomFunction;\n      return this;\n    },\n    sample: function sample(targetPosition, targetNormal, targetColor) {\n      var cumulativeTotal = this.distribution[this.distribution.length - 1];\n      var faceIndex = this.binarySearch(this.randomFunction() * cumulativeTotal);\n      return this.sampleFace(faceIndex, targetPosition, targetNormal, targetColor);\n    },\n    binarySearch: function binarySearch(x) {\n      var dist = this.distribution;\n      var start = 0;\n      var end = dist.length - 1;\n      var index = -1;\n\n      while (start <= end) {\n        var mid = Math.ceil((start + end) / 2);\n\n        if (mid === 0 || dist[mid - 1] <= x && dist[mid] > x) {\n          index = mid;\n          break;\n        } else if (x < dist[mid]) {\n          end = mid - 1;\n        } else {\n          start = mid + 1;\n        }\n      }\n\n      return index;\n    },\n    sampleFace: function sampleFace(faceIndex, targetPosition, targetNormal, targetColor) {\n      var u = this.randomFunction();\n      var v = this.randomFunction();\n\n      if (u + v > 1) {\n        u = 1 - u;\n        v = 1 - v;\n      }\n\n      _face.a.fromBufferAttribute(this.positionAttribute, faceIndex * 3);\n\n      _face.b.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 1);\n\n      _face.c.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 2);\n\n      targetPosition.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n\n      if (targetNormal !== undefined) {\n        _face.getNormal(targetNormal);\n      }\n\n      if (targetColor !== undefined && this.colorAttribute !== undefined) {\n        _face.a.fromBufferAttribute(this.colorAttribute, faceIndex * 3);\n\n        _face.b.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 1);\n\n        _face.c.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 2);\n\n        _color.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n\n        targetColor.r = _color.x;\n        targetColor.g = _color.y;\n        targetColor.b = _color.z;\n      }\n\n      return this;\n    }\n  };\n  return MeshSurfaceSampler;\n}();\n\nexport { MeshSurfaceSampler };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/math/MeshSurfaceSampler.js"],"names":["Triangle","Vector3","MeshSurfaceSampler","_face","_color","mesh","geometry","isBufferGeometry","attributes","position","itemSize","Error","index","console","warn","toNonIndexed","randomFunction","Math","random","positionAttribute","getAttribute","colorAttribute","weightAttribute","distribution","prototype","constructor","setWeightAttribute","name","build","faceWeights","Float32Array","count","i","faceWeight","getX","a","fromBufferAttribute","b","c","getArea","cumulativeTotal","length","setRandomGenerator","sample","targetPosition","targetNormal","targetColor","faceIndex","binarySearch","sampleFace","x","dist","start","end","mid","ceil","u","v","set","addScaledVector","undefined","getNormal","r","g","y","z"],"mappings":"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","sourcesContent":["import { Triangle, Vector3 } from 'three';\n\n/**\n * Utility class for sampling weighted random points on the surface of a mesh.\n *\n * Building the sampler is a one-time O(n) operation. Once built, any number of\n * random samples may be selected in O(logn) time. Memory usage is O(n).\n *\n * References:\n * - http://www.joesfer.com/?p=84\n * - https://stackoverflow.com/a/4322940/1314762\n */\n\nvar MeshSurfaceSampler = function () {\n  var _face = new Triangle();\n\n  var _color = new Vector3();\n\n  function MeshSurfaceSampler(mesh) {\n    var geometry = mesh.geometry;\n\n    if (!geometry.isBufferGeometry || geometry.attributes.position.itemSize !== 3) {\n      throw new Error('THREE.MeshSurfaceSampler: Requires BufferGeometry triangle mesh.');\n    }\n\n    if (geometry.index) {\n      console.warn('THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry.');\n      geometry = geometry.toNonIndexed();\n    }\n\n    this.geometry = geometry;\n    this.randomFunction = Math.random;\n    this.positionAttribute = this.geometry.getAttribute('position');\n    this.colorAttribute = this.geometry.getAttribute('color');\n    this.weightAttribute = null;\n    this.distribution = null;\n  }\n\n  MeshSurfaceSampler.prototype = {\n    constructor: MeshSurfaceSampler,\n    setWeightAttribute: function (name) {\n      this.weightAttribute = name ? this.geometry.getAttribute(name) : null;\n      return this;\n    },\n    build: function () {\n      var positionAttribute = this.positionAttribute;\n      var weightAttribute = this.weightAttribute;\n      var faceWeights = new Float32Array(positionAttribute.count / 3); // Accumulate weights for each mesh face.\n\n      for (let i = 0; i < positionAttribute.count; i += 3) {\n        var faceWeight = 1;\n\n        if (weightAttribute) {\n          faceWeight = weightAttribute.getX(i) + weightAttribute.getX(i + 1) + weightAttribute.getX(i + 2);\n        }\n\n        _face.a.fromBufferAttribute(positionAttribute, i);\n\n        _face.b.fromBufferAttribute(positionAttribute, i + 1);\n\n        _face.c.fromBufferAttribute(positionAttribute, i + 2);\n\n        faceWeight *= _face.getArea();\n        faceWeights[i / 3] = faceWeight;\n      } // Store cumulative total face weights in an array, where weight index\n      // corresponds to face index.\n\n\n      this.distribution = new Float32Array(positionAttribute.count / 3);\n      var cumulativeTotal = 0;\n\n      for (let i = 0; i < faceWeights.length; i++) {\n        cumulativeTotal += faceWeights[i];\n        this.distribution[i] = cumulativeTotal;\n      }\n\n      return this;\n    },\n    setRandomGenerator: function (randomFunction) {\n      this.randomFunction = randomFunction;\n      return this;\n    },\n    sample: function (targetPosition, targetNormal, targetColor) {\n      var cumulativeTotal = this.distribution[this.distribution.length - 1];\n      var faceIndex = this.binarySearch(this.randomFunction() * cumulativeTotal);\n      return this.sampleFace(faceIndex, targetPosition, targetNormal, targetColor);\n    },\n    binarySearch: function (x) {\n      var dist = this.distribution;\n      var start = 0;\n      var end = dist.length - 1;\n      var index = -1;\n\n      while (start <= end) {\n        var mid = Math.ceil((start + end) / 2);\n\n        if (mid === 0 || dist[mid - 1] <= x && dist[mid] > x) {\n          index = mid;\n          break;\n        } else if (x < dist[mid]) {\n          end = mid - 1;\n        } else {\n          start = mid + 1;\n        }\n      }\n\n      return index;\n    },\n    sampleFace: function (faceIndex, targetPosition, targetNormal, targetColor) {\n      var u = this.randomFunction();\n      var v = this.randomFunction();\n\n      if (u + v > 1) {\n        u = 1 - u;\n        v = 1 - v;\n      }\n\n      _face.a.fromBufferAttribute(this.positionAttribute, faceIndex * 3);\n\n      _face.b.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 1);\n\n      _face.c.fromBufferAttribute(this.positionAttribute, faceIndex * 3 + 2);\n\n      targetPosition.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n\n      if (targetNormal !== undefined) {\n        _face.getNormal(targetNormal);\n      }\n\n      if (targetColor !== undefined && this.colorAttribute !== undefined) {\n        _face.a.fromBufferAttribute(this.colorAttribute, faceIndex * 3);\n\n        _face.b.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 1);\n\n        _face.c.fromBufferAttribute(this.colorAttribute, faceIndex * 3 + 2);\n\n        _color.set(0, 0, 0).addScaledVector(_face.a, u).addScaledVector(_face.b, v).addScaledVector(_face.c, 1 - (u + v));\n\n        targetColor.r = _color.x;\n        targetColor.g = _color.y;\n        targetColor.b = _color.z;\n      }\n\n      return this;\n    }\n  };\n  return MeshSurfaceSampler;\n}();\n\nexport { MeshSurfaceSampler };\n"]},"metadata":{},"sourceType":"module"}