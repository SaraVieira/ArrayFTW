{"ast":null,"code":"import { Mesh, Vector3, InstancedInterleavedBuffer, InterleavedBufferAttribute } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\n\nvar Wireframe = function Wireframe(geometry, material) {\n  Mesh.call(this);\n  this.type = 'Wireframe';\n  this.geometry = geometry !== undefined ? geometry : new LineSegmentsGeometry();\n  this.material = material !== undefined ? material : new LineMaterial({\n    color: Math.random() * 0xffffff\n  });\n};\n\nWireframe.prototype = Object.assign(Object.create(Mesh.prototype), {\n  constructor: Wireframe,\n  isWireframe: true,\n  computeLineDistances: function () {\n    // for backwards-compatability, but could be a method of LineSegmentsGeometry...\n    var start = new Vector3();\n    var end = new Vector3();\n    return function computeLineDistances() {\n      var geometry = this.geometry;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd;\n      var lineDistances = new Float32Array(2 * instanceStart.data.count);\n\n      for (var i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\n        start.fromBufferAttribute(instanceStart, i);\n        end.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + start.distanceTo(end);\n      }\n\n      var instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n      geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n      geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n      return this;\n    };\n  }()\n});\nexport { Wireframe };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/lines/Wireframe.js"],"names":["Mesh","Vector3","InstancedInterleavedBuffer","InterleavedBufferAttribute","LineSegmentsGeometry","LineMaterial","Wireframe","geometry","material","call","type","undefined","color","Math","random","prototype","Object","assign","create","constructor","isWireframe","computeLineDistances","start","end","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","data","count","i","j","l","fromBufferAttribute","distanceTo","instanceDistanceBuffer","setAttribute"],"mappings":"AAAA,SAASA,IAAT,EAAeC,OAAf,EAAwBC,0BAAxB,EAAoDC,0BAApD,QAAsF,OAAtF;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,YAAT,QAA6B,mBAA7B;;AAEA,IAAIC,SAAS,GAAG,SAAZA,SAAY,CAAUC,QAAV,EAAoBC,QAApB,EAA8B;AAC5CR,EAAAA,IAAI,CAACS,IAAL,CAAU,IAAV;AACA,OAAKC,IAAL,GAAY,WAAZ;AACA,OAAKH,QAAL,GAAgBA,QAAQ,KAAKI,SAAb,GAAyBJ,QAAzB,GAAoC,IAAIH,oBAAJ,EAApD;AACA,OAAKI,QAAL,GAAgBA,QAAQ,KAAKG,SAAb,GAAyBH,QAAzB,GAAoC,IAAIH,YAAJ,CAAiB;AACnEO,IAAAA,KAAK,EAAEC,IAAI,CAACC,MAAL,KAAgB;AAD4C,GAAjB,CAApD;AAGD,CAPD;;AASAR,SAAS,CAACS,SAAV,GAAsBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAclB,IAAI,CAACe,SAAnB,CAAd,EAA6C;AACjEI,EAAAA,WAAW,EAAEb,SADoD;AAEjEc,EAAAA,WAAW,EAAE,IAFoD;AAGjEC,EAAAA,oBAAoB,EAAE,YAAY;AAChC;AACA,QAAIC,KAAK,GAAG,IAAIrB,OAAJ,EAAZ;AACA,QAAIsB,GAAG,GAAG,IAAItB,OAAJ,EAAV;AACA,WAAO,SAASoB,oBAAT,GAAgC;AACrC,UAAId,QAAQ,GAAG,KAAKA,QAApB;AACA,UAAIiB,aAAa,GAAGjB,QAAQ,CAACkB,UAAT,CAAoBD,aAAxC;AACA,UAAIE,WAAW,GAAGnB,QAAQ,CAACkB,UAAT,CAAoBC,WAAtC;AACA,UAAIC,aAAa,GAAG,IAAIC,YAAJ,CAAiB,IAAIJ,aAAa,CAACK,IAAd,CAAmBC,KAAxC,CAApB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkBC,CAAC,GAAGT,aAAa,CAACK,IAAd,CAAmBC,KAA9C,EAAqDC,CAAC,GAAGE,CAAzD,EAA4DF,CAAC,IAAIC,CAAC,IAAI,CAAtE,EAAyE;AACvEV,QAAAA,KAAK,CAACY,mBAAN,CAA0BV,aAA1B,EAAyCO,CAAzC;AACAR,QAAAA,GAAG,CAACW,mBAAJ,CAAwBR,WAAxB,EAAqCK,CAArC;AACAJ,QAAAA,aAAa,CAACK,CAAD,CAAb,GAAmBA,CAAC,KAAK,CAAN,GAAU,CAAV,GAAcL,aAAa,CAACK,CAAC,GAAG,CAAL,CAA9C;AACAL,QAAAA,aAAa,CAACK,CAAC,GAAG,CAAL,CAAb,GAAuBL,aAAa,CAACK,CAAD,CAAb,GAAmBV,KAAK,CAACa,UAAN,CAAiBZ,GAAjB,CAA1C;AACD;;AAED,UAAIa,sBAAsB,GAAG,IAAIlC,0BAAJ,CAA+ByB,aAA/B,EAA8C,CAA9C,EAAiD,CAAjD,CAA7B,CAbqC,CAa6C;;AAElFpB,MAAAA,QAAQ,CAAC8B,YAAT,CAAsB,uBAAtB,EAA+C,IAAIlC,0BAAJ,CAA+BiC,sBAA/B,EAAuD,CAAvD,EAA0D,CAA1D,CAA/C,EAfqC,CAeyE;;AAE9G7B,MAAAA,QAAQ,CAAC8B,YAAT,CAAsB,qBAAtB,EAA6C,IAAIlC,0BAAJ,CAA+BiC,sBAA/B,EAAuD,CAAvD,EAA0D,CAA1D,CAA7C,EAjBqC,CAiBuE;;AAE5G,aAAO,IAAP;AACD,KApBD;AAqBD,GAzBqB;AAH2C,CAA7C,CAAtB;AA+BA,SAAS9B,SAAT","sourcesContent":["import { Mesh, Vector3, InstancedInterleavedBuffer, InterleavedBufferAttribute } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\n\nvar Wireframe = function (geometry, material) {\n  Mesh.call(this);\n  this.type = 'Wireframe';\n  this.geometry = geometry !== undefined ? geometry : new LineSegmentsGeometry();\n  this.material = material !== undefined ? material : new LineMaterial({\n    color: Math.random() * 0xffffff\n  });\n};\n\nWireframe.prototype = Object.assign(Object.create(Mesh.prototype), {\n  constructor: Wireframe,\n  isWireframe: true,\n  computeLineDistances: function () {\n    // for backwards-compatability, but could be a method of LineSegmentsGeometry...\n    var start = new Vector3();\n    var end = new Vector3();\n    return function computeLineDistances() {\n      var geometry = this.geometry;\n      var instanceStart = geometry.attributes.instanceStart;\n      var instanceEnd = geometry.attributes.instanceEnd;\n      var lineDistances = new Float32Array(2 * instanceStart.data.count);\n\n      for (let i = 0, j = 0, l = instanceStart.data.count; i < l; i++, j += 2) {\n        start.fromBufferAttribute(instanceStart, i);\n        end.fromBufferAttribute(instanceEnd, i);\n        lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n        lineDistances[j + 1] = lineDistances[j] + start.distanceTo(end);\n      }\n\n      var instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n      geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n      geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n      return this;\n    };\n  }()\n});\n\nexport { Wireframe };\n"]},"metadata":{},"sourceType":"module"}