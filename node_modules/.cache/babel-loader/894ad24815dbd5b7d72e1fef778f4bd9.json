{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BufferGeometry, Vector3, Uint32BufferAttribute, Float32BufferAttribute, DynamicDrawUsage, MathUtils } from 'three';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\n/**\n * @fileoverview LightningStrike object for creating lightning strikes and voltaic arcs.\n *\n *\n * Usage\n *\n * var myRay = new LightningStrike( paramsObject );\n * var myRayMesh = new THREE.Mesh( myRay, myMaterial );\n * scene.add( myRayMesh );\n * ...\n * myRay.update( currentTime );\n *\n * The \"currentTime\" can vary its rate, go forwards, backwards or even jump, but it cannot be negative.\n *\n * You should normally leave the ray position to (0, 0, 0). You should control it by changing the sourceOffset and destOffset parameters.\n *\n *\n * LightningStrike parameters\n *\n * The paramsObject can contain any of the following parameters.\n *\n * Legend:\n * 'LightningStrike' (also called 'ray'): An independent voltaic arc with its ramifications and defined with a set of parameters.\n * 'Subray': A ramification of the ray. It is not a LightningStrike object.\n * 'Segment': A linear segment piece of a subray.\n * 'Leaf segment': A ray segment which cannot be smaller.\n *\n *\n * The following parameters can be changed any time and if they vary smoothly, the ray form will also change smoothly:\n *\n * @param {Vector3} sourceOffset The point where the ray starts.\n *\n * @param {Vector3} destOffset The point where the ray ends.\n *\n * @param {double} timeScale The rate at wich the ray form changes in time. Default: 1\n *\n * @param {double} roughness From 0 to 1. The higher the value, the more wrinkled is the ray. Default: 0.9\n *\n * @param {double} straightness From 0 to 1. The higher the value, the more straight will be a subray path. Default: 0.7\n *\n * @param {Vector3} up0 Ray 'up' direction at the ray starting point. Must be normalized. It should be perpendicular to the ray forward direction but it doesn't matter much.\n *\n * @param {Vector3} up1 Like the up0 parameter but at the end of the ray. Must be normalized.\n *\n * @param {double} radius0 Radius of the main ray trunk at the start point. Default: 1\n *\n * @param {double} radius1 Radius of the main ray trunk at the end point. Default: 1\n *\n * @param {double} radius0Factor The radius0 of a subray is this factor times the radius0 of its parent subray. Default: 0.5\n *\n * @param {double} radius1Factor The radius1 of a subray is this factor times the radius1 of its parent subray. Default: 0.2\n *\n * @param {minRadius} Minimum value a subray radius0 or radius1 can get. Default: 0.1\n *\n *\n * The following parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n *\n * @param {boolean} isEternal If true the ray never extinguishes. Otherwise its life is controlled by the 'birthTime' and 'deathTime' parameters. Default: true if any of those two parameters is undefined.\n *\n * @param {double} birthTime The time at which the ray starts its life and begins propagating. Only if isEternal is false. Default: None.\n *\n * @param {double} deathTime The time at which the ray ends vanishing and its life. Only if isEternal is false. Default: None.\n *\n * @param {double} propagationTimeFactor From 0 to 1. Lifetime factor at which the ray ends propagating and enters the steady phase. For example, 0.1 means it is propagating 1/10 of its lifetime. Default: 0.1\n *\n * @param {double} vanishingTimeFactor From 0 to 1. Lifetime factor at which the ray ends the steady phase and begins vanishing. For example, 0.9 means it is vanishing 1/10 of its lifetime. Default: 0.9\n *\n * @param {double} subrayPeriod Subrays cycle periodically. This is their time period. Default: 4\n *\n * @param {double} subrayDutyCycle From 0 to 1. This is the fraction of time a subray is active. Default: 0.6\n *\n *\n * These parameters cannot change after lightning creation:\n *\n * @param {integer} maxIterations: Greater than 0. The number of ray's leaf segments is 2**maxIterations. Default: 9\n *\n * @param {boolean} isStatic Set to true only for rays which won't change over time and are not attached to moving objects (Rare case). It is used to set the vertex buffers non-dynamic. You can omit calling update() for these rays.\n *\n * @param {integer} ramification Greater than 0. Maximum number of child subrays a subray can have. Default: 5\n *\n * @param {integer} maxSubrayRecursion Greater than 0. Maximum level of recursion (subray descendant generations). Default: 3\n *\n * @param {double} recursionProbability From 0 to 1. The lower the value, the less chance each new generation of subrays has to generate new subrays. Default: 0.6\n *\n * @param {boolean} generateUVs If true, the ray geometry will have uv coordinates generated. u runs along the ray, and v across its perimeter. Default: false.\n *\n * @param {Object} randomGenerator Set here your random number generator which will seed the SimplexNoise and other decisions during ray tree creation.\n * It can be used to generate repeatable rays. For that, set also the noiseSeed parameter, and each ray created with that generator and seed pair will be identical in time.\n * The randomGenerator parameter should be an object with a random() function similar to Math.random, but seedable.\n * It must have also a getSeed() method, which returns the current seed, and a setSeed( seed ) method, which accepts as seed a fractional number from 0 to 1, as well as any other number.\n * The default value is an internal generator for some uses and Math.random for others (It is non-repeatable even if noiseSeed is supplied)\n *\n * @param {double} noiseSeed Seed used to make repeatable rays (see the randomGenerator)\n *\n * @param {function} onDecideSubrayCreation Set this to change the callback which decides subray creation. You can look at the default callback in the code (createDefaultSubrayCreationCallbacks)for more info.\n *\n * @param {function} onSubrayCreation This is another callback, more simple than the previous one. It can be used to adapt the form of subrays or other parameters once a subray has been created and initialized. It is used in the examples to adapt subrays to a sphere or to a plane.\n *\n *\n */\n\nvar LightningStrike = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(LightningStrike, _BufferGeometry);\n\n  var _super = _createSuper(LightningStrike);\n\n  function LightningStrike(rayParameters) {\n    var _this;\n\n    _classCallCheck(this, LightningStrike);\n\n    _this = _super.call(this);\n    _this.type = 'LightningStrike'; // Set parameters, and set undefined parameters to default values\n\n    rayParameters = rayParameters || {};\n\n    _this.init(LightningStrike.copyParameters(rayParameters, rayParameters)); // Creates and populates the mesh\n\n\n    _this.createMesh();\n\n    return _this;\n  }\n\n  _createClass(LightningStrike, [{\n    key: \"update\",\n    value: function update(time) {\n      if (this.isStatic) return;\n\n      if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\n        this.updateMesh(time);\n\n        if (time < this.subrays[0].endPropagationTime) {\n          this.state = LightningStrike.RAY_PROPAGATING;\n        } else if (time > this.subrays[0].beginVanishingTime) {\n          this.state = LightningStrike.RAY_VANISHING;\n        } else {\n          this.state = LightningStrike.RAY_STEADY;\n        }\n\n        this.visible = true;\n      } else {\n        this.visible = false;\n\n        if (time < this.rayParameters.birthTime) {\n          this.state = LightningStrike.RAY_UNBORN;\n        } else {\n          this.state = LightningStrike.RAY_EXTINGUISHED;\n        }\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init(rayParameters) {\n      // Init all the state from the parameters\n      this.rayParameters = rayParameters; // These parameters cannot change after lightning creation:\n\n      this.maxIterations = rayParameters.maxIterations !== undefined ? Math.floor(rayParameters.maxIterations) : 9;\n      rayParameters.maxIterations = this.maxIterations;\n      this.isStatic = rayParameters.isStatic !== undefined ? rayParameters.isStatic : false;\n      rayParameters.isStatic = this.isStatic;\n      this.ramification = rayParameters.ramification !== undefined ? Math.floor(rayParameters.ramification) : 5;\n      rayParameters.ramification = this.ramification;\n      this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== undefined ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\n      rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n      this.recursionProbability = rayParameters.recursionProbability !== undefined ? rayParameters.recursionProbability : 0.6;\n      rayParameters.recursionProbability = this.recursionProbability;\n      this.generateUVs = rayParameters.generateUVs !== undefined ? rayParameters.generateUVs : false;\n      rayParameters.generateUVs = this.generateUVs; // Random generator\n\n      if (rayParameters.randomGenerator !== undefined) {\n        this.randomGenerator = rayParameters.randomGenerator;\n        this.seedGenerator = rayParameters.randomGenerator;\n\n        if (rayParameters.noiseSeed !== undefined) {\n          this.seedGenerator.setSeed(rayParameters.noiseSeed);\n        }\n      } else {\n        this.randomGenerator = LightningStrike.createRandomGenerator();\n        this.seedGenerator = Math;\n      } // Ray creation callbacks\n\n\n      if (rayParameters.onDecideSubrayCreation !== undefined) {\n        this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n      } else {\n        this.createDefaultSubrayCreationCallbacks();\n\n        if (rayParameters.onSubrayCreation !== undefined) {\n          this.onSubrayCreation = rayParameters.onSubrayCreation;\n        }\n      } // Internal state\n\n\n      this.state = LightningStrike.RAY_INITIALIZED;\n      this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\n      rayParameters.maxSubrays = this.maxSubrays;\n      this.maxRaySegments = 2 * (1 << this.maxIterations);\n      this.subrays = [];\n\n      for (var i = 0; i < this.maxSubrays; i++) {\n        this.subrays.push(this.createSubray());\n      }\n\n      this.raySegments = [];\n\n      for (var _i = 0; _i < this.maxRaySegments; _i++) {\n        this.raySegments.push(this.createSegment());\n      }\n\n      this.time = 0;\n      this.timeFraction = 0;\n      this.currentSegmentCallback = null;\n      this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n      this.numSubrays = 0;\n      this.currentSubray = null;\n      this.currentSegmentIndex = 0;\n      this.isInitialSegment = false;\n      this.subrayProbability = 0;\n      this.currentVertex = 0;\n      this.currentIndex = 0;\n      this.currentCoordinate = 0;\n      this.currentUVCoordinate = 0;\n      this.vertices = null;\n      this.uvs = null;\n      this.indices = null;\n      this.positionAttribute = null;\n      this.uvsAttribute = null;\n      this.simplexX = new SimplexNoise(this.seedGenerator);\n      this.simplexY = new SimplexNoise(this.seedGenerator);\n      this.simplexZ = new SimplexNoise(this.seedGenerator); // Temp vectors\n\n      this.forwards = new Vector3();\n      this.forwardsFill = new Vector3();\n      this.side = new Vector3();\n      this.down = new Vector3();\n      this.middlePos = new Vector3();\n      this.middleLinPos = new Vector3();\n      this.newPos = new Vector3();\n      this.vPos = new Vector3();\n      this.cross1 = new Vector3();\n    }\n  }, {\n    key: \"createMesh\",\n    value: function createMesh() {\n      var maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n      var maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\n      var maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n      this.vertices = new Float32Array(maxVerts * 3);\n      this.indices = new Uint32Array(maxIndices);\n\n      if (this.generateUVs) {\n        this.uvs = new Float32Array(maxVerts * 2);\n      } // Populate the mesh\n\n\n      this.fillMesh(0);\n      this.setIndex(new Uint32BufferAttribute(this.indices, 1));\n      this.positionAttribute = new Float32BufferAttribute(this.vertices, 3);\n      this.setAttribute('position', this.positionAttribute);\n\n      if (this.generateUVs) {\n        this.uvsAttribute = new Float32BufferAttribute(new Float32Array(this.uvs), 2);\n        this.setAttribute('uv', this.uvsAttribute);\n      }\n\n      if (!this.isStatic) {\n        this.index.usage = DynamicDrawUsage;\n        this.positionAttribute.usage = DynamicDrawUsage;\n\n        if (this.generateUVs) {\n          this.uvsAttribute.usage = DynamicDrawUsage;\n        }\n      } // Store buffers for later modification\n\n\n      this.vertices = this.positionAttribute.array;\n      this.indices = this.index.array;\n\n      if (this.generateUVs) {\n        this.uvs = this.uvsAttribute.array;\n      }\n    }\n  }, {\n    key: \"updateMesh\",\n    value: function updateMesh(time) {\n      this.fillMesh(time);\n      this.drawRange.count = this.currentIndex;\n      this.index.needsUpdate = true;\n      this.positionAttribute.needsUpdate = true;\n\n      if (this.generateUVs) {\n        this.uvsAttribute.needsUpdate = true;\n      }\n    }\n  }, {\n    key: \"fillMesh\",\n    value: function fillMesh(time) {\n      var scope = this;\n      this.currentVertex = 0;\n      this.currentIndex = 0;\n      this.currentCoordinate = 0;\n      this.currentUVCoordinate = 0;\n      this.fractalRay(time, function fillVertices(segment) {\n        var subray = scope.currentSubray;\n\n        if (time < subray.birthTime) {\n          //&& ( ! this.rayParameters.isEternal || scope.currentSubray.recursion > 0 ) ) {\n          return;\n        } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\n          // Eternal rays don't propagate nor vanish, but its subrays do\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        } else if (time < subray.endPropagationTime) {\n          if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\n            // Ray propagation has arrived to this segment\n            scope.createPrism(segment);\n            scope.onDecideSubrayCreation(segment, scope);\n          }\n        } else if (time < subray.beginVanishingTime) {\n          // Ray is steady (nor propagating nor vanishing)\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        } else {\n          if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\n            // Segment has not yet vanished\n            scope.createPrism(segment);\n          }\n\n          scope.onDecideSubrayCreation(segment, scope);\n        }\n      });\n    }\n  }, {\n    key: \"addNewSubray\",\n    value: function addNewSubray()\n    /*rayParameters*/\n    {\n      return this.subrays[this.numSubrays++];\n    }\n  }, {\n    key: \"initSubray\",\n    value: function initSubray(subray, rayParameters) {\n      subray.pos0.copy(rayParameters.sourceOffset);\n      subray.pos1.copy(rayParameters.destOffset);\n      subray.up0.copy(rayParameters.up0);\n      subray.up1.copy(rayParameters.up1);\n      subray.radius0 = rayParameters.radius0;\n      subray.radius1 = rayParameters.radius1;\n      subray.birthTime = rayParameters.birthTime;\n      subray.deathTime = rayParameters.deathTime;\n      subray.timeScale = rayParameters.timeScale;\n      subray.roughness = rayParameters.roughness;\n      subray.straightness = rayParameters.straightness;\n      subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n      subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n      subray.maxIterations = this.maxIterations;\n      subray.seed = rayParameters.noiseSeed !== undefined ? rayParameters.noiseSeed : 0;\n      subray.recursion = 0;\n    }\n  }, {\n    key: \"fractalRay\",\n    value: function fractalRay(time, segmentCallback) {\n      this.time = time;\n      this.currentSegmentCallback = segmentCallback;\n      this.numSubrays = 0; // Add the top level subray\n\n      this.initSubray(this.addNewSubray(), this.rayParameters); // Process all subrays that are being generated until consuming all of them\n\n      for (var subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\n        var subray = this.subrays[subrayIndex];\n        this.currentSubray = subray;\n        this.randomGenerator.setSeed(subray.seed);\n        subray.endPropagationTime = MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\n        subray.beginVanishingTime = MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\n        var random1 = this.randomGenerator.random;\n        subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1000);\n        subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1000);\n        this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\n        this.currentSegmentIndex = 0;\n        this.isInitialSegment = true;\n        var segment = this.getNewSegment();\n        segment.iteration = 0;\n        segment.pos0.copy(subray.pos0);\n        segment.pos1.copy(subray.pos1);\n        segment.linPos0.copy(subray.linPos0);\n        segment.linPos1.copy(subray.linPos1);\n        segment.up0.copy(subray.up0);\n        segment.up1.copy(subray.up1);\n        segment.radius0 = subray.radius0;\n        segment.radius1 = subray.radius1;\n        segment.fraction0 = 0;\n        segment.fraction1 = 1;\n        segment.positionVariationFactor = 1 - subray.straightness;\n        this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\n        this.fractalRayRecursive(segment);\n      }\n\n      this.currentSegmentCallback = null;\n      this.currentSubray = null;\n    }\n  }, {\n    key: \"fractalRayRecursive\",\n    value: function fractalRayRecursive(segment) {\n      // Leave recursion condition\n      if (segment.iteration >= this.currentSubray.maxIterations) {\n        this.currentSegmentCallback(segment);\n        return;\n      } // Interpolation\n\n\n      this.forwards.subVectors(segment.pos1, segment.pos0);\n      var lForwards = this.forwards.length();\n\n      if (lForwards < 0.000001) {\n        this.forwards.set(0, 0, 0.01);\n        lForwards = this.forwards.length();\n      }\n\n      var middleRadius = (segment.radius0 + segment.radius1) * 0.5;\n      var middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\n      var timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\n      this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\n      this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\n      var p = this.middleLinPos; // Noise\n\n      this.newPos.set(this.simplexX.noise4d(p.x, p.y, p.z, timeDimension), this.simplexY.noise4d(p.x, p.y, p.z, timeDimension), this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension));\n      this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\n      this.newPos.add(this.middlePos); // Recursion\n\n      var newSegment1 = this.getNewSegment();\n      newSegment1.pos0.copy(segment.pos0);\n      newSegment1.pos1.copy(this.newPos);\n      newSegment1.linPos0.copy(segment.linPos0);\n      newSegment1.linPos1.copy(this.middleLinPos);\n      newSegment1.up0.copy(segment.up0);\n      newSegment1.up1.copy(segment.up1);\n      newSegment1.radius0 = segment.radius0;\n      newSegment1.radius1 = middleRadius;\n      newSegment1.fraction0 = segment.fraction0;\n      newSegment1.fraction1 = middleFraction;\n      newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n      newSegment1.iteration = segment.iteration + 1;\n      var newSegment2 = this.getNewSegment();\n      newSegment2.pos0.copy(this.newPos);\n      newSegment2.pos1.copy(segment.pos1);\n      newSegment2.linPos0.copy(this.middleLinPos);\n      newSegment2.linPos1.copy(segment.linPos1);\n      this.cross1.crossVectors(segment.up0, this.forwards.normalize());\n      newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\n      newSegment2.up1.copy(segment.up1);\n      newSegment2.radius0 = middleRadius;\n      newSegment2.radius1 = segment.radius1;\n      newSegment2.fraction0 = middleFraction;\n      newSegment2.fraction1 = segment.fraction1;\n      newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n      newSegment2.iteration = segment.iteration + 1;\n      this.fractalRayRecursive(newSegment1);\n      this.fractalRayRecursive(newSegment2);\n    }\n  }, {\n    key: \"createPrism\",\n    value: function createPrism(segment) {\n      // Creates one triangular prism and its vertices at the segment\n      this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\n\n      if (this.isInitialSegment) {\n        this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\n        this.isInitialSegment = false;\n      }\n\n      this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\n      this.createPrismFaces();\n    }\n  }, {\n    key: \"createTriangleVerticesWithoutUVs\",\n    value: function createTriangleVerticesWithoutUVs(pos, up, forwards, radius) {\n      // Create an equilateral triangle (only vertices)\n      this.side.crossVectors(up, forwards).multiplyScalar(radius * LightningStrike.COS30DEG);\n      this.down.copy(up).multiplyScalar(-radius * LightningStrike.SIN30DEG);\n      var p = this.vPos;\n      var v = this.vertices;\n      p.copy(pos).sub(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      p.copy(pos).add(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      p.copy(up).multiplyScalar(radius).add(pos);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      this.currentVertex += 3;\n    }\n  }, {\n    key: \"createTriangleVerticesWithUVs\",\n    value: function createTriangleVerticesWithUVs(pos, up, forwards, radius, u) {\n      // Create an equilateral triangle (only vertices)\n      this.side.crossVectors(up, forwards).multiplyScalar(radius * LightningStrike.COS30DEG);\n      this.down.copy(up).multiplyScalar(-radius * LightningStrike.SIN30DEG);\n      var p = this.vPos;\n      var v = this.vertices;\n      var uv = this.uvs;\n      p.copy(pos).sub(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 0;\n      p.copy(pos).add(this.side).add(this.down);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 0.5;\n      p.copy(up).multiplyScalar(radius).add(pos);\n      v[this.currentCoordinate++] = p.x;\n      v[this.currentCoordinate++] = p.y;\n      v[this.currentCoordinate++] = p.z;\n      uv[this.currentUVCoordinate++] = u;\n      uv[this.currentUVCoordinate++] = 1;\n      this.currentVertex += 3;\n    }\n  }, {\n    key: \"createPrismFaces\",\n    value: function createPrismFaces(vertex\n    /*, index*/\n    ) {\n      var indices = this.indices;\n      var vertex = this.currentVertex - 6;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 5;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 5;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 1;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 4;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 0;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 2;\n      indices[this.currentIndex++] = vertex + 3;\n      indices[this.currentIndex++] = vertex + 5;\n    }\n  }, {\n    key: \"createDefaultSubrayCreationCallbacks\",\n    value: function createDefaultSubrayCreationCallbacks() {\n      var random1 = this.randomGenerator.random;\n\n      this.onDecideSubrayCreation = function (segment, lightningStrike) {\n        // Decide subrays creation at parent (sub)ray segment\n        var subray = lightningStrike.currentSubray;\n        var period = lightningStrike.rayParameters.subrayPeriod;\n        var dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n        var phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\n        var phase = lightningStrike.time - phase0;\n        var currentCycle = Math.floor(phase / period);\n        var childSubraySeed = random1() * (currentCycle + 1);\n        var isActive = phase % period <= dutyCycle * period;\n        var probability = 0;\n\n        if (isActive) {\n          probability = lightningStrike.subrayProbability; // Distribution test: probability *= segment.fraction0 > 0.5 && segment.fraction0 < 0.9 ? 1 / 0.4 : 0;\n        }\n\n        if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\n          var childSubray = lightningStrike.addNewSubray();\n          var parentSeed = lightningStrike.randomGenerator.getSeed();\n          childSubray.seed = childSubraySeed;\n          lightningStrike.randomGenerator.setSeed(childSubraySeed);\n          childSubray.recursion = subray.recursion + 1;\n          childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\n          childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1000);\n          childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1000);\n          childSubray.up0.copy(subray.up0);\n          childSubray.up1.copy(subray.up1);\n          childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n          childSubray.radius1 = Math.min(lightningStrike.rayParameters.minRadius, segment.radius1 * lightningStrike.rayParameters.radius1Factor);\n          childSubray.birthTime = phase0 + currentCycle * period;\n          childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n\n          if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\n            childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\n            childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\n          }\n\n          childSubray.timeScale = subray.timeScale * 2;\n          childSubray.roughness = subray.roughness;\n          childSubray.straightness = subray.straightness;\n          childSubray.propagationTimeFactor = subray.propagationTimeFactor;\n          childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n          lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\n          lightningStrike.randomGenerator.setSeed(parentSeed);\n        }\n      };\n\n      var vec1Pos = new Vector3();\n      var vec2Forward = new Vector3();\n      var vec3Side = new Vector3();\n      var vec4Up = new Vector3();\n\n      this.onSubrayCreation = function (segment, parentSubray, childSubray, lightningStrike) {\n        // Decide childSubray origin and destination positions (pos0 and pos1) and possibly other properties of childSubray\n        // Just use the default cone position generator\n        lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\n      };\n\n      this.subrayConePosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n        // Sets childSubray pos0 and pos1 in a cone\n        childSubray.pos0.copy(segment.pos0);\n        vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n        vec2Forward.copy(vec1Pos).normalize();\n        vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\n        var length = vec1Pos.length();\n        vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n        var angle = 2 * Math.PI * random1();\n        vec3Side.multiplyScalar(Math.cos(angle));\n        vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n        childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n      };\n\n      this.subrayCylinderPosition = function (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) {\n        // Sets childSubray pos0 and pos1 in a cylinder\n        childSubray.pos0.copy(segment.pos0);\n        vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n        vec2Forward.copy(vec1Pos).normalize();\n        vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\n        var length = vec1Pos.length();\n        vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n        var angle = 2 * Math.PI * random1();\n        vec3Side.multiplyScalar(Math.cos(angle));\n        vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n        childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n      };\n    }\n  }, {\n    key: \"createSubray\",\n    value: function createSubray() {\n      return {\n        seed: 0,\n        maxIterations: 0,\n        recursion: 0,\n        pos0: new Vector3(),\n        pos1: new Vector3(),\n        linPos0: new Vector3(),\n        linPos1: new Vector3(),\n        up0: new Vector3(),\n        up1: new Vector3(),\n        radius0: 0,\n        radius1: 0,\n        birthTime: 0,\n        deathTime: 0,\n        timeScale: 0,\n        roughness: 0,\n        straightness: 0,\n        propagationTimeFactor: 0,\n        vanishingTimeFactor: 0,\n        endPropagationTime: 0,\n        beginVanishingTime: 0\n      };\n    }\n  }, {\n    key: \"createSegment\",\n    value: function createSegment() {\n      return {\n        iteration: 0,\n        pos0: new Vector3(),\n        pos1: new Vector3(),\n        linPos0: new Vector3(),\n        linPos1: new Vector3(),\n        up0: new Vector3(),\n        up1: new Vector3(),\n        radius0: 0,\n        radius1: 0,\n        fraction0: 0,\n        fraction1: 0,\n        positionVariationFactor: 0\n      };\n    }\n  }, {\n    key: \"getNewSegment\",\n    value: function getNewSegment() {\n      return this.raySegments[this.currentSegmentIndex++];\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      _get(_getPrototypeOf(LightningStrike.prototype), \"copy\", this).call(this, source);\n\n      this.init(LightningStrike.copyParameters({}, source.rayParameters));\n      return this;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(LightningStrike.copyParameters({}, this.rayParameters));\n    }\n  }]);\n\n  return LightningStrike;\n}(BufferGeometry);\n\nLightningStrike.prototype.isLightningStrike = true; // Ray states\n\nLightningStrike.RAY_INITIALIZED = 0;\nLightningStrike.RAY_UNBORN = 1;\nLightningStrike.RAY_PROPAGATING = 2;\nLightningStrike.RAY_STEADY = 3;\nLightningStrike.RAY_VANISHING = 4;\nLightningStrike.RAY_EXTINGUISHED = 5;\nLightningStrike.COS30DEG = Math.cos(30 * Math.PI / 180);\nLightningStrike.SIN30DEG = Math.sin(30 * Math.PI / 180);\n\nLightningStrike.createRandomGenerator = function () {\n  var numSeeds = 2053;\n  var seeds = [];\n\n  for (var i = 0; i < numSeeds; i++) {\n    seeds.push(Math.random());\n  }\n\n  var generator = {\n    currentSeed: 0,\n    random: function random() {\n      var value = seeds[generator.currentSeed];\n      generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\n      return value;\n    },\n    getSeed: function getSeed() {\n      return generator.currentSeed / numSeeds;\n    },\n    setSeed: function setSeed(seed) {\n      generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\n    }\n  };\n  return generator;\n};\n\nLightningStrike.copyParameters = function (dest, source) {\n  source = source || {};\n  dest = dest || {};\n\n  var vecCopy = function vecCopy(v) {\n    if (source === dest) {\n      return v;\n    } else {\n      return v.clone();\n    }\n  };\n\n  dest.sourceOffset = source.sourceOffset !== undefined ? vecCopy(source.sourceOffset) : new Vector3(0, 100, 0), dest.destOffset = source.destOffset !== undefined ? vecCopy(source.destOffset) : new Vector3(0, 0, 0), dest.timeScale = source.timeScale !== undefined ? source.timeScale : 1, dest.roughness = source.roughness !== undefined ? source.roughness : 0.9, dest.straightness = source.straightness !== undefined ? source.straightness : 0.7, dest.up0 = source.up0 !== undefined ? vecCopy(source.up0) : new Vector3(0, 0, 1);\n  dest.up1 = source.up1 !== undefined ? vecCopy(source.up1) : new Vector3(0, 0, 1), dest.radius0 = source.radius0 !== undefined ? source.radius0 : 1, dest.radius1 = source.radius1 !== undefined ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== undefined ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== undefined ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== undefined ? source.minRadius : 0.2, // These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n  dest.isEternal = source.isEternal !== undefined ? source.isEternal : source.birthTime === undefined || source.deathTime === undefined, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== undefined ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== undefined ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== undefined ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== undefined ? source.subrayDutyCycle : 0.6; // These parameters cannot change after lightning creation:\n\n  dest.maxIterations = source.maxIterations !== undefined ? source.maxIterations : 9;\n  dest.isStatic = source.isStatic !== undefined ? source.isStatic : false;\n  dest.ramification = source.ramification !== undefined ? source.ramification : 5;\n  dest.maxSubrayRecursion = source.maxSubrayRecursion !== undefined ? source.maxSubrayRecursion : 3;\n  dest.recursionProbability = source.recursionProbability !== undefined ? source.recursionProbability : 0.6;\n  dest.generateUVs = source.generateUVs !== undefined ? source.generateUVs : false;\n  dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\n  return dest;\n};\n\nexport { LightningStrike };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/geometries/LightningStrike.js"],"names":["BufferGeometry","Vector3","Uint32BufferAttribute","Float32BufferAttribute","DynamicDrawUsage","MathUtils","SimplexNoise","LightningStrike","rayParameters","type","init","copyParameters","createMesh","time","isStatic","isEternal","birthTime","deathTime","updateMesh","subrays","endPropagationTime","state","RAY_PROPAGATING","beginVanishingTime","RAY_VANISHING","RAY_STEADY","visible","RAY_UNBORN","RAY_EXTINGUISHED","maxIterations","undefined","Math","floor","ramification","maxSubrayRecursion","recursionProbability","generateUVs","randomGenerator","seedGenerator","noiseSeed","setSeed","createRandomGenerator","onDecideSubrayCreation","createDefaultSubrayCreationCallbacks","onSubrayCreation","RAY_INITIALIZED","maxSubrays","ceil","pow","max","maxRaySegments","i","push","createSubray","raySegments","createSegment","timeFraction","currentSegmentCallback","currentCreateTriangleVertices","createTriangleVerticesWithUVs","createTriangleVerticesWithoutUVs","numSubrays","currentSubray","currentSegmentIndex","isInitialSegment","subrayProbability","currentVertex","currentIndex","currentCoordinate","currentUVCoordinate","vertices","uvs","indices","positionAttribute","uvsAttribute","simplexX","simplexY","simplexZ","forwards","forwardsFill","side","down","middlePos","middleLinPos","newPos","vPos","cross1","maxDrawableSegmentsPerSubRay","maxVerts","maxIndices","Float32Array","Uint32Array","fillMesh","setIndex","setAttribute","index","usage","array","drawRange","count","needsUpdate","scope","fractalRay","fillVertices","segment","subray","recursion","createPrism","fraction0","propagationTimeFactor","vanishingTimeFactor","fraction1","pos0","copy","sourceOffset","pos1","destOffset","up0","up1","radius0","radius1","timeScale","roughness","straightness","seed","segmentCallback","initSubray","addNewSubray","subrayIndex","lerp","random1","random","linPos0","set","multiplyScalar","linPos1","getNewSegment","iteration","positionVariationFactor","fractalRayRecursive","subVectors","lForwards","length","middleRadius","middleFraction","timeDimension","lerpVectors","p","noise4d","x","y","z","add","newSegment1","newSegment2","crossVectors","normalize","createPrismFaces","pos","up","radius","COS30DEG","SIN30DEG","v","sub","u","uv","vertex","lightningStrike","period","subrayPeriod","dutyCycle","subrayDutyCycle","phase0","phase","currentCycle","childSubraySeed","isActive","probability","childSubray","parentSeed","getSeed","radius0Factor","min","minRadius","radius1Factor","vec1Pos","vec2Forward","vec3Side","vec4Up","parentSubray","subrayCylinderPosition","subrayConePosition","heightFactor","sideWidthFactor","minSideWidthFactor","angle","PI","cos","sin","source","constructor","prototype","isLightningStrike","numSeeds","seeds","generator","currentSeed","value","dest","vecCopy","clone"],"mappings":"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","sourcesContent":["import { BufferGeometry, Vector3, Uint32BufferAttribute, Float32BufferAttribute, DynamicDrawUsage, MathUtils } from 'three';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\n\n/**\n * @fileoverview LightningStrike object for creating lightning strikes and voltaic arcs.\n *\n *\n * Usage\n *\n * var myRay = new LightningStrike( paramsObject );\n * var myRayMesh = new THREE.Mesh( myRay, myMaterial );\n * scene.add( myRayMesh );\n * ...\n * myRay.update( currentTime );\n *\n * The \"currentTime\" can vary its rate, go forwards, backwards or even jump, but it cannot be negative.\n *\n * You should normally leave the ray position to (0, 0, 0). You should control it by changing the sourceOffset and destOffset parameters.\n *\n *\n * LightningStrike parameters\n *\n * The paramsObject can contain any of the following parameters.\n *\n * Legend:\n * 'LightningStrike' (also called 'ray'): An independent voltaic arc with its ramifications and defined with a set of parameters.\n * 'Subray': A ramification of the ray. It is not a LightningStrike object.\n * 'Segment': A linear segment piece of a subray.\n * 'Leaf segment': A ray segment which cannot be smaller.\n *\n *\n * The following parameters can be changed any time and if they vary smoothly, the ray form will also change smoothly:\n *\n * @param {Vector3} sourceOffset The point where the ray starts.\n *\n * @param {Vector3} destOffset The point where the ray ends.\n *\n * @param {double} timeScale The rate at wich the ray form changes in time. Default: 1\n *\n * @param {double} roughness From 0 to 1. The higher the value, the more wrinkled is the ray. Default: 0.9\n *\n * @param {double} straightness From 0 to 1. The higher the value, the more straight will be a subray path. Default: 0.7\n *\n * @param {Vector3} up0 Ray 'up' direction at the ray starting point. Must be normalized. It should be perpendicular to the ray forward direction but it doesn't matter much.\n *\n * @param {Vector3} up1 Like the up0 parameter but at the end of the ray. Must be normalized.\n *\n * @param {double} radius0 Radius of the main ray trunk at the start point. Default: 1\n *\n * @param {double} radius1 Radius of the main ray trunk at the end point. Default: 1\n *\n * @param {double} radius0Factor The radius0 of a subray is this factor times the radius0 of its parent subray. Default: 0.5\n *\n * @param {double} radius1Factor The radius1 of a subray is this factor times the radius1 of its parent subray. Default: 0.2\n *\n * @param {minRadius} Minimum value a subray radius0 or radius1 can get. Default: 0.1\n *\n *\n * The following parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n *\n * @param {boolean} isEternal If true the ray never extinguishes. Otherwise its life is controlled by the 'birthTime' and 'deathTime' parameters. Default: true if any of those two parameters is undefined.\n *\n * @param {double} birthTime The time at which the ray starts its life and begins propagating. Only if isEternal is false. Default: None.\n *\n * @param {double} deathTime The time at which the ray ends vanishing and its life. Only if isEternal is false. Default: None.\n *\n * @param {double} propagationTimeFactor From 0 to 1. Lifetime factor at which the ray ends propagating and enters the steady phase. For example, 0.1 means it is propagating 1/10 of its lifetime. Default: 0.1\n *\n * @param {double} vanishingTimeFactor From 0 to 1. Lifetime factor at which the ray ends the steady phase and begins vanishing. For example, 0.9 means it is vanishing 1/10 of its lifetime. Default: 0.9\n *\n * @param {double} subrayPeriod Subrays cycle periodically. This is their time period. Default: 4\n *\n * @param {double} subrayDutyCycle From 0 to 1. This is the fraction of time a subray is active. Default: 0.6\n *\n *\n * These parameters cannot change after lightning creation:\n *\n * @param {integer} maxIterations: Greater than 0. The number of ray's leaf segments is 2**maxIterations. Default: 9\n *\n * @param {boolean} isStatic Set to true only for rays which won't change over time and are not attached to moving objects (Rare case). It is used to set the vertex buffers non-dynamic. You can omit calling update() for these rays.\n *\n * @param {integer} ramification Greater than 0. Maximum number of child subrays a subray can have. Default: 5\n *\n * @param {integer} maxSubrayRecursion Greater than 0. Maximum level of recursion (subray descendant generations). Default: 3\n *\n * @param {double} recursionProbability From 0 to 1. The lower the value, the less chance each new generation of subrays has to generate new subrays. Default: 0.6\n *\n * @param {boolean} generateUVs If true, the ray geometry will have uv coordinates generated. u runs along the ray, and v across its perimeter. Default: false.\n *\n * @param {Object} randomGenerator Set here your random number generator which will seed the SimplexNoise and other decisions during ray tree creation.\n * It can be used to generate repeatable rays. For that, set also the noiseSeed parameter, and each ray created with that generator and seed pair will be identical in time.\n * The randomGenerator parameter should be an object with a random() function similar to Math.random, but seedable.\n * It must have also a getSeed() method, which returns the current seed, and a setSeed( seed ) method, which accepts as seed a fractional number from 0 to 1, as well as any other number.\n * The default value is an internal generator for some uses and Math.random for others (It is non-repeatable even if noiseSeed is supplied)\n *\n * @param {double} noiseSeed Seed used to make repeatable rays (see the randomGenerator)\n *\n * @param {function} onDecideSubrayCreation Set this to change the callback which decides subray creation. You can look at the default callback in the code (createDefaultSubrayCreationCallbacks)for more info.\n *\n * @param {function} onSubrayCreation This is another callback, more simple than the previous one. It can be used to adapt the form of subrays or other parameters once a subray has been created and initialized. It is used in the examples to adapt subrays to a sphere or to a plane.\n *\n *\n */\n\nclass LightningStrike extends BufferGeometry {\n  constructor(rayParameters) {\n    super();\n    this.type = 'LightningStrike'; // Set parameters, and set undefined parameters to default values\n\n    rayParameters = rayParameters || {};\n    this.init(LightningStrike.copyParameters(rayParameters, rayParameters)); // Creates and populates the mesh\n\n    this.createMesh();\n  }\n\n  update(time) {\n    if (this.isStatic) return;\n\n    if (this.rayParameters.isEternal || this.rayParameters.birthTime <= time && time <= this.rayParameters.deathTime) {\n      this.updateMesh(time);\n\n      if (time < this.subrays[0].endPropagationTime) {\n        this.state = LightningStrike.RAY_PROPAGATING;\n      } else if (time > this.subrays[0].beginVanishingTime) {\n        this.state = LightningStrike.RAY_VANISHING;\n      } else {\n        this.state = LightningStrike.RAY_STEADY;\n      }\n\n      this.visible = true;\n    } else {\n      this.visible = false;\n\n      if (time < this.rayParameters.birthTime) {\n        this.state = LightningStrike.RAY_UNBORN;\n      } else {\n        this.state = LightningStrike.RAY_EXTINGUISHED;\n      }\n    }\n  }\n\n  init(rayParameters) {\n    // Init all the state from the parameters\n    this.rayParameters = rayParameters; // These parameters cannot change after lightning creation:\n\n    this.maxIterations = rayParameters.maxIterations !== undefined ? Math.floor(rayParameters.maxIterations) : 9;\n    rayParameters.maxIterations = this.maxIterations;\n    this.isStatic = rayParameters.isStatic !== undefined ? rayParameters.isStatic : false;\n    rayParameters.isStatic = this.isStatic;\n    this.ramification = rayParameters.ramification !== undefined ? Math.floor(rayParameters.ramification) : 5;\n    rayParameters.ramification = this.ramification;\n    this.maxSubrayRecursion = rayParameters.maxSubrayRecursion !== undefined ? Math.floor(rayParameters.maxSubrayRecursion) : 3;\n    rayParameters.maxSubrayRecursion = this.maxSubrayRecursion;\n    this.recursionProbability = rayParameters.recursionProbability !== undefined ? rayParameters.recursionProbability : 0.6;\n    rayParameters.recursionProbability = this.recursionProbability;\n    this.generateUVs = rayParameters.generateUVs !== undefined ? rayParameters.generateUVs : false;\n    rayParameters.generateUVs = this.generateUVs; // Random generator\n\n    if (rayParameters.randomGenerator !== undefined) {\n      this.randomGenerator = rayParameters.randomGenerator;\n      this.seedGenerator = rayParameters.randomGenerator;\n\n      if (rayParameters.noiseSeed !== undefined) {\n        this.seedGenerator.setSeed(rayParameters.noiseSeed);\n      }\n    } else {\n      this.randomGenerator = LightningStrike.createRandomGenerator();\n      this.seedGenerator = Math;\n    } // Ray creation callbacks\n\n\n    if (rayParameters.onDecideSubrayCreation !== undefined) {\n      this.onDecideSubrayCreation = rayParameters.onDecideSubrayCreation;\n    } else {\n      this.createDefaultSubrayCreationCallbacks();\n\n      if (rayParameters.onSubrayCreation !== undefined) {\n        this.onSubrayCreation = rayParameters.onSubrayCreation;\n      }\n    } // Internal state\n\n\n    this.state = LightningStrike.RAY_INITIALIZED;\n    this.maxSubrays = Math.ceil(1 + Math.pow(this.ramification, Math.max(0, this.maxSubrayRecursion - 1)));\n    rayParameters.maxSubrays = this.maxSubrays;\n    this.maxRaySegments = 2 * (1 << this.maxIterations);\n    this.subrays = [];\n\n    for (let i = 0; i < this.maxSubrays; i++) {\n      this.subrays.push(this.createSubray());\n    }\n\n    this.raySegments = [];\n\n    for (let i = 0; i < this.maxRaySegments; i++) {\n      this.raySegments.push(this.createSegment());\n    }\n\n    this.time = 0;\n    this.timeFraction = 0;\n    this.currentSegmentCallback = null;\n    this.currentCreateTriangleVertices = this.generateUVs ? this.createTriangleVerticesWithUVs : this.createTriangleVerticesWithoutUVs;\n    this.numSubrays = 0;\n    this.currentSubray = null;\n    this.currentSegmentIndex = 0;\n    this.isInitialSegment = false;\n    this.subrayProbability = 0;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.vertices = null;\n    this.uvs = null;\n    this.indices = null;\n    this.positionAttribute = null;\n    this.uvsAttribute = null;\n    this.simplexX = new SimplexNoise(this.seedGenerator);\n    this.simplexY = new SimplexNoise(this.seedGenerator);\n    this.simplexZ = new SimplexNoise(this.seedGenerator); // Temp vectors\n\n    this.forwards = new Vector3();\n    this.forwardsFill = new Vector3();\n    this.side = new Vector3();\n    this.down = new Vector3();\n    this.middlePos = new Vector3();\n    this.middleLinPos = new Vector3();\n    this.newPos = new Vector3();\n    this.vPos = new Vector3();\n    this.cross1 = new Vector3();\n  }\n\n  createMesh() {\n    const maxDrawableSegmentsPerSubRay = 1 << this.maxIterations;\n    const maxVerts = 3 * (maxDrawableSegmentsPerSubRay + 1) * this.maxSubrays;\n    const maxIndices = 18 * maxDrawableSegmentsPerSubRay * this.maxSubrays;\n    this.vertices = new Float32Array(maxVerts * 3);\n    this.indices = new Uint32Array(maxIndices);\n\n    if (this.generateUVs) {\n      this.uvs = new Float32Array(maxVerts * 2);\n    } // Populate the mesh\n\n\n    this.fillMesh(0);\n    this.setIndex(new Uint32BufferAttribute(this.indices, 1));\n    this.positionAttribute = new Float32BufferAttribute(this.vertices, 3);\n    this.setAttribute('position', this.positionAttribute);\n\n    if (this.generateUVs) {\n      this.uvsAttribute = new Float32BufferAttribute(new Float32Array(this.uvs), 2);\n      this.setAttribute('uv', this.uvsAttribute);\n    }\n\n    if (!this.isStatic) {\n      this.index.usage = DynamicDrawUsage;\n      this.positionAttribute.usage = DynamicDrawUsage;\n\n      if (this.generateUVs) {\n        this.uvsAttribute.usage = DynamicDrawUsage;\n      }\n    } // Store buffers for later modification\n\n\n    this.vertices = this.positionAttribute.array;\n    this.indices = this.index.array;\n\n    if (this.generateUVs) {\n      this.uvs = this.uvsAttribute.array;\n    }\n  }\n\n  updateMesh(time) {\n    this.fillMesh(time);\n    this.drawRange.count = this.currentIndex;\n    this.index.needsUpdate = true;\n    this.positionAttribute.needsUpdate = true;\n\n    if (this.generateUVs) {\n      this.uvsAttribute.needsUpdate = true;\n    }\n  }\n\n  fillMesh(time) {\n    const scope = this;\n    this.currentVertex = 0;\n    this.currentIndex = 0;\n    this.currentCoordinate = 0;\n    this.currentUVCoordinate = 0;\n    this.fractalRay(time, function fillVertices(segment) {\n      const subray = scope.currentSubray;\n\n      if (time < subray.birthTime) {\n        //&& ( ! this.rayParameters.isEternal || scope.currentSubray.recursion > 0 ) ) {\n        return;\n      } else if (this.rayParameters.isEternal && scope.currentSubray.recursion == 0) {\n        // Eternal rays don't propagate nor vanish, but its subrays do\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else if (time < subray.endPropagationTime) {\n        if (scope.timeFraction >= segment.fraction0 * subray.propagationTimeFactor) {\n          // Ray propagation has arrived to this segment\n          scope.createPrism(segment);\n          scope.onDecideSubrayCreation(segment, scope);\n        }\n      } else if (time < subray.beginVanishingTime) {\n        // Ray is steady (nor propagating nor vanishing)\n        scope.createPrism(segment);\n        scope.onDecideSubrayCreation(segment, scope);\n      } else {\n        if (scope.timeFraction <= subray.vanishingTimeFactor + segment.fraction1 * (1 - subray.vanishingTimeFactor)) {\n          // Segment has not yet vanished\n          scope.createPrism(segment);\n        }\n\n        scope.onDecideSubrayCreation(segment, scope);\n      }\n    });\n  }\n\n  addNewSubray()\n  /*rayParameters*/\n  {\n    return this.subrays[this.numSubrays++];\n  }\n\n  initSubray(subray, rayParameters) {\n    subray.pos0.copy(rayParameters.sourceOffset);\n    subray.pos1.copy(rayParameters.destOffset);\n    subray.up0.copy(rayParameters.up0);\n    subray.up1.copy(rayParameters.up1);\n    subray.radius0 = rayParameters.radius0;\n    subray.radius1 = rayParameters.radius1;\n    subray.birthTime = rayParameters.birthTime;\n    subray.deathTime = rayParameters.deathTime;\n    subray.timeScale = rayParameters.timeScale;\n    subray.roughness = rayParameters.roughness;\n    subray.straightness = rayParameters.straightness;\n    subray.propagationTimeFactor = rayParameters.propagationTimeFactor;\n    subray.vanishingTimeFactor = rayParameters.vanishingTimeFactor;\n    subray.maxIterations = this.maxIterations;\n    subray.seed = rayParameters.noiseSeed !== undefined ? rayParameters.noiseSeed : 0;\n    subray.recursion = 0;\n  }\n\n  fractalRay(time, segmentCallback) {\n    this.time = time;\n    this.currentSegmentCallback = segmentCallback;\n    this.numSubrays = 0; // Add the top level subray\n\n    this.initSubray(this.addNewSubray(), this.rayParameters); // Process all subrays that are being generated until consuming all of them\n\n    for (let subrayIndex = 0; subrayIndex < this.numSubrays; subrayIndex++) {\n      const subray = this.subrays[subrayIndex];\n      this.currentSubray = subray;\n      this.randomGenerator.setSeed(subray.seed);\n      subray.endPropagationTime = MathUtils.lerp(subray.birthTime, subray.deathTime, subray.propagationTimeFactor);\n      subray.beginVanishingTime = MathUtils.lerp(subray.deathTime, subray.birthTime, 1 - subray.vanishingTimeFactor);\n      const random1 = this.randomGenerator.random;\n      subray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1000);\n      subray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1000);\n      this.timeFraction = (time - subray.birthTime) / (subray.deathTime - subray.birthTime);\n      this.currentSegmentIndex = 0;\n      this.isInitialSegment = true;\n      const segment = this.getNewSegment();\n      segment.iteration = 0;\n      segment.pos0.copy(subray.pos0);\n      segment.pos1.copy(subray.pos1);\n      segment.linPos0.copy(subray.linPos0);\n      segment.linPos1.copy(subray.linPos1);\n      segment.up0.copy(subray.up0);\n      segment.up1.copy(subray.up1);\n      segment.radius0 = subray.radius0;\n      segment.radius1 = subray.radius1;\n      segment.fraction0 = 0;\n      segment.fraction1 = 1;\n      segment.positionVariationFactor = 1 - subray.straightness;\n      this.subrayProbability = this.ramification * Math.pow(this.recursionProbability, subray.recursion) / (1 << subray.maxIterations);\n      this.fractalRayRecursive(segment);\n    }\n\n    this.currentSegmentCallback = null;\n    this.currentSubray = null;\n  }\n\n  fractalRayRecursive(segment) {\n    // Leave recursion condition\n    if (segment.iteration >= this.currentSubray.maxIterations) {\n      this.currentSegmentCallback(segment);\n      return;\n    } // Interpolation\n\n\n    this.forwards.subVectors(segment.pos1, segment.pos0);\n    let lForwards = this.forwards.length();\n\n    if (lForwards < 0.000001) {\n      this.forwards.set(0, 0, 0.01);\n      lForwards = this.forwards.length();\n    }\n\n    const middleRadius = (segment.radius0 + segment.radius1) * 0.5;\n    const middleFraction = (segment.fraction0 + segment.fraction1) * 0.5;\n    const timeDimension = this.time * this.currentSubray.timeScale * Math.pow(2, segment.iteration);\n    this.middlePos.lerpVectors(segment.pos0, segment.pos1, 0.5);\n    this.middleLinPos.lerpVectors(segment.linPos0, segment.linPos1, 0.5);\n    const p = this.middleLinPos; // Noise\n\n    this.newPos.set(this.simplexX.noise4d(p.x, p.y, p.z, timeDimension), this.simplexY.noise4d(p.x, p.y, p.z, timeDimension), this.simplexZ.noise4d(p.x, p.y, p.z, timeDimension));\n    this.newPos.multiplyScalar(segment.positionVariationFactor * lForwards);\n    this.newPos.add(this.middlePos); // Recursion\n\n    const newSegment1 = this.getNewSegment();\n    newSegment1.pos0.copy(segment.pos0);\n    newSegment1.pos1.copy(this.newPos);\n    newSegment1.linPos0.copy(segment.linPos0);\n    newSegment1.linPos1.copy(this.middleLinPos);\n    newSegment1.up0.copy(segment.up0);\n    newSegment1.up1.copy(segment.up1);\n    newSegment1.radius0 = segment.radius0;\n    newSegment1.radius1 = middleRadius;\n    newSegment1.fraction0 = segment.fraction0;\n    newSegment1.fraction1 = middleFraction;\n    newSegment1.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment1.iteration = segment.iteration + 1;\n    const newSegment2 = this.getNewSegment();\n    newSegment2.pos0.copy(this.newPos);\n    newSegment2.pos1.copy(segment.pos1);\n    newSegment2.linPos0.copy(this.middleLinPos);\n    newSegment2.linPos1.copy(segment.linPos1);\n    this.cross1.crossVectors(segment.up0, this.forwards.normalize());\n    newSegment2.up0.crossVectors(this.forwards, this.cross1).normalize();\n    newSegment2.up1.copy(segment.up1);\n    newSegment2.radius0 = middleRadius;\n    newSegment2.radius1 = segment.radius1;\n    newSegment2.fraction0 = middleFraction;\n    newSegment2.fraction1 = segment.fraction1;\n    newSegment2.positionVariationFactor = segment.positionVariationFactor * this.currentSubray.roughness;\n    newSegment2.iteration = segment.iteration + 1;\n    this.fractalRayRecursive(newSegment1);\n    this.fractalRayRecursive(newSegment2);\n  }\n\n  createPrism(segment) {\n    // Creates one triangular prism and its vertices at the segment\n    this.forwardsFill.subVectors(segment.pos1, segment.pos0).normalize();\n\n    if (this.isInitialSegment) {\n      this.currentCreateTriangleVertices(segment.pos0, segment.up0, this.forwardsFill, segment.radius0, 0);\n      this.isInitialSegment = false;\n    }\n\n    this.currentCreateTriangleVertices(segment.pos1, segment.up0, this.forwardsFill, segment.radius1, segment.fraction1);\n    this.createPrismFaces();\n  }\n\n  createTriangleVerticesWithoutUVs(pos, up, forwards, radius) {\n    // Create an equilateral triangle (only vertices)\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    this.currentVertex += 3;\n  }\n\n  createTriangleVerticesWithUVs(pos, up, forwards, radius, u) {\n    // Create an equilateral triangle (only vertices)\n    this.side.crossVectors(up, forwards).multiplyScalar(radius * LightningStrike.COS30DEG);\n    this.down.copy(up).multiplyScalar(-radius * LightningStrike.SIN30DEG);\n    const p = this.vPos;\n    const v = this.vertices;\n    const uv = this.uvs;\n    p.copy(pos).sub(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0;\n    p.copy(pos).add(this.side).add(this.down);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 0.5;\n    p.copy(up).multiplyScalar(radius).add(pos);\n    v[this.currentCoordinate++] = p.x;\n    v[this.currentCoordinate++] = p.y;\n    v[this.currentCoordinate++] = p.z;\n    uv[this.currentUVCoordinate++] = u;\n    uv[this.currentUVCoordinate++] = 1;\n    this.currentVertex += 3;\n  }\n\n  createPrismFaces(vertex\n  /*, index*/\n  ) {\n    const indices = this.indices;\n    var vertex = this.currentVertex - 6;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 5;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 1;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 4;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 0;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 2;\n    indices[this.currentIndex++] = vertex + 3;\n    indices[this.currentIndex++] = vertex + 5;\n  }\n\n  createDefaultSubrayCreationCallbacks() {\n    const random1 = this.randomGenerator.random;\n\n    this.onDecideSubrayCreation = (segment, lightningStrike) => {\n      // Decide subrays creation at parent (sub)ray segment\n      const subray = lightningStrike.currentSubray;\n      const period = lightningStrike.rayParameters.subrayPeriod;\n      const dutyCycle = lightningStrike.rayParameters.subrayDutyCycle;\n      const phase0 = lightningStrike.rayParameters.isEternal && subray.recursion == 0 ? -random1() * period : MathUtils.lerp(subray.birthTime, subray.endPropagationTime, segment.fraction0) - random1() * period;\n      const phase = lightningStrike.time - phase0;\n      const currentCycle = Math.floor(phase / period);\n      const childSubraySeed = random1() * (currentCycle + 1);\n      const isActive = phase % period <= dutyCycle * period;\n      let probability = 0;\n\n      if (isActive) {\n        probability = lightningStrike.subrayProbability; // Distribution test: probability *= segment.fraction0 > 0.5 && segment.fraction0 < 0.9 ? 1 / 0.4 : 0;\n      }\n\n      if (subray.recursion < lightningStrike.maxSubrayRecursion && lightningStrike.numSubrays < lightningStrike.maxSubrays && random1() < probability) {\n        const childSubray = lightningStrike.addNewSubray();\n        const parentSeed = lightningStrike.randomGenerator.getSeed();\n        childSubray.seed = childSubraySeed;\n        lightningStrike.randomGenerator.setSeed(childSubraySeed);\n        childSubray.recursion = subray.recursion + 1;\n        childSubray.maxIterations = Math.max(1, subray.maxIterations - 1);\n        childSubray.linPos0.set(random1(), random1(), random1()).multiplyScalar(1000);\n        childSubray.linPos1.set(random1(), random1(), random1()).multiplyScalar(1000);\n        childSubray.up0.copy(subray.up0);\n        childSubray.up1.copy(subray.up1);\n        childSubray.radius0 = segment.radius0 * lightningStrike.rayParameters.radius0Factor;\n        childSubray.radius1 = Math.min(lightningStrike.rayParameters.minRadius, segment.radius1 * lightningStrike.rayParameters.radius1Factor);\n        childSubray.birthTime = phase0 + currentCycle * period;\n        childSubray.deathTime = childSubray.birthTime + period * dutyCycle;\n\n        if (!lightningStrike.rayParameters.isEternal && subray.recursion == 0) {\n          childSubray.birthTime = Math.max(childSubray.birthTime, subray.birthTime);\n          childSubray.deathTime = Math.min(childSubray.deathTime, subray.deathTime);\n        }\n\n        childSubray.timeScale = subray.timeScale * 2;\n        childSubray.roughness = subray.roughness;\n        childSubray.straightness = subray.straightness;\n        childSubray.propagationTimeFactor = subray.propagationTimeFactor;\n        childSubray.vanishingTimeFactor = subray.vanishingTimeFactor;\n        lightningStrike.onSubrayCreation(segment, subray, childSubray, lightningStrike);\n        lightningStrike.randomGenerator.setSeed(parentSeed);\n      }\n    };\n\n    const vec1Pos = new Vector3();\n    const vec2Forward = new Vector3();\n    const vec3Side = new Vector3();\n    const vec4Up = new Vector3();\n\n    this.onSubrayCreation = (segment, parentSubray, childSubray, lightningStrike) => {\n      // Decide childSubray origin and destination positions (pos0 and pos1) and possibly other properties of childSubray\n      // Just use the default cone position generator\n      lightningStrike.subrayCylinderPosition(segment, parentSubray, childSubray, 0.5, 0.6, 0.2);\n    };\n\n    this.subrayConePosition = (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) => {\n      // Sets childSubray pos0 and pos1 in a cone\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * (random1() * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n\n    this.subrayCylinderPosition = (segment, parentSubray, childSubray, heightFactor, sideWidthFactor, minSideWidthFactor) => {\n      // Sets childSubray pos0 and pos1 in a cylinder\n      childSubray.pos0.copy(segment.pos0);\n      vec1Pos.subVectors(parentSubray.pos1, parentSubray.pos0);\n      vec2Forward.copy(vec1Pos).normalize();\n      vec1Pos.multiplyScalar(segment.fraction0 + (1 - segment.fraction0) * ((2 * random1() - 1) * heightFactor));\n      const length = vec1Pos.length();\n      vec3Side.crossVectors(parentSubray.up0, vec2Forward);\n      const angle = 2 * Math.PI * random1();\n      vec3Side.multiplyScalar(Math.cos(angle));\n      vec4Up.copy(parentSubray.up0).multiplyScalar(Math.sin(angle));\n      childSubray.pos1.copy(vec3Side).add(vec4Up).multiplyScalar(length * sideWidthFactor * (minSideWidthFactor + random1() * (1 - minSideWidthFactor))).add(vec1Pos).add(parentSubray.pos0);\n    };\n  }\n\n  createSubray() {\n    return {\n      seed: 0,\n      maxIterations: 0,\n      recursion: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      birthTime: 0,\n      deathTime: 0,\n      timeScale: 0,\n      roughness: 0,\n      straightness: 0,\n      propagationTimeFactor: 0,\n      vanishingTimeFactor: 0,\n      endPropagationTime: 0,\n      beginVanishingTime: 0\n    };\n  }\n\n  createSegment() {\n    return {\n      iteration: 0,\n      pos0: new Vector3(),\n      pos1: new Vector3(),\n      linPos0: new Vector3(),\n      linPos1: new Vector3(),\n      up0: new Vector3(),\n      up1: new Vector3(),\n      radius0: 0,\n      radius1: 0,\n      fraction0: 0,\n      fraction1: 0,\n      positionVariationFactor: 0\n    };\n  }\n\n  getNewSegment() {\n    return this.raySegments[this.currentSegmentIndex++];\n  }\n\n  copy(source) {\n    super.copy(source);\n    this.init(LightningStrike.copyParameters({}, source.rayParameters));\n    return this;\n  }\n\n  clone() {\n    return new this.constructor(LightningStrike.copyParameters({}, this.rayParameters));\n  }\n\n}\n\nLightningStrike.prototype.isLightningStrike = true; // Ray states\n\nLightningStrike.RAY_INITIALIZED = 0;\nLightningStrike.RAY_UNBORN = 1;\nLightningStrike.RAY_PROPAGATING = 2;\nLightningStrike.RAY_STEADY = 3;\nLightningStrike.RAY_VANISHING = 4;\nLightningStrike.RAY_EXTINGUISHED = 5;\nLightningStrike.COS30DEG = Math.cos(30 * Math.PI / 180);\nLightningStrike.SIN30DEG = Math.sin(30 * Math.PI / 180);\n\nLightningStrike.createRandomGenerator = () => {\n  const numSeeds = 2053;\n  const seeds = [];\n\n  for (let i = 0; i < numSeeds; i++) {\n    seeds.push(Math.random());\n  }\n\n  const generator = {\n    currentSeed: 0,\n    random: function () {\n      const value = seeds[generator.currentSeed];\n      generator.currentSeed = (generator.currentSeed + 1) % numSeeds;\n      return value;\n    },\n    getSeed: function () {\n      return generator.currentSeed / numSeeds;\n    },\n    setSeed: function (seed) {\n      generator.currentSeed = Math.floor(seed * numSeeds) % numSeeds;\n    }\n  };\n  return generator;\n};\n\nLightningStrike.copyParameters = (dest, source) => {\n  source = source || {};\n  dest = dest || {};\n\n  const vecCopy = v => {\n    if (source === dest) {\n      return v;\n    } else {\n      return v.clone();\n    }\n  };\n\n  dest.sourceOffset = source.sourceOffset !== undefined ? vecCopy(source.sourceOffset) : new Vector3(0, 100, 0), dest.destOffset = source.destOffset !== undefined ? vecCopy(source.destOffset) : new Vector3(0, 0, 0), dest.timeScale = source.timeScale !== undefined ? source.timeScale : 1, dest.roughness = source.roughness !== undefined ? source.roughness : 0.9, dest.straightness = source.straightness !== undefined ? source.straightness : 0.7, dest.up0 = source.up0 !== undefined ? vecCopy(source.up0) : new Vector3(0, 0, 1);\n  dest.up1 = source.up1 !== undefined ? vecCopy(source.up1) : new Vector3(0, 0, 1), dest.radius0 = source.radius0 !== undefined ? source.radius0 : 1, dest.radius1 = source.radius1 !== undefined ? source.radius1 : 1, dest.radius0Factor = source.radius0Factor !== undefined ? source.radius0Factor : 0.5, dest.radius1Factor = source.radius1Factor !== undefined ? source.radius1Factor : 0.2, dest.minRadius = source.minRadius !== undefined ? source.minRadius : 0.2, // These parameters should not be changed after lightning creation. They can be changed but the ray will change its form abruptly:\n  dest.isEternal = source.isEternal !== undefined ? source.isEternal : source.birthTime === undefined || source.deathTime === undefined, dest.birthTime = source.birthTime, dest.deathTime = source.deathTime, dest.propagationTimeFactor = source.propagationTimeFactor !== undefined ? source.propagationTimeFactor : 0.1, dest.vanishingTimeFactor = source.vanishingTimeFactor !== undefined ? source.vanishingTimeFactor : 0.9, dest.subrayPeriod = source.subrayPeriod !== undefined ? source.subrayPeriod : 4, dest.subrayDutyCycle = source.subrayDutyCycle !== undefined ? source.subrayDutyCycle : 0.6; // These parameters cannot change after lightning creation:\n\n  dest.maxIterations = source.maxIterations !== undefined ? source.maxIterations : 9;\n  dest.isStatic = source.isStatic !== undefined ? source.isStatic : false;\n  dest.ramification = source.ramification !== undefined ? source.ramification : 5;\n  dest.maxSubrayRecursion = source.maxSubrayRecursion !== undefined ? source.maxSubrayRecursion : 3;\n  dest.recursionProbability = source.recursionProbability !== undefined ? source.recursionProbability : 0.6;\n  dest.generateUVs = source.generateUVs !== undefined ? source.generateUVs : false;\n  dest.randomGenerator = source.randomGenerator, dest.noiseSeed = source.noiseSeed, dest.onDecideSubrayCreation = source.onDecideSubrayCreation, dest.onSubrayCreation = source.onSubrayCreation;\n  return dest;\n};\n\nexport { LightningStrike };\n"]},"metadata":{},"sourceType":"module"}