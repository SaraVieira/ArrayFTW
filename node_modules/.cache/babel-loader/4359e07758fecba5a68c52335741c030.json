{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BufferGeometry, Matrix4, Vector3, Vector4, BufferAttribute } from 'three';\n/**\n * Tessellates the famous Utah teapot database by Martin Newell into triangles.\n *\n * Parameters: size = 50, segments = 10, bottom = true, lid = true, body = true,\n *   fitLid = false, blinn = true\n *\n * size is a relative scale: I've scaled the teapot to fit vertically between -1 and 1.\n * Think of it as a \"radius\".\n * segments - number of line segments to subdivide each patch edge;\n *   1 is possible but gives degenerates, so two is the real minimum.\n * bottom - boolean, if true (default) then the bottom patches are added. Some consider\n *   adding the bottom heresy, so set this to \"false\" to adhere to the One True Way.\n * lid - to remove the lid and look inside, set to true.\n * body - to remove the body and leave the lid, set this and \"bottom\" to false.\n * fitLid - the lid is a tad small in the original. This stretches it a bit so you can't\n *   see the teapot's insides through the gap.\n * blinn - Jim Blinn scaled the original data vertically by dividing by about 1.3 to look\n *   nicer. If you want to see the original teapot, similar to the real-world model, set\n *   this to false. True by default.\n *   See http://en.wikipedia.org/wiki/File:Original_Utah_Teapot.jpg for the original\n *   real-world teapot (from http://en.wikipedia.org/wiki/Utah_teapot).\n *\n * Note that the bottom (the last four patches) is not flat - blame Frank Crow, not me.\n *\n * The teapot should normally be rendered as a double sided object, since for some\n * patches both sides can be seen, e.g., the gap around the lid and inside the spout.\n *\n * Segments 'n' determines the number of triangles output.\n *   Total triangles = 32*2*n*n - 8*n    [degenerates at the top and bottom cusps are deleted]\n *\n *   size_factor   # triangles\n *       1          56\n *       2         240\n *       3         552\n *       4         992\n *\n *      10        6320\n *      20       25440\n *      30       57360\n *\n * Code converted from my ancient SPD software, http://tog.acm.org/resources/SPD/\n * Created for the Udacity course \"Interactive Rendering\", http://bit.ly/ericity\n * Lesson: https://www.udacity.com/course/viewer#!/c-cs291/l-68866048/m-106482448\n * YouTube video on teapot history: https://www.youtube.com/watch?v=DxMfblPzFNc\n *\n * See https://en.wikipedia.org/wiki/Utah_teapot for the history of the teapot\n *\n */\n\nvar TeapotGeometry = /*#__PURE__*/function (_BufferGeometry) {\n  _inherits(TeapotGeometry, _BufferGeometry);\n\n  var _super = _createSuper(TeapotGeometry);\n\n  function TeapotGeometry(size, segments, bottom, lid, body, fitLid, blinn) {\n    var _this;\n\n    _classCallCheck(this, TeapotGeometry);\n\n    // 32 * 4 * 4 Bezier spline patches\n    var teapotPatches = [\n    /*rim*/\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 3, 16, 17, 18, 7, 19, 20, 21, 11, 22, 23, 24, 15, 25, 26, 27, 18, 28, 29, 30, 21, 31, 32, 33, 24, 34, 35, 36, 27, 37, 38, 39, 30, 40, 41, 0, 33, 42, 43, 4, 36, 44, 45, 8, 39, 46, 47, 12,\n    /*body*/\n    12, 13, 14, 15, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 15, 25, 26, 27, 51, 60, 61, 62, 55, 63, 64, 65, 59, 66, 67, 68, 27, 37, 38, 39, 62, 69, 70, 71, 65, 72, 73, 74, 68, 75, 76, 77, 39, 46, 47, 12, 71, 78, 79, 48, 74, 80, 81, 52, 77, 82, 83, 56, 56, 57, 58, 59, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 59, 66, 67, 68, 87, 96, 97, 98, 91, 99, 100, 101, 95, 102, 103, 104, 68, 75, 76, 77, 98, 105, 106, 107, 101, 108, 109, 110, 104, 111, 112, 113, 77, 82, 83, 56, 107, 114, 115, 84, 110, 116, 117, 88, 113, 118, 119, 92,\n    /*handle*/\n    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 123, 136, 137, 120, 127, 138, 139, 124, 131, 140, 141, 128, 135, 142, 143, 132, 132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 68, 152, 153, 154, 135, 142, 143, 132, 147, 155, 156, 144, 151, 157, 158, 148, 154, 159, 160, 68,\n    /*spout*/\n    161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 164, 177, 178, 161, 168, 179, 180, 165, 172, 181, 182, 169, 176, 183, 184, 173, 173, 174, 175, 176, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 176, 183, 184, 173, 188, 197, 198, 185, 192, 199, 200, 189, 196, 201, 202, 193,\n    /*lid*/\n    203, 203, 203, 203, 204, 205, 206, 207, 208, 208, 208, 208, 209, 210, 211, 212, 203, 203, 203, 203, 207, 213, 214, 215, 208, 208, 208, 208, 212, 216, 217, 218, 203, 203, 203, 203, 215, 219, 220, 221, 208, 208, 208, 208, 218, 222, 223, 224, 203, 203, 203, 203, 221, 225, 226, 204, 208, 208, 208, 208, 224, 227, 228, 209, 209, 210, 211, 212, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 212, 216, 217, 218, 232, 241, 242, 243, 236, 244, 245, 246, 240, 247, 248, 249, 218, 222, 223, 224, 243, 250, 251, 252, 246, 253, 254, 255, 249, 256, 257, 258, 224, 227, 228, 209, 252, 259, 260, 229, 255, 261, 262, 233, 258, 263, 264, 237,\n    /*bottom*/\n    265, 265, 265, 265, 266, 267, 268, 269, 270, 271, 272, 273, 92, 119, 118, 113, 265, 265, 265, 265, 269, 274, 275, 276, 273, 277, 278, 279, 113, 112, 111, 104, 265, 265, 265, 265, 276, 280, 281, 282, 279, 283, 284, 285, 104, 103, 102, 95, 265, 265, 265, 265, 282, 286, 287, 266, 285, 288, 289, 270, 95, 94, 93, 92];\n    var teapotVertices = [1.4, 0, 2.4, 1.4, -0.784, 2.4, 0.784, -1.4, 2.4, 0, -1.4, 2.4, 1.3375, 0, 2.53125, 1.3375, -0.749, 2.53125, 0.749, -1.3375, 2.53125, 0, -1.3375, 2.53125, 1.4375, 0, 2.53125, 1.4375, -0.805, 2.53125, 0.805, -1.4375, 2.53125, 0, -1.4375, 2.53125, 1.5, 0, 2.4, 1.5, -0.84, 2.4, 0.84, -1.5, 2.4, 0, -1.5, 2.4, -0.784, -1.4, 2.4, -1.4, -0.784, 2.4, -1.4, 0, 2.4, -0.749, -1.3375, 2.53125, -1.3375, -0.749, 2.53125, -1.3375, 0, 2.53125, -0.805, -1.4375, 2.53125, -1.4375, -0.805, 2.53125, -1.4375, 0, 2.53125, -0.84, -1.5, 2.4, -1.5, -0.84, 2.4, -1.5, 0, 2.4, -1.4, 0.784, 2.4, -0.784, 1.4, 2.4, 0, 1.4, 2.4, -1.3375, 0.749, 2.53125, -0.749, 1.3375, 2.53125, 0, 1.3375, 2.53125, -1.4375, 0.805, 2.53125, -0.805, 1.4375, 2.53125, 0, 1.4375, 2.53125, -1.5, 0.84, 2.4, -0.84, 1.5, 2.4, 0, 1.5, 2.4, 0.784, 1.4, 2.4, 1.4, 0.784, 2.4, 0.749, 1.3375, 2.53125, 1.3375, 0.749, 2.53125, 0.805, 1.4375, 2.53125, 1.4375, 0.805, 2.53125, 0.84, 1.5, 2.4, 1.5, 0.84, 2.4, 1.75, 0, 1.875, 1.75, -0.98, 1.875, 0.98, -1.75, 1.875, 0, -1.75, 1.875, 2, 0, 1.35, 2, -1.12, 1.35, 1.12, -2, 1.35, 0, -2, 1.35, 2, 0, 0.9, 2, -1.12, 0.9, 1.12, -2, 0.9, 0, -2, 0.9, -0.98, -1.75, 1.875, -1.75, -0.98, 1.875, -1.75, 0, 1.875, -1.12, -2, 1.35, -2, -1.12, 1.35, -2, 0, 1.35, -1.12, -2, 0.9, -2, -1.12, 0.9, -2, 0, 0.9, -1.75, 0.98, 1.875, -0.98, 1.75, 1.875, 0, 1.75, 1.875, -2, 1.12, 1.35, -1.12, 2, 1.35, 0, 2, 1.35, -2, 1.12, 0.9, -1.12, 2, 0.9, 0, 2, 0.9, 0.98, 1.75, 1.875, 1.75, 0.98, 1.875, 1.12, 2, 1.35, 2, 1.12, 1.35, 1.12, 2, 0.9, 2, 1.12, 0.9, 2, 0, 0.45, 2, -1.12, 0.45, 1.12, -2, 0.45, 0, -2, 0.45, 1.5, 0, 0.225, 1.5, -0.84, 0.225, 0.84, -1.5, 0.225, 0, -1.5, 0.225, 1.5, 0, 0.15, 1.5, -0.84, 0.15, 0.84, -1.5, 0.15, 0, -1.5, 0.15, -1.12, -2, 0.45, -2, -1.12, 0.45, -2, 0, 0.45, -0.84, -1.5, 0.225, -1.5, -0.84, 0.225, -1.5, 0, 0.225, -0.84, -1.5, 0.15, -1.5, -0.84, 0.15, -1.5, 0, 0.15, -2, 1.12, 0.45, -1.12, 2, 0.45, 0, 2, 0.45, -1.5, 0.84, 0.225, -0.84, 1.5, 0.225, 0, 1.5, 0.225, -1.5, 0.84, 0.15, -0.84, 1.5, 0.15, 0, 1.5, 0.15, 1.12, 2, 0.45, 2, 1.12, 0.45, 0.84, 1.5, 0.225, 1.5, 0.84, 0.225, 0.84, 1.5, 0.15, 1.5, 0.84, 0.15, -1.6, 0, 2.025, -1.6, -0.3, 2.025, -1.5, -0.3, 2.25, -1.5, 0, 2.25, -2.3, 0, 2.025, -2.3, -0.3, 2.025, -2.5, -0.3, 2.25, -2.5, 0, 2.25, -2.7, 0, 2.025, -2.7, -0.3, 2.025, -3, -0.3, 2.25, -3, 0, 2.25, -2.7, 0, 1.8, -2.7, -0.3, 1.8, -3, -0.3, 1.8, -3, 0, 1.8, -1.5, 0.3, 2.25, -1.6, 0.3, 2.025, -2.5, 0.3, 2.25, -2.3, 0.3, 2.025, -3, 0.3, 2.25, -2.7, 0.3, 2.025, -3, 0.3, 1.8, -2.7, 0.3, 1.8, -2.7, 0, 1.575, -2.7, -0.3, 1.575, -3, -0.3, 1.35, -3, 0, 1.35, -2.5, 0, 1.125, -2.5, -0.3, 1.125, -2.65, -0.3, 0.9375, -2.65, 0, 0.9375, -2, -0.3, 0.9, -1.9, -0.3, 0.6, -1.9, 0, 0.6, -3, 0.3, 1.35, -2.7, 0.3, 1.575, -2.65, 0.3, 0.9375, -2.5, 0.3, 1.125, -1.9, 0.3, 0.6, -2, 0.3, 0.9, 1.7, 0, 1.425, 1.7, -0.66, 1.425, 1.7, -0.66, 0.6, 1.7, 0, 0.6, 2.6, 0, 1.425, 2.6, -0.66, 1.425, 3.1, -0.66, 0.825, 3.1, 0, 0.825, 2.3, 0, 2.1, 2.3, -0.25, 2.1, 2.4, -0.25, 2.025, 2.4, 0, 2.025, 2.7, 0, 2.4, 2.7, -0.25, 2.4, 3.3, -0.25, 2.4, 3.3, 0, 2.4, 1.7, 0.66, 0.6, 1.7, 0.66, 1.425, 3.1, 0.66, 0.825, 2.6, 0.66, 1.425, 2.4, 0.25, 2.025, 2.3, 0.25, 2.1, 3.3, 0.25, 2.4, 2.7, 0.25, 2.4, 2.8, 0, 2.475, 2.8, -0.25, 2.475, 3.525, -0.25, 2.49375, 3.525, 0, 2.49375, 2.9, 0, 2.475, 2.9, -0.15, 2.475, 3.45, -0.15, 2.5125, 3.45, 0, 2.5125, 2.8, 0, 2.4, 2.8, -0.15, 2.4, 3.2, -0.15, 2.4, 3.2, 0, 2.4, 3.525, 0.25, 2.49375, 2.8, 0.25, 2.475, 3.45, 0.15, 2.5125, 2.9, 0.15, 2.475, 3.2, 0.15, 2.4, 2.8, 0.15, 2.4, 0, 0, 3.15, 0.8, 0, 3.15, 0.8, -0.45, 3.15, 0.45, -0.8, 3.15, 0, -0.8, 3.15, 0, 0, 2.85, 0.2, 0, 2.7, 0.2, -0.112, 2.7, 0.112, -0.2, 2.7, 0, -0.2, 2.7, -0.45, -0.8, 3.15, -0.8, -0.45, 3.15, -0.8, 0, 3.15, -0.112, -0.2, 2.7, -0.2, -0.112, 2.7, -0.2, 0, 2.7, -0.8, 0.45, 3.15, -0.45, 0.8, 3.15, 0, 0.8, 3.15, -0.2, 0.112, 2.7, -0.112, 0.2, 2.7, 0, 0.2, 2.7, 0.45, 0.8, 3.15, 0.8, 0.45, 3.15, 0.112, 0.2, 2.7, 0.2, 0.112, 2.7, 0.4, 0, 2.55, 0.4, -0.224, 2.55, 0.224, -0.4, 2.55, 0, -0.4, 2.55, 1.3, 0, 2.55, 1.3, -0.728, 2.55, 0.728, -1.3, 2.55, 0, -1.3, 2.55, 1.3, 0, 2.4, 1.3, -0.728, 2.4, 0.728, -1.3, 2.4, 0, -1.3, 2.4, -0.224, -0.4, 2.55, -0.4, -0.224, 2.55, -0.4, 0, 2.55, -0.728, -1.3, 2.55, -1.3, -0.728, 2.55, -1.3, 0, 2.55, -0.728, -1.3, 2.4, -1.3, -0.728, 2.4, -1.3, 0, 2.4, -0.4, 0.224, 2.55, -0.224, 0.4, 2.55, 0, 0.4, 2.55, -1.3, 0.728, 2.55, -0.728, 1.3, 2.55, 0, 1.3, 2.55, -1.3, 0.728, 2.4, -0.728, 1.3, 2.4, 0, 1.3, 2.4, 0.224, 0.4, 2.55, 0.4, 0.224, 2.55, 0.728, 1.3, 2.55, 1.3, 0.728, 2.55, 0.728, 1.3, 2.4, 1.3, 0.728, 2.4, 0, 0, 0, 1.425, 0, 0, 1.425, 0.798, 0, 0.798, 1.425, 0, 0, 1.425, 0, 1.5, 0, 0.075, 1.5, 0.84, 0.075, 0.84, 1.5, 0.075, 0, 1.5, 0.075, -0.798, 1.425, 0, -1.425, 0.798, 0, -1.425, 0, 0, -0.84, 1.5, 0.075, -1.5, 0.84, 0.075, -1.5, 0, 0.075, -1.425, -0.798, 0, -0.798, -1.425, 0, 0, -1.425, 0, -1.5, -0.84, 0.075, -0.84, -1.5, 0.075, 0, -1.5, 0.075, 0.798, -1.425, 0, 1.425, -0.798, 0, 0.84, -1.5, 0.075, 1.5, -0.84, 0.075];\n    _this = _super.call(this);\n    size = size || 50; // number of segments per patch\n\n    segments = segments !== undefined ? Math.max(2, Math.floor(segments) || 10) : 10; // which parts should be visible\n\n    bottom = bottom === undefined ? true : bottom;\n    lid = lid === undefined ? true : lid;\n    body = body === undefined ? true : body; // Should the lid be snug? It's not traditional, but we make it snug by default\n\n    fitLid = fitLid === undefined ? true : fitLid; // Jim Blinn scaled the teapot down in size by about 1.3 for\n    // some rendering tests. He liked the new proportions that he kept\n    // the data in this form. The model was distributed with these new\n    // proportions and became the norm. Trivia: comparing images of the\n    // real teapot and the computer model, the ratio for the bowl of the\n    // real teapot is more like 1.25, but since 1.3 is the traditional\n    // value given, we use it here.\n\n    var blinnScale = 1.3;\n    blinn = blinn === undefined ? true : blinn; // scale the size to be the real scaling factor\n\n    var maxHeight = 3.15 * (blinn ? 1 : blinnScale);\n    var maxHeight2 = maxHeight / 2;\n    var trueSize = size / maxHeight2; // Number of elements depends on what is needed. Subtract degenerate\n    // triangles at tip of bottom and lid out in advance.\n\n    var numTriangles = bottom ? (8 * segments - 4) * segments : 0;\n    numTriangles += lid ? (16 * segments - 4) * segments : 0;\n    numTriangles += body ? 40 * segments * segments : 0;\n    var indices = new Uint32Array(numTriangles * 3);\n    var numVertices = bottom ? 4 : 0;\n    numVertices += lid ? 8 : 0;\n    numVertices += body ? 20 : 0;\n    numVertices *= (segments + 1) * (segments + 1);\n    var vertices = new Float32Array(numVertices * 3);\n    var normals = new Float32Array(numVertices * 3);\n    var uvs = new Float32Array(numVertices * 2); // Bezier form\n\n    var ms = new Matrix4();\n    ms.set(-1.0, 3.0, -3.0, 1.0, 3.0, -6.0, 3.0, 0.0, -3.0, 3.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0);\n    var g = [];\n    var i, r, c;\n    var sp = [];\n    var tp = [];\n    var dsp = [];\n    var dtp = []; // M * G * M matrix, sort of see\n    // http://www.cs.helsinki.fi/group/goa/mallinnus/curves/surfaces.html\n\n    var mgm = [];\n    var vert = [];\n    var sdir = [];\n    var tdir = [];\n    var norm = new Vector3();\n    var tcoord;\n    var sstep, tstep;\n    var vertPerRow;\n    var s, t, sval, tval, p;\n    var dsval = 0;\n    var dtval = 0;\n    var normOut = new Vector3();\n    var v1, v2, v3, v4;\n    var gmx = new Matrix4();\n    var tmtx = new Matrix4();\n    var vsp = new Vector4();\n    var vtp = new Vector4();\n    var vdsp = new Vector4();\n    var vdtp = new Vector4();\n    var vsdir = new Vector3();\n    var vtdir = new Vector3();\n    var mst = ms.clone();\n    mst.transpose(); // internal function: test if triangle has any matching vertices;\n    // if so, don't save triangle, since it won't display anything.\n\n    var notDegenerate = function notDegenerate(vtx1, vtx2, vtx3) {\n      return (// if any vertex matches, return false\n        !(vertices[vtx1 * 3] === vertices[vtx2 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx2 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx2 * 3 + 2] || vertices[vtx1 * 3] === vertices[vtx3 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx3 * 3 + 2] || vertices[vtx2 * 3] === vertices[vtx3 * 3] && vertices[vtx2 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx2 * 3 + 2] === vertices[vtx3 * 3 + 2])\n      );\n    };\n\n    for (i = 0; i < 3; i++) {\n      mgm[i] = new Matrix4();\n    }\n\n    var minPatches = body ? 0 : 20;\n    var maxPatches = bottom ? 32 : 28;\n    vertPerRow = segments + 1;\n    var surfCount = 0;\n    var vertCount = 0;\n    var normCount = 0;\n    var uvCount = 0;\n    var indexCount = 0;\n\n    for (var surf = minPatches; surf < maxPatches; surf++) {\n      // lid is in the middle of the data, patches 20-27,\n      // so ignore it for this part of the loop if the lid is not desired\n      if (lid || surf < 20 || surf >= 28) {\n        // get M * G * M matrix for x,y,z\n        for (i = 0; i < 3; i++) {\n          // get control patches\n          for (r = 0; r < 4; r++) {\n            for (c = 0; c < 4; c++) {\n              // transposed\n              g[c * 4 + r] = teapotVertices[teapotPatches[surf * 16 + r * 4 + c] * 3 + i]; // is the lid to be made larger, and is this a point on the lid\n              // that is X or Y?\n\n              if (fitLid && surf >= 20 && surf < 28 && i !== 2) {\n                // increase XY size by 7.7%, found empirically. I don't\n                // increase Z so that the teapot will continue to fit in the\n                // space -1 to 1 for Y (Y is up for the final model).\n                g[c * 4 + r] *= 1.077;\n              } // Blinn \"fixed\" the teapot by dividing Z by blinnScale, and that's the\n              // data we now use. The original teapot is taller. Fix it:\n\n\n              if (!blinn && i === 2) {\n                g[c * 4 + r] *= blinnScale;\n              }\n            }\n          }\n\n          gmx.set(g[0], g[1], g[2], g[3], g[4], g[5], g[6], g[7], g[8], g[9], g[10], g[11], g[12], g[13], g[14], g[15]);\n          tmtx.multiplyMatrices(gmx, ms);\n          mgm[i].multiplyMatrices(mst, tmtx);\n        } // step along, get points, and output\n\n\n        for (sstep = 0; sstep <= segments; sstep++) {\n          s = sstep / segments;\n\n          for (tstep = 0; tstep <= segments; tstep++) {\n            t = tstep / segments; // point from basis\n            // get power vectors and their derivatives\n\n            for (p = 4, sval = tval = 1.0; p--;) {\n              sp[p] = sval;\n              tp[p] = tval;\n              sval *= s;\n              tval *= t;\n\n              if (p === 3) {\n                dsp[p] = dtp[p] = 0.0;\n                dsval = dtval = 1.0;\n              } else {\n                dsp[p] = dsval * (3 - p);\n                dtp[p] = dtval * (3 - p);\n                dsval *= s;\n                dtval *= t;\n              }\n            }\n\n            vsp.fromArray(sp);\n            vtp.fromArray(tp);\n            vdsp.fromArray(dsp);\n            vdtp.fromArray(dtp); // do for x,y,z\n\n            for (i = 0; i < 3; i++) {\n              // multiply power vectors times matrix to get value\n              tcoord = vsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              vert[i] = tcoord.dot(vtp); // get s and t tangent vectors\n\n              tcoord = vdsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              sdir[i] = tcoord.dot(vtp);\n              tcoord = vsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              tdir[i] = tcoord.dot(vdtp);\n            } // find normal\n\n\n            vsdir.fromArray(sdir);\n            vtdir.fromArray(tdir);\n            norm.crossVectors(vtdir, vsdir);\n            norm.normalize(); // if X and Z length is 0, at the cusp, so point the normal up or down, depending on patch number\n\n            if (vert[0] === 0 && vert[1] === 0) {\n              // if above the middle of the teapot, normal points up, else down\n              normOut.set(0, vert[2] > maxHeight2 ? 1 : -1, 0);\n            } else {\n              // standard output: rotate on X axis\n              normOut.set(norm.x, norm.z, -norm.y);\n            } // store it all\n\n\n            vertices[vertCount++] = trueSize * vert[0];\n            vertices[vertCount++] = trueSize * (vert[2] - maxHeight2);\n            vertices[vertCount++] = -trueSize * vert[1];\n            normals[normCount++] = normOut.x;\n            normals[normCount++] = normOut.y;\n            normals[normCount++] = normOut.z;\n            uvs[uvCount++] = 1 - t;\n            uvs[uvCount++] = 1 - s;\n          }\n        } // save the faces\n\n\n        for (sstep = 0; sstep < segments; sstep++) {\n          for (tstep = 0; tstep < segments; tstep++) {\n            v1 = surfCount * vertPerRow * vertPerRow + sstep * vertPerRow + tstep;\n            v2 = v1 + 1;\n            v3 = v2 + vertPerRow;\n            v4 = v1 + vertPerRow; // Normals and UVs cannot be shared. Without clone(), you can see the consequences\n            // of sharing if you call geometry.applyMatrix4( matrix ).\n\n            if (notDegenerate(v1, v2, v3)) {\n              indices[indexCount++] = v1;\n              indices[indexCount++] = v2;\n              indices[indexCount++] = v3;\n            }\n\n            if (notDegenerate(v1, v3, v4)) {\n              indices[indexCount++] = v1;\n              indices[indexCount++] = v3;\n              indices[indexCount++] = v4;\n            }\n          }\n        } // increment only if a surface was used\n\n\n        surfCount++;\n      }\n    }\n\n    _this.setIndex(new BufferAttribute(indices, 1));\n\n    _this.setAttribute('position', new BufferAttribute(vertices, 3));\n\n    _this.setAttribute('normal', new BufferAttribute(normals, 3));\n\n    _this.setAttribute('uv', new BufferAttribute(uvs, 2));\n\n    _this.computeBoundingSphere();\n\n    return _this;\n  }\n\n  return TeapotGeometry;\n}(BufferGeometry);\n\nexport { TeapotGeometry };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/geometries/TeapotGeometry.js"],"names":["BufferGeometry","Matrix4","Vector3","Vector4","BufferAttribute","TeapotGeometry","size","segments","bottom","lid","body","fitLid","blinn","teapotPatches","teapotVertices","undefined","Math","max","floor","blinnScale","maxHeight","maxHeight2","trueSize","numTriangles","indices","Uint32Array","numVertices","vertices","Float32Array","normals","uvs","ms","set","g","i","r","c","sp","tp","dsp","dtp","mgm","vert","sdir","tdir","norm","tcoord","sstep","tstep","vertPerRow","s","t","sval","tval","p","dsval","dtval","normOut","v1","v2","v3","v4","gmx","tmtx","vsp","vtp","vdsp","vdtp","vsdir","vtdir","mst","clone","transpose","notDegenerate","vtx1","vtx2","vtx3","minPatches","maxPatches","surfCount","vertCount","normCount","uvCount","indexCount","surf","multiplyMatrices","fromArray","applyMatrix4","dot","crossVectors","normalize","x","z","y","setIndex","setAttribute","computeBoundingSphere"],"mappings":"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","sourcesContent":["import { BufferGeometry, Matrix4, Vector3, Vector4, BufferAttribute } from 'three';\n\n/**\n * Tessellates the famous Utah teapot database by Martin Newell into triangles.\n *\n * Parameters: size = 50, segments = 10, bottom = true, lid = true, body = true,\n *   fitLid = false, blinn = true\n *\n * size is a relative scale: I've scaled the teapot to fit vertically between -1 and 1.\n * Think of it as a \"radius\".\n * segments - number of line segments to subdivide each patch edge;\n *   1 is possible but gives degenerates, so two is the real minimum.\n * bottom - boolean, if true (default) then the bottom patches are added. Some consider\n *   adding the bottom heresy, so set this to \"false\" to adhere to the One True Way.\n * lid - to remove the lid and look inside, set to true.\n * body - to remove the body and leave the lid, set this and \"bottom\" to false.\n * fitLid - the lid is a tad small in the original. This stretches it a bit so you can't\n *   see the teapot's insides through the gap.\n * blinn - Jim Blinn scaled the original data vertically by dividing by about 1.3 to look\n *   nicer. If you want to see the original teapot, similar to the real-world model, set\n *   this to false. True by default.\n *   See http://en.wikipedia.org/wiki/File:Original_Utah_Teapot.jpg for the original\n *   real-world teapot (from http://en.wikipedia.org/wiki/Utah_teapot).\n *\n * Note that the bottom (the last four patches) is not flat - blame Frank Crow, not me.\n *\n * The teapot should normally be rendered as a double sided object, since for some\n * patches both sides can be seen, e.g., the gap around the lid and inside the spout.\n *\n * Segments 'n' determines the number of triangles output.\n *   Total triangles = 32*2*n*n - 8*n    [degenerates at the top and bottom cusps are deleted]\n *\n *   size_factor   # triangles\n *       1          56\n *       2         240\n *       3         552\n *       4         992\n *\n *      10        6320\n *      20       25440\n *      30       57360\n *\n * Code converted from my ancient SPD software, http://tog.acm.org/resources/SPD/\n * Created for the Udacity course \"Interactive Rendering\", http://bit.ly/ericity\n * Lesson: https://www.udacity.com/course/viewer#!/c-cs291/l-68866048/m-106482448\n * YouTube video on teapot history: https://www.youtube.com/watch?v=DxMfblPzFNc\n *\n * See https://en.wikipedia.org/wiki/Utah_teapot for the history of the teapot\n *\n */\n\nclass TeapotGeometry extends BufferGeometry {\n  constructor(size, segments, bottom, lid, body, fitLid, blinn) {\n    // 32 * 4 * 4 Bezier spline patches\n    const teapotPatches = [\n    /*rim*/\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 3, 16, 17, 18, 7, 19, 20, 21, 11, 22, 23, 24, 15, 25, 26, 27, 18, 28, 29, 30, 21, 31, 32, 33, 24, 34, 35, 36, 27, 37, 38, 39, 30, 40, 41, 0, 33, 42, 43, 4, 36, 44, 45, 8, 39, 46, 47, 12,\n    /*body*/\n    12, 13, 14, 15, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 15, 25, 26, 27, 51, 60, 61, 62, 55, 63, 64, 65, 59, 66, 67, 68, 27, 37, 38, 39, 62, 69, 70, 71, 65, 72, 73, 74, 68, 75, 76, 77, 39, 46, 47, 12, 71, 78, 79, 48, 74, 80, 81, 52, 77, 82, 83, 56, 56, 57, 58, 59, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 59, 66, 67, 68, 87, 96, 97, 98, 91, 99, 100, 101, 95, 102, 103, 104, 68, 75, 76, 77, 98, 105, 106, 107, 101, 108, 109, 110, 104, 111, 112, 113, 77, 82, 83, 56, 107, 114, 115, 84, 110, 116, 117, 88, 113, 118, 119, 92,\n    /*handle*/\n    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 123, 136, 137, 120, 127, 138, 139, 124, 131, 140, 141, 128, 135, 142, 143, 132, 132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 68, 152, 153, 154, 135, 142, 143, 132, 147, 155, 156, 144, 151, 157, 158, 148, 154, 159, 160, 68,\n    /*spout*/\n    161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 164, 177, 178, 161, 168, 179, 180, 165, 172, 181, 182, 169, 176, 183, 184, 173, 173, 174, 175, 176, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 176, 183, 184, 173, 188, 197, 198, 185, 192, 199, 200, 189, 196, 201, 202, 193,\n    /*lid*/\n    203, 203, 203, 203, 204, 205, 206, 207, 208, 208, 208, 208, 209, 210, 211, 212, 203, 203, 203, 203, 207, 213, 214, 215, 208, 208, 208, 208, 212, 216, 217, 218, 203, 203, 203, 203, 215, 219, 220, 221, 208, 208, 208, 208, 218, 222, 223, 224, 203, 203, 203, 203, 221, 225, 226, 204, 208, 208, 208, 208, 224, 227, 228, 209, 209, 210, 211, 212, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 212, 216, 217, 218, 232, 241, 242, 243, 236, 244, 245, 246, 240, 247, 248, 249, 218, 222, 223, 224, 243, 250, 251, 252, 246, 253, 254, 255, 249, 256, 257, 258, 224, 227, 228, 209, 252, 259, 260, 229, 255, 261, 262, 233, 258, 263, 264, 237,\n    /*bottom*/\n    265, 265, 265, 265, 266, 267, 268, 269, 270, 271, 272, 273, 92, 119, 118, 113, 265, 265, 265, 265, 269, 274, 275, 276, 273, 277, 278, 279, 113, 112, 111, 104, 265, 265, 265, 265, 276, 280, 281, 282, 279, 283, 284, 285, 104, 103, 102, 95, 265, 265, 265, 265, 282, 286, 287, 266, 285, 288, 289, 270, 95, 94, 93, 92];\n    const teapotVertices = [1.4, 0, 2.4, 1.4, -0.784, 2.4, 0.784, -1.4, 2.4, 0, -1.4, 2.4, 1.3375, 0, 2.53125, 1.3375, -0.749, 2.53125, 0.749, -1.3375, 2.53125, 0, -1.3375, 2.53125, 1.4375, 0, 2.53125, 1.4375, -0.805, 2.53125, 0.805, -1.4375, 2.53125, 0, -1.4375, 2.53125, 1.5, 0, 2.4, 1.5, -0.84, 2.4, 0.84, -1.5, 2.4, 0, -1.5, 2.4, -0.784, -1.4, 2.4, -1.4, -0.784, 2.4, -1.4, 0, 2.4, -0.749, -1.3375, 2.53125, -1.3375, -0.749, 2.53125, -1.3375, 0, 2.53125, -0.805, -1.4375, 2.53125, -1.4375, -0.805, 2.53125, -1.4375, 0, 2.53125, -0.84, -1.5, 2.4, -1.5, -0.84, 2.4, -1.5, 0, 2.4, -1.4, 0.784, 2.4, -0.784, 1.4, 2.4, 0, 1.4, 2.4, -1.3375, 0.749, 2.53125, -0.749, 1.3375, 2.53125, 0, 1.3375, 2.53125, -1.4375, 0.805, 2.53125, -0.805, 1.4375, 2.53125, 0, 1.4375, 2.53125, -1.5, 0.84, 2.4, -0.84, 1.5, 2.4, 0, 1.5, 2.4, 0.784, 1.4, 2.4, 1.4, 0.784, 2.4, 0.749, 1.3375, 2.53125, 1.3375, 0.749, 2.53125, 0.805, 1.4375, 2.53125, 1.4375, 0.805, 2.53125, 0.84, 1.5, 2.4, 1.5, 0.84, 2.4, 1.75, 0, 1.875, 1.75, -0.98, 1.875, 0.98, -1.75, 1.875, 0, -1.75, 1.875, 2, 0, 1.35, 2, -1.12, 1.35, 1.12, -2, 1.35, 0, -2, 1.35, 2, 0, 0.9, 2, -1.12, 0.9, 1.12, -2, 0.9, 0, -2, 0.9, -0.98, -1.75, 1.875, -1.75, -0.98, 1.875, -1.75, 0, 1.875, -1.12, -2, 1.35, -2, -1.12, 1.35, -2, 0, 1.35, -1.12, -2, 0.9, -2, -1.12, 0.9, -2, 0, 0.9, -1.75, 0.98, 1.875, -0.98, 1.75, 1.875, 0, 1.75, 1.875, -2, 1.12, 1.35, -1.12, 2, 1.35, 0, 2, 1.35, -2, 1.12, 0.9, -1.12, 2, 0.9, 0, 2, 0.9, 0.98, 1.75, 1.875, 1.75, 0.98, 1.875, 1.12, 2, 1.35, 2, 1.12, 1.35, 1.12, 2, 0.9, 2, 1.12, 0.9, 2, 0, 0.45, 2, -1.12, 0.45, 1.12, -2, 0.45, 0, -2, 0.45, 1.5, 0, 0.225, 1.5, -0.84, 0.225, 0.84, -1.5, 0.225, 0, -1.5, 0.225, 1.5, 0, 0.15, 1.5, -0.84, 0.15, 0.84, -1.5, 0.15, 0, -1.5, 0.15, -1.12, -2, 0.45, -2, -1.12, 0.45, -2, 0, 0.45, -0.84, -1.5, 0.225, -1.5, -0.84, 0.225, -1.5, 0, 0.225, -0.84, -1.5, 0.15, -1.5, -0.84, 0.15, -1.5, 0, 0.15, -2, 1.12, 0.45, -1.12, 2, 0.45, 0, 2, 0.45, -1.5, 0.84, 0.225, -0.84, 1.5, 0.225, 0, 1.5, 0.225, -1.5, 0.84, 0.15, -0.84, 1.5, 0.15, 0, 1.5, 0.15, 1.12, 2, 0.45, 2, 1.12, 0.45, 0.84, 1.5, 0.225, 1.5, 0.84, 0.225, 0.84, 1.5, 0.15, 1.5, 0.84, 0.15, -1.6, 0, 2.025, -1.6, -0.3, 2.025, -1.5, -0.3, 2.25, -1.5, 0, 2.25, -2.3, 0, 2.025, -2.3, -0.3, 2.025, -2.5, -0.3, 2.25, -2.5, 0, 2.25, -2.7, 0, 2.025, -2.7, -0.3, 2.025, -3, -0.3, 2.25, -3, 0, 2.25, -2.7, 0, 1.8, -2.7, -0.3, 1.8, -3, -0.3, 1.8, -3, 0, 1.8, -1.5, 0.3, 2.25, -1.6, 0.3, 2.025, -2.5, 0.3, 2.25, -2.3, 0.3, 2.025, -3, 0.3, 2.25, -2.7, 0.3, 2.025, -3, 0.3, 1.8, -2.7, 0.3, 1.8, -2.7, 0, 1.575, -2.7, -0.3, 1.575, -3, -0.3, 1.35, -3, 0, 1.35, -2.5, 0, 1.125, -2.5, -0.3, 1.125, -2.65, -0.3, 0.9375, -2.65, 0, 0.9375, -2, -0.3, 0.9, -1.9, -0.3, 0.6, -1.9, 0, 0.6, -3, 0.3, 1.35, -2.7, 0.3, 1.575, -2.65, 0.3, 0.9375, -2.5, 0.3, 1.125, -1.9, 0.3, 0.6, -2, 0.3, 0.9, 1.7, 0, 1.425, 1.7, -0.66, 1.425, 1.7, -0.66, 0.6, 1.7, 0, 0.6, 2.6, 0, 1.425, 2.6, -0.66, 1.425, 3.1, -0.66, 0.825, 3.1, 0, 0.825, 2.3, 0, 2.1, 2.3, -0.25, 2.1, 2.4, -0.25, 2.025, 2.4, 0, 2.025, 2.7, 0, 2.4, 2.7, -0.25, 2.4, 3.3, -0.25, 2.4, 3.3, 0, 2.4, 1.7, 0.66, 0.6, 1.7, 0.66, 1.425, 3.1, 0.66, 0.825, 2.6, 0.66, 1.425, 2.4, 0.25, 2.025, 2.3, 0.25, 2.1, 3.3, 0.25, 2.4, 2.7, 0.25, 2.4, 2.8, 0, 2.475, 2.8, -0.25, 2.475, 3.525, -0.25, 2.49375, 3.525, 0, 2.49375, 2.9, 0, 2.475, 2.9, -0.15, 2.475, 3.45, -0.15, 2.5125, 3.45, 0, 2.5125, 2.8, 0, 2.4, 2.8, -0.15, 2.4, 3.2, -0.15, 2.4, 3.2, 0, 2.4, 3.525, 0.25, 2.49375, 2.8, 0.25, 2.475, 3.45, 0.15, 2.5125, 2.9, 0.15, 2.475, 3.2, 0.15, 2.4, 2.8, 0.15, 2.4, 0, 0, 3.15, 0.8, 0, 3.15, 0.8, -0.45, 3.15, 0.45, -0.8, 3.15, 0, -0.8, 3.15, 0, 0, 2.85, 0.2, 0, 2.7, 0.2, -0.112, 2.7, 0.112, -0.2, 2.7, 0, -0.2, 2.7, -0.45, -0.8, 3.15, -0.8, -0.45, 3.15, -0.8, 0, 3.15, -0.112, -0.2, 2.7, -0.2, -0.112, 2.7, -0.2, 0, 2.7, -0.8, 0.45, 3.15, -0.45, 0.8, 3.15, 0, 0.8, 3.15, -0.2, 0.112, 2.7, -0.112, 0.2, 2.7, 0, 0.2, 2.7, 0.45, 0.8, 3.15, 0.8, 0.45, 3.15, 0.112, 0.2, 2.7, 0.2, 0.112, 2.7, 0.4, 0, 2.55, 0.4, -0.224, 2.55, 0.224, -0.4, 2.55, 0, -0.4, 2.55, 1.3, 0, 2.55, 1.3, -0.728, 2.55, 0.728, -1.3, 2.55, 0, -1.3, 2.55, 1.3, 0, 2.4, 1.3, -0.728, 2.4, 0.728, -1.3, 2.4, 0, -1.3, 2.4, -0.224, -0.4, 2.55, -0.4, -0.224, 2.55, -0.4, 0, 2.55, -0.728, -1.3, 2.55, -1.3, -0.728, 2.55, -1.3, 0, 2.55, -0.728, -1.3, 2.4, -1.3, -0.728, 2.4, -1.3, 0, 2.4, -0.4, 0.224, 2.55, -0.224, 0.4, 2.55, 0, 0.4, 2.55, -1.3, 0.728, 2.55, -0.728, 1.3, 2.55, 0, 1.3, 2.55, -1.3, 0.728, 2.4, -0.728, 1.3, 2.4, 0, 1.3, 2.4, 0.224, 0.4, 2.55, 0.4, 0.224, 2.55, 0.728, 1.3, 2.55, 1.3, 0.728, 2.55, 0.728, 1.3, 2.4, 1.3, 0.728, 2.4, 0, 0, 0, 1.425, 0, 0, 1.425, 0.798, 0, 0.798, 1.425, 0, 0, 1.425, 0, 1.5, 0, 0.075, 1.5, 0.84, 0.075, 0.84, 1.5, 0.075, 0, 1.5, 0.075, -0.798, 1.425, 0, -1.425, 0.798, 0, -1.425, 0, 0, -0.84, 1.5, 0.075, -1.5, 0.84, 0.075, -1.5, 0, 0.075, -1.425, -0.798, 0, -0.798, -1.425, 0, 0, -1.425, 0, -1.5, -0.84, 0.075, -0.84, -1.5, 0.075, 0, -1.5, 0.075, 0.798, -1.425, 0, 1.425, -0.798, 0, 0.84, -1.5, 0.075, 1.5, -0.84, 0.075];\n    super();\n    size = size || 50; // number of segments per patch\n\n    segments = segments !== undefined ? Math.max(2, Math.floor(segments) || 10) : 10; // which parts should be visible\n\n    bottom = bottom === undefined ? true : bottom;\n    lid = lid === undefined ? true : lid;\n    body = body === undefined ? true : body; // Should the lid be snug? It's not traditional, but we make it snug by default\n\n    fitLid = fitLid === undefined ? true : fitLid; // Jim Blinn scaled the teapot down in size by about 1.3 for\n    // some rendering tests. He liked the new proportions that he kept\n    // the data in this form. The model was distributed with these new\n    // proportions and became the norm. Trivia: comparing images of the\n    // real teapot and the computer model, the ratio for the bowl of the\n    // real teapot is more like 1.25, but since 1.3 is the traditional\n    // value given, we use it here.\n\n    const blinnScale = 1.3;\n    blinn = blinn === undefined ? true : blinn; // scale the size to be the real scaling factor\n\n    const maxHeight = 3.15 * (blinn ? 1 : blinnScale);\n    const maxHeight2 = maxHeight / 2;\n    const trueSize = size / maxHeight2; // Number of elements depends on what is needed. Subtract degenerate\n    // triangles at tip of bottom and lid out in advance.\n\n    let numTriangles = bottom ? (8 * segments - 4) * segments : 0;\n    numTriangles += lid ? (16 * segments - 4) * segments : 0;\n    numTriangles += body ? 40 * segments * segments : 0;\n    const indices = new Uint32Array(numTriangles * 3);\n    let numVertices = bottom ? 4 : 0;\n    numVertices += lid ? 8 : 0;\n    numVertices += body ? 20 : 0;\n    numVertices *= (segments + 1) * (segments + 1);\n    const vertices = new Float32Array(numVertices * 3);\n    const normals = new Float32Array(numVertices * 3);\n    const uvs = new Float32Array(numVertices * 2); // Bezier form\n\n    const ms = new Matrix4();\n    ms.set(-1.0, 3.0, -3.0, 1.0, 3.0, -6.0, 3.0, 0.0, -3.0, 3.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0);\n    const g = [];\n    let i, r, c;\n    const sp = [];\n    const tp = [];\n    const dsp = [];\n    const dtp = []; // M * G * M matrix, sort of see\n    // http://www.cs.helsinki.fi/group/goa/mallinnus/curves/surfaces.html\n\n    const mgm = [];\n    const vert = [];\n    const sdir = [];\n    const tdir = [];\n    const norm = new Vector3();\n    let tcoord;\n    let sstep, tstep;\n    let vertPerRow;\n    let s, t, sval, tval, p;\n    let dsval = 0;\n    let dtval = 0;\n    const normOut = new Vector3();\n    let v1, v2, v3, v4;\n    const gmx = new Matrix4();\n    const tmtx = new Matrix4();\n    const vsp = new Vector4();\n    const vtp = new Vector4();\n    const vdsp = new Vector4();\n    const vdtp = new Vector4();\n    const vsdir = new Vector3();\n    const vtdir = new Vector3();\n    const mst = ms.clone();\n    mst.transpose(); // internal function: test if triangle has any matching vertices;\n    // if so, don't save triangle, since it won't display anything.\n\n    const notDegenerate = (vtx1, vtx2, vtx3) => // if any vertex matches, return false\n    !(vertices[vtx1 * 3] === vertices[vtx2 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx2 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx2 * 3 + 2] || vertices[vtx1 * 3] === vertices[vtx3 * 3] && vertices[vtx1 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx1 * 3 + 2] === vertices[vtx3 * 3 + 2] || vertices[vtx2 * 3] === vertices[vtx3 * 3] && vertices[vtx2 * 3 + 1] === vertices[vtx3 * 3 + 1] && vertices[vtx2 * 3 + 2] === vertices[vtx3 * 3 + 2]);\n\n    for (i = 0; i < 3; i++) {\n      mgm[i] = new Matrix4();\n    }\n\n    const minPatches = body ? 0 : 20;\n    const maxPatches = bottom ? 32 : 28;\n    vertPerRow = segments + 1;\n    let surfCount = 0;\n    let vertCount = 0;\n    let normCount = 0;\n    let uvCount = 0;\n    let indexCount = 0;\n\n    for (let surf = minPatches; surf < maxPatches; surf++) {\n      // lid is in the middle of the data, patches 20-27,\n      // so ignore it for this part of the loop if the lid is not desired\n      if (lid || surf < 20 || surf >= 28) {\n        // get M * G * M matrix for x,y,z\n        for (i = 0; i < 3; i++) {\n          // get control patches\n          for (r = 0; r < 4; r++) {\n            for (c = 0; c < 4; c++) {\n              // transposed\n              g[c * 4 + r] = teapotVertices[teapotPatches[surf * 16 + r * 4 + c] * 3 + i]; // is the lid to be made larger, and is this a point on the lid\n              // that is X or Y?\n\n              if (fitLid && surf >= 20 && surf < 28 && i !== 2) {\n                // increase XY size by 7.7%, found empirically. I don't\n                // increase Z so that the teapot will continue to fit in the\n                // space -1 to 1 for Y (Y is up for the final model).\n                g[c * 4 + r] *= 1.077;\n              } // Blinn \"fixed\" the teapot by dividing Z by blinnScale, and that's the\n              // data we now use. The original teapot is taller. Fix it:\n\n\n              if (!blinn && i === 2) {\n                g[c * 4 + r] *= blinnScale;\n              }\n            }\n          }\n\n          gmx.set(g[0], g[1], g[2], g[3], g[4], g[5], g[6], g[7], g[8], g[9], g[10], g[11], g[12], g[13], g[14], g[15]);\n          tmtx.multiplyMatrices(gmx, ms);\n          mgm[i].multiplyMatrices(mst, tmtx);\n        } // step along, get points, and output\n\n\n        for (sstep = 0; sstep <= segments; sstep++) {\n          s = sstep / segments;\n\n          for (tstep = 0; tstep <= segments; tstep++) {\n            t = tstep / segments; // point from basis\n            // get power vectors and their derivatives\n\n            for (p = 4, sval = tval = 1.0; p--;) {\n              sp[p] = sval;\n              tp[p] = tval;\n              sval *= s;\n              tval *= t;\n\n              if (p === 3) {\n                dsp[p] = dtp[p] = 0.0;\n                dsval = dtval = 1.0;\n              } else {\n                dsp[p] = dsval * (3 - p);\n                dtp[p] = dtval * (3 - p);\n                dsval *= s;\n                dtval *= t;\n              }\n            }\n\n            vsp.fromArray(sp);\n            vtp.fromArray(tp);\n            vdsp.fromArray(dsp);\n            vdtp.fromArray(dtp); // do for x,y,z\n\n            for (i = 0; i < 3; i++) {\n              // multiply power vectors times matrix to get value\n              tcoord = vsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              vert[i] = tcoord.dot(vtp); // get s and t tangent vectors\n\n              tcoord = vdsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              sdir[i] = tcoord.dot(vtp);\n              tcoord = vsp.clone();\n              tcoord.applyMatrix4(mgm[i]);\n              tdir[i] = tcoord.dot(vdtp);\n            } // find normal\n\n\n            vsdir.fromArray(sdir);\n            vtdir.fromArray(tdir);\n            norm.crossVectors(vtdir, vsdir);\n            norm.normalize(); // if X and Z length is 0, at the cusp, so point the normal up or down, depending on patch number\n\n            if (vert[0] === 0 && vert[1] === 0) {\n              // if above the middle of the teapot, normal points up, else down\n              normOut.set(0, vert[2] > maxHeight2 ? 1 : -1, 0);\n            } else {\n              // standard output: rotate on X axis\n              normOut.set(norm.x, norm.z, -norm.y);\n            } // store it all\n\n\n            vertices[vertCount++] = trueSize * vert[0];\n            vertices[vertCount++] = trueSize * (vert[2] - maxHeight2);\n            vertices[vertCount++] = -trueSize * vert[1];\n            normals[normCount++] = normOut.x;\n            normals[normCount++] = normOut.y;\n            normals[normCount++] = normOut.z;\n            uvs[uvCount++] = 1 - t;\n            uvs[uvCount++] = 1 - s;\n          }\n        } // save the faces\n\n\n        for (sstep = 0; sstep < segments; sstep++) {\n          for (tstep = 0; tstep < segments; tstep++) {\n            v1 = surfCount * vertPerRow * vertPerRow + sstep * vertPerRow + tstep;\n            v2 = v1 + 1;\n            v3 = v2 + vertPerRow;\n            v4 = v1 + vertPerRow; // Normals and UVs cannot be shared. Without clone(), you can see the consequences\n            // of sharing if you call geometry.applyMatrix4( matrix ).\n\n            if (notDegenerate(v1, v2, v3)) {\n              indices[indexCount++] = v1;\n              indices[indexCount++] = v2;\n              indices[indexCount++] = v3;\n            }\n\n            if (notDegenerate(v1, v3, v4)) {\n              indices[indexCount++] = v1;\n              indices[indexCount++] = v3;\n              indices[indexCount++] = v4;\n            }\n          }\n        } // increment only if a surface was used\n\n\n        surfCount++;\n      }\n    }\n\n    this.setIndex(new BufferAttribute(indices, 1));\n    this.setAttribute('position', new BufferAttribute(vertices, 3));\n    this.setAttribute('normal', new BufferAttribute(normals, 3));\n    this.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.computeBoundingSphere();\n  }\n\n}\n\nexport { TeapotGeometry };\n"]},"metadata":{},"sourceType":"module"}