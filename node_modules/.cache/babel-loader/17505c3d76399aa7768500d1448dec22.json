{"ast":null,"code":"import { UniformsUtils, ShaderMaterial, MathUtils, DataTexture, RGBFormat, FloatType } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\nvar GlitchPass = function GlitchPass(dt_size) {\n  if (DigitalGlitch === undefined) console.error('THREE.GlitchPass relies on DigitalGlitch');\n  var shader = DigitalGlitch;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (dt_size == undefined) dt_size = 64;\n  this.uniforms['tDisp'].value = this.generateHeightmap(dt_size);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.fsQuad = new FullScreenQuad(this.material);\n  this.goWild = false;\n  this.curF = 0;\n  this.generateTrigger();\n};\n\nGlitchPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: GlitchPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['seed'].value = Math.random(); //default seeding\n\n    this.uniforms['byp'].value = 0;\n\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms['amount'].value = Math.random() / 30;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms['amount'].value = Math.random() / 90;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms['byp'].value = 1;\n    }\n\n    this.curF++;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  },\n  generateTrigger: function generateTrigger() {\n    this.randX = MathUtils.randInt(120, 240);\n  },\n  generateHeightmap: function generateHeightmap(dt_size) {\n    var data_arr = new Float32Array(dt_size * dt_size * 3);\n    var length = dt_size * dt_size;\n\n    for (var i = 0; i < length; i++) {\n      var val = MathUtils.randFloat(0, 1);\n      data_arr[i * 3 + 0] = val;\n      data_arr[i * 3 + 1] = val;\n      data_arr[i * 3 + 2] = val;\n    }\n\n    return new DataTexture(data_arr, dt_size, dt_size, RGBFormat, FloatType);\n  }\n});\nexport { GlitchPass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/GlitchPass.js"],"names":["UniformsUtils","ShaderMaterial","MathUtils","DataTexture","RGBFormat","FloatType","FullScreenQuad","Pass","DigitalGlitch","GlitchPass","dt_size","undefined","console","error","shader","uniforms","clone","value","generateHeightmap","material","vertexShader","fragmentShader","fsQuad","goWild","curF","generateTrigger","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","Math","random","randX","randFloat","PI","renderToScreen","setRenderTarget","clear","randInt","data_arr","Float32Array","length","i","val"],"mappings":"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","sourcesContent":["import { UniformsUtils, ShaderMaterial, MathUtils, DataTexture, RGBFormat, FloatType } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { DigitalGlitch } from '../shaders/DigitalGlitch.js';\n\nvar GlitchPass = function (dt_size) {\n  if (DigitalGlitch === undefined) console.error('THREE.GlitchPass relies on DigitalGlitch');\n  var shader = DigitalGlitch;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  if (dt_size == undefined) dt_size = 64;\n  this.uniforms['tDisp'].value = this.generateHeightmap(dt_size);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.fsQuad = new FullScreenQuad(this.material);\n  this.goWild = false;\n  this.curF = 0;\n  this.generateTrigger();\n};\n\nGlitchPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: GlitchPass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['seed'].value = Math.random(); //default seeding\n\n    this.uniforms['byp'].value = 0;\n\n    if (this.curF % this.randX == 0 || this.goWild == true) {\n      this.uniforms['amount'].value = Math.random() / 30;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-1, 1);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.curF = 0;\n      this.generateTrigger();\n    } else if (this.curF % this.randX < this.randX / 5) {\n      this.uniforms['amount'].value = Math.random() / 90;\n      this.uniforms['angle'].value = MathUtils.randFloat(-Math.PI, Math.PI);\n      this.uniforms['distortion_x'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['distortion_y'].value = MathUtils.randFloat(0, 1);\n      this.uniforms['seed_x'].value = MathUtils.randFloat(-0.3, 0.3);\n      this.uniforms['seed_y'].value = MathUtils.randFloat(-0.3, 0.3);\n    } else if (this.goWild == false) {\n      this.uniforms['byp'].value = 1;\n    }\n\n    this.curF++;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  },\n  generateTrigger: function () {\n    this.randX = MathUtils.randInt(120, 240);\n  },\n  generateHeightmap: function (dt_size) {\n    var data_arr = new Float32Array(dt_size * dt_size * 3);\n    var length = dt_size * dt_size;\n\n    for (let i = 0; i < length; i++) {\n      var val = MathUtils.randFloat(0, 1);\n      data_arr[i * 3 + 0] = val;\n      data_arr[i * 3 + 1] = val;\n      data_arr[i * 3 + 2] = val;\n    }\n\n    return new DataTexture(data_arr, dt_size, dt_size, RGBFormat, FloatType);\n  }\n});\n\nexport { GlitchPass };\n"]},"metadata":{},"sourceType":"module"}