{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { FilmShader } from '../shaders/FilmShader.js';\n\nvar FilmPass = function FilmPass(noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n  if (FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader');\n  var shader = FilmShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n  if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n  if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n  if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nFilmPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: FilmPass,\n  render: function render(renderer, writeBuffer, readBuffer, deltaTime\n  /*, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['time'].value += deltaTime;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\nexport { FilmPass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/FilmPass.js"],"names":["UniformsUtils","ShaderMaterial","FullScreenQuad","Pass","FilmShader","FilmPass","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","undefined","console","error","shader","uniforms","clone","material","vertexShader","fragmentShader","value","nIntensity","sIntensity","sCount","fsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","texture","renderToScreen","setRenderTarget","clear"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,OAA9C;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,WAArC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAAUC,cAAV,EAA0BC,kBAA1B,EAA8CC,cAA9C,EAA8DC,SAA9D,EAAyE;AACtF,MAAIL,UAAU,KAAKM,SAAnB,EAA8BC,OAAO,CAACC,KAAR,CAAc,qCAAd;AAC9B,MAAIC,MAAM,GAAGT,UAAb;AACA,OAAKU,QAAL,GAAgBd,aAAa,CAACe,KAAd,CAAoBF,MAAM,CAACC,QAA3B,CAAhB;AACA,OAAKE,QAAL,GAAgB,IAAIf,cAAJ,CAAmB;AACjCa,IAAAA,QAAQ,EAAE,KAAKA,QADkB;AAEjCG,IAAAA,YAAY,EAAEJ,MAAM,CAACI,YAFY;AAGjCC,IAAAA,cAAc,EAAEL,MAAM,CAACK;AAHU,GAAnB,CAAhB;AAKA,MAAIT,SAAS,KAAKC,SAAlB,EAA6B,KAAKI,QAAL,CAAcL,SAAd,CAAwBU,KAAxB,GAAgCV,SAAhC;AAC7B,MAAIH,cAAc,KAAKI,SAAvB,EAAkC,KAAKI,QAAL,CAAcM,UAAd,CAAyBD,KAAzB,GAAiCb,cAAjC;AAClC,MAAIC,kBAAkB,KAAKG,SAA3B,EAAsC,KAAKI,QAAL,CAAcO,UAAd,CAAyBF,KAAzB,GAAiCZ,kBAAjC;AACtC,MAAIC,cAAc,KAAKE,SAAvB,EAAkC,KAAKI,QAAL,CAAcQ,MAAd,CAAqBH,KAArB,GAA6BX,cAA7B;AAClC,OAAKe,MAAL,GAAc,IAAIrB,cAAJ,CAAmB,KAAKc,QAAxB,CAAd;AACD,CAdD;;AAgBAX,QAAQ,CAACmB,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcxB,IAAI,CAACqB,SAAnB,CAAd,EAA6C;AAChEI,EAAAA,WAAW,EAAEvB,QADmD;AAEhEwB,EAAAA,MAAM,EAAE,gBAAUC,QAAV,EAAoBC,WAApB,EAAiCC,UAAjC,EAA6CC;AACrD;AADQ,IAEN;AACA,SAAKnB,QAAL,CAAc,UAAd,EAA0BK,KAA1B,GAAkCa,UAAU,CAACE,OAA7C;AACA,SAAKpB,QAAL,CAAc,MAAd,EAAsBK,KAAtB,IAA+Bc,SAA/B;;AAEA,QAAI,KAAKE,cAAT,EAAyB;AACvBL,MAAAA,QAAQ,CAACM,eAAT,CAAyB,IAAzB;AACA,WAAKb,MAAL,CAAYM,MAAZ,CAAmBC,QAAnB;AACD,KAHD,MAGO;AACLA,MAAAA,QAAQ,CAACM,eAAT,CAAyBL,WAAzB;AACA,UAAI,KAAKM,KAAT,EAAgBP,QAAQ,CAACO,KAAT;AAChB,WAAKd,MAAL,CAAYM,MAAZ,CAAmBC,QAAnB;AACD;AACF;AAhB+D,CAA7C,CAArB;AAmBA,SAASzB,QAAT","sourcesContent":["import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { FilmShader } from '../shaders/FilmShader.js';\n\nvar FilmPass = function (noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n  if (FilmShader === undefined) console.error('THREE.FilmPass relies on FilmShader');\n  var shader = FilmShader;\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n  if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n  if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n  if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nFilmPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: FilmPass,\n  render: function (renderer, writeBuffer, readBuffer, deltaTime\n  /*, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['time'].value += deltaTime;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n});\n\nexport { FilmPass };\n"]},"metadata":{},"sourceType":"module"}