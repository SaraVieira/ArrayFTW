{"ast":null,"code":"import { Object3D, Box2, Color, Vector3, Matrix3, Matrix4, Camera } from 'three';\nimport { Projector, RenderableSprite, RenderableLine, RenderableFace } from './Projector.js';\n\nvar SVGObject = function SVGObject(node) {\n  Object3D.call(this);\n  this.node = node;\n};\n\nSVGObject.prototype = Object.create(Object3D.prototype);\nSVGObject.prototype.constructor = SVGObject;\n\nvar SVGRenderer = function SVGRenderer() {\n  var _this = this,\n      _renderData,\n      _elements,\n      _lights,\n      _projector = new Projector(),\n      _svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\n      _svgWidth,\n      _svgHeight,\n      _svgWidthHalf,\n      _svgHeightHalf,\n      _v1,\n      _v2,\n      _v3,\n      _clipBox = new Box2(),\n      _elemBox = new Box2(),\n      _color = new Color(),\n      _diffuseColor = new Color(),\n      _ambientLight = new Color(),\n      _directionalLights = new Color(),\n      _pointLights = new Color(),\n      _clearColor = new Color(),\n      _vector3 = new Vector3(),\n      // Needed for PointLight\n  _centroid = new Vector3(),\n      _normal = new Vector3(),\n      _normalViewMatrix = new Matrix3(),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _svgPathPool = [],\n      _svgNode,\n      _pathCount = 0,\n      _currentPath,\n      _currentStyle,\n      _quality = 1,\n      _precision = null;\n\n  this.domElement = _svg;\n  this.autoClear = true;\n  this.sortObjects = true;\n  this.sortElements = true;\n  this.overdraw = 0.5;\n  this.info = {\n    render: {\n      vertices: 0,\n      faces: 0\n    }\n  };\n\n  this.setQuality = function (quality) {\n    switch (quality) {\n      case 'high':\n        _quality = 1;\n        break;\n\n      case 'low':\n        _quality = 0;\n        break;\n    }\n  };\n\n  this.setClearColor = function (color) {\n    _clearColor.set(color);\n  };\n\n  this.setPixelRatio = function () {};\n\n  this.setSize = function (width, height) {\n    _svgWidth = width;\n    _svgHeight = height;\n    _svgWidthHalf = _svgWidth / 2;\n    _svgHeightHalf = _svgHeight / 2;\n\n    _svg.setAttribute('viewBox', -_svgWidthHalf + ' ' + -_svgHeightHalf + ' ' + _svgWidth + ' ' + _svgHeight);\n\n    _svg.setAttribute('width', _svgWidth);\n\n    _svg.setAttribute('height', _svgHeight);\n\n    _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n\n    _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n  };\n\n  this.getSize = function () {\n    return {\n      width: _svgWidth,\n      height: _svgHeight\n    };\n  };\n\n  this.setPrecision = function (precision) {\n    _precision = precision;\n  };\n\n  function removeChildNodes() {\n    _pathCount = 0;\n\n    while (_svg.childNodes.length > 0) {\n      _svg.removeChild(_svg.childNodes[0]);\n    }\n  }\n\n  function convert(c) {\n    return _precision !== null ? c.toFixed(_precision) : c;\n  }\n\n  this.clear = function () {\n    removeChildNodes();\n    _svg.style.backgroundColor = _clearColor.getStyle();\n  };\n\n  this.render = function (scene, camera) {\n    if (camera instanceof Camera === false) {\n      console.error('THREE.SVGRenderer.render: camera is not an instance of Camera.');\n      return;\n    }\n\n    var background = scene.background;\n\n    if (background && background.isColor) {\n      removeChildNodes();\n      _svg.style.backgroundColor = background.getStyle();\n    } else if (this.autoClear === true) {\n      this.clear();\n    }\n\n    _this.info.render.vertices = 0;\n    _this.info.render.faces = 0;\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n    _elements = _renderData.elements;\n    _lights = _renderData.lights;\n\n    _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\n    calculateLights(_lights); // reset accumulated path\n\n    _currentPath = '';\n    _currentStyle = '';\n\n    for (var e = 0, el = _elements.length; e < el; e++) {\n      var element = _elements[e];\n      var material = element.material;\n      if (material === undefined || material.opacity === 0) continue;\n\n      _elemBox.makeEmpty();\n\n      if (element instanceof RenderableSprite) {\n        _v1 = element;\n        _v1.x *= _svgWidthHalf;\n        _v1.y *= -_svgHeightHalf;\n        renderSprite(_v1, element, material);\n      } else if (element instanceof RenderableLine) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderLine(_v1, _v2, element, material);\n        }\n      } else if (element instanceof RenderableFace) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v3 = element.v3;\n        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n        _v3.positionScreen.x *= _svgWidthHalf;\n        _v3.positionScreen.y *= -_svgHeightHalf;\n\n        if (this.overdraw > 0) {\n          expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n          expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n          expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n        }\n\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderFace3(_v1, _v2, _v3, element, material);\n        }\n      }\n    }\n\n    flushPath(); // just to flush last svg:path\n\n    scene.traverseVisible(function (object) {\n      if (object instanceof SVGObject) {\n        _vector3.setFromMatrixPosition(object.matrixWorld);\n\n        _vector3.applyMatrix4(_viewProjectionMatrix);\n\n        if (_vector3.z < -1 || _vector3.z > 1) return;\n        var x = _vector3.x * _svgWidthHalf;\n        var y = -_vector3.y * _svgHeightHalf;\n        var node = object.node;\n        node.setAttribute('transform', 'translate(' + x + ',' + y + ')');\n\n        _svg.appendChild(node);\n      }\n    });\n  };\n\n  function calculateLights(lights) {\n    _ambientLight.setRGB(0, 0, 0);\n\n    _directionalLights.setRGB(0, 0, 0);\n\n    _pointLights.setRGB(0, 0, 0);\n\n    for (var l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n\n      if (light.isAmbientLight) {\n        _ambientLight.r += lightColor.r;\n        _ambientLight.g += lightColor.g;\n        _ambientLight.b += lightColor.b;\n      } else if (light.isDirectionalLight) {\n        _directionalLights.r += lightColor.r;\n        _directionalLights.g += lightColor.g;\n        _directionalLights.b += lightColor.b;\n      } else if (light.isPointLight) {\n        _pointLights.r += lightColor.r;\n        _pointLights.g += lightColor.g;\n        _pointLights.b += lightColor.b;\n      }\n    }\n  }\n\n  function calculateLight(lights, position, normal, color) {\n    for (var l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n\n      if (light.isDirectionalLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\n        var amount = normal.dot(lightPosition);\n        if (amount <= 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      } else if (light.isPointLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\n        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n        if (amount <= 0) continue;\n        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n        if (amount == 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      }\n    }\n  }\n\n  function renderSprite(v1, element, material) {\n    var scaleX = element.scale.x * _svgWidthHalf;\n    var scaleY = element.scale.y * _svgHeightHalf;\n\n    if (material.isPointsMaterial) {\n      scaleX *= material.size;\n      scaleY *= material.size;\n    }\n\n    var path = 'M' + convert(v1.x - scaleX * 0.5) + ',' + convert(v1.y - scaleY * 0.5) + 'h' + convert(scaleX) + 'v' + convert(scaleY) + 'h' + convert(-scaleX) + 'z';\n    var style = '';\n\n    if (material.isSpriteMaterial || material.isPointsMaterial) {\n      style = 'fill:' + material.color.getStyle() + ';fill-opacity:' + material.opacity;\n    }\n\n    addPath(style, path);\n  }\n\n  function renderLine(v1, v2, element, material) {\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y);\n\n    if (material.isLineBasicMaterial) {\n      var style = 'fill:none;stroke:' + material.color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.linewidth + ';stroke-linecap:' + material.linecap;\n\n      if (material.isLineDashedMaterial) {\n        style = style + ';stroke-dasharray:' + material.dashSize + ',' + material.gapSize;\n      }\n\n      addPath(style, path);\n    }\n  }\n\n  function renderFace3(v1, v2, v3, element, material) {\n    _this.info.render.vertices += 3;\n    _this.info.render.faces++;\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y) + 'L' + convert(v3.positionScreen.x) + ',' + convert(v3.positionScreen.y) + 'z';\n    var style = '';\n\n    if (material.isMeshBasicMaterial) {\n      _color.copy(material.color);\n\n      if (material.vertexColors) {\n        _color.multiply(element.color);\n      }\n    } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n      _diffuseColor.copy(material.color);\n\n      if (material.vertexColors) {\n        _diffuseColor.multiply(element.color);\n      }\n\n      _color.copy(_ambientLight);\n\n      _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\n      calculateLight(_lights, _centroid, element.normalModel, _color);\n\n      _color.multiply(_diffuseColor).add(material.emissive);\n    } else if (material.isMeshNormalMaterial) {\n      _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n\n      _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n    }\n\n    if (material.wireframe) {\n      style = 'fill:none;stroke:' + _color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.wireframeLinewidth + ';stroke-linecap:' + material.wireframeLinecap + ';stroke-linejoin:' + material.wireframeLinejoin;\n    } else {\n      style = 'fill:' + _color.getStyle() + ';fill-opacity:' + material.opacity;\n    }\n\n    addPath(style, path);\n  } // Hide anti-alias gaps\n\n\n  function expand(v1, v2, pixels) {\n    var x = v2.x - v1.x,\n        y = v2.y - v1.y,\n        det = x * x + y * y,\n        idet;\n    if (det === 0) return;\n    idet = pixels / Math.sqrt(det);\n    x *= idet;\n    y *= idet;\n    v2.x += x;\n    v2.y += y;\n    v1.x -= x;\n    v1.y -= y;\n  }\n\n  function addPath(style, path) {\n    if (_currentStyle === style) {\n      _currentPath += path;\n    } else {\n      flushPath();\n      _currentStyle = style;\n      _currentPath = path;\n    }\n  }\n\n  function flushPath() {\n    if (_currentPath) {\n      _svgNode = getPathNode(_pathCount++);\n\n      _svgNode.setAttribute('d', _currentPath);\n\n      _svgNode.setAttribute('style', _currentStyle);\n\n      _svg.appendChild(_svgNode);\n    }\n\n    _currentPath = '';\n    _currentStyle = '';\n  }\n\n  function getPathNode(id) {\n    if (_svgPathPool[id] == null) {\n      _svgPathPool[id] = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n      if (_quality == 0) {\n        _svgPathPool[id].setAttribute('shape-rendering', 'crispEdges'); //optimizeSpeed\n\n      }\n\n      return _svgPathPool[id];\n    }\n\n    return _svgPathPool[id];\n  }\n};\n\nexport { SVGObject, SVGRenderer };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/renderers/SVGRenderer.js"],"names":["Object3D","Box2","Color","Vector3","Matrix3","Matrix4","Camera","Projector","RenderableSprite","RenderableLine","RenderableFace","SVGObject","node","call","prototype","Object","create","constructor","SVGRenderer","_this","_renderData","_elements","_lights","_projector","_svg","document","createElementNS","_svgWidth","_svgHeight","_svgWidthHalf","_svgHeightHalf","_v1","_v2","_v3","_clipBox","_elemBox","_color","_diffuseColor","_ambientLight","_directionalLights","_pointLights","_clearColor","_vector3","_centroid","_normal","_normalViewMatrix","_viewMatrix","_viewProjectionMatrix","_svgPathPool","_svgNode","_pathCount","_currentPath","_currentStyle","_quality","_precision","domElement","autoClear","sortObjects","sortElements","overdraw","info","render","vertices","faces","setQuality","quality","setClearColor","color","set","setPixelRatio","setSize","width","height","setAttribute","min","max","getSize","setPrecision","precision","removeChildNodes","childNodes","length","removeChild","convert","c","toFixed","clear","style","backgroundColor","getStyle","scene","camera","console","error","background","isColor","copy","matrixWorldInverse","multiplyMatrices","projectionMatrix","projectScene","elements","lights","getNormalMatrix","calculateLights","e","el","element","material","undefined","opacity","makeEmpty","x","y","renderSprite","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","v3","z","expand","renderFace3","flushPath","traverseVisible","object","setFromMatrixPosition","matrixWorld","applyMatrix4","appendChild","setRGB","l","ll","light","lightColor","isAmbientLight","r","g","b","isDirectionalLight","isPointLight","calculateLight","position","normal","lightPosition","normalize","amount","dot","intensity","subVectors","distance","Math","distanceTo","scaleX","scale","scaleY","isPointsMaterial","size","path","isSpriteMaterial","addPath","isLineBasicMaterial","linewidth","linecap","isLineDashedMaterial","dashSize","gapSize","isMeshBasicMaterial","vertexColors","multiply","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","positionWorld","add","divideScalar","normalModel","emissive","isMeshNormalMaterial","applyMatrix3","multiplyScalar","addScalar","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","pixels","det","idet","sqrt","getPathNode","id"],"mappings":"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","sourcesContent":["import { Object3D, Box2, Color, Vector3, Matrix3, Matrix4, Camera } from 'three';\nimport { Projector, RenderableSprite, RenderableLine, RenderableFace } from './Projector.js';\n\nvar SVGObject = function (node) {\n  Object3D.call(this);\n  this.node = node;\n};\n\nSVGObject.prototype = Object.create(Object3D.prototype);\nSVGObject.prototype.constructor = SVGObject;\n\nvar SVGRenderer = function () {\n  var _this = this,\n      _renderData,\n      _elements,\n      _lights,\n      _projector = new Projector(),\n      _svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\n      _svgWidth,\n      _svgHeight,\n      _svgWidthHalf,\n      _svgHeightHalf,\n      _v1,\n      _v2,\n      _v3,\n      _clipBox = new Box2(),\n      _elemBox = new Box2(),\n      _color = new Color(),\n      _diffuseColor = new Color(),\n      _ambientLight = new Color(),\n      _directionalLights = new Color(),\n      _pointLights = new Color(),\n      _clearColor = new Color(),\n      _vector3 = new Vector3(),\n      // Needed for PointLight\n  _centroid = new Vector3(),\n      _normal = new Vector3(),\n      _normalViewMatrix = new Matrix3(),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _svgPathPool = [],\n      _svgNode,\n      _pathCount = 0,\n      _currentPath,\n      _currentStyle,\n      _quality = 1,\n      _precision = null;\n\n  this.domElement = _svg;\n  this.autoClear = true;\n  this.sortObjects = true;\n  this.sortElements = true;\n  this.overdraw = 0.5;\n  this.info = {\n    render: {\n      vertices: 0,\n      faces: 0\n    }\n  };\n\n  this.setQuality = function (quality) {\n    switch (quality) {\n      case 'high':\n        _quality = 1;\n        break;\n\n      case 'low':\n        _quality = 0;\n        break;\n    }\n  };\n\n  this.setClearColor = function (color) {\n    _clearColor.set(color);\n  };\n\n  this.setPixelRatio = function () {};\n\n  this.setSize = function (width, height) {\n    _svgWidth = width;\n    _svgHeight = height;\n    _svgWidthHalf = _svgWidth / 2;\n    _svgHeightHalf = _svgHeight / 2;\n\n    _svg.setAttribute('viewBox', -_svgWidthHalf + ' ' + -_svgHeightHalf + ' ' + _svgWidth + ' ' + _svgHeight);\n\n    _svg.setAttribute('width', _svgWidth);\n\n    _svg.setAttribute('height', _svgHeight);\n\n    _clipBox.min.set(-_svgWidthHalf, -_svgHeightHalf);\n\n    _clipBox.max.set(_svgWidthHalf, _svgHeightHalf);\n  };\n\n  this.getSize = function () {\n    return {\n      width: _svgWidth,\n      height: _svgHeight\n    };\n  };\n\n  this.setPrecision = function (precision) {\n    _precision = precision;\n  };\n\n  function removeChildNodes() {\n    _pathCount = 0;\n\n    while (_svg.childNodes.length > 0) {\n      _svg.removeChild(_svg.childNodes[0]);\n    }\n  }\n\n  function convert(c) {\n    return _precision !== null ? c.toFixed(_precision) : c;\n  }\n\n  this.clear = function () {\n    removeChildNodes();\n    _svg.style.backgroundColor = _clearColor.getStyle();\n  };\n\n  this.render = function (scene, camera) {\n    if (camera instanceof Camera === false) {\n      console.error('THREE.SVGRenderer.render: camera is not an instance of Camera.');\n      return;\n    }\n\n    var background = scene.background;\n\n    if (background && background.isColor) {\n      removeChildNodes();\n      _svg.style.backgroundColor = background.getStyle();\n    } else if (this.autoClear === true) {\n      this.clear();\n    }\n\n    _this.info.render.vertices = 0;\n    _this.info.render.faces = 0;\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n    _elements = _renderData.elements;\n    _lights = _renderData.lights;\n\n    _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\n    calculateLights(_lights); // reset accumulated path\n\n    _currentPath = '';\n    _currentStyle = '';\n\n    for (let e = 0, el = _elements.length; e < el; e++) {\n      var element = _elements[e];\n      var material = element.material;\n      if (material === undefined || material.opacity === 0) continue;\n\n      _elemBox.makeEmpty();\n\n      if (element instanceof RenderableSprite) {\n        _v1 = element;\n        _v1.x *= _svgWidthHalf;\n        _v1.y *= -_svgHeightHalf;\n        renderSprite(_v1, element, material);\n      } else if (element instanceof RenderableLine) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderLine(_v1, _v2, element, material);\n        }\n      } else if (element instanceof RenderableFace) {\n        _v1 = element.v1;\n        _v2 = element.v2;\n        _v3 = element.v3;\n        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n        _v1.positionScreen.x *= _svgWidthHalf;\n        _v1.positionScreen.y *= -_svgHeightHalf;\n        _v2.positionScreen.x *= _svgWidthHalf;\n        _v2.positionScreen.y *= -_svgHeightHalf;\n        _v3.positionScreen.x *= _svgWidthHalf;\n        _v3.positionScreen.y *= -_svgHeightHalf;\n\n        if (this.overdraw > 0) {\n          expand(_v1.positionScreen, _v2.positionScreen, this.overdraw);\n          expand(_v2.positionScreen, _v3.positionScreen, this.overdraw);\n          expand(_v3.positionScreen, _v1.positionScreen, this.overdraw);\n        }\n\n        _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n\n        if (_clipBox.intersectsBox(_elemBox) === true) {\n          renderFace3(_v1, _v2, _v3, element, material);\n        }\n      }\n    }\n\n    flushPath(); // just to flush last svg:path\n\n    scene.traverseVisible(function (object) {\n      if (object instanceof SVGObject) {\n        _vector3.setFromMatrixPosition(object.matrixWorld);\n\n        _vector3.applyMatrix4(_viewProjectionMatrix);\n\n        if (_vector3.z < -1 || _vector3.z > 1) return;\n        var x = _vector3.x * _svgWidthHalf;\n        var y = -_vector3.y * _svgHeightHalf;\n        var node = object.node;\n        node.setAttribute('transform', 'translate(' + x + ',' + y + ')');\n\n        _svg.appendChild(node);\n      }\n    });\n  };\n\n  function calculateLights(lights) {\n    _ambientLight.setRGB(0, 0, 0);\n\n    _directionalLights.setRGB(0, 0, 0);\n\n    _pointLights.setRGB(0, 0, 0);\n\n    for (let l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n\n      if (light.isAmbientLight) {\n        _ambientLight.r += lightColor.r;\n        _ambientLight.g += lightColor.g;\n        _ambientLight.b += lightColor.b;\n      } else if (light.isDirectionalLight) {\n        _directionalLights.r += lightColor.r;\n        _directionalLights.g += lightColor.g;\n        _directionalLights.b += lightColor.b;\n      } else if (light.isPointLight) {\n        _pointLights.r += lightColor.r;\n        _pointLights.g += lightColor.g;\n        _pointLights.b += lightColor.b;\n      }\n    }\n  }\n\n  function calculateLight(lights, position, normal, color) {\n    for (let l = 0, ll = lights.length; l < ll; l++) {\n      var light = lights[l];\n      var lightColor = light.color;\n\n      if (light.isDirectionalLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\n        var amount = normal.dot(lightPosition);\n        if (amount <= 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      } else if (light.isPointLight) {\n        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\n        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n        if (amount <= 0) continue;\n        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n        if (amount == 0) continue;\n        amount *= light.intensity;\n        color.r += lightColor.r * amount;\n        color.g += lightColor.g * amount;\n        color.b += lightColor.b * amount;\n      }\n    }\n  }\n\n  function renderSprite(v1, element, material) {\n    var scaleX = element.scale.x * _svgWidthHalf;\n    var scaleY = element.scale.y * _svgHeightHalf;\n\n    if (material.isPointsMaterial) {\n      scaleX *= material.size;\n      scaleY *= material.size;\n    }\n\n    var path = 'M' + convert(v1.x - scaleX * 0.5) + ',' + convert(v1.y - scaleY * 0.5) + 'h' + convert(scaleX) + 'v' + convert(scaleY) + 'h' + convert(-scaleX) + 'z';\n    var style = '';\n\n    if (material.isSpriteMaterial || material.isPointsMaterial) {\n      style = 'fill:' + material.color.getStyle() + ';fill-opacity:' + material.opacity;\n    }\n\n    addPath(style, path);\n  }\n\n  function renderLine(v1, v2, element, material) {\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y);\n\n    if (material.isLineBasicMaterial) {\n      var style = 'fill:none;stroke:' + material.color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.linewidth + ';stroke-linecap:' + material.linecap;\n\n      if (material.isLineDashedMaterial) {\n        style = style + ';stroke-dasharray:' + material.dashSize + ',' + material.gapSize;\n      }\n\n      addPath(style, path);\n    }\n  }\n\n  function renderFace3(v1, v2, v3, element, material) {\n    _this.info.render.vertices += 3;\n    _this.info.render.faces++;\n    var path = 'M' + convert(v1.positionScreen.x) + ',' + convert(v1.positionScreen.y) + 'L' + convert(v2.positionScreen.x) + ',' + convert(v2.positionScreen.y) + 'L' + convert(v3.positionScreen.x) + ',' + convert(v3.positionScreen.y) + 'z';\n    var style = '';\n\n    if (material.isMeshBasicMaterial) {\n      _color.copy(material.color);\n\n      if (material.vertexColors) {\n        _color.multiply(element.color);\n      }\n    } else if (material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial) {\n      _diffuseColor.copy(material.color);\n\n      if (material.vertexColors) {\n        _diffuseColor.multiply(element.color);\n      }\n\n      _color.copy(_ambientLight);\n\n      _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\n      calculateLight(_lights, _centroid, element.normalModel, _color);\n\n      _color.multiply(_diffuseColor).add(material.emissive);\n    } else if (material.isMeshNormalMaterial) {\n      _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix).normalize();\n\n      _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n    }\n\n    if (material.wireframe) {\n      style = 'fill:none;stroke:' + _color.getStyle() + ';stroke-opacity:' + material.opacity + ';stroke-width:' + material.wireframeLinewidth + ';stroke-linecap:' + material.wireframeLinecap + ';stroke-linejoin:' + material.wireframeLinejoin;\n    } else {\n      style = 'fill:' + _color.getStyle() + ';fill-opacity:' + material.opacity;\n    }\n\n    addPath(style, path);\n  } // Hide anti-alias gaps\n\n\n  function expand(v1, v2, pixels) {\n    var x = v2.x - v1.x,\n        y = v2.y - v1.y,\n        det = x * x + y * y,\n        idet;\n    if (det === 0) return;\n    idet = pixels / Math.sqrt(det);\n    x *= idet;\n    y *= idet;\n    v2.x += x;\n    v2.y += y;\n    v1.x -= x;\n    v1.y -= y;\n  }\n\n  function addPath(style, path) {\n    if (_currentStyle === style) {\n      _currentPath += path;\n    } else {\n      flushPath();\n      _currentStyle = style;\n      _currentPath = path;\n    }\n  }\n\n  function flushPath() {\n    if (_currentPath) {\n      _svgNode = getPathNode(_pathCount++);\n\n      _svgNode.setAttribute('d', _currentPath);\n\n      _svgNode.setAttribute('style', _currentStyle);\n\n      _svg.appendChild(_svgNode);\n    }\n\n    _currentPath = '';\n    _currentStyle = '';\n  }\n\n  function getPathNode(id) {\n    if (_svgPathPool[id] == null) {\n      _svgPathPool[id] = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n      if (_quality == 0) {\n        _svgPathPool[id].setAttribute('shape-rendering', 'crispEdges'); //optimizeSpeed\n\n      }\n\n      return _svgPathPool[id];\n    }\n\n    return _svgPathPool[id];\n  }\n};\n\nexport { SVGObject, SVGRenderer };\n"]},"metadata":{},"sourceType":"module"}