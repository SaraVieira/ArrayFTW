{"ast":null,"code":"import { Color } from 'three';\nimport { InputNode } from '../core/InputNode.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nfunction ColorNode(color, g, b) {\n  InputNode.call(this, 'c');\n  this.value = color instanceof Color ? color : new Color(color || 0, g, b);\n}\n\nColorNode.prototype = Object.create(InputNode.prototype);\nColorNode.prototype.constructor = ColorNode;\nColorNode.prototype.nodeType = 'Color';\nNodeUtils.addShortcuts(ColorNode.prototype, 'value', ['r', 'g', 'b']);\n\nColorNode.prototype.generateReadonly = function (builder, output, uuid, type\n/*, ns, needsUpdate */\n) {\n  return builder.format('vec3( ' + this.r + ', ' + this.g + ', ' + this.b + ' )', type, output);\n};\n\nColorNode.prototype.copy = function (source) {\n  InputNode.prototype.copy.call(this, source);\n  this.value.copy(source);\n  return this;\n};\n\nColorNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.r = this.r;\n    data.g = this.g;\n    data.b = this.b;\n    if (this.readonly === true) data.readonly = true;\n  }\n\n  return data;\n};\n\nexport { ColorNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/inputs/ColorNode.js"],"names":["Color","InputNode","NodeUtils","ColorNode","color","g","b","call","value","prototype","Object","create","constructor","nodeType","addShortcuts","generateReadonly","builder","output","uuid","type","format","r","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","readonly"],"mappings":"AAAA,SAASA,KAAT,QAAsB,OAAtB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,SAAT,QAA0B,sBAA1B;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,CAA1B,EAA6BC,CAA7B,EAAgC;AAC9BL,EAAAA,SAAS,CAACM,IAAV,CAAe,IAAf,EAAqB,GAArB;AACA,OAAKC,KAAL,GAAaJ,KAAK,YAAYJ,KAAjB,GAAyBI,KAAzB,GAAiC,IAAIJ,KAAJ,CAAUI,KAAK,IAAI,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,CAA9C;AACD;;AAEDH,SAAS,CAACM,SAAV,GAAsBC,MAAM,CAACC,MAAP,CAAcV,SAAS,CAACQ,SAAxB,CAAtB;AACAN,SAAS,CAACM,SAAV,CAAoBG,WAApB,GAAkCT,SAAlC;AACAA,SAAS,CAACM,SAAV,CAAoBI,QAApB,GAA+B,OAA/B;AACAX,SAAS,CAACY,YAAV,CAAuBX,SAAS,CAACM,SAAjC,EAA4C,OAA5C,EAAqD,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAArD;;AAEAN,SAAS,CAACM,SAAV,CAAoBM,gBAApB,GAAuC,UAAUC,OAAV,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAiCC;AACxE;AADuC,EAErC;AACA,SAAOH,OAAO,CAACI,MAAR,CAAe,WAAW,KAAKC,CAAhB,GAAoB,IAApB,GAA2B,KAAKhB,CAAhC,GAAoC,IAApC,GAA2C,KAAKC,CAAhD,GAAoD,IAAnE,EAAyEa,IAAzE,EAA+EF,MAA/E,CAAP;AACD,CAJD;;AAMAd,SAAS,CAACM,SAAV,CAAoBa,IAApB,GAA2B,UAAUC,MAAV,EAAkB;AAC3CtB,EAAAA,SAAS,CAACQ,SAAV,CAAoBa,IAApB,CAAyBf,IAAzB,CAA8B,IAA9B,EAAoCgB,MAApC;AACA,OAAKf,KAAL,CAAWc,IAAX,CAAgBC,MAAhB;AACA,SAAO,IAAP;AACD,CAJD;;AAMApB,SAAS,CAACM,SAAV,CAAoBe,MAApB,GAA6B,UAAUC,IAAV,EAAgB;AAC3C,MAAIC,IAAI,GAAG,KAAKC,WAAL,CAAiBF,IAAjB,CAAX;;AAEA,MAAI,CAACC,IAAL,EAAW;AACTA,IAAAA,IAAI,GAAG,KAAKE,cAAL,CAAoBH,IAApB,CAAP;AACAC,IAAAA,IAAI,CAACL,CAAL,GAAS,KAAKA,CAAd;AACAK,IAAAA,IAAI,CAACrB,CAAL,GAAS,KAAKA,CAAd;AACAqB,IAAAA,IAAI,CAACpB,CAAL,GAAS,KAAKA,CAAd;AACA,QAAI,KAAKuB,QAAL,KAAkB,IAAtB,EAA4BH,IAAI,CAACG,QAAL,GAAgB,IAAhB;AAC7B;;AAED,SAAOH,IAAP;AACD,CAZD;;AAcA,SAASvB,SAAT","sourcesContent":["import { Color } from 'three';\nimport { InputNode } from '../core/InputNode.js';\nimport { NodeUtils } from '../core/NodeUtils.js';\n\nfunction ColorNode(color, g, b) {\n  InputNode.call(this, 'c');\n  this.value = color instanceof Color ? color : new Color(color || 0, g, b);\n}\n\nColorNode.prototype = Object.create(InputNode.prototype);\nColorNode.prototype.constructor = ColorNode;\nColorNode.prototype.nodeType = 'Color';\nNodeUtils.addShortcuts(ColorNode.prototype, 'value', ['r', 'g', 'b']);\n\nColorNode.prototype.generateReadonly = function (builder, output, uuid, type\n/*, ns, needsUpdate */\n) {\n  return builder.format('vec3( ' + this.r + ', ' + this.g + ', ' + this.b + ' )', type, output);\n};\n\nColorNode.prototype.copy = function (source) {\n  InputNode.prototype.copy.call(this, source);\n  this.value.copy(source);\n  return this;\n};\n\nColorNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.r = this.r;\n    data.g = this.g;\n    data.b = this.b;\n    if (this.readonly === true) data.readonly = true;\n  }\n\n  return data;\n};\n\nexport { ColorNode };\n"]},"metadata":{},"sourceType":"module"}