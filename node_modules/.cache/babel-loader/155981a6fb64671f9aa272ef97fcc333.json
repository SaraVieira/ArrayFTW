{"ast":null,"code":"import { Line3, Plane, Vector3, Mesh } from 'three';\nimport { ConvexGeometry } from '../geometries/ConvexGeometry.js';\n/**\n * @fileoverview This class can be used to subdivide a convex Geometry object into pieces.\n *\n * Usage:\n *\n * Use the function prepareBreakableObject to prepare a Mesh object to be broken.\n *\n * Then, call the various functions to subdivide the object (subdivideByImpact, cutByPlane)\n *\n * Sub-objects that are product of subdivision don't need prepareBreakableObject to be called on them.\n *\n * Requisites for the object:\n *\n *  - Mesh object must have a BufferGeometry (not Geometry) and a Material\n *\n *  - Vertex normals must be planar (not smoothed)\n *\n *  - The geometry must be convex (this is not checked in the library). You can create convex\n *  geometries with ConvexGeometry. The BoxGeometry, SphereGeometry and other convex primitives\n *  can also be used.\n *\n * Note: This lib adds member variables to object's userData member (see prepareBreakableObject function)\n * Use with caution and read the code when using with other libs.\n *\n * @param {double} minSizeForBreak Min size a debris can have to break.\n * @param {double} smallDelta Max distance to consider that a point belongs to a plane.\n *\n */\n\nvar ConvexObjectBreaker = function ConvexObjectBreaker(minSizeForBreak, smallDelta) {\n  this.minSizeForBreak = minSizeForBreak || 1.4;\n  this.smallDelta = smallDelta || 0.0001;\n  this.tempLine1 = new Line3();\n  this.tempPlane1 = new Plane();\n  this.tempPlane2 = new Plane();\n  this.tempPlane_Cut = new Plane();\n  this.tempCM1 = new Vector3();\n  this.tempCM2 = new Vector3();\n  this.tempVector3 = new Vector3();\n  this.tempVector3_2 = new Vector3();\n  this.tempVector3_3 = new Vector3();\n  this.tempVector3_P0 = new Vector3();\n  this.tempVector3_P1 = new Vector3();\n  this.tempVector3_P2 = new Vector3();\n  this.tempVector3_N0 = new Vector3();\n  this.tempVector3_N1 = new Vector3();\n  this.tempVector3_AB = new Vector3();\n  this.tempVector3_CB = new Vector3();\n  this.tempResultObjects = {\n    object1: null,\n    object2: null\n  };\n  this.segments = [];\n  var n = 30 * 30;\n\n  for (var i = 0; i < n; i++) {\n    this.segments[i] = false;\n  }\n};\n\nConvexObjectBreaker.prototype = {\n  constructor: ConvexObjectBreaker,\n  prepareBreakableObject: function prepareBreakableObject(object, mass, velocity, angularVelocity, breakable) {\n    // object is a Object3d (normally a Mesh), must have a BufferGeometry, and it must be convex.\n    // Its material property is propagated to its children (sub-pieces)\n    // mass must be > 0\n    if (!object.geometry.isBufferGeometry) {\n      console.error('THREE.ConvexObjectBreaker.prepareBreakableObject(): Parameter object must have a BufferGeometry.');\n    }\n\n    var userData = object.userData;\n    userData.mass = mass;\n    userData.velocity = velocity.clone();\n    userData.angularVelocity = angularVelocity.clone();\n    userData.breakable = breakable;\n  },\n\n  /*\n   * @param {int} maxRadialIterations Iterations for radial cuts.\n   * @param {int} maxRandomIterations Max random iterations for not-radial cuts\n   *\n   * Returns the array of pieces\n   */\n  subdivideByImpact: function subdivideByImpact(object, pointOfImpact, normal, maxRadialIterations, maxRandomIterations) {\n    var debris = [];\n    var tempPlane1 = this.tempPlane1;\n    var tempPlane2 = this.tempPlane2;\n    this.tempVector3.addVectors(pointOfImpact, normal);\n    tempPlane1.setFromCoplanarPoints(pointOfImpact, object.position, this.tempVector3);\n    var maxTotalIterations = maxRandomIterations + maxRadialIterations;\n    var scope = this;\n\n    function subdivideRadial(subObject, startAngle, endAngle, numIterations) {\n      if (Math.random() < numIterations * 0.05 || numIterations > maxTotalIterations) {\n        debris.push(subObject);\n        return;\n      }\n\n      var angle = Math.PI;\n\n      if (numIterations === 0) {\n        tempPlane2.normal.copy(tempPlane1.normal);\n        tempPlane2.constant = tempPlane1.constant;\n      } else {\n        if (numIterations <= maxRadialIterations) {\n          angle = (endAngle - startAngle) * (0.2 + 0.6 * Math.random()) + startAngle; // Rotate tempPlane2 at impact point around normal axis and the angle\n\n          scope.tempVector3_2.copy(object.position).sub(pointOfImpact).applyAxisAngle(normal, angle).add(pointOfImpact);\n          tempPlane2.setFromCoplanarPoints(pointOfImpact, scope.tempVector3, scope.tempVector3_2);\n        } else {\n          angle = (0.5 * (numIterations & 1) + 0.2 * (2 - Math.random())) * Math.PI; // Rotate tempPlane2 at object position around normal axis and the angle\n\n          scope.tempVector3_2.copy(pointOfImpact).sub(subObject.position).applyAxisAngle(normal, angle).add(subObject.position);\n          scope.tempVector3_3.copy(normal).add(subObject.position);\n          tempPlane2.setFromCoplanarPoints(subObject.position, scope.tempVector3_3, scope.tempVector3_2);\n        }\n      } // Perform the cut\n\n\n      scope.cutByPlane(subObject, tempPlane2, scope.tempResultObjects);\n      var obj1 = scope.tempResultObjects.object1;\n      var obj2 = scope.tempResultObjects.object2;\n\n      if (obj1) {\n        subdivideRadial(obj1, startAngle, angle, numIterations + 1);\n      }\n\n      if (obj2) {\n        subdivideRadial(obj2, angle, endAngle, numIterations + 1);\n      }\n    }\n\n    subdivideRadial(object, 0, 2 * Math.PI, 0);\n    return debris;\n  },\n  cutByPlane: function cutByPlane(object, plane, output) {\n    // Returns breakable objects in output.object1 and output.object2 members, the resulting 2 pieces of the cut.\n    // object2 can be null if the plane doesn't cut the object.\n    // object1 can be null only in case of internal error\n    // Returned value is number of pieces, 0 for error.\n    var geometry = object.geometry;\n    var coords = geometry.attributes.position.array;\n    var normals = geometry.attributes.normal.array;\n    var numPoints = coords.length / 3;\n    var numFaces = numPoints / 3;\n    var indices = geometry.getIndex();\n\n    if (indices) {\n      indices = indices.array;\n      numFaces = indices.length / 3;\n    }\n\n    function getVertexIndex(faceIdx, vert) {\n      // vert = 0, 1 or 2.\n      var idx = faceIdx * 3 + vert;\n      return indices ? indices[idx] : idx;\n    }\n\n    var points1 = [];\n    var points2 = [];\n    var delta = this.smallDelta; // Reset segments mark\n\n    var numPointPairs = numPoints * numPoints;\n\n    for (var i = 0; i < numPointPairs; i++) {\n      this.segments[i] = false;\n    }\n\n    var p0 = this.tempVector3_P0;\n    var p1 = this.tempVector3_P1;\n    var n0 = this.tempVector3_N0;\n    var n1 = this.tempVector3_N1; // Iterate through the faces to mark edges shared by coplanar faces\n\n    for (var _i = 0; _i < numFaces - 1; _i++) {\n      var a1 = getVertexIndex(_i, 0);\n      var b1 = getVertexIndex(_i, 1);\n      var c1 = getVertexIndex(_i, 2); // Assuming all 3 vertices have the same normal\n\n      n0.set(normals[a1], normals[a1] + 1, normals[a1] + 2);\n\n      for (var j = _i + 1; j < numFaces; j++) {\n        var a2 = getVertexIndex(j, 0);\n        var b2 = getVertexIndex(j, 1);\n        var c2 = getVertexIndex(j, 2); // Assuming all 3 vertices have the same normal\n\n        n1.set(normals[a2], normals[a2] + 1, normals[a2] + 2);\n        var coplanar = 1 - n0.dot(n1) < delta;\n\n        if (coplanar) {\n          if (a1 === a2 || a1 === b2 || a1 === c2) {\n            if (b1 === a2 || b1 === b2 || b1 === c2) {\n              this.segments[a1 * numPoints + b1] = true;\n              this.segments[b1 * numPoints + a1] = true;\n            } else {\n              this.segments[c1 * numPoints + a1] = true;\n              this.segments[a1 * numPoints + c1] = true;\n            }\n          } else if (b1 === a2 || b1 === b2 || b1 === c2) {\n            this.segments[c1 * numPoints + b1] = true;\n            this.segments[b1 * numPoints + c1] = true;\n          }\n        }\n      }\n    } // Transform the plane to object local space\n\n\n    var localPlane = this.tempPlane_Cut;\n    object.updateMatrix();\n    ConvexObjectBreaker.transformPlaneToLocalSpace(plane, object.matrix, localPlane); // Iterate through the faces adding points to both pieces\n\n    for (var _i2 = 0; _i2 < numFaces; _i2++) {\n      var va = getVertexIndex(_i2, 0);\n      var vb = getVertexIndex(_i2, 1);\n      var vc = getVertexIndex(_i2, 2);\n\n      for (var segment = 0; segment < 3; segment++) {\n        var i0 = segment === 0 ? va : segment === 1 ? vb : vc;\n        var i1 = segment === 0 ? vb : segment === 1 ? vc : va;\n        var segmentState = this.segments[i0 * numPoints + i1];\n        if (segmentState) continue; // The segment already has been processed in another face\n        // Mark segment as processed (also inverted segment)\n\n        this.segments[i0 * numPoints + i1] = true;\n        this.segments[i1 * numPoints + i0] = true;\n        p0.set(coords[3 * i0], coords[3 * i0 + 1], coords[3 * i0 + 2]);\n        p1.set(coords[3 * i1], coords[3 * i1 + 1], coords[3 * i1 + 2]); // mark: 1 for negative side, 2 for positive side, 3 for coplanar point\n\n        var mark0 = 0;\n        var d = localPlane.distanceToPoint(p0);\n\n        if (d > delta) {\n          mark0 = 2;\n          points2.push(p0.clone());\n        } else if (d < -delta) {\n          mark0 = 1;\n          points1.push(p0.clone());\n        } else {\n          mark0 = 3;\n          points1.push(p0.clone());\n          points2.push(p0.clone());\n        } // mark: 1 for negative side, 2 for positive side, 3 for coplanar point\n\n\n        var mark1 = 0;\n        var d = localPlane.distanceToPoint(p1);\n\n        if (d > delta) {\n          mark1 = 2;\n          points2.push(p1.clone());\n        } else if (d < -delta) {\n          mark1 = 1;\n          points1.push(p1.clone());\n        } else {\n          mark1 = 3;\n          points1.push(p1.clone());\n          points2.push(p1.clone());\n        }\n\n        if (mark0 === 1 && mark1 === 2 || mark0 === 2 && mark1 === 1) {\n          // Intersection of segment with the plane\n          this.tempLine1.start.copy(p0);\n          this.tempLine1.end.copy(p1);\n          var intersection = new Vector3();\n          intersection = localPlane.intersectLine(this.tempLine1, intersection);\n\n          if (intersection === undefined) {\n            // Shouldn't happen\n            console.error('Internal error: segment does not intersect plane.');\n            output.segmentedObject1 = null;\n            output.segmentedObject2 = null;\n            return 0;\n          }\n\n          points1.push(intersection);\n          points2.push(intersection.clone());\n        }\n      }\n    } // Calculate debris mass (very fast and imprecise):\n\n\n    var newMass = object.userData.mass * 0.5; // Calculate debris Center of Mass (again fast and imprecise)\n\n    this.tempCM1.set(0, 0, 0);\n    var radius1 = 0;\n    var numPoints1 = points1.length;\n\n    if (numPoints1 > 0) {\n      for (var _i3 = 0; _i3 < numPoints1; _i3++) {\n        this.tempCM1.add(points1[_i3]);\n      }\n\n      this.tempCM1.divideScalar(numPoints1);\n\n      for (var _i4 = 0; _i4 < numPoints1; _i4++) {\n        var p = points1[_i4];\n        p.sub(this.tempCM1);\n        radius1 = Math.max(radius1, p.x, p.y, p.z);\n      }\n\n      this.tempCM1.add(object.position);\n    }\n\n    this.tempCM2.set(0, 0, 0);\n    var radius2 = 0;\n    var numPoints2 = points2.length;\n\n    if (numPoints2 > 0) {\n      for (var _i5 = 0; _i5 < numPoints2; _i5++) {\n        this.tempCM2.add(points2[_i5]);\n      }\n\n      this.tempCM2.divideScalar(numPoints2);\n\n      for (var _i6 = 0; _i6 < numPoints2; _i6++) {\n        var p = points2[_i6];\n        p.sub(this.tempCM2);\n        radius2 = Math.max(radius2, p.x, p.y, p.z);\n      }\n\n      this.tempCM2.add(object.position);\n    }\n\n    var object1 = null;\n    var object2 = null;\n    var numObjects = 0;\n\n    if (numPoints1 > 4) {\n      object1 = new Mesh(new ConvexGeometry(points1), object.material);\n      object1.position.copy(this.tempCM1);\n      object1.quaternion.copy(object.quaternion);\n      this.prepareBreakableObject(object1, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius1 > this.minSizeForBreak);\n      numObjects++;\n    }\n\n    if (numPoints2 > 4) {\n      object2 = new Mesh(new ConvexGeometry(points2), object.material);\n      object2.position.copy(this.tempCM2);\n      object2.quaternion.copy(object.quaternion);\n      this.prepareBreakableObject(object2, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius2 > this.minSizeForBreak);\n      numObjects++;\n    }\n\n    output.object1 = object1;\n    output.object2 = object2;\n    return numObjects;\n  }\n};\n\nConvexObjectBreaker.transformFreeVector = function (v, m) {\n  // input:\n  // vector interpreted as a free vector\n  // THREE.Matrix4 orthogonal matrix (matrix without scale)\n  var x = v.x,\n      y = v.y,\n      z = v.z;\n  var e = m.elements;\n  v.x = e[0] * x + e[4] * y + e[8] * z;\n  v.y = e[1] * x + e[5] * y + e[9] * z;\n  v.z = e[2] * x + e[6] * y + e[10] * z;\n  return v;\n};\n\nConvexObjectBreaker.transformFreeVectorInverse = function (v, m) {\n  // input:\n  // vector interpreted as a free vector\n  // THREE.Matrix4 orthogonal matrix (matrix without scale)\n  var x = v.x,\n      y = v.y,\n      z = v.z;\n  var e = m.elements;\n  v.x = e[0] * x + e[1] * y + e[2] * z;\n  v.y = e[4] * x + e[5] * y + e[6] * z;\n  v.z = e[8] * x + e[9] * y + e[10] * z;\n  return v;\n};\n\nConvexObjectBreaker.transformTiedVectorInverse = function (v, m) {\n  // input:\n  // vector interpreted as a tied (ordinary) vector\n  // THREE.Matrix4 orthogonal matrix (matrix without scale)\n  var x = v.x,\n      y = v.y,\n      z = v.z;\n  var e = m.elements;\n  v.x = e[0] * x + e[1] * y + e[2] * z - e[12];\n  v.y = e[4] * x + e[5] * y + e[6] * z - e[13];\n  v.z = e[8] * x + e[9] * y + e[10] * z - e[14];\n  return v;\n};\n\nConvexObjectBreaker.transformPlaneToLocalSpace = function () {\n  var v1 = new Vector3();\n  return function transformPlaneToLocalSpace(plane, m, resultPlane) {\n    resultPlane.normal.copy(plane.normal);\n    resultPlane.constant = plane.constant;\n    var referencePoint = ConvexObjectBreaker.transformTiedVectorInverse(plane.coplanarPoint(v1), m);\n    ConvexObjectBreaker.transformFreeVectorInverse(resultPlane.normal, m); // recalculate constant (like in setFromNormalAndCoplanarPoint)\n\n    resultPlane.constant = -referencePoint.dot(resultPlane.normal);\n  };\n}();\n\nexport { ConvexObjectBreaker };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/misc/ConvexObjectBreaker.js"],"names":["Line3","Plane","Vector3","Mesh","ConvexGeometry","ConvexObjectBreaker","minSizeForBreak","smallDelta","tempLine1","tempPlane1","tempPlane2","tempPlane_Cut","tempCM1","tempCM2","tempVector3","tempVector3_2","tempVector3_3","tempVector3_P0","tempVector3_P1","tempVector3_P2","tempVector3_N0","tempVector3_N1","tempVector3_AB","tempVector3_CB","tempResultObjects","object1","object2","segments","n","i","prototype","constructor","prepareBreakableObject","object","mass","velocity","angularVelocity","breakable","geometry","isBufferGeometry","console","error","userData","clone","subdivideByImpact","pointOfImpact","normal","maxRadialIterations","maxRandomIterations","debris","addVectors","setFromCoplanarPoints","position","maxTotalIterations","scope","subdivideRadial","subObject","startAngle","endAngle","numIterations","Math","random","push","angle","PI","copy","constant","sub","applyAxisAngle","add","cutByPlane","obj1","obj2","plane","output","coords","attributes","array","normals","numPoints","length","numFaces","indices","getIndex","getVertexIndex","faceIdx","vert","idx","points1","points2","delta","numPointPairs","p0","p1","n0","n1","a1","b1","c1","set","j","a2","b2","c2","coplanar","dot","localPlane","updateMatrix","transformPlaneToLocalSpace","matrix","va","vb","vc","segment","i0","i1","segmentState","mark0","d","distanceToPoint","mark1","start","end","intersection","intersectLine","undefined","segmentedObject1","segmentedObject2","newMass","radius1","numPoints1","divideScalar","p","max","x","y","z","radius2","numPoints2","numObjects","material","quaternion","transformFreeVector","v","m","e","elements","transformFreeVectorInverse","transformTiedVectorInverse","v1","resultPlane","referencePoint","coplanarPoint"],"mappings":"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","sourcesContent":["import { Line3, Plane, Vector3, Mesh } from 'three';\nimport { ConvexGeometry } from '../geometries/ConvexGeometry.js';\n\n/**\n * @fileoverview This class can be used to subdivide a convex Geometry object into pieces.\n *\n * Usage:\n *\n * Use the function prepareBreakableObject to prepare a Mesh object to be broken.\n *\n * Then, call the various functions to subdivide the object (subdivideByImpact, cutByPlane)\n *\n * Sub-objects that are product of subdivision don't need prepareBreakableObject to be called on them.\n *\n * Requisites for the object:\n *\n *  - Mesh object must have a BufferGeometry (not Geometry) and a Material\n *\n *  - Vertex normals must be planar (not smoothed)\n *\n *  - The geometry must be convex (this is not checked in the library). You can create convex\n *  geometries with ConvexGeometry. The BoxGeometry, SphereGeometry and other convex primitives\n *  can also be used.\n *\n * Note: This lib adds member variables to object's userData member (see prepareBreakableObject function)\n * Use with caution and read the code when using with other libs.\n *\n * @param {double} minSizeForBreak Min size a debris can have to break.\n * @param {double} smallDelta Max distance to consider that a point belongs to a plane.\n *\n */\n\nvar ConvexObjectBreaker = function (minSizeForBreak, smallDelta) {\n  this.minSizeForBreak = minSizeForBreak || 1.4;\n  this.smallDelta = smallDelta || 0.0001;\n  this.tempLine1 = new Line3();\n  this.tempPlane1 = new Plane();\n  this.tempPlane2 = new Plane();\n  this.tempPlane_Cut = new Plane();\n  this.tempCM1 = new Vector3();\n  this.tempCM2 = new Vector3();\n  this.tempVector3 = new Vector3();\n  this.tempVector3_2 = new Vector3();\n  this.tempVector3_3 = new Vector3();\n  this.tempVector3_P0 = new Vector3();\n  this.tempVector3_P1 = new Vector3();\n  this.tempVector3_P2 = new Vector3();\n  this.tempVector3_N0 = new Vector3();\n  this.tempVector3_N1 = new Vector3();\n  this.tempVector3_AB = new Vector3();\n  this.tempVector3_CB = new Vector3();\n  this.tempResultObjects = {\n    object1: null,\n    object2: null\n  };\n  this.segments = [];\n  var n = 30 * 30;\n\n  for (let i = 0; i < n; i++) this.segments[i] = false;\n};\n\nConvexObjectBreaker.prototype = {\n  constructor: ConvexObjectBreaker,\n  prepareBreakableObject: function (object, mass, velocity, angularVelocity, breakable) {\n    // object is a Object3d (normally a Mesh), must have a BufferGeometry, and it must be convex.\n    // Its material property is propagated to its children (sub-pieces)\n    // mass must be > 0\n    if (!object.geometry.isBufferGeometry) {\n      console.error('THREE.ConvexObjectBreaker.prepareBreakableObject(): Parameter object must have a BufferGeometry.');\n    }\n\n    var userData = object.userData;\n    userData.mass = mass;\n    userData.velocity = velocity.clone();\n    userData.angularVelocity = angularVelocity.clone();\n    userData.breakable = breakable;\n  },\n\n  /*\n   * @param {int} maxRadialIterations Iterations for radial cuts.\n   * @param {int} maxRandomIterations Max random iterations for not-radial cuts\n   *\n   * Returns the array of pieces\n   */\n  subdivideByImpact: function (object, pointOfImpact, normal, maxRadialIterations, maxRandomIterations) {\n    var debris = [];\n    var tempPlane1 = this.tempPlane1;\n    var tempPlane2 = this.tempPlane2;\n    this.tempVector3.addVectors(pointOfImpact, normal);\n    tempPlane1.setFromCoplanarPoints(pointOfImpact, object.position, this.tempVector3);\n    var maxTotalIterations = maxRandomIterations + maxRadialIterations;\n    var scope = this;\n\n    function subdivideRadial(subObject, startAngle, endAngle, numIterations) {\n      if (Math.random() < numIterations * 0.05 || numIterations > maxTotalIterations) {\n        debris.push(subObject);\n        return;\n      }\n\n      var angle = Math.PI;\n\n      if (numIterations === 0) {\n        tempPlane2.normal.copy(tempPlane1.normal);\n        tempPlane2.constant = tempPlane1.constant;\n      } else {\n        if (numIterations <= maxRadialIterations) {\n          angle = (endAngle - startAngle) * (0.2 + 0.6 * Math.random()) + startAngle; // Rotate tempPlane2 at impact point around normal axis and the angle\n\n          scope.tempVector3_2.copy(object.position).sub(pointOfImpact).applyAxisAngle(normal, angle).add(pointOfImpact);\n          tempPlane2.setFromCoplanarPoints(pointOfImpact, scope.tempVector3, scope.tempVector3_2);\n        } else {\n          angle = (0.5 * (numIterations & 1) + 0.2 * (2 - Math.random())) * Math.PI; // Rotate tempPlane2 at object position around normal axis and the angle\n\n          scope.tempVector3_2.copy(pointOfImpact).sub(subObject.position).applyAxisAngle(normal, angle).add(subObject.position);\n          scope.tempVector3_3.copy(normal).add(subObject.position);\n          tempPlane2.setFromCoplanarPoints(subObject.position, scope.tempVector3_3, scope.tempVector3_2);\n        }\n      } // Perform the cut\n\n\n      scope.cutByPlane(subObject, tempPlane2, scope.tempResultObjects);\n      var obj1 = scope.tempResultObjects.object1;\n      var obj2 = scope.tempResultObjects.object2;\n\n      if (obj1) {\n        subdivideRadial(obj1, startAngle, angle, numIterations + 1);\n      }\n\n      if (obj2) {\n        subdivideRadial(obj2, angle, endAngle, numIterations + 1);\n      }\n    }\n\n    subdivideRadial(object, 0, 2 * Math.PI, 0);\n    return debris;\n  },\n  cutByPlane: function (object, plane, output) {\n    // Returns breakable objects in output.object1 and output.object2 members, the resulting 2 pieces of the cut.\n    // object2 can be null if the plane doesn't cut the object.\n    // object1 can be null only in case of internal error\n    // Returned value is number of pieces, 0 for error.\n    var geometry = object.geometry;\n    var coords = geometry.attributes.position.array;\n    var normals = geometry.attributes.normal.array;\n    var numPoints = coords.length / 3;\n    var numFaces = numPoints / 3;\n    var indices = geometry.getIndex();\n\n    if (indices) {\n      indices = indices.array;\n      numFaces = indices.length / 3;\n    }\n\n    function getVertexIndex(faceIdx, vert) {\n      // vert = 0, 1 or 2.\n      var idx = faceIdx * 3 + vert;\n      return indices ? indices[idx] : idx;\n    }\n\n    var points1 = [];\n    var points2 = [];\n    var delta = this.smallDelta; // Reset segments mark\n\n    var numPointPairs = numPoints * numPoints;\n\n    for (let i = 0; i < numPointPairs; i++) this.segments[i] = false;\n\n    var p0 = this.tempVector3_P0;\n    var p1 = this.tempVector3_P1;\n    var n0 = this.tempVector3_N0;\n    var n1 = this.tempVector3_N1; // Iterate through the faces to mark edges shared by coplanar faces\n\n    for (let i = 0; i < numFaces - 1; i++) {\n      var a1 = getVertexIndex(i, 0);\n      var b1 = getVertexIndex(i, 1);\n      var c1 = getVertexIndex(i, 2); // Assuming all 3 vertices have the same normal\n\n      n0.set(normals[a1], normals[a1] + 1, normals[a1] + 2);\n\n      for (let j = i + 1; j < numFaces; j++) {\n        var a2 = getVertexIndex(j, 0);\n        var b2 = getVertexIndex(j, 1);\n        var c2 = getVertexIndex(j, 2); // Assuming all 3 vertices have the same normal\n\n        n1.set(normals[a2], normals[a2] + 1, normals[a2] + 2);\n        var coplanar = 1 - n0.dot(n1) < delta;\n\n        if (coplanar) {\n          if (a1 === a2 || a1 === b2 || a1 === c2) {\n            if (b1 === a2 || b1 === b2 || b1 === c2) {\n              this.segments[a1 * numPoints + b1] = true;\n              this.segments[b1 * numPoints + a1] = true;\n            } else {\n              this.segments[c1 * numPoints + a1] = true;\n              this.segments[a1 * numPoints + c1] = true;\n            }\n          } else if (b1 === a2 || b1 === b2 || b1 === c2) {\n            this.segments[c1 * numPoints + b1] = true;\n            this.segments[b1 * numPoints + c1] = true;\n          }\n        }\n      }\n    } // Transform the plane to object local space\n\n\n    var localPlane = this.tempPlane_Cut;\n    object.updateMatrix();\n    ConvexObjectBreaker.transformPlaneToLocalSpace(plane, object.matrix, localPlane); // Iterate through the faces adding points to both pieces\n\n    for (let i = 0; i < numFaces; i++) {\n      var va = getVertexIndex(i, 0);\n      var vb = getVertexIndex(i, 1);\n      var vc = getVertexIndex(i, 2);\n\n      for (let segment = 0; segment < 3; segment++) {\n        var i0 = segment === 0 ? va : segment === 1 ? vb : vc;\n        var i1 = segment === 0 ? vb : segment === 1 ? vc : va;\n        var segmentState = this.segments[i0 * numPoints + i1];\n        if (segmentState) continue; // The segment already has been processed in another face\n        // Mark segment as processed (also inverted segment)\n\n        this.segments[i0 * numPoints + i1] = true;\n        this.segments[i1 * numPoints + i0] = true;\n        p0.set(coords[3 * i0], coords[3 * i0 + 1], coords[3 * i0 + 2]);\n        p1.set(coords[3 * i1], coords[3 * i1 + 1], coords[3 * i1 + 2]); // mark: 1 for negative side, 2 for positive side, 3 for coplanar point\n\n        var mark0 = 0;\n        var d = localPlane.distanceToPoint(p0);\n\n        if (d > delta) {\n          mark0 = 2;\n          points2.push(p0.clone());\n        } else if (d < -delta) {\n          mark0 = 1;\n          points1.push(p0.clone());\n        } else {\n          mark0 = 3;\n          points1.push(p0.clone());\n          points2.push(p0.clone());\n        } // mark: 1 for negative side, 2 for positive side, 3 for coplanar point\n\n\n        var mark1 = 0;\n        var d = localPlane.distanceToPoint(p1);\n\n        if (d > delta) {\n          mark1 = 2;\n          points2.push(p1.clone());\n        } else if (d < -delta) {\n          mark1 = 1;\n          points1.push(p1.clone());\n        } else {\n          mark1 = 3;\n          points1.push(p1.clone());\n          points2.push(p1.clone());\n        }\n\n        if (mark0 === 1 && mark1 === 2 || mark0 === 2 && mark1 === 1) {\n          // Intersection of segment with the plane\n          this.tempLine1.start.copy(p0);\n          this.tempLine1.end.copy(p1);\n          var intersection = new Vector3();\n          intersection = localPlane.intersectLine(this.tempLine1, intersection);\n\n          if (intersection === undefined) {\n            // Shouldn't happen\n            console.error('Internal error: segment does not intersect plane.');\n            output.segmentedObject1 = null;\n            output.segmentedObject2 = null;\n            return 0;\n          }\n\n          points1.push(intersection);\n          points2.push(intersection.clone());\n        }\n      }\n    } // Calculate debris mass (very fast and imprecise):\n\n\n    var newMass = object.userData.mass * 0.5; // Calculate debris Center of Mass (again fast and imprecise)\n\n    this.tempCM1.set(0, 0, 0);\n    var radius1 = 0;\n    var numPoints1 = points1.length;\n\n    if (numPoints1 > 0) {\n      for (let i = 0; i < numPoints1; i++) this.tempCM1.add(points1[i]);\n\n      this.tempCM1.divideScalar(numPoints1);\n\n      for (let i = 0; i < numPoints1; i++) {\n        var p = points1[i];\n        p.sub(this.tempCM1);\n        radius1 = Math.max(radius1, p.x, p.y, p.z);\n      }\n\n      this.tempCM1.add(object.position);\n    }\n\n    this.tempCM2.set(0, 0, 0);\n    var radius2 = 0;\n    var numPoints2 = points2.length;\n\n    if (numPoints2 > 0) {\n      for (let i = 0; i < numPoints2; i++) this.tempCM2.add(points2[i]);\n\n      this.tempCM2.divideScalar(numPoints2);\n\n      for (let i = 0; i < numPoints2; i++) {\n        var p = points2[i];\n        p.sub(this.tempCM2);\n        radius2 = Math.max(radius2, p.x, p.y, p.z);\n      }\n\n      this.tempCM2.add(object.position);\n    }\n\n    var object1 = null;\n    var object2 = null;\n    var numObjects = 0;\n\n    if (numPoints1 > 4) {\n      object1 = new Mesh(new ConvexGeometry(points1), object.material);\n      object1.position.copy(this.tempCM1);\n      object1.quaternion.copy(object.quaternion);\n      this.prepareBreakableObject(object1, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius1 > this.minSizeForBreak);\n      numObjects++;\n    }\n\n    if (numPoints2 > 4) {\n      object2 = new Mesh(new ConvexGeometry(points2), object.material);\n      object2.position.copy(this.tempCM2);\n      object2.quaternion.copy(object.quaternion);\n      this.prepareBreakableObject(object2, newMass, object.userData.velocity, object.userData.angularVelocity, 2 * radius2 > this.minSizeForBreak);\n      numObjects++;\n    }\n\n    output.object1 = object1;\n    output.object2 = object2;\n    return numObjects;\n  }\n};\n\nConvexObjectBreaker.transformFreeVector = function (v, m) {\n  // input:\n  // vector interpreted as a free vector\n  // THREE.Matrix4 orthogonal matrix (matrix without scale)\n  var x = v.x,\n      y = v.y,\n      z = v.z;\n  var e = m.elements;\n  v.x = e[0] * x + e[4] * y + e[8] * z;\n  v.y = e[1] * x + e[5] * y + e[9] * z;\n  v.z = e[2] * x + e[6] * y + e[10] * z;\n  return v;\n};\n\nConvexObjectBreaker.transformFreeVectorInverse = function (v, m) {\n  // input:\n  // vector interpreted as a free vector\n  // THREE.Matrix4 orthogonal matrix (matrix without scale)\n  var x = v.x,\n      y = v.y,\n      z = v.z;\n  var e = m.elements;\n  v.x = e[0] * x + e[1] * y + e[2] * z;\n  v.y = e[4] * x + e[5] * y + e[6] * z;\n  v.z = e[8] * x + e[9] * y + e[10] * z;\n  return v;\n};\n\nConvexObjectBreaker.transformTiedVectorInverse = function (v, m) {\n  // input:\n  // vector interpreted as a tied (ordinary) vector\n  // THREE.Matrix4 orthogonal matrix (matrix without scale)\n  var x = v.x,\n      y = v.y,\n      z = v.z;\n  var e = m.elements;\n  v.x = e[0] * x + e[1] * y + e[2] * z - e[12];\n  v.y = e[4] * x + e[5] * y + e[6] * z - e[13];\n  v.z = e[8] * x + e[9] * y + e[10] * z - e[14];\n  return v;\n};\n\nConvexObjectBreaker.transformPlaneToLocalSpace = function () {\n  var v1 = new Vector3();\n  return function transformPlaneToLocalSpace(plane, m, resultPlane) {\n    resultPlane.normal.copy(plane.normal);\n    resultPlane.constant = plane.constant;\n    var referencePoint = ConvexObjectBreaker.transformTiedVectorInverse(plane.coplanarPoint(v1), m);\n    ConvexObjectBreaker.transformFreeVectorInverse(resultPlane.normal, m); // recalculate constant (like in setFromNormalAndCoplanarPoint)\n\n    resultPlane.constant = -referencePoint.dot(resultPlane.normal);\n  };\n}();\n\nexport { ConvexObjectBreaker };\n"]},"metadata":{},"sourceType":"module"}