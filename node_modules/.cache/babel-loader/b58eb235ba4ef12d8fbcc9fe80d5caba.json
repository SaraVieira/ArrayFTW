{"ast":null,"code":"import { ShaderChunk, UniformsUtils, ShaderLib, Color } from 'three';\n/**\n * ------------------------------------------------------------------------------------------\n * Subsurface Scattering shader\n * Based on GDC 2011 – Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\n *------------------------------------------------------------------------------------------\n */\n\nfunction replaceAll(string, find, replace) {\n  return string.split(find).join(replace);\n}\n\nvar meshphong_frag_head = ShaderChunk['meshphong_frag'].slice(0, ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nvar meshphong_frag_body = ShaderChunk['meshphong_frag'].slice(ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nvar SubsurfaceScatteringShader = {\n  uniforms: UniformsUtils.merge([ShaderLib['phong'].uniforms, {\n    thicknessMap: {\n      value: null\n    },\n    thicknessColor: {\n      value: new Color(0xffffff)\n    },\n    thicknessDistortion: {\n      value: 0.1\n    },\n    thicknessAmbient: {\n      value: 0.0\n    },\n    thicknessAttenuation: {\n      value: 0.1\n    },\n    thicknessPower: {\n      value: 2.0\n    },\n    thicknessScale: {\n      value: 10.0\n    }\n  }]),\n  vertexShader: ['#define USE_UV', ShaderChunk['meshphong_vert']].join('\\n'),\n  fragmentShader: ['#define USE_UV', '#define SUBSURFACE', meshphong_frag_head, 'uniform sampler2D thicknessMap;', 'uniform float thicknessPower;', 'uniform float thicknessScale;', 'uniform float thicknessDistortion;', 'uniform float thicknessAmbient;', 'uniform float thicknessAttenuation;', 'uniform vec3 thicknessColor;', 'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {', '\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;', '\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));', '\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;', '\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;', '\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;', '}', meshphong_frag_body.replace('#include <lights_fragment_begin>', replaceAll(ShaderChunk['lights_fragment_begin'], 'RE_Direct( directLight, geometry, material, reflectedLight );', ['RE_Direct( directLight, geometry, material, reflectedLight );', '#if defined( SUBSURFACE ) && defined( USE_UV )', ' RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);', '#endif'].join('\\n')))].join('\\n')\n};\nexport { SubsurfaceScatteringShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/SubsurfaceScatteringShader.js"],"names":["ShaderChunk","UniformsUtils","ShaderLib","Color","replaceAll","string","find","replace","split","join","meshphong_frag_head","slice","indexOf","meshphong_frag_body","SubsurfaceScatteringShader","uniforms","merge","thicknessMap","value","thicknessColor","thicknessDistortion","thicknessAmbient","thicknessAttenuation","thicknessPower","thicknessScale","vertexShader","fragmentShader"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,aAAtB,EAAqCC,SAArC,EAAgDC,KAAhD,QAA6D,OAA7D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,OAAlC,EAA2C;AACzC,SAAOF,MAAM,CAACG,KAAP,CAAaF,IAAb,EAAmBG,IAAnB,CAAwBF,OAAxB,CAAP;AACD;;AAED,IAAIG,mBAAmB,GAAGV,WAAW,CAAC,gBAAD,CAAX,CAA8BW,KAA9B,CAAoC,CAApC,EAAuCX,WAAW,CAAC,gBAAD,CAAX,CAA8BY,OAA9B,CAAsC,eAAtC,CAAvC,CAA1B;AACA,IAAIC,mBAAmB,GAAGb,WAAW,CAAC,gBAAD,CAAX,CAA8BW,KAA9B,CAAoCX,WAAW,CAAC,gBAAD,CAAX,CAA8BY,OAA9B,CAAsC,eAAtC,CAApC,CAA1B;AACA,IAAIE,0BAA0B,GAAG;AAC/BC,EAAAA,QAAQ,EAAEd,aAAa,CAACe,KAAd,CAAoB,CAACd,SAAS,CAAC,OAAD,CAAT,CAAmBa,QAApB,EAA8B;AAC1DE,IAAAA,YAAY,EAAE;AACZC,MAAAA,KAAK,EAAE;AADK,KAD4C;AAI1DC,IAAAA,cAAc,EAAE;AACdD,MAAAA,KAAK,EAAE,IAAIf,KAAJ,CAAU,QAAV;AADO,KAJ0C;AAO1DiB,IAAAA,mBAAmB,EAAE;AACnBF,MAAAA,KAAK,EAAE;AADY,KAPqC;AAU1DG,IAAAA,gBAAgB,EAAE;AAChBH,MAAAA,KAAK,EAAE;AADS,KAVwC;AAa1DI,IAAAA,oBAAoB,EAAE;AACpBJ,MAAAA,KAAK,EAAE;AADa,KAboC;AAgB1DK,IAAAA,cAAc,EAAE;AACdL,MAAAA,KAAK,EAAE;AADO,KAhB0C;AAmB1DM,IAAAA,cAAc,EAAE;AACdN,MAAAA,KAAK,EAAE;AADO;AAnB0C,GAA9B,CAApB,CADqB;AAwB/BO,EAAAA,YAAY,EAAE,CAAC,gBAAD,EAAmBzB,WAAW,CAAC,gBAAD,CAA9B,EAAkDS,IAAlD,CAAuD,IAAvD,CAxBiB;AAyB/BiB,EAAAA,cAAc,EAAE,CAAC,gBAAD,EAAmB,oBAAnB,EAAyChB,mBAAzC,EAA8D,iCAA9D,EAAiG,+BAAjG,EAAkI,+BAAlI,EAAmK,oCAAnK,EAAyM,iCAAzM,EAA4O,qCAA5O,EAAmR,8BAAnR,EAAmT,4JAAnT,EAAid,mEAAjd,EAAshB,oGAAthB,EAA4nB,gHAA5nB,EAA8uB,wEAA9uB,EAAwzB,6FAAxzB,EAAu5B,GAAv5B,EAA45BG,mBAAmB,CAACN,OAApB,CAA4B,kCAA5B,EAAgEH,UAAU,CAACJ,WAAW,CAAC,uBAAD,CAAZ,EAAuC,+DAAvC,EAAwG,CAAC,+DAAD,EAAkE,gDAAlE,EAAoH,oEAApH,EAA0L,QAA1L,EAAoMS,IAApM,CAAyM,IAAzM,CAAxG,CAA1E,CAA55B,EAAgyCA,IAAhyC,CAAqyC,IAAryC;AAzBe,CAAjC;AA4BA,SAASK,0BAAT","sourcesContent":["import { ShaderChunk, UniformsUtils, ShaderLib, Color } from 'three';\n\n/**\n * ------------------------------------------------------------------------------------------\n * Subsurface Scattering shader\n * Based on GDC 2011 – Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\n *------------------------------------------------------------------------------------------\n */\n\nfunction replaceAll(string, find, replace) {\n  return string.split(find).join(replace);\n}\n\nvar meshphong_frag_head = ShaderChunk['meshphong_frag'].slice(0, ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nvar meshphong_frag_body = ShaderChunk['meshphong_frag'].slice(ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nvar SubsurfaceScatteringShader = {\n  uniforms: UniformsUtils.merge([ShaderLib['phong'].uniforms, {\n    thicknessMap: {\n      value: null\n    },\n    thicknessColor: {\n      value: new Color(0xffffff)\n    },\n    thicknessDistortion: {\n      value: 0.1\n    },\n    thicknessAmbient: {\n      value: 0.0\n    },\n    thicknessAttenuation: {\n      value: 0.1\n    },\n    thicknessPower: {\n      value: 2.0\n    },\n    thicknessScale: {\n      value: 10.0\n    }\n  }]),\n  vertexShader: ['#define USE_UV', ShaderChunk['meshphong_vert']].join('\\n'),\n  fragmentShader: ['#define USE_UV', '#define SUBSURFACE', meshphong_frag_head, 'uniform sampler2D thicknessMap;', 'uniform float thicknessPower;', 'uniform float thicknessScale;', 'uniform float thicknessDistortion;', 'uniform float thicknessAmbient;', 'uniform float thicknessAttenuation;', 'uniform vec3 thicknessColor;', 'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {', '\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;', '\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));', '\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;', '\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;', '\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;', '}', meshphong_frag_body.replace('#include <lights_fragment_begin>', replaceAll(ShaderChunk['lights_fragment_begin'], 'RE_Direct( directLight, geometry, material, reflectedLight );', ['RE_Direct( directLight, geometry, material, reflectedLight );', '#if defined( SUBSURFACE ) && defined( USE_UV )', ' RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);', '#endif'].join('\\n')))].join('\\n')\n};\n\nexport { SubsurfaceScatteringShader };\n"]},"metadata":{},"sourceType":"module"}