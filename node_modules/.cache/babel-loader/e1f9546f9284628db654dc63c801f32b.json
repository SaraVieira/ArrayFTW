{"ast":null,"code":"import _assertThisInitialized from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _toConsumableArray from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _get from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _regeneratorRuntime from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _objectSpread from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _createForOfIteratorHelper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { eachProp, is, toArray, isAnimatedString, Globals, getFluidValue, useLayoutEffect, each, raf, flush, FluidValue, deprecateInterpolate, callFluidObservers, frameLoop, hasFluidValue, flushCalls, isEqual, getFluidObservers, addFluidObserver, removeFluidObserver, noop, useMemoOne, deprecateDirectCall, useForceUpdate, usePrev, useOnce, createInterpolator, createStringInterpolator } from '@react-spring/shared';\nexport { Globals, createInterpolator } from '@react-spring/shared';\nimport { useContext, createElement, createContext, useMemo, useRef, useState, Fragment } from 'react';\nimport { getAnimated, AnimatedValue, getPayload, AnimatedString, getAnimatedType, setAnimated } from '@react-spring/animated';\nexport * from '@react-spring/types/animated';\nexport * from '@react-spring/types/interpolation';\n\nfunction callProp(value) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return is.fun(value) ? value.apply(void 0, args) : value;\n}\n\nvar matchProp = function matchProp(value, key) {\n  return value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\n};\n\nvar resolveProp = function resolveProp(prop, key) {\n  return is.obj(prop) ? key && prop[key] : prop;\n};\n\nvar getDefaultProp = function getDefaultProp(props, key) {\n  return props.default === true ? props[key] : props.default ? props.default[key] : void 0;\n};\n\nvar noopTransform = function noopTransform(value) {\n  return value;\n};\n\nvar getDefaultProps = function getDefaultProps(props) {\n  var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noopTransform;\n  var keys = DEFAULT_PROPS;\n\n  if (props.default && props.default !== true) {\n    props = props.default;\n    keys = Object.keys(props);\n  }\n\n  var defaults = {};\n\n  var _iterator = _createForOfIteratorHelper(keys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      var value = transform(props[key], key);\n\n      if (!is.und(value)) {\n        defaults[key] = value;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return defaults;\n};\n\nvar DEFAULT_PROPS = [\"config\", \"onProps\", \"onStart\", \"onChange\", \"onPause\", \"onResume\", \"onRest\"];\nvar RESERVED_PROPS = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n  keys: 1,\n  callId: 1,\n  parentId: 1\n};\n\nfunction getForwardProps(props) {\n  var forward = {};\n  var count = 0;\n  eachProp(props, function (value, prop) {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n      count++;\n    }\n  });\n\n  if (count) {\n    return forward;\n  }\n}\n\nfunction inferTo(props) {\n  var to = getForwardProps(props);\n\n  if (to) {\n    var out = {\n      to: to\n    };\n    eachProp(props, function (val, key) {\n      return key in to || (out[key] = val);\n    });\n    return out;\n  }\n\n  return _objectSpread({}, props);\n}\n\nfunction computeGoal(value) {\n  value = getFluidValue(value);\n  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? Globals.createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\n\nfunction hasProps(props) {\n  for (var _ in props) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isAsyncTo(to) {\n  return is.fun(to) || is.arr(to) && is.obj(to[0]);\n}\n\nfunction detachRefs(ctrl, ref) {\n  var _a;\n\n  (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);\n  ref == null ? void 0 : ref.delete(ctrl);\n}\n\nfunction replaceRef(ctrl, ref) {\n  var _a;\n\n  if (ref && ctrl.ref !== ref) {\n    (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);\n    ref.add(ctrl);\n    ctrl.ref = ref;\n  }\n}\n\nfunction useChain(refs, timeSteps) {\n  var timeFrame = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;\n  useLayoutEffect(function () {\n    if (timeSteps) {\n      var prevDelay = 0;\n      each(refs, function (ref, i) {\n        var controllers = ref.current;\n\n        if (controllers.length) {\n          var delay = timeFrame * timeSteps[i];\n          if (isNaN(delay)) delay = prevDelay;else prevDelay = delay;\n          each(controllers, function (ctrl) {\n            each(ctrl.queue, function (props) {\n              var memoizedDelayProp = props.delay;\n\n              props.delay = function (key) {\n                return delay + callProp(memoizedDelayProp || 0, key);\n              };\n            });\n            ctrl.start();\n          });\n        }\n      });\n    } else {\n      var p = Promise.resolve();\n      each(refs, function (ref) {\n        var controllers = ref.current;\n\n        if (controllers.length) {\n          var queues = controllers.map(function (ctrl) {\n            var q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          });\n          p = p.then(function () {\n            each(controllers, function (ctrl, i) {\n              return each(queues[i] || [], function (update) {\n                return ctrl.queue.push(update);\n              });\n            });\n            return ref.start();\n          });\n        }\n      });\n    }\n  });\n}\n\nvar config = {\n  default: {\n    tension: 170,\n    friction: 26\n  },\n  gentle: {\n    tension: 120,\n    friction: 14\n  },\n  wobbly: {\n    tension: 180,\n    friction: 12\n  },\n  stiff: {\n    tension: 210,\n    friction: 20\n  },\n  slow: {\n    tension: 280,\n    friction: 60\n  },\n  molasses: {\n    tension: 280,\n    friction: 120\n  }\n};\n\nvar linear = function linear(t) {\n  return t;\n};\n\nvar defaults = _objectSpread(_objectSpread({}, config.default), {}, {\n  mass: 1,\n  damping: 1,\n  easing: linear,\n  clamp: false\n});\n\nvar AnimationConfig = function AnimationConfig() {\n  _classCallCheck(this, AnimationConfig);\n\n  this.velocity = 0;\n  Object.assign(this, defaults);\n};\n\nfunction mergeConfig(config, newConfig, defaultConfig) {\n  if (defaultConfig) {\n    defaultConfig = _objectSpread({}, defaultConfig);\n    sanitizeConfig(defaultConfig, newConfig);\n    newConfig = _objectSpread(_objectSpread({}, defaultConfig), newConfig);\n  }\n\n  sanitizeConfig(config, newConfig);\n  Object.assign(config, newConfig);\n\n  for (var key in defaults) {\n    if (config[key] == null) {\n      config[key] = defaults[key];\n    }\n  }\n\n  var mass = config.mass,\n      frequency = config.frequency,\n      damping = config.damping;\n\n  if (!is.und(frequency)) {\n    if (frequency < 0.01) frequency = 0.01;\n    if (damping < 0) damping = 0;\n    config.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n    config.friction = 4 * Math.PI * damping * mass / frequency;\n  }\n\n  return config;\n}\n\nfunction sanitizeConfig(config, props) {\n  if (!is.und(props.decay)) {\n    config.duration = void 0;\n  } else {\n    var isTensionConfig = !is.und(props.tension) || !is.und(props.friction);\n\n    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {\n      config.duration = void 0;\n      config.decay = void 0;\n    }\n\n    if (isTensionConfig) {\n      config.frequency = void 0;\n    }\n  }\n}\n\nvar emptyArray = [];\n\nvar Animation = function Animation() {\n  _classCallCheck(this, Animation);\n\n  this.changed = false;\n  this.values = emptyArray;\n  this.toValues = null;\n  this.fromValues = emptyArray;\n  this.config = new AnimationConfig();\n  this.immediate = false;\n};\n\nfunction scheduleProps(callId, _ref) {\n  var key = _ref.key,\n      props = _ref.props,\n      defaultProps = _ref.defaultProps,\n      state = _ref.state,\n      actions = _ref.actions;\n  return new Promise(function (resolve, reject) {\n    var _a;\n\n    var delay;\n    var timeout;\n    var cancel = matchProp((_a = props.cancel) != null ? _a : defaultProps == null ? void 0 : defaultProps.cancel, key);\n\n    if (cancel) {\n      onStart();\n    } else {\n      if (!is.und(props.pause)) {\n        state.paused = matchProp(props.pause, key);\n      }\n\n      var pause = defaultProps == null ? void 0 : defaultProps.pause;\n\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key);\n      }\n\n      delay = callProp(props.delay || 0, key);\n\n      if (pause) {\n        state.resumeQueue.add(onResume);\n        actions.pause();\n      } else {\n        actions.resume();\n        onResume();\n      }\n    }\n\n    function onPause() {\n      state.resumeQueue.add(onResume);\n      state.timeouts.delete(timeout);\n      timeout.cancel();\n      delay = timeout.time - raf.now();\n    }\n\n    function onResume() {\n      if (delay > 0) {\n        timeout = raf.setTimeout(onStart, delay);\n        state.pauseQueue.add(onPause);\n        state.timeouts.add(timeout);\n      } else {\n        onStart();\n      }\n    }\n\n    function onStart() {\n      state.pauseQueue.delete(onPause);\n      state.timeouts.delete(timeout);\n\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true;\n      }\n\n      try {\n        actions.start(_objectSpread(_objectSpread({}, props), {}, {\n          callId: callId,\n          cancel: cancel\n        }), resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n}\n\nvar getCombinedResult = function getCombinedResult(target, results) {\n  return results.length == 1 ? results[0] : results.some(function (result) {\n    return result.cancelled;\n  }) ? getCancelledResult(target.get()) : results.every(function (result) {\n    return result.noop;\n  }) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every(function (result) {\n    return result.finished;\n  }));\n};\n\nvar getNoopResult = function getNoopResult(value) {\n  return {\n    value: value,\n    noop: true,\n    finished: true,\n    cancelled: false\n  };\n};\n\nvar getFinishedResult = function getFinishedResult(value, finished) {\n  var cancelled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return {\n    value: value,\n    finished: finished,\n    cancelled: cancelled\n  };\n};\n\nvar getCancelledResult = function getCancelledResult(value) {\n  return {\n    value: value,\n    cancelled: true,\n    finished: false\n  };\n};\n\nfunction runAsync(to, props, state, target) {\n  var callId = props.callId,\n      parentId = props.parentId,\n      onRest = props.onRest;\n  var prevTo = state.asyncTo,\n      prevPromise = state.promise;\n\n  if (!parentId && to === prevTo && !props.reset) {\n    return prevPromise;\n  }\n\n  return state.promise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var defaultProps, preventBail, bail, bailPromise, bailIfEnded, animate, result, animating;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            state.asyncId = callId;\n            state.asyncTo = to;\n            defaultProps = getDefaultProps(props, function (value, key) {\n              return key === \"onRest\" ? void 0 : value;\n            });\n            bailPromise = new Promise(function (resolve, reject) {\n              return preventBail = resolve, bail = reject;\n            });\n\n            bailIfEnded = function bailIfEnded(bailSignal) {\n              var bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);\n\n              if (bailResult) {\n                bailSignal.result = bailResult;\n                bail(bailSignal);\n                throw bailSignal;\n              }\n            };\n\n            animate = function animate(arg1, arg2) {\n              var bailSignal = new BailSignal();\n              var skipAnimationSignal = new SkipAniamtionSignal();\n              return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                var props2, result2;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!Globals.skipAnimation) {\n                          _context.next = 5;\n                          break;\n                        }\n\n                        stopAsync(state);\n                        skipAnimationSignal.result = getFinishedResult(target, false);\n                        bail(skipAnimationSignal);\n                        throw skipAnimationSignal;\n\n                      case 5:\n                        bailIfEnded(bailSignal);\n                        props2 = is.obj(arg1) ? _objectSpread({}, arg1) : _objectSpread(_objectSpread({}, arg2), {}, {\n                          to: arg1\n                        });\n                        props2.parentId = callId;\n                        eachProp(defaultProps, function (value, key) {\n                          if (is.und(props2[key])) {\n                            props2[key] = value;\n                          }\n                        });\n                        _context.next = 11;\n                        return target.start(props2);\n\n                      case 11:\n                        result2 = _context.sent;\n                        bailIfEnded(bailSignal);\n\n                        if (!state.paused) {\n                          _context.next = 16;\n                          break;\n                        }\n\n                        _context.next = 16;\n                        return new Promise(function (resume) {\n                          state.resumeQueue.add(resume);\n                        });\n\n                      case 16:\n                        return _context.abrupt(\"return\", result2);\n\n                      case 17:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }))();\n            };\n\n            if (!Globals.skipAnimation) {\n              _context3.next = 9;\n              break;\n            }\n\n            stopAsync(state);\n            return _context3.abrupt(\"return\", getFinishedResult(target, false));\n\n          case 9:\n            _context3.prev = 9;\n\n            if (is.arr(to)) {\n              animating = function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(queue) {\n                  var _iterator2, _step2, props2;\n\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _iterator2 = _createForOfIteratorHelper(queue);\n                          _context2.prev = 1;\n\n                          _iterator2.s();\n\n                        case 3:\n                          if ((_step2 = _iterator2.n()).done) {\n                            _context2.next = 9;\n                            break;\n                          }\n\n                          props2 = _step2.value;\n                          _context2.next = 7;\n                          return animate(props2);\n\n                        case 7:\n                          _context2.next = 3;\n                          break;\n\n                        case 9:\n                          _context2.next = 14;\n                          break;\n\n                        case 11:\n                          _context2.prev = 11;\n                          _context2.t0 = _context2[\"catch\"](1);\n\n                          _iterator2.e(_context2.t0);\n\n                        case 14:\n                          _context2.prev = 14;\n\n                          _iterator2.f();\n\n                          return _context2.finish(14);\n\n                        case 17:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, null, [[1, 11, 14, 17]]);\n                }));\n\n                return function (_x) {\n                  return _ref4.apply(this, arguments);\n                };\n              }()(to);\n            } else {\n              animating = Promise.resolve(to(animate, target.stop.bind(target)));\n            }\n\n            _context3.next = 13;\n            return Promise.all([animating.then(preventBail), bailPromise]);\n\n          case 13:\n            result = getFinishedResult(target.get(), true, false);\n            _context3.next = 27;\n            break;\n\n          case 16:\n            _context3.prev = 16;\n            _context3.t0 = _context3[\"catch\"](9);\n\n            if (!(_context3.t0 instanceof BailSignal)) {\n              _context3.next = 22;\n              break;\n            }\n\n            result = _context3.t0.result;\n            _context3.next = 27;\n            break;\n\n          case 22:\n            if (!(_context3.t0 instanceof SkipAniamtionSignal)) {\n              _context3.next = 26;\n              break;\n            }\n\n            result = _context3.t0.result;\n            _context3.next = 27;\n            break;\n\n          case 26:\n            throw _context3.t0;\n\n          case 27:\n            _context3.prev = 27;\n\n            if (callId == state.asyncId) {\n              state.asyncId = parentId;\n              state.asyncTo = parentId ? prevTo : void 0;\n              state.promise = parentId ? prevPromise : void 0;\n            }\n\n            return _context3.finish(27);\n\n          case 30:\n            if (is.fun(onRest)) {\n              raf.batchedUpdates(function () {\n                onRest(result, target, target.item);\n              });\n            }\n\n            return _context3.abrupt(\"return\", result);\n\n          case 32:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[9, 16, 27, 30]]);\n  }))();\n}\n\nfunction stopAsync(state, cancelId) {\n  flush(state.timeouts, function (t) {\n    return t.cancel();\n  });\n  state.pauseQueue.clear();\n  state.resumeQueue.clear();\n  state.asyncId = state.asyncTo = state.promise = void 0;\n  if (cancelId) state.cancelId = cancelId;\n}\n\nvar BailSignal = /*#__PURE__*/function (_Error) {\n  _inherits(BailSignal, _Error);\n\n  var _super = _createSuper(BailSignal);\n\n  function BailSignal() {\n    _classCallCheck(this, BailSignal);\n\n    return _super.call(this, \"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\");\n  }\n\n  return BailSignal;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar SkipAniamtionSignal = /*#__PURE__*/function (_Error2) {\n  _inherits(SkipAniamtionSignal, _Error2);\n\n  var _super2 = _createSuper(SkipAniamtionSignal);\n\n  function SkipAniamtionSignal() {\n    _classCallCheck(this, SkipAniamtionSignal);\n\n    return _super2.call(this, \"SkipAnimationSignal\");\n  }\n\n  return SkipAniamtionSignal;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar isFrameValue = function isFrameValue(value) {\n  return value instanceof FrameValue;\n};\n\nvar nextId = 1;\n\nvar FrameValue = /*#__PURE__*/function (_FluidValue) {\n  _inherits(FrameValue, _FluidValue);\n\n  var _super3 = _createSuper(FrameValue);\n\n  function FrameValue() {\n    var _this;\n\n    _classCallCheck(this, FrameValue);\n\n    _this = _super3.apply(this, arguments);\n    _this.id = nextId++;\n    _this._priority = 0;\n    return _this;\n  }\n\n  _createClass(FrameValue, [{\n    key: \"priority\",\n    get: function get() {\n      return this._priority;\n    },\n    set: function set(priority) {\n      if (this._priority != priority) {\n        this._priority = priority;\n\n        this._onPriorityChange(priority);\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var node = getAnimated(this);\n      return node && node.getValue();\n    }\n  }, {\n    key: \"to\",\n    value: function to() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return Globals.to(this, args);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate() {\n      deprecateInterpolate();\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return Globals.to(this, args);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.get();\n    }\n  }, {\n    key: \"observerAdded\",\n    value: function observerAdded(count) {\n      if (count == 1) this._attach();\n    }\n  }, {\n    key: \"observerRemoved\",\n    value: function observerRemoved(count) {\n      if (count == 0) this._detach();\n    }\n  }, {\n    key: \"_attach\",\n    value: function _attach() {}\n  }, {\n    key: \"_detach\",\n    value: function _detach() {}\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(value) {\n      var idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      callFluidObservers(this, {\n        type: \"change\",\n        parent: this,\n        value: value,\n        idle: idle\n      });\n    }\n  }, {\n    key: \"_onPriorityChange\",\n    value: function _onPriorityChange(priority) {\n      if (!this.idle) {\n        frameLoop.sort(this);\n      }\n\n      callFluidObservers(this, {\n        type: \"priority\",\n        parent: this,\n        priority: priority\n      });\n    }\n  }]);\n\n  return FrameValue;\n}(FluidValue);\n\nvar $P = Symbol.for(\"SpringPhase\");\nvar HAS_ANIMATED = 1;\nvar IS_ANIMATING = 2;\nvar IS_PAUSED = 4;\n\nvar hasAnimated = function hasAnimated(target) {\n  return (target[$P] & HAS_ANIMATED) > 0;\n};\n\nvar isAnimating = function isAnimating(target) {\n  return (target[$P] & IS_ANIMATING) > 0;\n};\n\nvar isPaused = function isPaused(target) {\n  return (target[$P] & IS_PAUSED) > 0;\n};\n\nvar setActiveBit = function setActiveBit(target, active) {\n  return active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\n};\n\nvar setPausedBit = function setPausedBit(target, paused) {\n  return paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n};\n\nvar SpringValue = /*#__PURE__*/function (_FrameValue) {\n  _inherits(SpringValue, _FrameValue);\n\n  var _super4 = _createSuper(SpringValue);\n\n  function SpringValue(arg1, arg2) {\n    var _this2;\n\n    _classCallCheck(this, SpringValue);\n\n    _this2 = _super4.call(this);\n    _this2.animation = new Animation();\n    _this2.defaultProps = {};\n    _this2._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    _this2._pendingCalls = new Set();\n    _this2._lastCallId = 0;\n    _this2._lastToId = 0;\n    _this2._memoizedDuration = 0;\n\n    if (!is.und(arg1) || !is.und(arg2)) {\n      var props = is.obj(arg1) ? _objectSpread({}, arg1) : _objectSpread(_objectSpread({}, arg2), {}, {\n        from: arg1\n      });\n\n      if (is.und(props.default)) {\n        props.default = true;\n      }\n\n      _this2.start(props);\n    }\n\n    return _this2;\n  }\n\n  _createClass(SpringValue, [{\n    key: \"idle\",\n    get: function get() {\n      return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n    }\n  }, {\n    key: \"goal\",\n    get: function get() {\n      return getFluidValue(this.animation.to);\n    }\n  }, {\n    key: \"velocity\",\n    get: function get() {\n      var node = getAnimated(this);\n      return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map(function (node2) {\n        return node2.lastVelocity || 0;\n      });\n    }\n  }, {\n    key: \"hasAnimated\",\n    get: function get() {\n      return hasAnimated(this);\n    }\n  }, {\n    key: \"isAnimating\",\n    get: function get() {\n      return isAnimating(this);\n    }\n  }, {\n    key: \"isPaused\",\n    get: function get() {\n      return isPaused(this);\n    }\n  }, {\n    key: \"advance\",\n    value: function advance(dt) {\n      var _this3 = this;\n\n      var idle = true;\n      var changed = false;\n      var anim = this.animation;\n      var config = anim.config,\n          toValues = anim.toValues;\n      var payload = getPayload(anim.to);\n\n      if (!payload && hasFluidValue(anim.to)) {\n        toValues = toArray(getFluidValue(anim.to));\n      }\n\n      anim.values.forEach(function (node2, i) {\n        if (node2.done) return;\n        var to = node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n        var finished = anim.immediate;\n        var position = to;\n\n        if (!finished) {\n          position = node2.lastPosition;\n\n          if (config.tension <= 0) {\n            node2.done = true;\n            return;\n          }\n\n          var elapsed = node2.elapsedTime += dt;\n          var from = anim.fromValues[i];\n          var v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config.velocity) ? config.velocity[i] : config.velocity;\n          var velocity;\n\n          if (!is.und(config.duration)) {\n            var p = 1;\n\n            if (config.duration > 0) {\n              if (_this3._memoizedDuration !== config.duration) {\n                _this3._memoizedDuration = config.duration;\n\n                if (node2.durationProgress > 0) {\n                  node2.elapsedTime = config.duration * node2.durationProgress;\n                  elapsed = node2.elapsedTime += dt;\n                }\n              }\n\n              p = (config.progress || 0) + elapsed / _this3._memoizedDuration;\n              p = p > 1 ? 1 : p < 0 ? 0 : p;\n              node2.durationProgress = p;\n            }\n\n            position = from + config.easing(p) * (to - from);\n            velocity = (position - node2.lastPosition) / dt;\n            finished = p == 1;\n          } else if (config.decay) {\n            var decay = config.decay === true ? 0.998 : config.decay;\n            var e = Math.exp(-(1 - decay) * elapsed);\n            position = from + v0 / (1 - decay) * (1 - e);\n            finished = Math.abs(node2.lastPosition - position) < 0.1;\n            velocity = v0 * e;\n          } else {\n            velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n            var precision = config.precision || (from == to ? 5e-3 : Math.min(1, Math.abs(to - from) * 1e-3));\n            var restVelocity = config.restVelocity || precision / 10;\n            var bounceFactor = config.clamp ? 0 : config.bounce;\n            var canBounce = !is.und(bounceFactor);\n            var isGrowing = from == to ? node2.v0 > 0 : from < to;\n            var isMoving;\n            var isBouncing = false;\n            var step = 1;\n            var numSteps = Math.ceil(dt / step);\n\n            for (var n = 0; n < numSteps; ++n) {\n              isMoving = Math.abs(velocity) > restVelocity;\n\n              if (!isMoving) {\n                finished = Math.abs(to - position) <= precision;\n\n                if (finished) {\n                  break;\n                }\n              }\n\n              if (canBounce) {\n                isBouncing = position == to || position > to == isGrowing;\n\n                if (isBouncing) {\n                  velocity = -velocity * bounceFactor;\n                  position = to;\n                }\n              }\n\n              var springForce = -config.tension * 1e-6 * (position - to);\n              var dampingForce = -config.friction * 1e-3 * velocity;\n              var acceleration = (springForce + dampingForce) / config.mass;\n              velocity = velocity + acceleration * step;\n              position = position + velocity * step;\n            }\n          }\n\n          node2.lastVelocity = velocity;\n\n          if (Number.isNaN(position)) {\n            console.warn(\"Got NaN while animating:\", _this3);\n            finished = true;\n          }\n        }\n\n        if (payload && !payload[i].done) {\n          finished = false;\n        }\n\n        if (finished) {\n          node2.done = true;\n        } else {\n          idle = false;\n        }\n\n        if (node2.setValue(position, config.round)) {\n          changed = true;\n        }\n      });\n      var node = getAnimated(this);\n\n      if (idle) {\n        var value = getFluidValue(anim.to);\n\n        if (node.setValue(value) || changed) {\n          this._onChange(value);\n        }\n\n        this._stop();\n      } else if (changed) {\n        this._onChange(node.getValue());\n      }\n    }\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      var _this4 = this;\n\n      raf.batchedUpdates(function () {\n        _this4._stop();\n\n        _this4._focus(value);\n\n        _this4._set(value);\n      });\n      return this;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this._update({\n        pause: true\n      });\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      this._update({\n        pause: false\n      });\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      var _this5 = this;\n\n      if (isAnimating(this)) {\n        var _this$animation = this.animation,\n            _to = _this$animation.to,\n            _config = _this$animation.config;\n        raf.batchedUpdates(function () {\n          _this5._onStart();\n\n          if (!_config.decay) {\n            _this5._set(_to, false);\n          }\n\n          _this5._stop();\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      var queue = this.queue || (this.queue = []);\n      queue.push(props);\n      return this;\n    }\n  }, {\n    key: \"start\",\n    value: function start(to, arg2) {\n      var _this6 = this;\n\n      var queue;\n\n      if (!is.und(to)) {\n        queue = [is.obj(to) ? to : _objectSpread(_objectSpread({}, arg2), {}, {\n          to: to\n        })];\n      } else {\n        queue = this.queue || [];\n        this.queue = [];\n      }\n\n      return Promise.all(queue.map(function (props) {\n        return _this6._update(props);\n      })).then(function (results) {\n        return getCombinedResult(_this6, results);\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(cancel) {\n      var _this7 = this;\n\n      var to = this.animation.to;\n\n      this._focus(this.get());\n\n      stopAsync(this._state, cancel && this._lastCallId);\n      raf.batchedUpdates(function () {\n        return _this7._stop(to, cancel);\n      });\n      return this;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._update({\n        reset: true\n      });\n    }\n  }, {\n    key: \"eventObserved\",\n    value: function eventObserved(event) {\n      if (event.type == \"change\") {\n        this._start();\n      } else if (event.type == \"priority\") {\n        this.priority = event.priority + 1;\n      }\n    }\n  }, {\n    key: \"_prepareNode\",\n    value: function _prepareNode(props) {\n      var key = this.key || \"\";\n      var to = props.to,\n          from = props.from;\n      to = is.obj(to) ? to[key] : to;\n\n      if (to == null || isAsyncTo(to)) {\n        to = void 0;\n      }\n\n      from = is.obj(from) ? from[key] : from;\n\n      if (from == null) {\n        from = void 0;\n      }\n\n      var range = {\n        to: to,\n        from: from\n      };\n\n      if (!hasAnimated(this)) {\n        if (props.reverse) {\n          var _ref5 = [from, to];\n          to = _ref5[0];\n          from = _ref5[1];\n        }\n\n        from = getFluidValue(from);\n\n        if (!is.und(from)) {\n          this._set(from);\n        } else if (!getAnimated(this)) {\n          this._set(to);\n        }\n      }\n\n      return range;\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(_ref6, isLoop) {\n      var _this8 = this;\n\n      var props = Object.assign({}, _ref6);\n      var key = this.key,\n          defaultProps = this.defaultProps;\n      if (props.default) Object.assign(defaultProps, getDefaultProps(props, function (value, prop) {\n        return /^on/.test(prop) ? resolveProp(value, key) : value;\n      }));\n      mergeActiveFn(this, props, \"onProps\");\n      sendEvent(this, \"onProps\", props, this);\n\n      var range = this._prepareNode(props);\n\n      if (Object.isFrozen(this)) {\n        throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n      }\n\n      var state = this._state;\n      return scheduleProps(++this._lastCallId, {\n        key: key,\n        props: props,\n        defaultProps: defaultProps,\n        state: state,\n        actions: {\n          pause: function pause() {\n            if (!isPaused(_this8)) {\n              setPausedBit(_this8, true);\n              flushCalls(state.pauseQueue);\n              sendEvent(_this8, \"onPause\", getFinishedResult(_this8, checkFinished(_this8, _this8.animation.to)), _this8);\n            }\n          },\n          resume: function resume() {\n            if (isPaused(_this8)) {\n              setPausedBit(_this8, false);\n\n              if (isAnimating(_this8)) {\n                _this8._resume();\n              }\n\n              flushCalls(state.resumeQueue);\n              sendEvent(_this8, \"onResume\", getFinishedResult(_this8, checkFinished(_this8, _this8.animation.to)), _this8);\n            }\n          },\n          start: this._merge.bind(this, range)\n        }\n      }).then(function (result) {\n        if (props.loop && result.finished && !(isLoop && result.noop)) {\n          var nextProps = createLoopUpdate(props);\n\n          if (nextProps) {\n            return _this8._update(nextProps, true);\n          }\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"_merge\",\n    value: function _merge(range, props, resolve) {\n      var _this9 = this;\n\n      if (props.cancel) {\n        this.stop(true);\n        return resolve(getCancelledResult(this));\n      }\n\n      var hasToProp = !is.und(range.to);\n      var hasFromProp = !is.und(range.from);\n\n      if (hasToProp || hasFromProp) {\n        if (props.callId > this._lastToId) {\n          this._lastToId = props.callId;\n        } else {\n          return resolve(getCancelledResult(this));\n        }\n      }\n\n      var key = this.key,\n          defaultProps = this.defaultProps,\n          anim = this.animation;\n      var prevTo = anim.to,\n          prevFrom = anim.from;\n      var _range$to = range.to,\n          to = _range$to === void 0 ? prevTo : _range$to,\n          _range$from = range.from,\n          from = _range$from === void 0 ? prevFrom : _range$from;\n\n      if (hasFromProp && !hasToProp && (!props.default || is.und(to))) {\n        to = from;\n      }\n\n      if (props.reverse) {\n        var _ref7 = [from, to];\n        to = _ref7[0];\n        from = _ref7[1];\n      }\n\n      var hasFromChanged = !isEqual(from, prevFrom);\n\n      if (hasFromChanged) {\n        anim.from = from;\n      }\n\n      from = getFluidValue(from);\n      var hasToChanged = !isEqual(to, prevTo);\n\n      if (hasToChanged) {\n        this._focus(to);\n      }\n\n      var hasAsyncTo = isAsyncTo(props.to);\n      var config = anim.config;\n      var decay = config.decay,\n          velocity = config.velocity;\n\n      if (hasToProp || hasFromProp) {\n        config.velocity = 0;\n      }\n\n      if (props.config && !hasAsyncTo) {\n        mergeConfig(config, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n      }\n\n      var node = getAnimated(this);\n\n      if (!node || is.und(to)) {\n        return resolve(getFinishedResult(this, true));\n      }\n\n      var reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);\n      var value = reset ? from : this.get();\n      var goal = computeGoal(to);\n      var isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);\n      var immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n\n      if (hasToChanged) {\n        var nodeType = getAnimatedType(to);\n\n        if (nodeType !== node.constructor) {\n          if (immediate) {\n            node = this._set(goal);\n          } else throw Error(\"Cannot animate between \".concat(node.constructor.name, \" and \").concat(nodeType.name, \", as the \\\"to\\\" prop suggests\"));\n        }\n      }\n\n      var goalType = node.constructor;\n      var started = hasFluidValue(to);\n      var finished = false;\n\n      if (!started) {\n        var hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n\n        if (hasToChanged || hasValueChanged) {\n          finished = isEqual(computeGoal(value), goal);\n          started = !finished;\n        }\n\n        if (!isEqual(config.decay, decay) || !isEqual(config.velocity, velocity)) {\n          started = true;\n        }\n      }\n\n      if (finished && isAnimating(this)) {\n        if (anim.changed && !reset) {\n          started = true;\n        } else if (!started) {\n          this._stop(prevTo);\n        }\n      }\n\n      if (!hasAsyncTo) {\n        if (started || hasFluidValue(prevTo)) {\n          anim.values = node.getPayload();\n          anim.toValues = hasFluidValue(to) ? null : goalType == AnimatedString ? [1] : toArray(goal);\n        }\n\n        if (anim.immediate != immediate) {\n          anim.immediate = immediate;\n\n          if (!immediate && !reset) {\n            this._set(prevTo);\n          }\n        }\n\n        if (started) {\n          var onRest = anim.onRest;\n          each(ACTIVE_EVENTS, function (type) {\n            return mergeActiveFn(_this9, props, type);\n          });\n          var result = getFinishedResult(this, checkFinished(this, prevTo));\n          flushCalls(this._pendingCalls, result);\n\n          this._pendingCalls.add(resolve);\n\n          if (anim.changed) raf.batchedUpdates(function () {\n            var _a;\n\n            anim.changed = !reset;\n            onRest == null ? void 0 : onRest(result, _this9);\n\n            if (reset) {\n              callProp(defaultProps.onRest, result);\n            } else {\n              (_a = anim.onStart) == null ? void 0 : _a.call(anim, result, _this9);\n            }\n          });\n        }\n      }\n\n      if (reset) {\n        this._set(value);\n      }\n\n      if (hasAsyncTo) {\n        resolve(runAsync(props.to, props, this._state, this));\n      } else if (started) {\n        this._start();\n      } else if (isAnimating(this) && !hasToChanged) {\n        this._pendingCalls.add(resolve);\n      } else {\n        resolve(getNoopResult(value));\n      }\n    }\n  }, {\n    key: \"_focus\",\n    value: function _focus(value) {\n      var anim = this.animation;\n\n      if (value !== anim.to) {\n        if (getFluidObservers(this)) {\n          this._detach();\n        }\n\n        anim.to = value;\n\n        if (getFluidObservers(this)) {\n          this._attach();\n        }\n      }\n    }\n  }, {\n    key: \"_attach\",\n    value: function _attach() {\n      var priority = 0;\n      var to = this.animation.to;\n\n      if (hasFluidValue(to)) {\n        addFluidObserver(to, this);\n\n        if (isFrameValue(to)) {\n          priority = to.priority + 1;\n        }\n      }\n\n      this.priority = priority;\n    }\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      var to = this.animation.to;\n\n      if (hasFluidValue(to)) {\n        removeFluidObserver(to, this);\n      }\n    }\n  }, {\n    key: \"_set\",\n    value: function _set(arg) {\n      var _this10 = this;\n\n      var idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var value = getFluidValue(arg);\n\n      if (!is.und(value)) {\n        var oldNode = getAnimated(this);\n\n        if (!oldNode || !isEqual(value, oldNode.getValue())) {\n          var nodeType = getAnimatedType(value);\n\n          if (!oldNode || oldNode.constructor != nodeType) {\n            setAnimated(this, nodeType.create(value));\n          } else {\n            oldNode.setValue(value);\n          }\n\n          if (oldNode) {\n            raf.batchedUpdates(function () {\n              _this10._onChange(value, idle);\n            });\n          }\n        }\n      }\n\n      return getAnimated(this);\n    }\n  }, {\n    key: \"_onStart\",\n    value: function _onStart() {\n      var anim = this.animation;\n\n      if (!anim.changed) {\n        anim.changed = true;\n        sendEvent(this, \"onStart\", getFinishedResult(this, checkFinished(this, anim.to)), this);\n      }\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(value, idle) {\n      if (!idle) {\n        this._onStart();\n\n        callProp(this.animation.onChange, value, this);\n      }\n\n      callProp(this.defaultProps.onChange, value, this);\n\n      _get(_getPrototypeOf(SpringValue.prototype), \"_onChange\", this).call(this, value, idle);\n    }\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      var anim = this.animation;\n      getAnimated(this).reset(getFluidValue(anim.to));\n\n      if (!anim.immediate) {\n        anim.fromValues = anim.values.map(function (node) {\n          return node.lastPosition;\n        });\n      }\n\n      if (!isAnimating(this)) {\n        setActiveBit(this, true);\n\n        if (!isPaused(this)) {\n          this._resume();\n        }\n      }\n    }\n  }, {\n    key: \"_resume\",\n    value: function _resume() {\n      if (Globals.skipAnimation) {\n        this.finish();\n      } else {\n        frameLoop.start(this);\n      }\n    }\n  }, {\n    key: \"_stop\",\n    value: function _stop(goal, cancel) {\n      if (isAnimating(this)) {\n        setActiveBit(this, false);\n        var anim = this.animation;\n        each(anim.values, function (node) {\n          node.done = true;\n        });\n\n        if (anim.toValues) {\n          anim.onChange = anim.onPause = anim.onResume = void 0;\n        }\n\n        callFluidObservers(this, {\n          type: \"idle\",\n          parent: this\n        });\n        var result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));\n        flushCalls(this._pendingCalls, result);\n\n        if (anim.changed) {\n          anim.changed = false;\n          sendEvent(this, \"onRest\", result, this);\n        }\n      }\n    }\n  }]);\n\n  return SpringValue;\n}(FrameValue);\n\nfunction checkFinished(target, to) {\n  var goal = computeGoal(to);\n  var value = computeGoal(target.get());\n  return isEqual(value, goal);\n}\n\nfunction createLoopUpdate(props) {\n  var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.loop;\n  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props.to;\n  var loopRet = callProp(loop);\n\n  if (loopRet) {\n    var overrides = loopRet !== true && inferTo(loopRet);\n    var reverse = (overrides || props).reverse;\n    var reset = !overrides || overrides.reset;\n    return createUpdate(_objectSpread(_objectSpread({}, props), {}, {\n      loop: loop,\n      default: false,\n      pause: void 0,\n      to: !reverse || isAsyncTo(to) ? to : void 0,\n      from: reset ? props.from : void 0,\n      reset: reset\n    }, overrides));\n  }\n}\n\nfunction createUpdate(props) {\n  var _props = props = inferTo(props),\n      to = _props.to,\n      from = _props.from;\n\n  var keys = new Set();\n  if (is.obj(to)) findDefined(to, keys);\n  if (is.obj(from)) findDefined(from, keys);\n  props.keys = keys.size ? Array.from(keys) : null;\n  return props;\n}\n\nfunction declareUpdate(props) {\n  var update = createUpdate(props);\n\n  if (is.und(update.default)) {\n    update.default = getDefaultProps(update);\n  }\n\n  return update;\n}\n\nfunction findDefined(values, keys) {\n  eachProp(values, function (value, key) {\n    return value != null && keys.add(key);\n  });\n}\n\nvar ACTIVE_EVENTS = [\"onStart\", \"onRest\", \"onChange\", \"onPause\", \"onResume\"];\n\nfunction mergeActiveFn(target, props, type) {\n  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\n\nfunction sendEvent(target, type) {\n  var _b2, _d2;\n\n  var _a, _b, _c, _d;\n\n  for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n    args[_key4 - 2] = arguments[_key4];\n  }\n\n  (_b = (_a = target.animation)[type]) == null ? void 0 : (_b2 = _b).call.apply(_b2, [_a].concat(args));\n  (_d = (_c = target.defaultProps)[type]) == null ? void 0 : (_d2 = _d).call.apply(_d2, [_c].concat(args));\n}\n\nvar BATCHED_EVENTS = [\"onStart\", \"onChange\", \"onRest\"];\nvar nextId$1 = 1;\n\nvar Controller = /*#__PURE__*/function () {\n  function Controller(props, flush2) {\n    _classCallCheck(this, Controller);\n\n    this.id = nextId$1++;\n    this.springs = {};\n    this.queue = [];\n    this._lastAsyncId = 0;\n    this._active = new Set();\n    this._changed = new Set();\n    this._started = false;\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._events = {\n      onStart: new Map(),\n      onChange: new Map(),\n      onRest: new Map()\n    };\n    this._onFrame = this._onFrame.bind(this);\n\n    if (flush2) {\n      this._flush = flush2;\n    }\n\n    if (props) {\n      this.start(_objectSpread({\n        default: true\n      }, props));\n    }\n  }\n\n  _createClass(Controller, [{\n    key: \"idle\",\n    get: function get() {\n      return !this._state.asyncTo && Object.values(this.springs).every(function (spring) {\n        return spring.idle;\n      });\n    }\n  }, {\n    key: \"item\",\n    get: function get() {\n      return this._item;\n    },\n    set: function set(item) {\n      this._item = item;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var values = {};\n      this.each(function (spring, key) {\n        return values[key] = spring.get();\n      });\n      return values;\n    }\n  }, {\n    key: \"set\",\n    value: function set(values) {\n      for (var key in values) {\n        var value = values[key];\n\n        if (!is.und(value)) {\n          this.springs[key].set(value);\n        }\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      if (props) {\n        this.queue.push(createUpdate(props));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"start\",\n    value: function start(props) {\n      var queue = this.queue;\n\n      if (props) {\n        queue = toArray(props).map(createUpdate);\n      } else {\n        this.queue = [];\n      }\n\n      if (this._flush) {\n        return this._flush(this, queue);\n      }\n\n      prepareKeys(this, queue);\n      return flushUpdateQueue(this, queue);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(arg, keys) {\n      if (arg !== !!arg) {\n        keys = arg;\n      }\n\n      if (keys) {\n        var springs = this.springs;\n        each(toArray(keys), function (key) {\n          return springs[key].stop(!!arg);\n        });\n      } else {\n        stopAsync(this._state, this._lastAsyncId);\n        this.each(function (spring) {\n          return spring.stop(!!arg);\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"pause\",\n    value: function pause(keys) {\n      if (is.und(keys)) {\n        this.start({\n          pause: true\n        });\n      } else {\n        var springs = this.springs;\n        each(toArray(keys), function (key) {\n          return springs[key].pause();\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"resume\",\n    value: function resume(keys) {\n      if (is.und(keys)) {\n        this.start({\n          pause: false\n        });\n      } else {\n        var springs = this.springs;\n        each(toArray(keys), function (key) {\n          return springs[key].resume();\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"each\",\n    value: function each(iterator) {\n      eachProp(this.springs, iterator);\n    }\n  }, {\n    key: \"_onFrame\",\n    value: function _onFrame() {\n      var _this11 = this;\n\n      var _this$_events = this._events,\n          onStart = _this$_events.onStart,\n          onChange = _this$_events.onChange,\n          onRest = _this$_events.onRest;\n      var active = this._active.size > 0;\n      var changed = this._changed.size > 0;\n\n      if (active && !this._started || changed && !this._started) {\n        this._started = true;\n        flush(onStart, function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 2),\n              onStart2 = _ref9[0],\n              result = _ref9[1];\n\n          result.value = _this11.get();\n          onStart2(result, _this11, _this11._item);\n        });\n      }\n\n      var idle = !active && this._started;\n      var values = changed || idle && onRest.size ? this.get() : null;\n\n      if (changed && onChange.size) {\n        flush(onChange, function (_ref10) {\n          var _ref11 = _slicedToArray(_ref10, 2),\n              onChange2 = _ref11[0],\n              result = _ref11[1];\n\n          result.value = values;\n          onChange2(result, _this11, _this11._item);\n        });\n      }\n\n      if (idle) {\n        this._started = false;\n        flush(onRest, function (_ref12) {\n          var _ref13 = _slicedToArray(_ref12, 2),\n              onRest2 = _ref13[0],\n              result = _ref13[1];\n\n          result.value = values;\n          onRest2(result, _this11, _this11._item);\n        });\n      }\n    }\n  }, {\n    key: \"eventObserved\",\n    value: function eventObserved(event) {\n      if (event.type == \"change\") {\n        this._changed.add(event.parent);\n\n        if (!event.idle) {\n          this._active.add(event.parent);\n        }\n      } else if (event.type == \"idle\") {\n        this._active.delete(event.parent);\n      } else return;\n\n      raf.onFrame(this._onFrame);\n    }\n  }]);\n\n  return Controller;\n}();\n\nfunction flushUpdateQueue(ctrl, queue) {\n  return Promise.all(queue.map(function (props) {\n    return flushUpdate(ctrl, props);\n  })).then(function (results) {\n    return getCombinedResult(ctrl, results);\n  });\n}\n\nfunction flushUpdate(_x2, _x3, _x4) {\n  return _flushUpdate.apply(this, arguments);\n}\n\nfunction _flushUpdate() {\n  _flushUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ctrl, props, isLoop) {\n    var keys, to, from, loop, onRest, onResolve, defaults, asyncTo, state, promises, cancel, result, nextProps;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            keys = props.keys, to = props.to, from = props.from, loop = props.loop, onRest = props.onRest, onResolve = props.onResolve;\n            defaults = is.obj(props.default) && props.default;\n\n            if (loop) {\n              props.loop = false;\n            }\n\n            if (to === false) props.to = null;\n            if (from === false) props.from = null;\n            asyncTo = is.arr(to) || is.fun(to) ? to : void 0;\n\n            if (asyncTo) {\n              props.to = void 0;\n              props.onRest = void 0;\n\n              if (defaults) {\n                defaults.onRest = void 0;\n              }\n            } else {\n              each(BATCHED_EVENTS, function (key) {\n                var handler = props[key];\n\n                if (is.fun(handler)) {\n                  var queue = ctrl[\"_events\"][key];\n\n                  props[key] = function (_ref22) {\n                    var finished = _ref22.finished,\n                        cancelled = _ref22.cancelled;\n                    var result2 = queue.get(handler);\n\n                    if (result2) {\n                      if (!finished) result2.finished = false;\n                      if (cancelled) result2.cancelled = true;\n                    } else {\n                      queue.set(handler, {\n                        value: null,\n                        finished: finished || false,\n                        cancelled: cancelled || false\n                      });\n                    }\n                  };\n\n                  if (defaults) {\n                    defaults[key] = props[key];\n                  }\n                }\n              });\n            }\n\n            state = ctrl[\"_state\"];\n\n            if (props.pause === !state.paused) {\n              state.paused = props.pause;\n              flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);\n            } else if (state.paused) {\n              props.pause = true;\n            }\n\n            promises = (keys || Object.keys(ctrl.springs)).map(function (key) {\n              return ctrl.springs[key].start(props);\n            });\n            cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n\n            if (asyncTo || cancel && state.asyncId) {\n              promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n                props: props,\n                state: state,\n                actions: {\n                  pause: noop,\n                  resume: noop,\n                  start: function start(props2, resolve) {\n                    if (cancel) {\n                      stopAsync(state, ctrl[\"_lastAsyncId\"]);\n                      resolve(getCancelledResult(ctrl));\n                    } else {\n                      props2.onRest = onRest;\n                      resolve(runAsync(asyncTo, props2, state, ctrl));\n                    }\n                  }\n                }\n              }));\n            }\n\n            if (!state.paused) {\n              _context4.next = 15;\n              break;\n            }\n\n            _context4.next = 15;\n            return new Promise(function (resume) {\n              state.resumeQueue.add(resume);\n            });\n\n          case 15:\n            _context4.t0 = getCombinedResult;\n            _context4.t1 = ctrl;\n            _context4.next = 19;\n            return Promise.all(promises);\n\n          case 19:\n            _context4.t2 = _context4.sent;\n            result = (0, _context4.t0)(_context4.t1, _context4.t2);\n\n            if (!(loop && result.finished && !(isLoop && result.noop))) {\n              _context4.next = 26;\n              break;\n            }\n\n            nextProps = createLoopUpdate(props, loop, to);\n\n            if (!nextProps) {\n              _context4.next = 26;\n              break;\n            }\n\n            prepareKeys(ctrl, [nextProps]);\n            return _context4.abrupt(\"return\", flushUpdate(ctrl, nextProps, true));\n\n          case 26:\n            if (onResolve) {\n              raf.batchedUpdates(function () {\n                return onResolve(result, ctrl, ctrl.item);\n              });\n            }\n\n            return _context4.abrupt(\"return\", result);\n\n          case 28:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _flushUpdate.apply(this, arguments);\n}\n\nfunction getSprings(ctrl, props) {\n  var springs = _objectSpread({}, ctrl.springs);\n\n  if (props) {\n    each(toArray(props), function (props2) {\n      if (is.und(props2.keys)) {\n        props2 = createUpdate(props2);\n      }\n\n      if (!is.obj(props2.to)) {\n        props2 = _objectSpread(_objectSpread({}, props2), {}, {\n          to: void 0\n        });\n      }\n\n      prepareSprings(springs, props2, function (key) {\n        return createSpring(key);\n      });\n    });\n  }\n\n  return springs;\n}\n\nfunction setSprings(ctrl, springs) {\n  eachProp(springs, function (spring, key) {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring;\n      addFluidObserver(spring, ctrl);\n    }\n  });\n}\n\nfunction createSpring(key, observer) {\n  var spring = new SpringValue();\n  spring.key = key;\n\n  if (observer) {\n    addFluidObserver(spring, observer);\n  }\n\n  return spring;\n}\n\nfunction prepareSprings(springs, props, create) {\n  if (props.keys) {\n    each(props.keys, function (key) {\n      var spring = springs[key] || (springs[key] = create(key));\n      spring[\"_prepareNode\"](props);\n    });\n  }\n}\n\nfunction prepareKeys(ctrl, queue) {\n  each(queue, function (props) {\n    prepareSprings(ctrl.springs, props, function (key) {\n      return createSpring(key, ctrl);\n    });\n  });\n}\n\nvar SpringContext = function SpringContext(_ref14) {\n  var children = _ref14.children,\n      props = _objectWithoutProperties(_ref14, [\"children\"]);\n\n  var inherited = useContext(ctx);\n  var pause = props.pause || !!inherited.pause,\n      immediate = props.immediate || !!inherited.immediate;\n  props = useMemoOne(function () {\n    return {\n      pause: pause,\n      immediate: immediate\n    };\n  }, [pause, immediate]);\n  var Provider = ctx.Provider;\n  return /* @__PURE__ */createElement(Provider, {\n    value: props\n  }, children);\n};\n\nvar ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\n\nfunction makeContext(target, init) {\n  Object.assign(target, createContext(init));\n  target.Provider._context = target;\n  target.Consumer._context = target;\n  return target;\n}\n\nvar SpringRef = /*#__PURE__*/function (_Function) {\n  _inherits(SpringRef, _Function);\n\n  var _super5 = _createSuper(SpringRef);\n\n  function SpringRef() {\n    var _this12;\n\n    _classCallCheck(this, SpringRef);\n\n    _this12 = _super5.call(this, \"return arguments.callee._call.apply(arguments.callee, arguments)\");\n    _this12.current = [];\n    return _this12;\n  }\n\n  _createClass(SpringRef, [{\n    key: \"_call\",\n    value: function _call(props) {\n      deprecateDirectCall();\n      this.start(props);\n    }\n  }, {\n    key: \"set\",\n    value: function set(values) {\n      each(this.current, function (ctrl) {\n        return ctrl.set(values);\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start(props) {\n      var _this13 = this;\n\n      var results = [];\n      each(this.current, function (ctrl, i) {\n        if (is.und(props)) {\n          results.push(ctrl.start());\n        } else {\n          var _update2 = _this13._getProps(props, ctrl, i);\n\n          if (_update2) {\n            results.push(ctrl.start(_update2));\n          }\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      var _this14 = this;\n\n      each(this.current, function (ctrl, i) {\n        return ctrl.update(_this14._getProps(props, ctrl, i));\n      });\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(ctrl) {\n      if (!this.current.includes(ctrl)) {\n        this.current.push(ctrl);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(ctrl) {\n      var i = this.current.indexOf(ctrl);\n      if (~i) this.current.splice(i, 1);\n    }\n  }, {\n    key: \"_getProps\",\n    value: function _getProps(arg, ctrl, index) {\n      return is.fun(arg) ? arg(index, ctrl) : arg;\n    }\n  }]);\n\n  return SpringRef;\n}( /*#__PURE__*/_wrapNativeSuper(Function));\n\neach([\"stop\", \"pause\", \"resume\"], function (key) {\n  SpringRef.prototype[key] = function () {\n    var _arguments = arguments;\n    each(this.current, function (ctrl) {\n      return ctrl[key].apply(ctrl, _toConsumableArray(_arguments));\n    });\n    return this;\n  };\n});\n\nfunction useSprings(length, props, deps) {\n  var _arguments2 = arguments;\n  var propsFn = is.fun(props) && props;\n  if (propsFn && !deps) deps = [];\n  var ref = useMemo(function () {\n    return propsFn || _arguments2.length == 3 ? new SpringRef() : void 0;\n  }, []);\n  var layoutId = useRef(0);\n  var forceUpdate = useForceUpdate();\n  var state = useMemo(function () {\n    return {\n      ctrls: [],\n      queue: [],\n      flush: function flush(ctrl, updates2) {\n        var springs2 = getSprings(ctrl, updates2);\n        var canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some(function (key) {\n          return !ctrl.springs[key];\n        });\n        return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise(function (resolve) {\n          setSprings(ctrl, springs2);\n          state.queue.push(function () {\n            resolve(flushUpdateQueue(ctrl, updates2));\n          });\n          forceUpdate();\n        });\n      }\n    };\n  }, []);\n\n  var ctrls = _toConsumableArray(state.ctrls);\n\n  var updates = [];\n  var prevLength = usePrev(length) || 0;\n  var oldCtrls = ctrls.slice(length, prevLength);\n  useMemo(function () {\n    ctrls.length = length;\n    declareUpdates(prevLength, length);\n  }, [length]);\n  useMemo(function () {\n    declareUpdates(0, Math.min(prevLength, length));\n  }, deps);\n\n  function declareUpdates(startIndex, endIndex) {\n    for (var i = startIndex; i < endIndex; i++) {\n      var ctrl = ctrls[i] || (ctrls[i] = new Controller(null, state.flush));\n\n      var _update3 = propsFn ? propsFn(i, ctrl) : props[i];\n\n      if (_update3) {\n        updates[i] = declareUpdate(_update3);\n      }\n    }\n  }\n\n  var springs = ctrls.map(function (ctrl, i) {\n    return getSprings(ctrl, updates[i]);\n  });\n  var context = useContext(SpringContext);\n  var prevContext = usePrev(context);\n  var hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(function () {\n    layoutId.current++;\n    state.ctrls = ctrls;\n    var queue = state.queue;\n\n    if (queue.length) {\n      state.queue = [];\n      each(queue, function (cb) {\n        return cb();\n      });\n    }\n\n    each(oldCtrls, function (ctrl) {\n      detachRefs(ctrl, ref);\n      ctrl.stop(true);\n    });\n    each(ctrls, function (ctrl, i) {\n      var values2 = springs[i];\n      setSprings(ctrl, values2);\n      ref == null ? void 0 : ref.add(ctrl);\n\n      if (hasContext) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      var update = updates[i];\n\n      if (update) {\n        replaceRef(ctrl, update.ref);\n\n        if (ctrl.ref) {\n          ctrl.queue.push(update);\n        } else {\n          ctrl.start(update);\n        }\n      }\n    });\n  });\n  useOnce(function () {\n    return function () {\n      each(state.ctrls, function (ctrl) {\n        return ctrl.stop(true);\n      });\n    };\n  });\n  var values = springs.map(function (x) {\n    return _objectSpread({}, x);\n  });\n  return ref ? [values, ref] : values;\n}\n\nfunction useSpring(props, deps) {\n  var isFn = is.fun(props);\n\n  var _useSprings = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps),\n      _useSprings2 = _slicedToArray(_useSprings, 2),\n      _useSprings2$ = _slicedToArray(_useSprings2[0], 1),\n      values = _useSprings2$[0],\n      ref = _useSprings2[1];\n\n  return isFn || arguments.length == 2 ? [values, ref] : values;\n}\n\nvar initSpringRef = function initSpringRef() {\n  return new SpringRef();\n};\n\nvar useSpringRef = function useSpringRef() {\n  return useState(initSpringRef)[0];\n};\n\nfunction useTrail(length, propsArg, deps) {\n  var propsFn = is.fun(propsArg) && propsArg;\n  if (propsFn && !deps) deps = [];\n  var reverse = true;\n  var result = useSprings(length, function (i, ctrl) {\n    var props = propsFn ? propsFn(i, ctrl) : propsArg;\n    reverse = reverse && props.reverse;\n    return props;\n  }, deps || [{}]);\n  var ref = result[1];\n  useLayoutEffect(function () {\n    each(ref.current, function (ctrl, i) {\n      var parent = ref.current[i + (reverse ? 1 : -1)];\n      if (parent) ctrl.start({\n        to: parent.springs\n      });\n    });\n  }, deps);\n\n  if (propsFn || arguments.length == 3) {\n    ref[\"_getProps\"] = function (propsArg2, ctrl, i) {\n      var props = is.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n\n      if (props) {\n        var parent = ref.current[i + (props.reverse ? 1 : -1)];\n        if (parent) props.to = parent.springs;\n        return props;\n      }\n    };\n\n    return result;\n  }\n\n  return result[0];\n}\n\nvar MOUNT = \"mount\";\nvar ENTER = \"enter\";\nvar UPDATE = \"update\";\nvar LEAVE = \"leave\";\n\nfunction useTransition(data, props, deps) {\n  var _arguments3 = arguments;\n  var reset = props.reset,\n      sort = props.sort,\n      _props$trail = props.trail,\n      trail = _props$trail === void 0 ? 0 : _props$trail,\n      _props$expires = props.expires,\n      expires = _props$expires === void 0 ? true : _props$expires,\n      onDestroyed = props.onDestroyed;\n  var ref = useMemo(function () {\n    return _arguments3.length == 3 ? new SpringRef() : void 0;\n  }, []);\n  var items = toArray(data);\n  var transitions = [];\n  var usedTransitions = useRef(null);\n  var prevTransitions = reset ? null : usedTransitions.current;\n  useLayoutEffect(function () {\n    usedTransitions.current = transitions;\n  });\n  useOnce(function () {\n    return function () {\n      return each(usedTransitions.current, function (t) {\n        if (t.expired) {\n          clearTimeout(t.expirationId);\n        }\n\n        detachRefs(t.ctrl, ref);\n        t.ctrl.stop(true);\n      });\n    };\n  });\n  var keys = getKeys(items, props, prevTransitions);\n  var expired = reset && usedTransitions.current || [];\n  useLayoutEffect(function () {\n    return each(expired, function (_ref15) {\n      var ctrl = _ref15.ctrl,\n          item = _ref15.item,\n          key = _ref15.key;\n      detachRefs(ctrl, ref);\n      callProp(onDestroyed, item, key);\n    });\n  });\n  var reused = [];\n  if (prevTransitions) each(prevTransitions, function (t, i) {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n      expired.push(t);\n    } else {\n      i = reused[i] = keys.indexOf(t.key);\n      if (~i) transitions[i] = t;\n    }\n  });\n  each(items, function (item, i) {\n    if (!transitions[i]) {\n      transitions[i] = {\n        key: keys[i],\n        item: item,\n        phase: MOUNT,\n        ctrl: new Controller()\n      };\n      transitions[i].ctrl.item = item;\n    }\n  });\n\n  if (reused.length) {\n    var i = -1;\n    each(reused, function (keyIndex, prevIndex) {\n      var t = prevTransitions[prevIndex];\n\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = _objectSpread(_objectSpread({}, t), {}, {\n          item: items[keyIndex]\n        });\n      } else if (props.leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n\n  if (is.fun(sort)) {\n    transitions.sort(function (a, b) {\n      return sort(a.item, b.item);\n    });\n  }\n\n  var delay = -trail;\n  var forceUpdate = useForceUpdate();\n  var defaultProps = getDefaultProps(props);\n  var changes = new Map();\n  each(transitions, function (t, i) {\n    var key = t.key;\n    var prevPhase = t.phase;\n    var to;\n    var phase;\n\n    if (prevPhase == MOUNT) {\n      to = props.enter;\n      phase = ENTER;\n    } else {\n      var isLeave = keys.indexOf(key) < 0;\n\n      if (prevPhase != LEAVE) {\n        if (isLeave) {\n          to = props.leave;\n          phase = LEAVE;\n        } else if (to = props.update) {\n          phase = UPDATE;\n        } else return;\n      } else if (!isLeave) {\n        to = props.enter;\n        phase = ENTER;\n      } else return;\n    }\n\n    to = callProp(to, t.item, i);\n    to = is.obj(to) ? inferTo(to) : {\n      to: to\n    };\n\n    if (!to.config) {\n      var _config2 = props.config || defaultProps.config;\n\n      to.config = callProp(_config2, t.item, i, phase);\n    }\n\n    var payload = _objectSpread(_objectSpread({}, defaultProps), {}, {\n      delay: delay += trail,\n      reset: false\n    }, to);\n\n    if (phase == ENTER && is.und(payload.from)) {\n      var from = is.und(props.initial) || prevTransitions ? props.from : props.initial;\n      payload.from = callProp(from, t.item, i);\n    }\n\n    var onResolve = payload.onResolve;\n\n    payload.onResolve = function (result) {\n      callProp(onResolve, result);\n      var transitions2 = usedTransitions.current;\n      var t2 = transitions2.find(function (t3) {\n        return t3.key === key;\n      });\n      if (!t2) return;\n\n      if (result.cancelled && t2.phase != UPDATE) {\n        return;\n      }\n\n      if (t2.ctrl.idle) {\n        var idle = transitions2.every(function (t3) {\n          return t3.ctrl.idle;\n        });\n\n        if (t2.phase == LEAVE) {\n          var expiry = callProp(expires, t2.item);\n\n          if (expiry !== false) {\n            var expiryMs = expiry === true ? 0 : expiry;\n            t2.expired = true;\n\n            if (!idle && expiryMs > 0) {\n              if (expiryMs <= 2147483647) t2.expirationId = setTimeout(forceUpdate, expiryMs);\n              return;\n            }\n          }\n        }\n\n        if (idle && transitions2.some(function (t3) {\n          return t3.expired;\n        })) {\n          forceUpdate();\n        }\n      }\n    };\n\n    var springs = getSprings(t.ctrl, payload);\n    changes.set(t, {\n      phase: phase,\n      springs: springs,\n      payload: payload\n    });\n  });\n  var context = useContext(SpringContext);\n  var prevContext = usePrev(context);\n  var hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(function () {\n    if (hasContext) each(transitions, function (t) {\n      t.ctrl.start({\n        default: context\n      });\n    });\n  }, [context]);\n  useLayoutEffect(function () {\n    each(changes, function (_ref16, t) {\n      var phase = _ref16.phase,\n          springs = _ref16.springs,\n          payload = _ref16.payload;\n      var ctrl = t.ctrl;\n      t.phase = phase;\n      ref == null ? void 0 : ref.add(ctrl);\n      replaceRef(ctrl, payload.ref);\n      setSprings(ctrl, springs);\n\n      if (hasContext && phase == ENTER) {\n        ctrl.start({\n          default: context\n        });\n      }\n\n      ctrl[ctrl.ref ? \"update\" : \"start\"](payload);\n    });\n  }, reset ? void 0 : deps);\n\n  var renderTransitions = function renderTransitions(render) {\n    return /* @__PURE__ */createElement(Fragment, null, transitions.map(function (t, i) {\n      var _ref17 = changes.get(t) || t.ctrl,\n          springs = _ref17.springs;\n\n      var elem = render(_objectSpread({}, springs), t.item, t, i);\n      return elem && elem.type ? /* @__PURE__ */createElement(elem.type, _objectSpread(_objectSpread({}, elem.props), {}, {\n        key: is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id,\n        ref: elem.ref\n      })) : elem;\n    }));\n  };\n\n  return ref ? [renderTransitions, ref] : renderTransitions;\n}\n\nvar nextKey = 1;\n\nfunction getKeys(items, _ref18, prevTransitions) {\n  var key = _ref18.key,\n      _ref18$keys = _ref18.keys,\n      keys = _ref18$keys === void 0 ? key : _ref18$keys;\n\n  if (keys === null) {\n    var reused = new Set();\n    return items.map(function (item) {\n      var t = prevTransitions && prevTransitions.find(function (t2) {\n        return t2.item === item && t2.phase !== LEAVE && !reused.has(t2);\n      });\n\n      if (t) {\n        reused.add(t);\n        return t.key;\n      }\n\n      return nextKey++;\n    });\n  }\n\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);\n}\n\nfunction Spring(_ref19) {\n  var children = _ref19.children,\n      props = _objectWithoutProperties(_ref19, [\"children\"]);\n\n  return children(useSpring(props));\n}\n\nfunction Trail(_ref20) {\n  var items = _ref20.items,\n      children = _ref20.children,\n      props = _objectWithoutProperties(_ref20, [\"items\", \"children\"]);\n\n  var trails = useTrail(items.length, props);\n  return items.map(function (item, index) {\n    var result = children(item, index);\n    return is.fun(result) ? result(trails[index]) : result;\n  });\n}\n\nfunction Transition(_ref21) {\n  var items = _ref21.items,\n      children = _ref21.children,\n      props = _objectWithoutProperties(_ref21, [\"items\", \"children\"]);\n\n  return useTransition(items, props)(children);\n}\n\nvar Interpolation = /*#__PURE__*/function (_FrameValue2) {\n  _inherits(Interpolation, _FrameValue2);\n\n  var _super6 = _createSuper(Interpolation);\n\n  function Interpolation(source, args) {\n    var _this15;\n\n    _classCallCheck(this, Interpolation);\n\n    _this15 = _super6.call(this);\n    _this15.source = source;\n    _this15.idle = true;\n    _this15._active = new Set();\n    _this15.calc = createInterpolator.apply(void 0, _toConsumableArray(args));\n\n    var value = _this15._get();\n\n    var nodeType = getAnimatedType(value);\n    setAnimated(_assertThisInitialized(_this15), nodeType.create(value));\n    return _this15;\n  }\n\n  _createClass(Interpolation, [{\n    key: \"advance\",\n    value: function advance(_dt) {\n      var value = this._get();\n\n      var oldValue = this.get();\n\n      if (!isEqual(value, oldValue)) {\n        getAnimated(this).setValue(value);\n\n        this._onChange(value, this.idle);\n      }\n\n      if (!this.idle && checkIdle(this._active)) {\n        becomeIdle(this);\n      }\n    }\n  }, {\n    key: \"_get\",\n    value: function _get() {\n      var inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));\n      return this.calc.apply(this, _toConsumableArray(inputs));\n    }\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      var _this16 = this;\n\n      if (this.idle && !checkIdle(this._active)) {\n        this.idle = false;\n        each(getPayload(this), function (node) {\n          node.done = false;\n        });\n\n        if (Globals.skipAnimation) {\n          raf.batchedUpdates(function () {\n            return _this16.advance();\n          });\n          becomeIdle(this);\n        } else {\n          frameLoop.start(this);\n        }\n      }\n    }\n  }, {\n    key: \"_attach\",\n    value: function _attach() {\n      var _this17 = this;\n\n      var priority = 1;\n      each(toArray(this.source), function (source) {\n        if (hasFluidValue(source)) {\n          addFluidObserver(source, _this17);\n        }\n\n        if (isFrameValue(source)) {\n          if (!source.idle) {\n            _this17._active.add(source);\n          }\n\n          priority = Math.max(priority, source.priority + 1);\n        }\n      });\n      this.priority = priority;\n\n      this._start();\n    }\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      var _this18 = this;\n\n      each(toArray(this.source), function (source) {\n        if (hasFluidValue(source)) {\n          removeFluidObserver(source, _this18);\n        }\n      });\n\n      this._active.clear();\n\n      becomeIdle(this);\n    }\n  }, {\n    key: \"eventObserved\",\n    value: function eventObserved(event) {\n      if (event.type == \"change\") {\n        if (event.idle) {\n          this.advance();\n        } else {\n          this._active.add(event.parent);\n\n          this._start();\n        }\n      } else if (event.type == \"idle\") {\n        this._active.delete(event.parent);\n      } else if (event.type == \"priority\") {\n        this.priority = toArray(this.source).reduce(function (highest, parent) {\n          return Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1);\n        }, 0);\n      }\n    }\n  }]);\n\n  return Interpolation;\n}(FrameValue);\n\nfunction isIdle(source) {\n  return source.idle !== false;\n}\n\nfunction checkIdle(active) {\n  return !active.size || Array.from(active).every(isIdle);\n}\n\nfunction becomeIdle(self) {\n  if (!self.idle) {\n    self.idle = true;\n    each(getPayload(self), function (node) {\n      node.done = true;\n    });\n    callFluidObservers(self, {\n      type: \"idle\",\n      parent: self\n    });\n  }\n}\n\nvar to = function to(source) {\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n\n  return new Interpolation(source, args);\n};\n\nvar interpolate = function interpolate(source) {\n  for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n\n  return deprecateInterpolate(), new Interpolation(source, args);\n};\n\nGlobals.assign({\n  createStringInterpolator: createStringInterpolator,\n  to: function to(source, args) {\n    return new Interpolation(source, args);\n  }\n});\nvar update = frameLoop.advance;\nexport { BailSignal, Controller, FrameValue, Interpolation, Spring, SpringContext, SpringRef, SpringValue, Trail, Transition, config, inferTo, interpolate, to, update, useChain, useSpring, useSpringRef, useSprings, useTrail, useTransition };","map":{"version":3,"sources":["src/helpers.ts","src/hooks/useChain.ts","src/constants.ts","src/AnimationConfig.ts","src/Animation.ts","src/scheduleProps.ts","src/AnimationResult.ts","src/runAsync.ts","src/FrameValue.ts","src/SpringPhase.ts","src/SpringValue.ts","src/Controller.ts","src/SpringContext.tsx","src/SpringRef.ts","src/hooks/useSprings.ts","src/hooks/useSpring.ts","src/hooks/useSpringRef.ts","src/hooks/useTrail.ts","src/TransitionPhase.ts","src/hooks/useTransition.tsx","src/components/Spring.tsx","src/components/Trail.tsx","src/components/Transition.tsx","src/Interpolation.ts","src/interpolate.ts","src/globals.ts"],"names":["G","configs","AnimationConfig2","Animation2","scheduleProps2","runAsync2","nextId","SpringValue2","React.createContext","SpringRef2","Controller2","SpringContext2","useSprings2","useSpring2","useTrail2","Interpolation2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;kBAeE,K,EAAA;AAAA,oCAAA,IAAA;AAAA,IAAA,IAAA;AAAA;;AAGA,SAAO,EAAA,CAAG,GAAH,CAAO,KAAP,IAAgB,KAAA,MAAA,SAAS,IAAT,CAAhB,GAAiC,KAAxC;AAAwC;;gBAIjB,S,SAAA,CAAA,KAAA,EAAA,GAAA;AAAA,SAIvB,KAAA,KAAU,IAAV,IACA,CAAC,EAAA,GAAA,IAEC,KAFD,KAEC,EAAA,CACI,GADJ,CACQ,KADR,IACiB,KAAA,CAAM,GAAN,CADjB,GAC8B,OAAA,CAAQ,KAAR,CAAA,CAAe,QAAf,CAAwB,GAAxB,CAH/B,CAAA,CALsB;AAAA,C;;kBAWE,S,WAAA,CAAA,IAAA,EAAA,GAAA;AAAA,SAGrB,EAAA,CAAG,GAAH,CAAO,IAAP,IAAe,GAAA,IAAQ,IAAA,CAAa,GAAb,CAAvB,GAA2C,IAHtB;AAAA,C;;qBAaG,S,cAAA,CAAA,KAAA,EAAA,GAAA;AAAA,SAI5B,KAAA,CAAM,OAAN,KAAkB,IAAlB,GACI,KAAA,CAAM,GAAN,CADJ,GAEI,KAAA,CAAM,OAAN,GACA,KAAA,CAAM,OAAN,CAAc,GAAd,CADA,GAEA,KAAA,CARwB;AAAA,C;;AAU9B,IAAA,aAAA,GAAsB,SAAtB,aAAsB,CAAA,KAAA;AAAA,SAAgB,KAAhB;AAAA,CAAtB;;sBAS+B,S,eAAA,CAAA,KAAA,EAEiB;AAAA,MAFjB,SAEiB,uEAAA,aAAA;AAE9C,MAAA,IAAA,GAA8B,aAA9B;;AACA,MAAI,KAAA,CAAM,OAAN,IAAiB,KAAA,CAAM,OAAN,KAAkB,IAAvC,EAAuC;AACrC,IAAA,KAAA,GAAQ,KAAA,CAAM,OAAd;AACA,IAAA,IAAA,GAAO,MAAA,CAAO,IAAP,CAAY,KAAZ,CAAP;AAAmB;;AAErB,MAAA,QAAA,GAAsB,EAAtB;;AAP8C,6CAQ5B,IAR4B;AAAA;;AAAA;AAQ9C,wDAAkB;AAAA,UAAlB,GAAkB;AAChB,UAAA,KAAA,GAAc,SAAA,CAAU,KAAA,CAAM,GAAN,CAAV,EAAsB,GAAtB,CAAd;;AACA,UAAI,CAAC,EAAA,CAAG,GAAH,CAAO,KAAP,CAAL,EAAY;AACV,QAAA,QAAA,CAAS,GAAT,CAAA,GAAgB,KAAhB;AAAgB;AAAA;AAX0B;AAAA;AAAA;AAAA;AAAA;;AAc9C,SAAO,QAAP;AAAO,C;;oBAcoB,CAC3B,QAD2B,EAE3B,SAF2B,EAG3B,SAH2B,EAI3B,UAJ2B,EAK3B,SAL2B,EAM3B,UAN2B,EAO3B,QAP2B,C;AAU7B,IAAA,cAAA,GAEI;AACF,EAAA,MAAA,EAAQ,CADN;AAEF,EAAA,IAAA,EAAM,CAFJ;AAGF,EAAA,EAAA,EAAI,CAHF;AAIF,EAAA,GAAA,EAAK,CAJH;AAKF,EAAA,IAAA,EAAM,CALJ;AAMF,EAAA,KAAA,EAAO,CANL;AAOF,EAAA,KAAA,EAAO,CAPL;AAQF,EAAA,MAAA,EAAQ,CARN;AASF,EAAA,OAAA,EAAS,CATP;AAUF,EAAA,SAAA,EAAW,CAVT;AAWF,EAAA,OAAA,EAAS,CAXP;AAYF,EAAA,KAAA,EAAO,CAZL;AAaF,EAAA,OAAA,EAAS,CAbP;AAcF,EAAA,OAAA,EAAS,CAdP;AAeF,EAAA,QAAA,EAAU,CAfR;AAgBF,EAAA,OAAA,EAAS,CAhBP;AAiBF,EAAA,QAAA,EAAU,CAjBR;AAkBF,EAAA,MAAA,EAAQ,CAlBN;AAmBF,EAAA,SAAA,EAAW,CAnBT;AAsBF,EAAA,KAAA,EAAO,CAtBL;AAuBF,EAAA,KAAA,EAAO,CAvBL;AAwBF,EAAA,IAAA,EAAM,CAxBJ;AAyBF,EAAA,OAAA,EAAS,CAzBP;AA0BF,EAAA,OAAA,EAAS,CA1BP;AA2BF,EAAA,KAAA,EAAO,CA3BL;AA4BF,EAAA,MAAA,EAAQ,CA5BN;AA6BF,EAAA,KAAA,EAAO,CA7BL;AA8BF,EAAA,QAAA,EAAU,CA9BR;AA+BF,EAAA,WAAA,EAAa,CA/BX;AAkCF,EAAA,IAAA,EAAM,CAlCJ;AAmCF,EAAA,MAAA,EAAQ,CAnCN;AAoCF,EAAA,QAAA,EAAU;AApCR,CAFJ;;AA8CA,SAAA,eAAA,CAAA,KAAA,EAAA;AAGE,MAAA,OAAA,GAAqB,EAArB;AAEA,MAAA,KAAA,GAAY,CAAZ;AACA,EAAA,QAAA,CAAS,KAAT,EAAgB,UAAA,KAAA,EAAA,IAAA,EAAA;AACd,QAAI,CAAC,cAAA,CAAe,IAAf,CAAL,EAAoB;AAClB,MAAA,OAAA,CAAQ,IAAR,CAAA,GAAgB,KAAhB;AACA,MAAA,KAAA;AAAA;AAAA,GAHJ,CAAA;;AAOA,MAAI,KAAJ,EAAI;AACF,WAAO,OAAP;AAAO;AAAA;;;AAST,MAAA,EAAA,GAAW,eAAA,CAAgB,KAAhB,CAAX;;AACA,MAAI,EAAJ,EAAI;AACF,QAAA,GAAA,GAAiB;AAAE,MAAA,EAAA,EAAA;AAAF,KAAjB;AACA,IAAA,QAAA,CAAS,KAAT,EAAgB,UAAA,GAAA,EAAA,GAAA;AAAA,aAAc,GAAA,IAAO,EAAP,KAAO,GAAA,CAAW,GAAX,CAAA,GAAkB,GAAzB,CAAd;AAAA,KAAhB,CAAA;AACA,WAAO,GAAP;AAAO;;AAET,2BAAY,KAAZ;AAAY;;;AAKZ,EAAA,KAAA,GAAQ,aAAA,CAAc,KAAd,CAAR;AACA,SAAO,EAAA,CAAG,GAAH,CAAO,KAAP,IACH,KAAA,CAAM,GAAN,CAAU,WAAV,CADG,GAEH,gBAAA,CAAiB,KAAjB,CAAA,GACCA,OAAAA,CAAE,wBAAFA,CAA2B;AAC1B,IAAA,KAAA,EAAO,CAAC,CAAD,EAAI,CAAJ,CADmB;AAE1B,IAAA,MAAA,EAAQ,CAAC,KAAD,EAAQ,KAAR;AAFkB,GAA3BA,EAGE,CAHFA,CADD,GAKA,KAPJ;AAOI;;;AAIJ,OAAA,IAAA,CAAA,IAAgB,KAAhB;AAAuB,WAAO,IAAP;AAAvB;;AACA,SAAO,KAAP;AAAO;;;AAIP,SAAO,EAAA,CAAG,GAAH,CAAO,EAAP,KAAe,EAAA,CAAG,GAAH,CAAO,EAAP,KAAc,EAAA,CAAG,GAAH,CAAO,EAAA,CAAG,CAAH,CAAP,CAApC;AAA8C;;;AA1MhD,MAAA,EAAA;;AA+ME,GAAA,EAAA,GAAA,IAAA,CAAK,GAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAU,MAAV,CAAiB,IAAjB,CAAA;AACA,EAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAK,MAAL,CAAY,IAAZ,CAAA;AAAY;;;AAhNd,MAAA,EAAA;;AAqNE,MAAI,GAAA,IAAO,IAAA,CAAK,GAAL,KAAa,GAAxB,EAAwB;AACtB,KAAA,EAAA,GAAA,IAAA,CAAK,GAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAU,MAAV,CAAiB,IAAjB,CAAA;AACA,IAAA,GAAA,CAAI,GAAJ,CAAQ,IAAR;AACA,IAAA,IAAA,CAAK,GAAL,GAAW,GAAX;AAAW;AAAA;;kBCnNb,I,EAAA,S,EAEY;AAAA,MAFZ,SAEY,uEAAA,GAAA;AAEZ,EAAA,eAAA,CAAgB,YAAA;AACd,QAAI,SAAJ,EAAI;AACF,UAAA,SAAA,GAAgB,CAAhB;AACA,MAAA,IAAA,CAAK,IAAL,EAAW,UAAA,GAAA,EAAA,CAAA,EAAA;AACT,YAAA,WAAA,GAAoB,GAAA,CAAI,OAAxB;;AACA,YAAI,WAAA,CAAY,MAAhB,EAAgB;AACd,cAAA,KAAA,GAAY,SAAA,GAAY,SAAA,CAAU,CAAV,CAAxB;AAGA,cAAI,KAAA,CAAM,KAAN,CAAJ,EAAkB,KAAA,GAAQ,SAAR,CAAlB,KACK,SAAA,GAAY,KAAZ;AAEL,UAAA,IAAA,CAAK,WAAL,EAAkB,UAAA,IAAA,EAAA;AAChB,YAAA,IAAA,CAAK,IAAA,CAAK,KAAV,EAAiB,UAAA,KAAA,EAAA;AAEf,kBAAA,iBAAA,GAA0B,KAAA,CAAM,KAAhC;;AACA,cAAA,KAAA,CAAM,KAAN,GAAc,UAAA,GAAA;AAAA,uBAAO,KAAA,GAAQ,QAAA,CAAS,iBAAA,IAAqB,CAA9B,EAAiC,GAAjC,CAAf;AAAA,eAAd;AAA8D,aAHhE,CAAA;AAKA,YAAA,IAAA,CAAK,KAAL;AAAK,WANP,CAAA;AAMO;AAAA,OAfX,CAAA;AAeW,KAjBb,MAiBa;AAKX,UAAA,CAAA,GAAsB,OAAA,CAAQ,OAAR,EAAtB;AACA,MAAA,IAAA,CAAK,IAAL,EAAW,UAAA,GAAA,EAAA;AACT,YAAA,WAAA,GAAoB,GAAA,CAAI,OAAxB;;AACA,YAAI,WAAA,CAAY,MAAhB,EAAgB;AAEd,cAAA,MAAA,GAAe,WAAA,CAAY,GAAZ,CAAgB,UAAA,IAAA,EAAA;AAC7B,gBAAA,CAAA,GAAU,IAAA,CAAK,KAAf;AACA,YAAA,IAAA,CAAK,KAAL,GAAa,EAAb;AACA,mBAAO,CAAP;AAAO,WAHM,CAAf;AAOA,UAAA,CAAA,GAAI,CAAA,CAAE,IAAF,CAAO,YAAA;AACT,YAAA,IAAA,CAAK,WAAL,EAAkB,UAAA,IAAA,EAAA,CAAA;AAAA,qBAChB,IAAA,CAAK,MAAA,CAAO,CAAP,CAAA,IAAa,EAAlB,EAAsB,UAAA,MAAA;AAAA,uBAAU,IAAA,CAAK,KAAL,CAAW,IAAX,CAAgB,MAAhB,CAAV;AAAA,eAAtB,CADgB;AAAA,aAAlB,CAAA;AAGA,mBAAO,GAAA,CAAI,KAAJ,EAAP;AAAW,WAJT,CAAJ;AAIa;AAAA,OAfjB,CAAA;AAeiB;AAAA,GAvCrB,CAAA;AAuCqB;;IC/CV,MAAA,GAAS;AACpB,EAAA,OAAA,EAAS;AAAE,IAAA,OAAA,EAAS,GAAX;AAAgB,IAAA,QAAA,EAAU;AAA1B,GADW;AAEpB,EAAA,MAAA,EAAQ;AAAE,IAAA,OAAA,EAAS,GAAX;AAAgB,IAAA,QAAA,EAAU;AAA1B,GAFY;AAGpB,EAAA,MAAA,EAAQ;AAAE,IAAA,OAAA,EAAS,GAAX;AAAgB,IAAA,QAAA,EAAU;AAA1B,GAHY;AAIpB,EAAA,KAAA,EAAO;AAAE,IAAA,OAAA,EAAS,GAAX;AAAgB,IAAA,QAAA,EAAU;AAA1B,GAJa;AAKpB,EAAA,IAAA,EAAM;AAAE,IAAA,OAAA,EAAS,GAAX;AAAgB,IAAA,QAAA,EAAU;AAA1B,GALc;AAMpB,EAAA,QAAA,EAAU;AAAE,IAAA,OAAA,EAAS,GAAX;AAAgB,IAAA,QAAA,EAAU;AAA1B;AANU,C;;ACEtB,IAAM,MAAA,GAAS,SAAT,MAAS,CAAA,CAAA;AAAA,SAAe,CAAf;AAAA,CAAf;;AACA,IAAA,QAAA,mCACKC,MAAAA,CAAQ,OADb;AAEE,EAAA,IAAA,EAAM,CAFR;AAGE,EAAA,OAAA,EAAS,CAHX;AAIE,EAAA,MAAA,EAAQ,MAJV;AAKE,EAAA,KAAA,EAAO;AALT,EAAA;;sBAqIE,2BAAA;AAAA;;AA7EA,OAAA,QAAA,GAA8B,CAA9B;AA8EE,EAAA,MAAA,CAAO,MAAP,CAAc,IAAd,EAAoB,QAApB;AAAoB,C;;;AAetB,MAAI,aAAJ,EAAI;AACF,IAAA,aAAA,qBAAqB,aAArB,CAAA;AACA,IAAA,cAAA,CAAe,aAAf,EAA8B,SAA9B,CAAA;AACA,IAAA,SAAA,mCAAiB,aAAjB,GAAmC,SAAnC,CAAA;AAAmC;;AAGrC,EAAA,cAAA,CAAe,MAAf,EAAuB,SAAvB,CAAA;AACA,EAAA,MAAA,CAAO,MAAP,CAAc,MAAd,EAAsB,SAAtB;;AAEA,OAAA,IAAA,GAAA,IAAkB,QAAlB,EAAkB;AAChB,QAAI,MAAA,CAAO,GAAP,CAAA,IAAe,IAAnB,EAAmB;AACjB,MAAA,MAAA,CAAO,GAAP,CAAA,GAAc,QAAA,CAAS,GAAT,CAAd;AAAuB;AAAA;;AAI3B,MAAM,IAAN,GAAmC,MAAnC,CAAM,IAAN;AAAA,MAAY,SAAZ,GAAmC,MAAnC,CAAY,SAAZ;AAAA,MAAuB,OAAvB,GAAmC,MAAnC,CAAuB,OAAvB;;AACA,MAAI,CAAC,EAAA,CAAG,GAAH,CAAO,SAAP,CAAL,EAAY;AACV,QAAI,SAAA,GAAY,IAAhB,EAAsB,SAAA,GAAY,IAAZ;AACtB,QAAI,OAAA,GAAU,CAAd,EAAiB,OAAA,GAAU,CAAV;AACjB,IAAA,MAAA,CAAO,OAAP,GAAiB,IAAA,CAAK,GAAL,CAAU,IAAI,IAAA,CAAK,EAAT,GAAe,SAAzB,EAAoC,CAApC,IAAyC,IAA1D;AACA,IAAA,MAAA,CAAO,QAAP,GAAmB,IAAI,IAAA,CAAK,EAAT,GAAc,OAAd,GAAwB,IAAxB,GAAgC,SAAnD;AAAmD;;AAGrD,SAAO,MAAP;AAAO;;AAKT,SAAA,cAAA,CAAA,MAAA,EAAA,KAAA,EAAA;AAIE,MAAI,CAAC,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,KAAb,CAAL,EAAkB;AAChB,IAAA,MAAA,CAAO,QAAP,GAAkB,KAAA,CAAlB;AAAkB,GADpB,MACoB;AAElB,QAAA,eAAA,GAAwB,CAAC,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,OAAb,CAAD,IAA0B,CAAC,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,QAAb,CAAnD;;AACA,QACE,eAAA,IACA,CAAC,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,SAAb,CADD,IAEA,CAAC,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,OAAb,CAFD,IAGA,CAAC,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,IAAb,CAJH,EAIgB;AAEd,MAAA,MAAA,CAAO,QAAP,GAAkB,KAAA,CAAlB;AACA,MAAA,MAAA,CAAO,KAAP,GAAe,KAAA,CAAf;AAAe;;AAEjB,QAAI,eAAJ,EAAI;AACF,MAAA,MAAA,CAAO,SAAP,GAAmB,KAAA,CAAnB;AAAmB;AAAA;AAAA;;ACjMzB,IAAM,UAAA,GAA6B,EAAnC;;gBANA,qBAAA;AAAA;;AAUE,OAAA,OAAA,GAAU,KAAV;AACA,OAAA,MAAA,GAAmC,UAAnC;AACA,OAAA,QAAA,GAAqC,IAArC;AACA,OAAA,UAAA,GAAgC,UAAhC;AAIA,OAAA,MAAA,GAAS,IAAIC,eAAJ,EAAT;AACA,OAAA,SAAA,GAAY,KAAZ;AAAY,C;;uBCgBZ,M,QACmC;AAAA,MAAjC,GAAiC,QAAjC,GAAiC;AAAA,MAA5B,KAA4B,QAA5B,KAA4B;AAAA,MAArB,YAAqB,QAArB,YAAqB;AAAA,MAAP,KAAO,QAAP,KAAO;AAAA,MAAA,OAAA,QAAA,OAAA;AAEnC,SAAO,IAAI,OAAJ,CAAY,UAAA,OAAA,EAAA,MAAA,EAAA;AArCrB,QAAA,EAAA;;AAsCI,QAAA,KAAA;AACA,QAAA,OAAA;AAEA,QAAA,MAAA,GAAa,SAAA,CAAU,CAAA,EAAA,GAAA,KAAA,CAAM,MAAN,KAAA,IAAA,GAAA,EAAA,GAAgB,YAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAc,MAAxC,EAAgD,GAAhD,CAAb;;AACA,QAAI,MAAJ,EAAI;AACF,MAAA,OAAA;AAAA,KADF,MACE;AAGA,UAAI,CAAC,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,KAAb,CAAL,EAAkB;AAChB,QAAA,KAAA,CAAM,MAAN,GAAe,SAAA,CAAU,KAAA,CAAM,KAAhB,EAAuB,GAAvB,CAAf;AAAsC;;AAIxC,UAAA,KAAA,GAAY,YAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAc,KAA1B;;AACA,UAAI,KAAA,KAAU,IAAd,EAAc;AACZ,QAAA,KAAA,GAAQ,KAAA,CAAM,MAAN,IAAgB,SAAA,CAAU,KAAV,EAAiB,GAAjB,CAAxB;AAAyC;;AAG3C,MAAA,KAAA,GAAQ,QAAA,CAAS,KAAA,CAAM,KAAN,IAAe,CAAxB,EAA2B,GAA3B,CAAR;;AACA,UAAI,KAAJ,EAAI;AACF,QAAA,KAAA,CAAM,WAAN,CAAkB,GAAlB,CAAsB,QAAtB;AACA,QAAA,OAAA,CAAQ,KAAR;AAAQ,OAFV,MAEU;AAER,QAAA,OAAA,CAAQ,MAAR;AACA,QAAA,QAAA;AAAA;AAAA;;AAIJ,aAAA,OAAA,GAAA;AACE,MAAA,KAAA,CAAM,WAAN,CAAkB,GAAlB,CAAsB,QAAtB;AACA,MAAA,KAAA,CAAM,QAAN,CAAe,MAAf,CAAsB,OAAtB;AACA,MAAA,OAAA,CAAQ,MAAR;AAEA,MAAA,KAAA,GAAQ,OAAA,CAAQ,IAAR,GAAe,GAAA,CAAI,GAAJ,EAAvB;AAA2B;;AAG7B,aAAA,QAAA,GAAA;AACE,UAAI,KAAA,GAAQ,CAAZ,EAAY;AACV,QAAA,OAAA,GAAU,GAAA,CAAI,UAAJ,CAAe,OAAf,EAAwB,KAAxB,CAAV;AACA,QAAA,KAAA,CAAM,UAAN,CAAiB,GAAjB,CAAqB,OAArB;AACA,QAAA,KAAA,CAAM,QAAN,CAAe,GAAf,CAAmB,OAAnB;AAAmB,OAHrB,MAGqB;AAEnB,QAAA,OAAA;AAAA;AAAA;;AAIJ,aAAA,OAAA,GAAA;AACE,MAAA,KAAA,CAAM,UAAN,CAAiB,MAAjB,CAAwB,OAAxB;AACA,MAAA,KAAA,CAAM,QAAN,CAAe,MAAf,CAAsB,OAAtB;;AAGA,UAAI,MAAA,KAAA,KAAA,CAAiB,QAAjB,IAA6B,CAA7B,CAAJ,EAAiC;AAC/B,QAAA,MAAA,GAAS,IAAT;AAAS;;AAGX,UAAA;AACE,QAAA,OAAA,CAAQ,KAAR,iCAAmB,KAAnB;AAA0B,UAAA,MAAA,EAAA,MAA1B;AAAkC,UAAA,MAAA,EAAA;AAAlC,YAA4C,OAA5C;AAA4C,OAD9C,CAC8C,OAAA,GAAA,EAAA;AAE5C,QAAA,MAAA,CAAO,GAAP,CAAA;AAAO;AAAA;AAAA,GA3DN,CAAP;AA2Da;;IC5FF,iBAAA,GAAoB,SAApB,iBAAoB,CAAA,MAAA,EAAA,OAAA;AAAA,SAI/B,OAAA,CAAQ,MAAR,IAAkB,CAAlB,GACI,OAAA,CAAQ,CAAR,CADJ,GAEI,OAAA,CAAQ,IAAR,CAAa,UAAA,MAAA;AAAA,WAAU,MAAA,CAAO,SAAjB;AAAA,GAAb,IACA,kBAAA,CAAmB,MAAA,CAAO,GAAP,EAAnB,CADA,GAEA,OAAA,CAAQ,KAAR,CAAc,UAAA,MAAA;AAAA,WAAU,MAAA,CAAO,IAAjB;AAAA,GAAd,IACA,aAAA,CAAc,MAAA,CAAO,GAAP,EAAd,CADA,GAEA,iBAAA,CACE,MAAA,CAAO,GAAP,EADF,EAEE,OAAA,CAAQ,KAAR,CAAc,UAAA,MAAA;AAAA,WAAU,MAAA,CAAO,QAAjB;AAAA,GAAd,CAFF,CAV2B;AAAA,C;;oBAgBJ,S,aAAA,CAAA,KAAA;AAAA,SAAA;AAC3B,IAAA,KAAA,EAAA,KAD2B;AAE3B,IAAA,IAAA,EAAM,IAFqB;AAG3B,IAAA,QAAA,EAAU,IAHiB;AAI3B,IAAA,SAAA,EAAW;AAJgB,GAAA;AAAA,C;;wBAOI,S,iBAAA,CAAA,KAAA,EAAA,QAAA;AAAA,MAAA,SAAA,uEAGV,KAHU;AAAA,SAGV;AAErB,IAAA,KAAA,EAAA,KAFqB;AAGrB,IAAA,QAAA,EAAA,QAHqB;AAIrB,IAAA,SAAA,EAAA;AAJqB,GAHU;AAAA,C;;yBAUC,S,kBAAA,CAAA,KAAA;AAAA,SAAA;AAChC,IAAA,KAAA,EAAA,KADgC;AAEhC,IAAA,SAAA,EAAW,IAFqB;AAGhC,IAAA,QAAA,EAAU;AAHsB,GAAA;AAAA,C;;kBCShC,E,EAAA,K,EAAA,K,EAAA,M,EAAA;AAKA,MAAQ,MAAR,GAAqC,KAArC,CAAQ,MAAR;AAAA,MAAgB,QAAhB,GAAqC,KAArC,CAAgB,QAAhB;AAAA,MAA0B,MAA1B,GAAqC,KAArC,CAA0B,MAA1B;AACA,MAAQ,MAAR,GAAkD,KAAlD,CAAQ,OAAR;AAAA,MAAyB,WAAzB,GAAkD,KAAlD,CAAyB,OAAzB;;AAEA,MAAI,CAAC,QAAD,IAAa,EAAA,KAAO,MAApB,IAA8B,CAAC,KAAA,CAAM,KAAzC,EAAyC;AACvC,WAAO,WAAP;AAAO;;AAGT,SAAQ,KAAA,CAAM,OAAN,GAAiB,yDAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACvB,YAAA,KAAA,CAAM,OAAN,GAAgB,MAAhB;AACA,YAAA,KAAA,CAAM,OAAN,GAAgB,EAAhB;AAGA,YAAA,YALuB,GAKF,eAAA,CAA+B,KAA/B,EAAsC,UAAA,KAAA,EAAA,GAAA;AAAA,qBAEzD,GAAA,KAAQ,QAAR,GAAmB,KAAA,CAAnB,GAA+B,KAF0B;AAAA,aAAtC,CALE;AAcvB,YAAA,WAduB,GAcH,IAAI,OAAJ,CAClB,UAAA,OAAA,EAAA,MAAA;AAAA,qBAAA,WAAA,GAAqC,OAArC,EAAgD,IAAA,GAAO,MAAvD;AAAA,aADkB,CAdG;;AAkBvB,YAAA,WAlBuB,GAkBH,SAApB,WAAoB,CAAA,UAAA,EAAA;AAClB,kBAAA,UAAA,GAEG,MAAA,KAAA,KAAA,CAAiB,QAAjB,IAA6B,CAA7B,CAAA,IAAmC,kBAAA,CAAmB,MAAnB,CAAnC,IAEA,MAAA,KAAW,KAAA,CAAM,OAAjB,IAA4B,iBAAA,CAAkB,MAAlB,EAA0B,KAA1B,CAJ/B;;AAMA,kBAAI,UAAJ,EAAI;AACF,gBAAA,UAAA,CAAW,MAAX,GAAoB,UAApB;AAIA,gBAAA,IAAA,CAAK,UAAL,CAAA;AACA,sBAAM,UAAN;AAAM;AAAA,aA/Ba;;AAmCvB,YAAA,OAnCuB,GAmCF,SAArB,OAAqB,CAAA,IAAA,EAAA,IAAA,EAAA;AAGnB,kBAAA,UAAA,GAAmB,IAAI,UAAJ,EAAnB;AACA,kBAAA,mBAAA,GAA4B,IAAI,mBAAJ,EAA5B;AAEA,qBAAQ,yDAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACFF,OAAAA,CAAE,aADA;AAAA;AAAA;AAAA;;AAOJ,wBAAA,SAAA,CAAU,KAAV,CAAA;AAGA,wBAAA,mBAAA,CAAoB,MAApB,GAA6B,iBAAA,CAAkB,MAAlB,EAA0B,KAA1B,CAA7B;AACA,wBAAA,IAAA,CAAK,mBAAL,CAAA;AAXI,8BAYE,mBAZF;;AAAA;AAeN,wBAAA,WAAA,CAAY,UAAZ,CAAA;AAEA,wBAAA,MAjBM,GAiBa,EAAA,CAAG,GAAH,CAAO,IAAP,sBAAoB,IAApB,oCAAkC,IAAlC;AAAwC,0BAAA,EAAA,EAAI;AAA5C,0BAjBb;AAkBN,wBAAA,MAAA,CAAM,QAAN,GAAiB,MAAjB;AAEA,wBAAA,QAAA,CAAS,YAAT,EAAuB,UAAA,KAAA,EAAA,GAAA,EAAA;AACrB,8BAAI,EAAA,CAAG,GAAH,CAAO,MAAA,CAAM,GAAN,CAAP,CAAJ,EAAiB;AACf,4BAAA,MAAA,CAAM,GAAN,CAAA,GAAa,KAAb;AAAa;AAAA,yBAFjB,CAAA;AApBM;AAAA,+BA0Be,MAAA,CAAO,KAAP,CAAa,MAAb,CA1Bf;;AAAA;AA0BN,wBAAA,OA1BM;AA2BN,wBAAA,WAAA,CAAY,UAAZ,CAAA;;AA3BM,6BA6BF,KAAA,CAAM,MA7BJ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BA8BE,IAAI,OAAJ,CAAkB,UAAA,MAAA,EAAA;AACtB,0BAAA,KAAA,CAAM,WAAN,CAAkB,GAAlB,CAAsB,MAAtB;AAAsB,yBADlB,CA9BF;;AAAA;AAAA,yDAmCC,OAnCD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAA,IAAR;AAmCS,aA5EY;;AAAA,iBAkFnBA,OAAAA,CAAE,aAlFiB;AAAA;AAAA;AAAA;;AAuFrB,YAAA,SAAA,CAAU,KAAV,CAAA;AAvFqB,8CAwFd,iBAAA,CAAkB,MAAlB,EAA0B,KAA1B,CAxFc;;AAAA;AAAA;;AA+FrB,gBAAI,EAAA,CAAG,GAAH,CAAO,EAAP,CAAJ,EAAW;AACT,cAAA,SAAA,GAAa;AAAA,qFAAA,kBAAA,KAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kEACS,KADT;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AACX,0BAAA,MADW;AAAA;AAAA,iCAEH,OAAA,CAAQ,MAAR,CAFG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAA;;AAAA;AAAA;AAAA;AAAA,kBAIV,EAJU,CAAb;AAIG,aALL,MAKK;AAKH,cAAA,SAAA,GAAY,OAAA,CAAQ,OAAR,CAAgB,EAAA,CAAG,OAAH,EAAY,MAAA,CAAO,IAAP,CAAY,IAAZ,CAAiB,MAAjB,CAAZ,CAAhB,CAAZ;AAAyD;;AAzGtC;AAAA,mBA4Gf,OAAA,CAAQ,GAAR,CAAY,CAAC,SAAA,CAAU,IAAV,CAAe,WAAf,CAAD,EAA8B,WAA9B,CAAZ,CA5Ge;;AAAA;AA6GrB,YAAA,MAAA,GAAS,iBAAA,CAAkB,MAAA,CAAO,GAAP,EAAlB,EAAgC,IAAhC,EAAsC,KAAtC,CAAT;AA7GqB;AAAA;;AAAA;AAAA;AAAA;;AAAA,kBAiHjB,wBAAe,UAjHE;AAAA;AAAA;AAAA;;AAkHnB,YAAA,MAAA,GAAS,aAAI,MAAb;AAlHmB;AAAA;;AAAA;AAAA,kBAmHV,wBAAe,mBAnHL;AAAA;AAAA;AAAA;;AAoHnB,YAAA,MAAA,GAAS,aAAI,MAAb;AApHmB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AA2HrB,gBAAI,MAAA,IAAU,KAAA,CAAM,OAApB,EAAoB;AAClB,cAAA,KAAA,CAAM,OAAN,GAAgB,QAAhB;AACA,cAAA,KAAA,CAAM,OAAN,GAAgB,QAAA,GAAW,MAAX,GAAoB,KAAA,CAApC;AACA,cAAA,KAAA,CAAM,OAAN,GAAgB,QAAA,GAAW,WAAX,GAAyB,KAAA,CAAzC;AAAyC;;AA9HtB;;AAAA;AAkIvB,gBAAI,EAAA,CAAG,GAAH,CAAO,MAAP,CAAJ,EAAW;AACT,cAAA,GAAA,CAAI,cAAJ,CAAmB,YAAA;AACjB,gBAAA,MAAA,CAAO,MAAP,EAAe,MAAf,EAAuB,MAAA,CAAO,IAA9B,CAAA;AAA8B,eADhC;AACgC;;AApIX,8CAwIhB,MAxIgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,IAAzB;AAwIS;;;AAMT,EAAA,KAAA,CAAM,KAAA,CAAM,QAAZ,EAAsB,UAAA,CAAA;AAAA,WAAK,CAAA,CAAE,MAAF,EAAL;AAAA,GAAtB,CAAA;AACA,EAAA,KAAA,CAAM,UAAN,CAAiB,KAAjB;AACA,EAAA,KAAA,CAAM,WAAN,CAAkB,KAAlB;AACA,EAAA,KAAA,CAAM,OAAN,GAAgB,KAAA,CAAM,OAAN,GAAgB,KAAA,CAAM,OAAN,GAAgB,KAAA,CAAhD;AACA,MAAI,QAAJ,EAAc,KAAA,CAAM,QAAN,GAAiB,QAAjB;AAAiB;;;;;;;AAM/B,wBAAA;AAAA;;AAAA,6BAEI,yIAFJ;AAEI;;;iCAJ0B,K;;;;;;;AAa9B,iCAAA;AAAA;;AAAA,8BACQ,qBADR;AACQ;;;iCAJ+B,K;;IC9M5B,YAAA,GAAe,SAAf,YAAe,CAAA,KAAA;AAAA,SAC1B,KAAA,YAAiB,UADS;AAAA,C;;AAG5B,IAAA,MAAA,GAAa,CAAb;;;;;;;AAfA,wBAAA;AAAA;;AAAA;;AAAA,gCAAA,SAAA;AA0BW,UAAA,EAAA,GAAK,MAAA,EAAL;AAKC,UAAA,SAAA,GAAY,CAAZ;AA/BZ;AA+BwB;;;;SAAA,eAElB;AACF,aAAO,KAAK,SAAZ;AAAY,K;SAAA,aAEV,QAFU,EAEV;AACF,UAAI,KAAK,SAAL,IAAkB,QAAtB,EAAsB;AACpB,aAAK,SAAL,GAAiB,QAAjB;;AACA,aAAK,iBAAL,CAAuB,QAAvB;AAAuB;AAAA;;;WAK3B,eAAA;AACE,UAAA,IAAA,GAAa,WAAA,CAAY,IAAZ,CAAb;AACA,aAAO,IAAA,IAAQ,IAAA,CAAK,QAAL,EAAf;AAAoB;;;WAItB,cAAA;AAAA,yCAAA,IAAA;AAAA,QAAA,IAAA;AAAA;;AACE,aAAOA,OAAAA,CAAE,EAAFA,CAAK,IAALA,EAAW,IAAXA,CAAP;AAAkB;;;WAIpB,uBAAA;AACE,MAAA,oBAAA;;AADF,yCAAA,IAAA;AAAA,QAAA,IAAA;AAAA;;AAEE,aAAOA,OAAAA,CAAE,EAAFA,CAAK,IAALA,EAAW,IAAXA,CAAP;AAAkB;;;WAGpB,kBAAA;AACE,aAAO,KAAK,GAAL,EAAP;AAAY;;;WAGJ,uBAAA,KAAA,EAAA;AACR,UAAI,KAAA,IAAS,CAAb,EAAgB,KAAK,OAAL;AAAK;;;WAGb,yBAAA,KAAA,EAAA;AACR,UAAI,KAAA,IAAS,CAAb,EAAgB,KAAK,OAAL;AAAK;;;WAUb,mBAAA,CAAA;;;WAGA,mBAAA,CAAA;;;WAGA,mBAAA,KAAA,EAA2B;AAAA,UAA3B,IAA2B,uEAAA,KAAA;AACnC,MAAA,kBAAA,CAAmB,IAAnB,EAAyB;AACvB,QAAA,IAAA,EAAM,QADiB;AAEvB,QAAA,MAAA,EAAQ,IAFe;AAGvB,QAAA,KAAA,EAAA,KAHuB;AAIvB,QAAA,IAAA,EAAA;AAJuB,OAAzB,CAAA;AAIE;;;WAKM,2BAAA,QAAA,EAAA;AACR,UAAI,CAAC,KAAK,IAAV,EAAU;AACR,QAAA,SAAA,CAAU,IAAV,CAAe,IAAf;AAAe;;AAEjB,MAAA,kBAAA,CAAmB,IAAnB,EAAyB;AACvB,QAAA,IAAA,EAAM,UADiB;AAEvB,QAAA,MAAA,EAAQ,IAFe;AAGvB,QAAA,QAAA,EAAA;AAHuB,OAAzB,CAAA;AAGE;;;;EAhF4C,U;;ACrBlD,IAAM,EAAA,GAAK,MAAA,CAAO,GAAP,CAAW,aAAX,CAAX;AAEA,IAAA,YAAA,GAAqB,CAArB;AACA,IAAA,YAAA,GAAqB,CAArB;AACA,IAAA,SAAA,GAAkB,CAAlB;;kBAG2B,S,WAAA,CAAA,MAAA;AAAA,SAAkB,CAAA,MAAA,CAAO,EAAP,CAAA,GAAa,YAAb,IAA6B,CAA/C;AAAA,C;;kBAGA,S,WAAA,CAAA,MAAA;AAAA,SAAkB,CAAA,MAAA,CAAO,EAAP,CAAA,GAAa,YAAb,IAA6B,CAA/C;AAAA,C;;eAGH,S,QAAA,CAAA,MAAA;AAAA,SAAkB,CAAA,MAAA,CAAO,EAAP,CAAA,GAAa,SAAb,IAA0B,CAA5C;AAAA,C;;mBAGI,S,YAAA,CAAA,MAAA,EAAA,MAAA;AAAA,SAC1B,MAAA,GACK,MAAA,CAAO,EAAP,CAAA,IAAc,YAAA,GAAe,YADlC,GAEK,MAAA,CAAO,EAAP,CAAA,IAAc,CAAC,YAHM;AAAA,C;;mBAKA,S,YAAA,CAAA,MAAA,EAAA,MAAA;AAAA,SAC1B,MAAA,GAAU,MAAA,CAAO,EAAP,CAAA,IAAc,SAAxB,GAAsC,MAAA,CAAO,EAAP,CAAA,IAAc,CAAC,SAD3B;AAAA,C;;;;;;;ACwF1B,uBAAY,IAAZ,EAAY,IAAZ,EAAY;AAAA;;AAAA;;AACV;AA9BF,WAAA,SAAA,GAAY,IAAIG,SAAJ,EAAZ;AAMA,WAAA,YAAA,GAAsC,EAAtC;AAGU,WAAA,MAAA,GAAwC;AAChD,MAAA,MAAA,EAAQ,KADwC;AAEhD,MAAA,UAAA,EAAY,IAAI,GAAJ,EAFoC;AAGhD,MAAA,WAAA,EAAa,IAAI,GAAJ,EAHmC;AAIhD,MAAA,QAAA,EAAU,IAAI,GAAJ;AAJsC,KAAxC;AAQA,WAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AAGA,WAAA,WAAA,GAAc,CAAd;AAGA,WAAA,SAAA,GAAY,CAAZ;AAEA,WAAA,iBAAA,GAAoB,CAApB;;AAMR,QAAI,CAAC,EAAA,CAAG,GAAH,CAAO,IAAP,CAAD,IAAiB,CAAC,EAAA,CAAG,GAAH,CAAO,IAAP,CAAtB,EAA6B;AAC3B,UAAA,KAAA,GAAc,EAAA,CAAG,GAAH,CAAO,IAAP,sBAAoB,IAApB,oCAAkC,IAAlC;AAAwC,QAAA,IAAA,EAAM;AAA9C,QAAd;;AACA,UAAI,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,OAAb,CAAJ,EAAiB;AACf,QAAA,KAAA,CAAM,OAAN,GAAgB,IAAhB;AAAgB;;AAElB,aAAK,KAAL,CAAW,KAAX;AAAW;;AAPH;AAOG;;;;SAAA,eAKX;AACF,aAAO,EAAA,WAAA,CAAc,IAAd,CAAA,IAAuB,KAAK,MAAL,CAAY,OAAnC,KAA+C,QAAA,CAAS,IAAT,CAAtD;AAA+D;;;SAAA,eAG7D;AACF,aAAO,aAAA,CAAc,KAAK,SAAL,CAAe,EAA7B,CAAP;AAAoC;;;SAAA,eAGlC;AACF,UAAA,IAAA,GAAa,WAAA,CAAY,IAAZ,CAAb;AACA,aAAQ,IAAA,YAAgB,aAAhB,GACJ,IAAA,CAAK,YAAL,IAAqB,CADjB,GAEJ,IAAA,CAAK,UAAL,GAAkB,GAAlB,CAAsB,UAAA,KAAA;AAAA,eAAQ,KAAA,CAAK,YAAL,IAAqB,CAA7B;AAAA,OAAtB,CAFJ;AAEuD;;;SAAA,eAMrD;AACF,aAAO,WAAA,CAAY,IAAZ,CAAP;AAAmB;;;SAAA,eAOjB;AACF,aAAO,WAAA,CAAY,IAAZ,CAAP;AAAmB;;;SAAA,eAMjB;AACF,aAAO,QAAA,CAAS,IAAT,CAAP;AAAgB;;;WAIlB,iBAAA,EAAA,EAAA;AAAA;;AACE,UAAA,IAAA,GAAW,IAAX;AACA,UAAA,OAAA,GAAc,KAAd;AAEA,UAAA,IAAA,GAAa,KAAK,SAAlB;AACA,UAAM,MAAN,GAA2B,IAA3B,CAAM,MAAN;AAAA,UAAc,QAAd,GAA2B,IAA3B,CAAc,QAAd;AAEA,UAAA,OAAA,GAAgB,UAAA,CAAW,IAAA,CAAK,EAAhB,CAAhB;;AACA,UAAI,CAAC,OAAD,IAAY,aAAA,CAAc,IAAA,CAAK,EAAnB,CAAhB,EAAmC;AACjC,QAAA,QAAA,GAAW,OAAA,CAAQ,aAAA,CAAc,IAAA,CAAK,EAAnB,CAAR,CAAX;AAAsC;;AAGxC,MAAA,IAAA,CAAK,MAAL,CAAY,OAAZ,CAAoB,UAAA,KAAA,EAAA,CAAA,EAAA;AAClB,YAAI,KAAA,CAAK,IAAT,EAAe;AAEf,YAAA,EAAA,GAEE,KAAA,CAAK,WAAL,IAAoB,cAApB,GACI,CADJ,GAEI,OAAA,GACA,OAAA,CAAQ,CAAR,CAAA,CAAW,YADX,GAEA,QAAA,CAAU,CAAV,CANN;AAQA,YAAA,QAAA,GAAe,IAAA,CAAK,SAApB;AACA,YAAA,QAAA,GAAe,EAAf;;AAEA,YAAI,CAAC,QAAL,EAAK;AACH,UAAA,QAAA,GAAW,KAAA,CAAK,YAAhB;;AAGA,cAAI,MAAA,CAAO,OAAP,IAAkB,CAAtB,EAAsB;AACpB,YAAA,KAAA,CAAK,IAAL,GAAY,IAAZ;AACA;AAAA;;AAGF,cAAA,OAAA,GAAe,KAAA,CAAK,WAAL,IAAoB,EAAnC;AACA,cAAA,IAAA,GAAa,IAAA,CAAK,UAAL,CAAgB,CAAhB,CAAb;AAEA,cAAA,EAAA,GACE,KAAA,CAAK,EAAL,IAAW,IAAX,GACI,KAAA,CAAK,EADT,GAEK,KAAA,CAAK,EAAL,GAAU,EAAA,CAAG,GAAH,CAAO,MAAA,CAAO,QAAd,IACP,MAAA,CAAO,QAAP,CAAgB,CAAhB,CADO,GAEP,MAAA,CAAO,QALjB;AAOA,cAAA,QAAA;;AAGA,cAAI,CAAC,EAAA,CAAG,GAAH,CAAO,MAAA,CAAO,QAAd,CAAL,EAAmB;AACjB,gBAAA,CAAA,GAAQ,CAAR;;AACA,gBAAI,MAAA,CAAO,QAAP,GAAkB,CAAtB,EAAsB;AAOpB,kBAAI,MAAA,CAAK,iBAAL,KAA2B,MAAA,CAAO,QAAtC,EAAsC;AAEpC,gBAAA,MAAA,CAAK,iBAAL,GAAyB,MAAA,CAAO,QAAhC;;AAGA,oBAAI,KAAA,CAAK,gBAAL,GAAwB,CAA5B,EAA4B;AAE1B,kBAAA,KAAA,CAAK,WAAL,GAAmB,MAAA,CAAO,QAAP,GAAkB,KAAA,CAAK,gBAA1C;AAEA,kBAAA,OAAA,GAAU,KAAA,CAAK,WAAL,IAAoB,EAA9B;AAA8B;AAAA;;AAKlC,cAAA,CAAA,GAAK,CAAA,MAAA,CAAO,QAAP,IAAmB,CAAnB,IAAwB,OAAA,GAAU,MAAA,CAAK,iBAA5C;AAEA,cAAA,CAAA,GAAI,CAAA,GAAI,CAAJ,GAAQ,CAAR,GAAY,CAAA,GAAI,CAAJ,GAAQ,CAAR,GAAY,CAA5B;AAEA,cAAA,KAAA,CAAK,gBAAL,GAAwB,CAAxB;AAAwB;;AAG1B,YAAA,QAAA,GAAW,IAAA,GAAO,MAAA,CAAO,MAAP,CAAc,CAAd,KAAc,EAAA,GAAW,IAAzB,CAAlB;AACA,YAAA,QAAA,GAAY,CAAA,QAAA,GAAW,KAAA,CAAK,YAAhB,IAAgC,EAA5C;AAEA,YAAA,QAAA,GAAW,CAAA,IAAK,CAAhB;AAAgB,WAjClB,MAiCkB,IAIT,MAAA,CAAO,KAJE,EAIF;AACd,gBAAA,KAAA,GAAc,MAAA,CAAO,KAAP,KAAiB,IAAjB,GAAwB,KAAxB,GAAgC,MAAA,CAAO,KAArD;AACA,gBAAA,CAAA,GAAU,IAAA,CAAK,GAAL,CAAS,EAAA,IAAM,KAAN,IAAe,OAAxB,CAAV;AAEA,YAAA,QAAA,GAAW,IAAA,GAAQ,EAAA,IAAA,IAAU,KAAV,CAAA,IAAU,IAAe,CAAzB,CAAnB;AACA,YAAA,QAAA,GAAW,IAAA,CAAK,GAAL,CAAS,KAAA,CAAK,YAAL,GAAoB,QAA7B,IAAyC,GAApD;AAGA,YAAA,QAAA,GAAW,EAAA,GAAK,CAAhB;AAAgB,WAZA,MAYA;AAKhB,YAAA,QAAA,GAAW,KAAA,CAAK,YAAL,IAAqB,IAArB,GAA4B,EAA5B,GAAiC,KAAA,CAAK,YAAjD;AAGA,gBAAA,SAAA,GACE,MAAA,CAAO,SAAP,KAAO,IAAA,IACE,EADF,GACO,IADP,GACe,IAAA,CAAK,GAAL,CAAS,CAAT,EAAY,IAAA,CAAK,GAAL,CAAS,EAAA,GAAK,IAAd,IAAsB,IAAlC,CADtB,CADF;AAKA,gBAAA,YAAA,GAAqB,MAAA,CAAO,YAAP,IAAuB,SAAA,GAAY,EAAxD;AAGA,gBAAA,YAAA,GAAqB,MAAA,CAAO,KAAP,GAAe,CAAf,GAAmB,MAAA,CAAO,MAA/C;AACA,gBAAA,SAAA,GAAkB,CAAC,EAAA,CAAG,GAAH,CAAO,YAAP,CAAnB;AAGA,gBAAA,SAAA,GAAkB,IAAA,IAAQ,EAAR,GAAa,KAAA,CAAK,EAAL,GAAU,CAAvB,GAA2B,IAAA,GAAO,EAApD;AAGA,gBAAA,QAAA;AAGA,gBAAA,UAAA,GAAiB,KAAjB;AAEA,gBAAA,IAAA,GAAa,CAAb;AACA,gBAAA,QAAA,GAAiB,IAAA,CAAK,IAAL,CAAU,EAAA,GAAK,IAAf,CAAjB;;AACA,iBAAA,IAAA,CAAA,GAAa,CAAb,EAAgB,CAAA,GAAI,QAApB,EAA8B,EAAE,CAAhC,EAAgC;AAC9B,cAAA,QAAA,GAAW,IAAA,CAAK,GAAL,CAAS,QAAT,IAAqB,YAAhC;;AAEA,kBAAI,CAAC,QAAL,EAAK;AACH,gBAAA,QAAA,GAAW,IAAA,CAAK,GAAL,CAAS,EAAA,GAAK,QAAd,KAA2B,SAAtC;;AACA,oBAAI,QAAJ,EAAI;AACF;AAAA;AAAA;;AAIJ,kBAAI,SAAJ,EAAI;AACF,gBAAA,UAAA,GAAa,QAAA,IAAY,EAAZ,IAAkB,QAAA,GAAW,EAAX,IAAiB,SAAhD;;AAGA,oBAAI,UAAJ,EAAI;AACF,kBAAA,QAAA,GAAW,CAAC,QAAD,GAAY,YAAvB;AACA,kBAAA,QAAA,GAAW,EAAX;AAAW;AAAA;;AAIf,kBAAA,WAAA,GAAoB,CAAC,MAAA,CAAO,OAAR,GAAkB,IAAlB,IAAkB,QAAA,GAAuB,EAAzC,CAApB;AACA,kBAAA,YAAA,GAAqB,CAAC,MAAA,CAAO,QAAR,GAAmB,IAAnB,GAA2B,QAAhD;AACA,kBAAA,YAAA,GAAsB,CAAA,WAAA,GAAc,YAAd,IAA8B,MAAA,CAAO,IAA3D;AAEA,cAAA,QAAA,GAAW,QAAA,GAAW,YAAA,GAAe,IAArC;AACA,cAAA,QAAA,GAAW,QAAA,GAAW,QAAA,GAAW,IAAjC;AAAiC;AAAA;;AAIrC,UAAA,KAAA,CAAK,YAAL,GAAoB,QAApB;;AAEA,cAAI,MAAA,CAAO,KAAP,CAAa,QAAb,CAAJ,EAAiB;AACf,YAAA,OAAA,CAAQ,IAAR,6BAAyC,MAAzC;AACA,YAAA,QAAA,GAAW,IAAX;AAAW;AAAA;;AAKf,YAAI,OAAA,IAAW,CAAC,OAAA,CAAQ,CAAR,CAAA,CAAW,IAA3B,EAA2B;AACzB,UAAA,QAAA,GAAW,KAAX;AAAW;;AAGb,YAAI,QAAJ,EAAI;AACF,UAAA,KAAA,CAAK,IAAL,GAAY,IAAZ;AAAY,SADd,MACc;AAEZ,UAAA,IAAA,GAAO,KAAP;AAAO;;AAGT,YAAI,KAAA,CAAK,QAAL,CAAc,QAAd,EAAwB,MAAA,CAAO,KAA/B,CAAJ,EAAmC;AACjC,UAAA,OAAA,GAAU,IAAV;AAAU;AAAA,OAhKd;AAoKA,UAAA,IAAA,GAAa,WAAA,CAAY,IAAZ,CAAb;;AACA,UAAI,IAAJ,EAAI;AACF,YAAA,KAAA,GAAc,aAAA,CAAc,IAAA,CAAK,EAAnB,CAAd;;AACA,YAAI,IAAA,CAAK,QAAL,CAAc,KAAd,KAAwB,OAA5B,EAA4B;AAC1B,eAAK,SAAL,CAAe,KAAf;AAAe;;AAEjB,aAAK,KAAL;AAAK,OALP,MAKO,IACI,OADJ,EACI;AACT,aAAK,SAAL,CAAe,IAAA,CAAK,QAAL,EAAf;AAAoB;AAAA;;;WAKxB,aAAA,KAAA,EAAA;AAAA;;AACE,MAAA,GAAA,CAAI,cAAJ,CAAmB,YAAA;AACjB,QAAA,MAAA,CAAK,KAAL;;AAIA,QAAA,MAAA,CAAK,MAAL,CAAY,KAAZ;;AACA,QAAA,MAAA,CAAK,IAAL,CAAU,KAAV;AAAU,OANZ;AAQA,aAAO,IAAP;AAAO;;;WAOT,iBAAA;AACE,WAAK,OAAL,CAAa;AAAE,QAAA,KAAA,EAAO;AAAT,OAAb;AAAsB;;;WAIxB,kBAAA;AACE,WAAK,OAAL,CAAa;AAAE,QAAA,KAAA,EAAO;AAAT,OAAb;AAAsB;;;WAIxB,kBAAA;AAAA;;AACE,UAAI,WAAA,CAAY,IAAZ,CAAJ,EAAgB;AACd,8BAAuB,KAAK,SAA5B;AAAA,YAAQ,GAAR,mBAAQ,EAAR;AAAA,YAAY,OAAZ,mBAAY,MAAZ;AACA,QAAA,GAAA,CAAI,cAAJ,CAAmB,YAAA;AAEjB,UAAA,MAAA,CAAK,QAAL;;AAIA,cAAI,CAAC,OAAA,CAAO,KAAZ,EAAY;AACV,YAAA,MAAA,CAAK,IAAL,CAAU,GAAV,EAAc,KAAd;AAAc;;AAGhB,UAAA,MAAA,CAAK,KAAL;AAAK,SAVP;AAUO;;AAGT,aAAO,IAAP;AAAO;;;WAIT,gBAAA,KAAA,EAAA;AACE,UAAA,KAAA,GAAc,KAAK,KAAL,KAAK,KAAe,KAAf,GAAuB,EAA5B,CAAd;AACA,MAAA,KAAA,CAAM,IAAN,CAAW,KAAX;AACA,aAAO,IAAP;AAAO;;;WAgBT,eAAA,EAAA,EAAA,IAAA,EAAA;AAAA;;AACE,UAAA,KAAA;;AACA,UAAI,CAAC,EAAA,CAAG,GAAH,CAAO,EAAP,CAAL,EAAY;AACV,QAAA,KAAA,GAAQ,CAAC,EAAA,CAAG,GAAH,CAAO,EAAP,IAAa,EAAb,mCAAuB,IAAvB;AAA6B,UAAA,EAAA,EAAA;AAA7B,UAAD,CAAR;AAAsC,OADxC,MACwC;AAEtC,QAAA,KAAA,GAAQ,KAAK,KAAL,IAAc,EAAtB;AACA,aAAK,KAAL,GAAa,EAAb;AAAa;;AAGf,aAAO,OAAA,CAAQ,GAAR,CAAY,KAAA,CAAM,GAAN,CAAU,UAAA,KAAA;AAAA,eAAS,MAAA,CAAK,OAAL,CAAa,KAAb,CAAT;AAAA,OAAV,CAAZ,EAAqD,IAArD,CAA0D,UAAA,OAAA;AAAA,eAC/D,iBAAA,CAAkB,MAAlB,EAAwB,OAAxB,CAD+D;AAAA,OAA1D,CAAP;AAC0B;;;WAS5B,cAAA,MAAA,EAAA;AAAA;;AACE,UAAQ,EAAR,GAAe,KAAK,SAApB,CAAQ,EAAR;;AAGA,WAAK,MAAL,CAAY,KAAK,GAAL,EAAZ;;AAEA,MAAA,SAAA,CAAU,KAAK,MAAf,EAAuB,MAAA,IAAU,KAAK,WAAtC,CAAA;AACA,MAAA,GAAA,CAAI,cAAJ,CAAmB;AAAA,eAAM,MAAA,CAAK,KAAL,CAAW,EAAX,EAAe,MAAf,CAAN;AAAA,OAAnB;AAEA,aAAO,IAAP;AAAO;;;WAIT,iBAAA;AACE,WAAK,OAAL,CAAa;AAAE,QAAA,KAAA,EAAO;AAAT,OAAb;AAAsB;;;WAIxB,uBAAA,KAAA,EAAA;AACE,UAAI,KAAA,CAAM,IAAN,IAAc,QAAlB,EAAkB;AAChB,aAAK,MAAL;AAAK,OADP,MACO,IACI,KAAA,CAAM,IAAN,IAAc,UADlB,EACkB;AACvB,aAAK,QAAL,GAAgB,KAAA,CAAM,QAAN,GAAiB,CAAjC;AAAiC;AAAA;;;WAU3B,sBAAA,KAAA,EAAA;AAMR,UAAA,GAAA,GAAY,KAAK,GAAL,IAAY,EAAxB;AAEA,UAAM,EAAN,GAAmB,KAAnB,CAAM,EAAN;AAAA,UAAU,IAAV,GAAmB,KAAnB,CAAU,IAAV;AAEA,MAAA,EAAA,GAAK,EAAA,CAAG,GAAH,CAAO,EAAP,IAAa,EAAA,CAAG,GAAH,CAAb,GAAuB,EAA5B;;AACA,UAAI,EAAA,IAAM,IAAN,IAAc,SAAA,CAAU,EAAV,CAAlB,EAA4B;AAC1B,QAAA,EAAA,GAAK,KAAA,CAAL;AAAK;;AAGP,MAAA,IAAA,GAAO,EAAA,CAAG,GAAH,CAAO,IAAP,IAAe,IAAA,CAAK,GAAL,CAAf,GAA2B,IAAlC;;AACA,UAAI,IAAA,IAAQ,IAAZ,EAAY;AACV,QAAA,IAAA,GAAO,KAAA,CAAP;AAAO;;AAIT,UAAA,KAAA,GAAc;AAAE,QAAA,EAAA,EAAA,EAAF;AAAM,QAAA,IAAA,EAAA;AAAN,OAAd;;AAIA,UAAI,CAAC,WAAA,CAAY,IAAZ,CAAL,EAAiB;AACf,YAAI,KAAA,CAAM,OAAV;AAAA,sBAAgC,CAAC,IAAD,EAAO,EAAP,CAAhC;AAAoB,UAAA,EAApB;AAAwB,UAAA,IAAxB;AAAA;;AAEA,QAAA,IAAA,GAAO,aAAA,CAAc,IAAd,CAAP;;AACA,YAAI,CAAC,EAAA,CAAG,GAAH,CAAO,IAAP,CAAL,EAAY;AACV,eAAK,IAAL,CAAU,IAAV;AAAU,SADZ,MACY,IAGH,CAAC,WAAA,CAAY,IAAZ,CAHE,EAGU;AACpB,eAAK,IAAL,CAAU,EAAV;AAAU;AAAA;;AAId,aAAO,KAAP;AAAO;;;WAIC,wBAAA,MAAA,EAAA;AAAA;;AAAA,UAAA,KAAA;AAIR,UAAQ,GAAR,GAA8B,IAA9B,CAAQ,GAAR;AAAA,UAAa,YAAb,GAA8B,IAA9B,CAAa,YAAb;AAGA,UAAI,KAAA,CAAM,OAAV,EACE,MAAA,CAAO,MAAP,CACE,YADF,EAEE,eAAA,CAAgB,KAAhB,EAAuB,UAAA,KAAA,EAAA,IAAA;AAAA,eACrB,MAAM,IAAN,CAAW,IAAX,IAAmB,WAAA,CAAY,KAAZ,EAAmB,GAAnB,CAAnB,GAA6C,KADxB;AAAA,OAAvB,CAFF;AAOF,MAAA,aAAA,CAAc,IAAd,EAAoB,KAApB,EAA2B,SAA3B,CAAA;AACA,MAAA,SAAA,CAAU,IAAV,EAAgB,SAAhB,EAA2B,KAA3B,EAAkC,IAAlC,CAAA;;AAGA,UAAA,KAAA,GAAc,KAAK,YAAL,CAAkB,KAAlB,CAAd;;AAEA,UAAI,MAAA,CAAO,QAAP,CAAgB,IAAhB,CAAJ,EAAoB;AAClB,cAAM,KAAA,CACJ,4IADI,CAAN;AACE;;AAKJ,UAAA,KAAA,GAAc,KAAK,MAAnB;AACA,aAAOC,aAAAA,CAAc,EAAE,KAAK,WAArBA,EAAkC;AACvC,QAAA,GAAA,EAAA,GADuC;AAEvC,QAAA,KAAA,EAAA,KAFuC;AAGvC,QAAA,YAAA,EAAA,YAHuC;AAIvC,QAAA,KAAA,EAAA,KAJuC;AAKvC,QAAA,OAAA,EAAS;AACP,UAAA,KAAA,EAAO,iBAAA;AACL,gBAAI,CAAC,QAAA,CAAS,MAAT,CAAL,EAAc;AACZ,cAAA,YAAA,CAAa,MAAb,EAAmB,IAAnB,CAAA;AACA,cAAA,UAAA,CAAW,KAAA,CAAM,UAAjB,CAAA;AACA,cAAA,SAAA,CACE,MADF,EAEE,SAFF,EAGE,iBAAA,CAAkB,MAAlB,EAAwB,aAAA,CAAc,MAAd,EAAoB,MAAA,CAAK,SAAL,CAAe,EAAnC,CAAxB,CAHF,EAIE,MAJF,CAAA;AAIE;AAAA,WATC;AAaP,UAAA,MAAA,EAAQ,kBAAA;AACN,gBAAI,QAAA,CAAS,MAAT,CAAJ,EAAa;AACX,cAAA,YAAA,CAAa,MAAb,EAAmB,KAAnB,CAAA;;AACA,kBAAI,WAAA,CAAY,MAAZ,CAAJ,EAAgB;AACd,gBAAA,MAAA,CAAK,OAAL;AAAK;;AAEP,cAAA,UAAA,CAAW,KAAA,CAAM,WAAjB,CAAA;AACA,cAAA,SAAA,CACE,MADF,EAEE,UAFF,EAGE,iBAAA,CAAkB,MAAlB,EAAwB,aAAA,CAAc,MAAd,EAAoB,MAAA,CAAK,SAAL,CAAe,EAAnC,CAAxB,CAHF,EAIE,MAJF,CAAA;AAIE;AAAA,WAxBC;AA4BP,UAAA,KAAA,EAAO,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,EAAuB,KAAvB;AA5BA;AAL8B,OAAlCA,CAAAA,CAmCJ,IAnCIA,CAmCC,UAAA,MAAA,EAAA;AACN,YAAI,KAAA,CAAM,IAAN,IAAc,MAAA,CAAO,QAArB,IAAiC,EAAA,MAAA,IAAY,MAAA,CAAO,IAAnB,CAArC,EAAwD;AACtD,cAAA,SAAA,GAAkB,gBAAA,CAAiB,KAAjB,CAAlB;;AACA,cAAI,SAAJ,EAAI;AACF,mBAAO,MAAA,CAAK,OAAL,CAAa,SAAb,EAAwB,IAAxB,CAAP;AAA+B;AAAA;;AAGnC,eAAO,MAAP;AAAO,OA1CFA,CAAP;AA0CS;;;WAKD,gBAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA;AAAA;;AAOR,UAAI,KAAA,CAAM,MAAV,EAAU;AACR,aAAK,IAAL,CAAU,IAAV;AACA,eAAO,OAAA,CAAQ,kBAAA,CAAmB,IAAnB,CAAR,CAAP;AAAkC;;AAIpC,UAAA,SAAA,GAAkB,CAAC,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,EAAb,CAAnB;AAGA,UAAA,WAAA,GAAoB,CAAC,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,IAAb,CAArB;;AAIA,UAAI,SAAA,IAAa,WAAjB,EAAiB;AACf,YAAI,KAAA,CAAM,MAAN,GAAe,KAAK,SAAxB,EAAwB;AACtB,eAAK,SAAL,GAAiB,KAAA,CAAM,MAAvB;AAAuB,SADzB,MACyB;AAEvB,iBAAO,OAAA,CAAQ,kBAAA,CAAmB,IAAnB,CAAR,CAAP;AAAkC;AAAA;;AAItC,UAAQ,GAAR,GAA+C,IAA/C,CAAQ,GAAR;AAAA,UAAa,YAAb,GAA+C,IAA/C,CAAa,YAAb;AAAA,UAA2B,IAA3B,GAA+C,IAA/C,CAA2B,SAA3B;AACA,UAAQ,MAAR,GAAuC,IAAvC,CAAQ,EAAR;AAAA,UAAoB,QAApB,GAAuC,IAAvC,CAAoB,IAApB;AACA,sBAAuC,KAAvC,CAAM,EAAN;AAAA,UAAM,EAAN,0BAAW,MAAX;AAAA,wBAAuC,KAAvC,CAAmB,IAAnB;AAAA,UAAmB,IAAnB,4BAA0B,QAA1B;;AAIA,UAAI,WAAA,IAAe,CAAC,SAAhB,KAAgB,CAAe,KAAA,CAAM,OAArB,IAAgC,EAAA,CAAG,GAAH,CAAO,EAAP,CAAhD,CAAJ,EAA2D;AACzD,QAAA,EAAA,GAAK,IAAL;AAAK;;AAIP,UAAI,KAAA,CAAM,OAAV;AAAA,oBAAgC,CAAC,IAAD,EAAO,EAAP,CAAhC;AAAoB,QAAA,EAApB;AAAwB,QAAA,IAAxB;AAAA;;AAGA,UAAA,cAAA,GAAuB,CAAC,OAAA,CAAQ,IAAR,EAAc,QAAd,CAAxB;;AAEA,UAAI,cAAJ,EAAI;AACF,QAAA,IAAA,CAAK,IAAL,GAAY,IAAZ;AAAY;;AAId,MAAA,IAAA,GAAO,aAAA,CAAc,IAAd,CAAP;AAGA,UAAA,YAAA,GAAqB,CAAC,OAAA,CAAQ,EAAR,EAAY,MAAZ,CAAtB;;AAEA,UAAI,YAAJ,EAAI;AACF,aAAK,MAAL,CAAY,EAAZ;AAAY;;AAId,UAAA,UAAA,GAAmB,SAAA,CAAU,KAAA,CAAM,EAAhB,CAAnB;AAEA,UAAQ,MAAR,GAAmB,IAAnB,CAAQ,MAAR;AACA,UAAQ,KAAR,GAA4B,MAA5B,CAAQ,KAAR;AAAA,UAAe,QAAf,GAA4B,MAA5B,CAAe,QAAf;;AAGA,UAAI,SAAA,IAAa,WAAjB,EAAiB;AACf,QAAA,MAAA,CAAO,QAAP,GAAkB,CAAlB;AAAkB;;AAKpB,UAAI,KAAA,CAAM,MAAN,IAAgB,CAAC,UAArB,EAAqB;AACnB,QAAA,WAAA,CACE,MADF,EAEE,QAAA,CAAS,KAAA,CAAM,MAAf,EAAuB,GAAvB,CAFF,EAIE,KAAA,CAAM,MAAN,KAAiB,YAAA,CAAa,MAA9B,GACI,QAAA,CAAS,YAAA,CAAa,MAAtB,EAA8B,GAA9B,CADJ,GAEI,KAAA,CANN,CAAA;AAMM;;AAMR,UAAA,IAAA,GAAW,WAAA,CAAY,IAAZ,CAAX;;AACA,UAAI,CAAC,IAAD,IAAS,EAAA,CAAG,GAAH,CAAO,EAAP,CAAb,EAAoB;AAClB,eAAO,OAAA,CAAQ,iBAAA,CAAkB,IAAlB,EAAwB,IAAxB,CAAR,CAAP;AAAuC;;AAIzC,UAAA,KAAA,GAIE,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,KAAb,IACI,WAAA,IAAe,CAAC,KAAA,CAAM,OAD1B,GAEI,CAAC,EAAA,CAAG,GAAH,CAAO,IAAP,CAAD,IAAiB,SAAA,CAAU,KAAA,CAAM,KAAhB,EAAuB,GAAvB,CANvB;AASA,UAAA,KAAA,GAAc,KAAA,GAAS,IAAT,GAAsB,KAAK,GAAL,EAApC;AAGA,UAAA,IAAA,GAAa,WAAA,CAAiB,EAAjB,CAAb;AAGA,UAAA,YAAA,GAAqB,EAAA,CAAG,GAAH,CAAO,IAAP,KAAgB,EAAA,CAAG,GAAH,CAAO,IAAP,CAAhB,IAAgC,gBAAA,CAAiB,IAAjB,CAArD;AAGA,UAAA,SAAA,GACE,CAAC,UAAD,KAAC,CACC,YADD,IAEC,SAAA,CAAU,YAAA,CAAa,SAAb,IAA0B,KAAA,CAAM,SAA1C,EAAqD,GAArD,CAFF,CADF;;AAKA,UAAI,YAAJ,EAAI;AACF,YAAA,QAAA,GAAiB,eAAA,CAAgB,EAAhB,CAAjB;;AACA,YAAI,QAAA,KAAa,IAAA,CAAK,WAAtB,EAAsB;AACpB,cAAI,SAAJ,EAAI;AACF,YAAA,IAAA,GAAO,KAAK,IAAL,CAAU,IAAV,CAAP;AAAiB,WADnB,MAGE,MAAM,KAAA,kCACsB,IAAA,CAAK,WAAL,CAAiB,IADvC,kBACmD,QAAA,CAAS,IAD5D,mCAAN;AACkE;AAAA;;AAMxE,UAAA,QAAA,GAAiB,IAAA,CAAK,WAAtB;AAKA,UAAA,OAAA,GAAc,aAAA,CAAc,EAAd,CAAd;AACA,UAAA,QAAA,GAAe,KAAf;;AAEA,UAAI,CAAC,OAAL,EAAK;AAEH,YAAA,eAAA,GAAwB,KAAA,IAAU,CAAC,WAAA,CAAY,IAAZ,CAAD,IAAsB,cAAxD;;AAIA,YAAI,YAAA,IAAgB,eAApB,EAAoB;AAClB,UAAA,QAAA,GAAW,OAAA,CAAQ,WAAA,CAAY,KAAZ,CAAR,EAA4B,IAA5B,CAAX;AACA,UAAA,OAAA,GAAU,CAAC,QAAX;AAAW;;AAIb,YACE,CAAC,OAAA,CAAQ,MAAA,CAAO,KAAf,EAAsB,KAAtB,CAAD,IACA,CAAC,OAAA,CAAQ,MAAA,CAAO,QAAf,EAAyB,QAAzB,CAFH,EAE4B;AAE1B,UAAA,OAAA,GAAU,IAAV;AAAU;AAAA;;AAKd,UAAI,QAAA,IAAY,WAAA,CAAY,IAAZ,CAAhB,EAA4B;AAG1B,YAAI,IAAA,CAAK,OAAL,IAAgB,CAAC,KAArB,EAAqB;AACnB,UAAA,OAAA,GAAU,IAAV;AAAU,SADZ,MACY,IAGH,CAAC,OAHE,EAGF;AACR,eAAK,KAAL,CAAW,MAAX;AAAW;AAAA;;AAIf,UAAI,CAAC,UAAL,EAAK;AAGH,YAAI,OAAA,IAAW,aAAA,CAAc,MAAd,CAAf,EAA6B;AAC3B,UAAA,IAAA,CAAK,MAAL,GAAc,IAAA,CAAK,UAAL,EAAd;AACA,UAAA,IAAA,CAAK,QAAL,GAAgB,aAAA,CAAc,EAAd,CAAA,GACZ,IADY,GAEZ,QAAA,IAAY,cAAZ,GACA,CAAC,CAAD,CADA,GAEA,OAAA,CAAQ,IAAR,CAJJ;AAIY;;AAGd,YAAI,IAAA,CAAK,SAAL,IAAkB,SAAtB,EAAsB;AACpB,UAAA,IAAA,CAAK,SAAL,GAAiB,SAAjB;;AAGA,cAAI,CAAC,SAAD,IAAc,CAAC,KAAnB,EAAmB;AACjB,iBAAK,IAAL,CAAU,MAAV;AAAU;AAAA;;AAId,YAAI,OAAJ,EAAI;AACF,cAAQ,MAAR,GAAmB,IAAnB,CAAQ,MAAR;AAGA,UAAA,IAAA,CAAK,aAAL,EAAoB,UAAA,IAAA;AAAA,mBAAQ,aAAA,CAAc,MAAd,EAAoB,KAApB,EAA2B,IAA3B,CAAR;AAAA,WAApB,CAAA;AAEA,cAAA,MAAA,GAAe,iBAAA,CAAkB,IAAlB,EAAwB,aAAA,CAAc,IAAd,EAAoB,MAApB,CAAxB,CAAf;AACA,UAAA,UAAA,CAAW,KAAK,aAAhB,EAA+B,MAA/B,CAAA;;AACA,eAAK,aAAL,CAAmB,GAAnB,CAAuB,OAAvB;;AAEA,cAAI,IAAA,CAAK,OAAT,EACE,GAAA,CAAI,cAAJ,CAAmB,YAAA;AA9wB7B,gBAAA,EAAA;;AAgxBY,YAAA,IAAA,CAAK,OAAL,GAAe,CAAC,KAAhB;AAGA,YAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAS,MAAT,EAAiB,MAAjB,CAAA;;AAIA,gBAAI,KAAJ,EAAI;AACF,cAAA,QAAA,CAAS,YAAA,CAAa,MAAtB,EAA8B,MAA9B,CAAA;AAA8B,aADhC,MACgC;AAM9B,eAAA,EAAA,GAAA,IAAA,CAAK,OAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,IAAA,EAAe,MAAf,EAAuB,MAAvB,CAAA;AAAuB;AAAA,WAhB3B;AAgB2B;AAAA;;AAMjC,UAAI,KAAJ,EAAI;AACF,aAAK,IAAL,CAAU,KAAV;AAAU;;AAGZ,UAAI,UAAJ,EAAI;AACF,QAAA,OAAA,CAAQC,QAAAA,CAAS,KAAA,CAAM,EAAfA,EAAmB,KAAnBA,EAA0B,KAAK,MAA/BA,EAAuC,IAAvCA,CAAR,CAAA;AAA+C,OADjD,MACiD,IAIxC,OAJwC,EAIxC;AACP,aAAK,MAAL;AAAK,OAL0C,MAK1C,IAKE,WAAA,CAAY,IAAZ,CAAA,IAAqB,CAAC,YALxB,EAKwB;AAC7B,aAAK,aAAL,CAAmB,GAAnB,CAAuB,OAAvB;AAAuB,OANlB,MAMkB;AAKvB,QAAA,OAAA,CAAQ,aAAA,CAAc,KAAd,CAAR,CAAA;AAAsB;AAAA;;;WAKhB,gBAAA,KAAA,EAAA;AACR,UAAA,IAAA,GAAa,KAAK,SAAlB;;AACA,UAAI,KAAA,KAAU,IAAA,CAAK,EAAnB,EAAmB;AACjB,YAAI,iBAAA,CAAkB,IAAlB,CAAJ,EAAsB;AACpB,eAAK,OAAL;AAAK;;AAEP,QAAA,IAAA,CAAK,EAAL,GAAU,KAAV;;AACA,YAAI,iBAAA,CAAkB,IAAlB,CAAJ,EAAsB;AACpB,eAAK,OAAL;AAAK;AAAA;AAAA;;;WAKD,mBAAA;AACR,UAAA,QAAA,GAAe,CAAf;AAEA,UAAQ,EAAR,GAAe,KAAK,SAApB,CAAQ,EAAR;;AACA,UAAI,aAAA,CAAc,EAAd,CAAJ,EAAkB;AAChB,QAAA,gBAAA,CAAiB,EAAjB,EAAqB,IAArB,CAAA;;AACA,YAAI,YAAA,CAAa,EAAb,CAAJ,EAAiB;AACf,UAAA,QAAA,GAAW,EAAA,CAAG,QAAH,GAAc,CAAzB;AAAyB;AAAA;;AAI7B,WAAK,QAAL,GAAgB,QAAhB;AAAgB;;;WAGR,mBAAA;AACR,UAAQ,EAAR,GAAe,KAAK,SAApB,CAAQ,EAAR;;AACA,UAAI,aAAA,CAAc,EAAd,CAAJ,EAAkB;AAChB,QAAA,mBAAA,CAAoB,EAApB,EAAwB,IAAxB,CAAA;AAAwB;AAAA;;;WAQlB,cAAA,GAAA,EAAoC;AAAA;;AAAA,UAApC,IAAoC,uEAAA,IAAA;AAC5C,UAAA,KAAA,GAAc,aAAA,CAAc,GAAd,CAAd;;AACA,UAAI,CAAC,EAAA,CAAG,GAAH,CAAO,KAAP,CAAL,EAAY;AACV,YAAA,OAAA,GAAgB,WAAA,CAAY,IAAZ,CAAhB;;AACA,YAAI,CAAC,OAAD,IAAY,CAAC,OAAA,CAAQ,KAAR,EAAe,OAAA,CAAQ,QAAR,EAAf,CAAjB,EAAwC;AAEtC,cAAA,QAAA,GAAiB,eAAA,CAAgB,KAAhB,CAAjB;;AACA,cAAI,CAAC,OAAD,IAAY,OAAA,CAAQ,WAAR,IAAuB,QAAvC,EAAuC;AACrC,YAAA,WAAA,CAAY,IAAZ,EAAkB,QAAA,CAAS,MAAT,CAAgB,KAAhB,CAAlB,CAAA;AAAkC,WADpC,MACoC;AAElC,YAAA,OAAA,CAAQ,QAAR,CAAiB,KAAjB;AAAiB;;AAGnB,cAAI,OAAJ,EAAI;AACF,YAAA,GAAA,CAAI,cAAJ,CAAmB,YAAA;AACjB,cAAA,OAAA,CAAK,SAAL,CAAe,KAAf,EAAsB,IAAtB;AAAsB,aADxB;AACwB;AAAA;AAAA;;AAK9B,aAAO,WAAA,CAAY,IAAZ,CAAP;AAAmB;;;WAGX,oBAAA;AACR,UAAA,IAAA,GAAa,KAAK,SAAlB;;AACA,UAAI,CAAC,IAAA,CAAK,OAAV,EAAU;AACR,QAAA,IAAA,CAAK,OAAL,GAAe,IAAf;AACA,QAAA,SAAA,CACE,IADF,EAEE,SAFF,EAGE,iBAAA,CAAkB,IAAlB,EAAwB,aAAA,CAAc,IAAd,EAAoB,IAAA,CAAK,EAAzB,CAAxB,CAHF,EAIE,IAJF,CAAA;AAIE;AAAA;;;WAKI,mBAAA,KAAA,EAAA,IAAA,EAAA;AACR,UAAI,CAAC,IAAL,EAAK;AACH,aAAK,QAAL;;AACA,QAAA,QAAA,CAAS,KAAK,SAAL,CAAe,QAAxB,EAAkC,KAAlC,EAAyC,IAAzC,CAAA;AAAyC;;AAE3C,MAAA,QAAA,CAAS,KAAK,YAAL,CAAkB,QAA3B,EAAqC,KAArC,EAA4C,IAA5C,CAAA;;AACA,iFAAgB,KAAhB,EAAuB,IAAvB;AAAuB;;;WAMf,kBAAA;AACR,UAAA,IAAA,GAAa,KAAK,SAAlB;AAGA,MAAA,WAAA,CAAY,IAAZ,CAAA,CAAmB,KAAnB,CAAyB,aAAA,CAAc,IAAA,CAAK,EAAnB,CAAzB;;AAGA,UAAI,CAAC,IAAA,CAAK,SAAV,EAAU;AACR,QAAA,IAAA,CAAK,UAAL,GAAkB,IAAA,CAAK,MAAL,CAAY,GAAZ,CAAgB,UAAA,IAAA;AAAA,iBAAQ,IAAA,CAAK,YAAb;AAAA,SAAhB,CAAlB;AAA+C;;AAGjD,UAAI,CAAC,WAAA,CAAY,IAAZ,CAAL,EAAiB;AACf,QAAA,YAAA,CAAa,IAAb,EAAmB,IAAnB,CAAA;;AACA,YAAI,CAAC,QAAA,CAAS,IAAT,CAAL,EAAc;AACZ,eAAK,OAAL;AAAK;AAAA;AAAA;;;WAKD,mBAAA;AAER,UAAIL,OAAAA,CAAE,aAAN,EAAM;AACJ,aAAK,MAAL;AAAK,OADP,MACO;AAEL,QAAA,SAAA,CAAU,KAAV,CAAgB,IAAhB;AAAgB;AAAA;;;WASV,eAAA,IAAA,EAAA,MAAA,EAAA;AACR,UAAI,WAAA,CAAY,IAAZ,CAAJ,EAAgB;AACd,QAAA,YAAA,CAAa,IAAb,EAAmB,KAAnB,CAAA;AAEA,YAAA,IAAA,GAAa,KAAK,SAAlB;AACA,QAAA,IAAA,CAAK,IAAA,CAAK,MAAV,EAAkB,UAAA,IAAA,EAAA;AAChB,UAAA,IAAA,CAAK,IAAL,GAAY,IAAZ;AAAY,SADd,CAAA;;AAOA,YAAI,IAAA,CAAK,QAAT,EAAS;AACP,UAAA,IAAA,CAAK,QAAL,GAAgB,IAAA,CAAK,OAAL,GAAe,IAAA,CAAK,QAAL,GAAgB,KAAA,CAA/C;AAA+C;;AAGjD,QAAA,kBAAA,CAAmB,IAAnB,EAAyB;AACvB,UAAA,IAAA,EAAM,MADiB;AAEvB,UAAA,MAAA,EAAQ;AAFe,SAAzB,CAAA;AAKA,YAAA,MAAA,GAAe,MAAA,GACX,kBAAA,CAAmB,KAAK,GAAL,EAAnB,CADW,GAEX,iBAAA,CAAkB,KAAK,GAAL,EAAlB,EAA8B,aAAA,CAAc,IAAd,EAAoB,IAAA,IAAA,IAAA,GAAA,IAAA,GAAQ,IAAA,CAAK,EAAjC,CAA9B,CAFJ;AAIA,QAAA,UAAA,CAAW,KAAK,aAAhB,EAA+B,MAA/B,CAAA;;AACA,YAAI,IAAA,CAAK,OAAT,EAAS;AACP,UAAA,IAAA,CAAK,OAAL,GAAe,KAAf;AACA,UAAA,SAAA,CAAU,IAAV,EAAgB,QAAhB,EAA0B,MAA1B,EAAkC,IAAlC,CAAA;AAAkC;AAAA;AAAA;;;;EAr4BA,U;;AA44B1C,SAAA,aAAA,CAAA,MAAA,EAAA,EAAA,EAAA;AACE,MAAA,IAAA,GAAa,WAAA,CAAY,EAAZ,CAAb;AACA,MAAA,KAAA,GAAc,WAAA,CAAY,MAAA,CAAO,GAAP,EAAZ,CAAd;AACA,SAAO,OAAA,CAAQ,KAAR,EAAe,IAAf,CAAP;AAAsB;;iCAMX;AAAA,M,IAAA,uEADJ,KAAA,CAAM,IACF;AAAA,MADE,EACF,uEAAN,KAAA,CAAM,EAAA;AAEX,MAAA,OAAA,GAAc,QAAA,CAAS,IAAT,CAAd;;AACA,MAAI,OAAJ,EAAI;AACF,QAAA,SAAA,GAAkB,OAAA,KAAY,IAAZ,IAAoB,OAAA,CAAQ,OAAR,CAAtC;AACA,QAAA,OAAA,GAAiB,CAAA,SAAA,IAAa,KAAb,EAAoB,OAArC;AACA,QAAA,KAAA,GAAc,CAAC,SAAD,IAAc,SAAA,CAAU,KAAtC;AACA,WAAO,YAAA,iCACF,KADE;AAEL,MAAA,IAAA,EAAA,IAFK;AAKL,MAAA,OAAA,EAAS,KALJ;AAQL,MAAA,KAAA,EAAO,KAAA,CARF;AAaL,MAAA,EAAA,EAAI,CAAC,OAAD,IAAY,SAAA,CAAU,EAAV,CAAZ,GAA4B,EAA5B,GAAiC,KAAA,CAbhC;AAgBL,MAAA,IAAA,EAAM,KAAA,GAAQ,KAAA,CAAM,IAAd,GAAqB,KAAA,CAhBtB;AAiBL,MAAA,KAAA,EAAA;AAjBK,OAqBF,SArBE,EAAP;AAqBK;AAAA;;;AAaP,eAAsB,KAAA,GAAQ,OAAA,CAAQ,KAAR,CAA9B;AAAA,MAAQ,EAAR,UAAQ,EAAR;AAAA,MAAY,IAAZ,UAAY,IAAZ;;AAGA,MAAA,IAAA,GAAa,IAAI,GAAJ,EAAb;AAEA,MAAI,EAAA,CAAG,GAAH,CAAO,EAAP,CAAJ,EAAgB,WAAA,CAAY,EAAZ,EAAgB,IAAhB,CAAA;AAChB,MAAI,EAAA,CAAG,GAAH,CAAO,IAAP,CAAJ,EAAkB,WAAA,CAAY,IAAZ,EAAkB,IAAlB,CAAA;AAGlB,EAAA,KAAA,CAAM,IAAN,GAAa,IAAA,CAAK,IAAL,GAAY,KAAA,CAAM,IAAN,CAAW,IAAX,CAAZ,GAA+B,IAA5C;AAEA,SAAO,KAAP;AAAO;;;AAOP,MAAA,MAAA,GAAe,YAAA,CAAa,KAAb,CAAf;;AACA,MAAI,EAAA,CAAG,GAAH,CAAO,MAAA,CAAO,OAAd,CAAJ,EAAkB;AAChB,IAAA,MAAA,CAAO,OAAP,GAAiB,eAAA,CAAgB,MAAhB,CAAjB;AAAiC;;AAEnC,SAAO,MAAP;AAAO;;AAIT,SAAA,WAAA,CAAA,MAAA,EAAA,IAAA,EAAA;AACE,EAAA,QAAA,CAAS,MAAT,EAAiB,UAAA,KAAA,EAAA,GAAA;AAAA,WAAgB,KAAA,IAAS,IAAT,IAAiB,IAAA,CAAK,GAAL,CAAS,GAAT,CAAjC;AAAA,GAAjB,CAAA;AAA2D;;AAI7D,IAAA,aAAA,GAAsB,CACpB,SADoB,EAEpB,QAFoB,EAGpB,UAHoB,EAIpB,SAJoB,EAKpB,UALoB,CAAtB;;AAQA,SAAA,aAAA,CAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA;AAKE,EAAA,MAAA,CAAO,SAAP,CAAiB,IAAjB,IACE,KAAA,CAAM,IAAN,CAAA,KAAgB,cAAA,CAAe,KAAf,EAAsB,IAAtB,CAAhB,GACI,WAAA,CAAiB,KAAA,CAAM,IAAN,CAAjB,EAA8B,MAAA,CAAO,GAArC,CADJ,GAEI,KAAA,CAHN;AAGM;;AAQR,SAAA,SAAA,CAAA,MAAA,EAAA,IAAA,EAAA;AAAA;;AAjkCA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;;AAikCA,qCAAA,IAAA;AAAA,IAAA,IAAA;AAAA;;AAKE,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,SAAP,EAAiB,IAAjB,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,EAAA,EAAA,IAAA,aAAA,EAAA,SAA6B,IAA7B,EAAA;AACA,GAAA,EAAA,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,YAAP,EAAoB,IAApB,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,EAAA,EAAA,IAAA,aAAA,EAAA,SAAgC,IAAhC,EAAA;AAAgC;;ACtiClC,IAAM,cAAA,GAAiB,CAAC,SAAD,EAAY,UAAZ,EAAwB,QAAxB,CAAvB;AAEA,IAAA,QAAA,GAAa,CAAb;;;AAsEE,sBAAA,KAAA,EAAA,MAAA,EAAA;AAAA;;AA1DS,SAAA,EAAA,GAAKM,QAAAA,EAAL;AAGT,SAAA,OAAA,GAA+B,EAA/B;AAGA,SAAA,KAAA,GAAgC,EAAhC;AAeU,SAAA,YAAA,GAAe,CAAf;AAGA,SAAA,OAAA,GAAU,IAAI,GAAJ,EAAV;AAGA,SAAA,QAAA,GAAW,IAAI,GAAJ,EAAX;AAGA,SAAA,QAAA,GAAW,KAAX;AAKA,SAAA,MAAA,GAA8B;AACtC,MAAA,MAAA,EAAQ,KAD8B;AAEtC,MAAA,UAAA,EAAY,IAAI,GAAJ,EAF0B;AAGtC,MAAA,WAAA,EAAa,IAAI,GAAJ,EAHyB;AAItC,MAAA,QAAA,EAAU,IAAI,GAAJ;AAJ4B,KAA9B;AAQA,SAAA,OAAA,GAAU;AAClB,MAAA,OAAA,EAAS,IAAI,GAAJ,EADS;AAKlB,MAAA,QAAA,EAAU,IAAI,GAAJ,EALQ;AASlB,MAAA,MAAA,EAAQ,IAAI,GAAJ;AATU,KAAV;AAmBR,SAAK,QAAL,GAAgB,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAhB;;AACA,QAAI,MAAJ,EAAI;AACF,WAAK,MAAL,GAAc,MAAd;AAAc;;AAEhB,QAAI,KAAJ,EAAI;AACF,WAAK,KAAL;AAAa,QAAA,OAAA,EAAS;AAAtB,SAA+B,KAA/B;AAA+B;AAAA;;;;SAAA,eAQ/B;AACF,aACE,CAAC,KAAK,MAAL,CAAY,OAAb,IACA,MAAA,CAAO,MAAP,CAAc,KAAK,OAAnB,EAAmD,KAAnD,CACE,UAAA,MAAA;AAAA,eAAU,MAAA,CAAO,IAAjB;AAAA,OADF,CAFF;AAGqB;;;SAAA,eAKnB;AACF,aAAO,KAAK,KAAZ;AAAY,K;SAAA,aAGV,IAHU,EAGV;AACF,WAAK,KAAL,GAAa,IAAb;AAAa;;;WAIf,eAAA;AACE,UAAA,MAAA,GAAoB,EAApB;AACA,WAAK,IAAL,CAAU,UAAA,MAAA,EAAA,GAAA;AAAA,eAAkB,MAAA,CAAO,GAAP,CAAA,GAAc,MAAA,CAAO,GAAP,EAAhC;AAAA,OAAV;AACA,aAAO,MAAP;AAAO;;;WAIT,aAAA,MAAA,EAAA;AACE,WAAA,IAAA,GAAA,IAAkB,MAAlB,EAAkB;AAChB,YAAA,KAAA,GAAc,MAAA,CAAO,GAAP,CAAd;;AACA,YAAI,CAAC,EAAA,CAAG,GAAH,CAAO,KAAP,CAAL,EAAY;AACV,eAAK,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAsB,KAAtB;AAAsB;AAAA;AAAA;;;WAM5B,gBAAA,KAAA,EAAA;AACE,UAAI,KAAJ,EAAI;AACF,aAAK,KAAL,CAAW,IAAX,CAAgB,YAAA,CAAa,KAAb,CAAhB;AAA6B;;AAE/B,aAAO,IAAP;AAAO;;;WAUT,eAAA,KAAA,EAAA;AACE,UAAM,KAAN,GAAgB,IAAhB,CAAM,KAAN;;AACA,UAAI,KAAJ,EAAI;AACF,QAAA,KAAA,GAAQ,OAAA,CAAa,KAAb,CAAA,CAAoB,GAApB,CAAwB,YAAxB,CAAR;AAAgC,OADlC,MACkC;AAEhC,aAAK,KAAL,GAAa,EAAb;AAAa;;AAGf,UAAI,KAAK,MAAT,EAAS;AACP,eAAO,KAAK,MAAL,CAAY,IAAZ,EAAkB,KAAlB,CAAP;AAAyB;;AAG3B,MAAA,WAAA,CAAY,IAAZ,EAAkB,KAAlB,CAAA;AACA,aAAO,gBAAA,CAAiB,IAAjB,EAAuB,KAAvB,CAAP;AAA8B;;;WAgBhC,cAAA,GAAA,EAAA,IAAA,EAAA;AACE,UAAI,GAAA,KAAQ,CAAC,CAAC,GAAd,EAAc;AACZ,QAAA,IAAA,GAAO,GAAP;AAAO;;AAET,UAAI,IAAJ,EAAI;AACF,YAAA,OAAA,GAAgB,KAAK,OAArB;AACA,QAAA,IAAA,CAAK,OAAA,CAAQ,IAAR,CAAL,EAAoB,UAAA,GAAA;AAAA,iBAAO,OAAA,CAAQ,GAAR,CAAA,CAAa,IAAb,CAAkB,CAAC,CAAC,GAApB,CAAP;AAAA,SAApB,CAAA;AAA+C,OAFjD,MAEiD;AAE/C,QAAA,SAAA,CAAU,KAAK,MAAf,EAAuB,KAAK,YAA5B,CAAA;AACA,aAAK,IAAL,CAAU,UAAA,MAAA;AAAA,iBAAU,MAAA,CAAO,IAAP,CAAY,CAAC,CAAC,GAAd,CAAV;AAAA,SAAV;AAAkC;;AAEpC,aAAO,IAAP;AAAO;;;WAIT,eAAA,IAAA,EAAA;AACE,UAAI,EAAA,CAAG,GAAH,CAAO,IAAP,CAAJ,EAAW;AACT,aAAK,KAAL,CAAW;AAAE,UAAA,KAAA,EAAO;AAAT,SAAX;AAAoB,OADtB,MACsB;AAEpB,YAAA,OAAA,GAAgB,KAAK,OAArB;AACA,QAAA,IAAA,CAAK,OAAA,CAAQ,IAAR,CAAL,EAAoB,UAAA,GAAA;AAAA,iBAAO,OAAA,CAAQ,GAAR,CAAA,CAAa,KAAb,EAAP;AAAA,SAApB,CAAA;AAAwC;;AAE1C,aAAO,IAAP;AAAO;;;WAIT,gBAAA,IAAA,EAAA;AACE,UAAI,EAAA,CAAG,GAAH,CAAO,IAAP,CAAJ,EAAW;AACT,aAAK,KAAL,CAAW;AAAE,UAAA,KAAA,EAAO;AAAT,SAAX;AAAoB,OADtB,MACsB;AAEpB,YAAA,OAAA,GAAgB,KAAK,OAArB;AACA,QAAA,IAAA,CAAK,OAAA,CAAQ,IAAR,CAAL,EAAoB,UAAA,GAAA;AAAA,iBAAO,OAAA,CAAQ,GAAR,CAAA,CAAa,MAAb,EAAP;AAAA,SAApB,CAAA;AAAwC;;AAE1C,aAAO,IAAP;AAAO;;;WAIT,cAAA,QAAA,EAAA;AACE,MAAA,QAAA,CAAS,KAAK,OAAd,EAAuB,QAAvB,CAAA;AAAuB;;;WAIf,oBAAA;AAAA;;AACR,0BAAsC,KAAK,OAA3C;AAAA,UAAQ,OAAR,iBAAQ,OAAR;AAAA,UAAiB,QAAjB,iBAAiB,QAAjB;AAAA,UAA2B,MAA3B,iBAA2B,MAA3B;AAEA,UAAA,MAAA,GAAe,KAAK,OAAL,CAAa,IAAb,GAAoB,CAAnC;AACA,UAAA,OAAA,GAAgB,KAAK,QAAL,CAAc,IAAd,GAAqB,CAArC;;AAEA,UAAK,MAAA,IAAU,CAAC,KAAK,QAAhB,IAA8B,OAAA,IAAW,CAAC,KAAK,QAApD,EAAoD;AAClD,aAAK,QAAL,GAAgB,IAAhB;AACA,QAAA,KAAA,CAAM,OAAN,EAAe,iBAAA;AAAA;AAAA,cAAA,QAAA;AAAA,cAAA,MAAA;;AACb,UAAA,MAAA,CAAO,KAAP,GAAe,OAAA,CAAK,GAAL,EAAf;AACA,UAAA,QAAA,CAAQ,MAAR,EAAgB,OAAhB,EAAsB,OAAA,CAAK,KAA3B,CAAA;AAA2B,SAF7B,CAAA;AAE6B;;AAI/B,UAAA,IAAA,GAAa,CAAC,MAAD,IAAW,KAAK,QAA7B;AACA,UAAA,MAAA,GAAe,OAAA,IAAY,IAAA,IAAQ,MAAA,CAAO,IAA3B,GAAmC,KAAK,GAAL,EAAnC,GAAgD,IAA/D;;AAEA,UAAI,OAAA,IAAW,QAAA,CAAS,IAAxB,EAAwB;AACtB,QAAA,KAAA,CAAM,QAAN,EAAgB,kBAAA;AAAA;AAAA,cAAA,SAAA;AAAA,cAAA,MAAA;;AACd,UAAA,MAAA,CAAO,KAAP,GAAe,MAAf;AACA,UAAA,SAAA,CAAS,MAAT,EAAiB,OAAjB,EAAuB,OAAA,CAAK,KAA5B,CAAA;AAA4B,SAF9B,CAAA;AAE8B;;AAKhC,UAAI,IAAJ,EAAI;AACF,aAAK,QAAL,GAAgB,KAAhB;AACA,QAAA,KAAA,CAAM,MAAN,EAAc,kBAAA;AAAA;AAAA,cAAA,OAAA;AAAA,cAAA,MAAA;;AACZ,UAAA,MAAA,CAAO,KAAP,GAAe,MAAf;AACA,UAAA,OAAA,CAAO,MAAP,EAAe,OAAf,EAAqB,OAAA,CAAK,KAA1B,CAAA;AAA0B,SAF5B,CAAA;AAE4B;AAAA;;;WAMhC,uBAAA,KAAA,EAAA;AACE,UAAI,KAAA,CAAM,IAAN,IAAc,QAAlB,EAAkB;AAChB,aAAK,QAAL,CAAc,GAAd,CAAkB,KAAA,CAAM,MAAxB;;AACA,YAAI,CAAC,KAAA,CAAM,IAAX,EAAW;AACT,eAAK,OAAL,CAAa,GAAb,CAAiB,KAAA,CAAM,MAAvB;AAAuB;AAAA,OAH3B,MAG2B,IAEhB,KAAA,CAAM,IAAN,IAAc,MAFE,EAEF;AACvB,aAAK,OAAL,CAAa,MAAb,CAAoB,KAAA,CAAM,MAA1B;AAA0B,OAHD,MAMtB;;AACL,MAAA,GAAA,CAAI,OAAJ,CAAY,KAAK,QAAjB;AAAiB;;;;;;;AAWnB,SAAO,OAAA,CAAQ,GAAR,CACL,KAAA,CAAM,GAAN,CAAU,UAAA,KAAA;AAAA,WAAS,WAAA,CAAY,IAAZ,EAAkB,KAAlB,CAAT;AAAA,GAAV,CADK,EAEL,IAFK,CAEA,UAAA,OAAA;AAAA,WAAW,iBAAA,CAAkB,IAAlB,EAAwB,OAAxB,CAAX;AAAA,GAFA,CAAP;AAE0C;;;;;;;;;;;;;AAiBlC,YAAA,I,GAA4C,K,CAA5C,I,EAAM,E,GAAsC,K,CAAtC,E,EAAI,I,GAAkC,K,CAAlC,I,EAAM,I,GAA4B,K,CAA5B,I,EAAM,M,GAAsB,K,CAAtB,M,EAAQ,S,GAAc,K,CAAd,S;AACtC,YAAA,Q,GAAiB,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,OAAb,KAAyB,KAAA,CAAM,O;;AAIhD,gBAAI,IAAJ,EAAI;AACF,cAAA,KAAA,CAAM,IAAN,GAAa,KAAb;AAAa;;AAIf,gBAAI,EAAA,KAAO,KAAX,EAAkB,KAAA,CAAM,EAAN,GAAW,IAAX;AAClB,gBAAI,IAAA,KAAS,KAAb,EAAoB,KAAA,CAAM,IAAN,GAAa,IAAb;AAEpB,YAAA,O,GAAgB,EAAA,CAAG,GAAH,CAAO,EAAP,KAAc,EAAA,CAAG,GAAH,CAAO,EAAP,CAAd,GAA2B,EAA3B,GAAgC,KAAA,C;;AAChD,gBAAI,OAAJ,EAAI;AACF,cAAA,KAAA,CAAM,EAAN,GAAW,KAAA,CAAX;AACA,cAAA,KAAA,CAAM,MAAN,GAAe,KAAA,CAAf;;AACA,kBAAI,QAAJ,EAAI;AACF,gBAAA,QAAA,CAAS,MAAT,GAAkB,KAAA,CAAlB;AAAkB;AAAA,aAJtB,MAIsB;AAOpB,cAAA,IAAA,CAAK,cAAL,EAAqB,UAAA,GAAA,EAAA;AACnB,oBAAA,OAAA,GAAqB,KAAA,CAAM,GAAN,CAArB;;AACA,oBAAI,EAAA,CAAG,GAAH,CAAO,OAAP,CAAJ,EAAW;AACT,sBAAA,KAAA,GAAc,IAAA,CAAK,SAAL,CAAA,CAAgB,GAAhB,CAAd;;AACA,kBAAA,KAAA,CAAM,GAAN,CAAA,GAAc,kBAAa;AAAA,wBAAV,QAAU,UAAV,QAAU;AAAA,wBAAA,SAAA,UAAA,SAAA;AACzB,wBAAA,OAAA,GAAe,KAAA,CAAM,GAAN,CAAU,OAAV,CAAf;;AACA,wBAAI,OAAJ,EAAI;AACF,0BAAI,CAAC,QAAL,EAAe,OAAA,CAAO,QAAP,GAAkB,KAAlB;AACf,0BAAI,SAAJ,EAAe,OAAA,CAAO,SAAP,GAAmB,IAAnB;AAAmB,qBAFpC,MAEoC;AAGlC,sBAAA,KAAA,CAAM,GAAN,CAAU,OAAV,EAAmB;AACjB,wBAAA,KAAA,EAAO,IADU;AAEjB,wBAAA,QAAA,EAAU,QAAA,IAAY,KAFL;AAGjB,wBAAA,SAAA,EAAW,SAAA,IAAa;AAHP,uBAAnB;AAG0B;AAAA,mBAV9B;;AAgBA,sBAAI,QAAJ,EAAI;AACF,oBAAA,QAAA,CAAS,GAAT,CAAA,GAAgB,KAAA,CAAM,GAAN,CAAhB;AAAsB;AAAA;AAAA,eArB5B,CAAA;AAqB4B;;AAM9B,YAAA,K,GAAc,IAAA,CAAK,QAAL,C;;AAGd,gBAAI,KAAA,CAAM,KAAN,KAAgB,CAAC,KAAA,CAAM,MAA3B,EAA2B;AACzB,cAAA,KAAA,CAAM,MAAN,GAAe,KAAA,CAAM,KAArB;AACA,cAAA,UAAA,CAAW,KAAA,CAAM,KAAN,GAAc,KAAA,CAAM,UAApB,GAAiC,KAAA,CAAM,WAAlD,CAAA;AAAkD,aAFpD,MAEoD,IAG3C,KAAA,CAAM,MAHqC,EAGrC;AACb,cAAA,KAAA,CAAM,KAAN,GAAc,IAAd;AAAc;;AAGhB,YAAA,Q,GAAiC,CAAA,IAAA,IAAQ,MAAA,CAAO,IAAP,CAAY,IAAA,CAAK,OAAjB,CAAR,EAAmC,GAAnC,CAAuC,UAAA,GAAA;AAAA,qBACtE,IAAA,CAAK,OAAL,CAAa,GAAb,EAAmB,KAAnB,CAAyB,KAAzB,CADsE;AAAA,aAAvC,C;AAIjC,YAAA,M,GACE,KAAA,CAAM,MAAN,KAAiB,IAAjB,IAAyB,cAAA,CAAe,KAAf,EAAsB,QAAtB,CAAA,KAAoC,I;;AAE/D,gBAAI,OAAA,IAAY,MAAA,IAAU,KAAA,CAAM,OAAhC,EAAgC;AAC9B,cAAA,QAAA,CAAS,IAAT,CACEF,aAAAA,CAAc,EAAE,IAAA,CAAK,cAAL,CAAhBA,EAAsC;AACpC,gBAAA,KAAA,EAAA,KADoC;AAEpC,gBAAA,KAAA,EAAA,KAFoC;AAGpC,gBAAA,OAAA,EAAS;AACP,kBAAA,KAAA,EAAO,IADA;AAEP,kBAAA,MAAA,EAAQ,IAFD;AAGP,kBAAA,KAHO,iBAGP,MAHO,EAGP,OAHO,EAGP;AACE,wBAAI,MAAJ,EAAI;AACF,sBAAA,SAAA,CAAU,KAAV,EAAiB,IAAA,CAAK,cAAL,CAAjB,CAAA;AACA,sBAAA,OAAA,CAAQ,kBAAA,CAAmB,IAAnB,CAAR,CAAA;AAA2B,qBAF7B,MAE6B;AAE3B,sBAAA,MAAA,CAAM,MAAN,GAAe,MAAf;AACA,sBAAA,OAAA,CAAQC,QAAAA,CAAS,OAATA,EAAmB,MAAnBA,EAA0B,KAA1BA,EAAiC,IAAjCA,CAAR,CAAA;AAAyC;AAAA;AATtC;AAH2B,eAAtCD,CADF;AAamD;;iBAUjD,KAAA,CAAM,M;;;;;;mBAGF,IAAI,OAAJ,CAAkB,UAAA,MAAA,EAAA;AACtB,cAAA,KAAA,CAAM,WAAN,CAAkB,GAAlB,CAAsB,MAAtB;AAAsB,aADlB,C;;;2BAKO,iB;2BAAuB,I;;mBAAY,OAAA,CAAQ,GAAR,CAAY,QAAZ,C;;;;AAAlD,YAAA,M;;kBACI,IAAA,IAAQ,MAAA,CAAO,QAAf,IAA2B,EAAA,MAAA,IAAY,MAAA,CAAO,IAAnB,C;;;;;AAC7B,YAAA,S,GAAkB,gBAAA,CAAiB,KAAjB,EAAwB,IAAxB,EAA8B,EAA9B,C;;iBACd,S;;;;;AACF,YAAA,WAAA,CAAY,IAAZ,EAAkB,CAAC,SAAD,CAAlB,CAAA;8CACO,WAAA,CAAY,IAAZ,EAAkB,SAAlB,EAA6B,IAA7B,C;;;AAGX,gBAAI,SAAJ,EAAI;AACF,cAAA,GAAA,CAAI,cAAJ,CAAmB;AAAA,uBAAM,SAAA,CAAU,MAAV,EAAkB,IAAlB,EAAwB,IAAA,CAAK,IAA7B,CAAN;AAAA,eAAnB;AAAsD;;8CAEjD,M;;;;;;;;;;;;;AAeP,MAAA,OAAA,qBAAqB,IAAA,CAAK,OAA1B,CAAA;;AACA,MAAI,KAAJ,EAAI;AACF,IAAA,IAAA,CAAK,OAAA,CAAQ,KAAR,CAAL,EAAqB,UAAA,MAAA,EAAA;AACnB,UAAI,EAAA,CAAG,GAAH,CAAO,MAAA,CAAM,IAAb,CAAJ,EAAiB;AACf,QAAA,MAAA,GAAQ,YAAA,CAAa,MAAb,CAAR;AAAqB;;AAEvB,UAAI,CAAC,EAAA,CAAG,GAAH,CAAO,MAAA,CAAM,EAAb,CAAL,EAAkB;AAEhB,QAAA,MAAA,mCAAa,MAAb;AAAoB,UAAA,EAAA,EAAI,KAAA;AAAxB,UAAA;AAAwB;;AAE1B,MAAA,cAAA,CAAe,OAAf,EAA+B,MAA/B,EAAsC,UAAA,GAAA,EAAA;AACpC,eAAO,YAAA,CAAa,GAAb,CAAP;AAAoB,OADtB,CAAA;AACsB,KATxB,CAAA;AASwB;;AAI1B,SAAO,OAAP;AAAO;;;AAWP,EAAA,QAAA,CAAS,OAAT,EAAkB,UAAA,MAAA,EAAA,GAAA,EAAA;AAChB,QAAI,CAAC,IAAA,CAAK,OAAL,CAAa,GAAb,CAAL,EAAkB;AAChB,MAAA,IAAA,CAAK,OAAL,CAAa,GAAb,IAAoB,MAApB;AACA,MAAA,gBAAA,CAAiB,MAAjB,EAAyB,IAAzB,CAAA;AAAyB;AAAA,GAH7B,CAAA;AAG6B;;AAK/B,SAAA,YAAA,CAAA,GAAA,EAAA,QAAA,EAAA;AACE,MAAA,MAAA,GAAe,IAAIG,WAAJ,EAAf;AACA,EAAA,MAAA,CAAO,GAAP,GAAa,GAAb;;AACA,MAAI,QAAJ,EAAI;AACF,IAAA,gBAAA,CAAiB,MAAjB,EAAyB,QAAzB,CAAA;AAAyB;;AAE3B,SAAO,MAAP;AAAO;;AAST,SAAA,cAAA,CAAA,OAAA,EAAA,KAAA,EAAA,MAAA,EAAA;AAKE,MAAI,KAAA,CAAM,IAAV,EAAU;AACR,IAAA,IAAA,CAAK,KAAA,CAAM,IAAX,EAAiB,UAAA,GAAA,EAAA;AACf,UAAA,MAAA,GAAe,OAAA,CAAQ,GAAR,CAAA,KAAQ,OAAA,CAAiB,GAAjB,CAAA,GAAwB,MAAA,CAAO,GAAP,CAAhC,CAAf;AACA,MAAA,MAAA,CAAO,cAAP,CAAA,CAAuB,KAAvB;AAAuB,KAFzB,CAAA;AAEyB;AAAA;;AAW7B,SAAA,WAAA,CAAA,IAAA,EAAA,KAAA,EAAA;AACE,EAAA,IAAA,CAAK,KAAL,EAAY,UAAA,KAAA,EAAA;AACV,IAAA,cAAA,CAAe,IAAA,CAAK,OAApB,EAA6B,KAA7B,EAAoC,UAAA,GAAA,EAAA;AAClC,aAAO,YAAA,CAAa,GAAb,EAAkB,IAAlB,CAAP;AAAyB,KAD3B,CAAA;AAC2B,GAF7B,CAAA;AAE6B;;ICvflB,aAAA,GAAgB,SAAhB,aAAgB,SAC3B;AAAA,MAAA,QAAA,UAAA,QAAA;AAAA,MAAA,KAAA;;AAGA,MAAA,SAAA,GAAkB,UAAA,CAAW,GAAX,CAAlB;AAGA,MAAA,KAAA,GAAc,KAAA,CAAM,KAAN,IAAe,CAAC,CAAC,SAAA,CAAU,KAAzC;AAAA,MAAyC,SAAA,GAC3B,KAAA,CAAM,SAAN,IAAmB,CAAC,CAAC,SAAA,CAAU,SAD7C;AAIA,EAAA,KAAA,GAAQ,UAAA,CAAW;AAAA,WAAA;AAAS,MAAA,KAAA,EAAA,KAAT;AAAgB,MAAA,SAAA,EAAA;AAAhB,KAAA;AAAA,GAAX,EAAyC,CAAC,KAAD,EAAQ,SAAR,CAAzC,CAAR;AAEA,MAAQ,QAAR,GAAqB,GAArB,CAAQ,QAAR;AACA,SAAA,eAAA,aAAA,CAAQ,QAAR,EAAO;AAAU,IAAA,KAAA,EAAO;AAAjB,GAAP,EAAgC,QAAhC,CAAA;AAAgC,C;;AAGlC,IAAA,GAAA,GAAY,WAAA,CAAY,aAAZ,EAA2B,EAA3B,CAAZ;AAGA,aAAA,CAAc,QAAd,GAAyB,GAAA,CAAI,QAA7B;AACA,aAAA,CAAc,QAAd,GAAyB,GAAA,CAAI,QAA7B;;AAGA,SAAA,WAAA,CAAA,MAAA,EAAA,IAAA,EAAA;AACE,EAAA,MAAA,CAAO,MAAP,CAAc,MAAd,EAAsBC,aAAAA,CAAoB,IAApBA,CAAtB;AACA,EAAA,MAAA,CAAO,QAAP,CAAgB,QAAhB,GAA2B,MAA3B;AACA,EAAA,MAAA,CAAO,QAAP,CAAgB,QAAhB,GAA2B,MAA3B;AACA,SAAO,MAAP;AAAO;;;;;;;ACrBP,uBAAA;AAAA;;AAAA;;AACE,iCAAM,kEAAN;AAHO,YAAA,OAAA,GAA+B,EAA/B;AAET;AAFwC;;;;WAOxC,eAAM,KAAN,EAAM;AACJ,MAAA,mBAAA;AACA,WAAK,KAAL,CAAW,KAAX;AAAW;;;WAIb,aAAA,MAAA,EAAA;AACE,MAAA,IAAA,CAAK,KAAK,OAAV,EAAmB,UAAA,IAAA;AAAA,eAAQ,IAAA,CAAK,GAAL,CAAS,MAAT,CAAR;AAAA,OAAnB,CAAA;AAAoC;;;WActC,eAAA,KAAA,EAAA;AAAA;;AACE,UAAA,OAAA,GAA+B,EAA/B;AAEA,MAAA,IAAA,CAAK,KAAK,OAAV,EAAmB,UAAA,IAAA,EAAA,CAAA,EAAA;AACjB,YAAI,EAAA,CAAG,GAAH,CAAO,KAAP,CAAJ,EAAW;AACT,UAAA,OAAA,CAAQ,IAAR,CAAa,IAAA,CAAK,KAAL,EAAb;AAAkB,SADpB,MACoB;AAElB,cAAA,QAAA,GAAe,OAAA,CAAK,SAAL,CAAe,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAf;;AACA,cAAI,QAAJ,EAAI;AACF,YAAA,OAAA,CAAQ,IAAR,CAAa,IAAA,CAAK,KAAL,CAAW,QAAX,CAAb;AAAwB;AAAA;AAAA,OAN9B,CAAA;AAWA,aAAO,OAAP;AAAO;;;WAUT,gBAAA,KAAA,EAAA;AAAA;;AACE,MAAA,IAAA,CAAK,KAAK,OAAV,EAAmB,UAAA,IAAA,EAAA,CAAA;AAAA,eAAa,IAAA,CAAK,MAAL,CAAY,OAAA,CAAK,SAAL,CAAe,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAZ,CAAb;AAAA,OAAnB,CAAA;AACA,aAAO,IAAP;AAAO;;;WAIT,aAAA,IAAA,EAAA;AACE,UAAI,CAAC,KAAK,OAAL,CAAa,QAAb,CAAsB,IAAtB,CAAL,EAA2B;AACzB,aAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB;AAAkB;AAAA;;;WAKtB,iBAAA,IAAA,EAAA;AACE,UAAA,CAAA,GAAU,KAAK,OAAL,CAAa,OAAb,CAAqB,IAArB,CAAV;AACA,UAAI,CAAC,CAAL,EAAQ,KAAK,OAAL,CAAa,MAAb,CAAoB,CAApB,EAAuB,CAAvB;AAAuB;;;WAIvB,mBAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA;AAKR,aAAO,EAAA,CAAG,GAAH,CAAO,GAAP,IAAc,GAAA,CAAI,KAAJ,EAAW,IAAX,CAAd,GAAiC,GAAxC;AAAwC;;;;iCA7EkB,Q;;AAiH9D,IAAA,CAAK,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,CAAL,EAA2C,UAAA,GAAA,EAAA;AACzC,EAAA,SAAA,CAAU,SAAV,CAAoB,GAApB,IAA2B,YAAA;AAAA;AACzB,IAAA,IAAA,CAAK,KAAK,OAAV,EAAmB,UAAA,IAAA;AAAA,aAAQ,IAAA,CAAK,GAAL,CAAA,OAAA,IAAA,qBAAa,UAAb,EAAR;AAAA,KAAnB,CAAA;AACA,WAAO,IAAP;AAAO,GAFT;AAES,CAHX,CAAA;;oBC/DE,M,EAAA,K,EAAA,I,EAAA;AAAA;AAIA,MAAA,OAAA,GAAgB,EAAA,CAAG,GAAH,CAAO,KAAP,KAAiB,KAAjC;AACA,MAAI,OAAA,IAAW,CAAC,IAAhB,EAAsB,IAAA,GAAO,EAAP;AAGtB,MAAA,GAAA,GAAY,OAAA,CACV;AAAA,WAAO,OAAA,IAAW,WAAA,CAAU,MAAV,IAAoB,CAA/B,GAAmC,IAAIC,SAAJ,EAAnC,GAAqD,KAAA,CAA5D;AAAA,GADU,EAEV,EAFU,CAAZ;AAeA,MAAA,QAAA,GAAiB,MAAA,CAAO,CAAP,CAAjB;AACA,MAAA,WAAA,GAAoB,cAAA,EAApB;AAGA,MAAA,KAAA,GAAc,OAAA,CACZ;AAAA,WAAA;AACE,MAAA,KAAA,EAAO,EADT;AAEE,MAAA,KAAA,EAAO,EAFT;AAGE,MAAA,KAHF,iBAGE,IAHF,EAGE,QAHF,EAGE;AACE,YAAA,QAAA,GAAgB,UAAA,CAAW,IAAX,EAAiB,QAAjB,CAAhB;AAIA,YAAA,YAAA,GACE,QAAA,CAAS,OAAT,GAAmB,CAAnB,IACA,CAAC,KAAA,CAAM,KAAN,CAAY,MADb,IAEA,CAAC,MAAA,CAAO,IAAP,CAAY,QAAZ,EAAqB,IAArB,CAA0B,UAAA,GAAA;AAAA,iBAAO,CAAC,IAAA,CAAK,OAAL,CAAa,GAAb,CAAR;AAAA,SAA1B,CAHH;AAKA,eAAO,YAAA,GACH,gBAAA,CAAiB,IAAjB,EAAuB,QAAvB,CADG,GAEH,IAAI,OAAJ,CAAiB,UAAA,OAAA,EAAA;AACf,UAAA,UAAA,CAAW,IAAX,EAAiB,QAAjB,CAAA;AACA,UAAA,KAAA,CAAM,KAAN,CAAY,IAAZ,CAAiB,YAAA;AACf,YAAA,OAAA,CAAQ,gBAAA,CAAiB,IAAjB,EAAuB,QAAvB,CAAR,CAAA;AAA+B,WADjC;AAGA,UAAA,WAAA;AAAA,SALF,CAFJ;AAOM;AApBV,KAAA;AAAA,GADY,EAyBZ,EAzBY,CAAd;;AA4BA,MAAA,KAAA,sBAAkB,KAAA,CAAM,KAAxB,CAAA;;AACA,MAAA,OAAA,GAAuB,EAAvB;AAGA,MAAA,UAAA,GAAmB,OAAA,CAAQ,MAAR,CAAA,IAAmB,CAAtC;AACA,MAAA,QAAA,GAAiB,KAAA,CAAM,KAAN,CAAY,MAAZ,EAAoB,UAApB,CAAjB;AAIA,EAAA,OAAA,CAAQ,YAAA;AACN,IAAA,KAAA,CAAM,MAAN,GAAe,MAAf;AACA,IAAA,cAAA,CAAe,UAAf,EAA2B,MAA3B,CAAA;AAA2B,GAF7B,EAGG,CAAC,MAAD,CAHH,CAAA;AAMA,EAAA,OAAA,CAAQ,YAAA;AACN,IAAA,cAAA,CAAe,CAAf,EAAkB,IAAA,CAAK,GAAL,CAAS,UAAT,EAAqB,MAArB,CAAlB,CAAA;AAAuC,GADzC,EAEG,IAFH,CAAA;;AAKA,WAAA,cAAA,CAAA,UAAA,EAAA,QAAA,EAAA;AACE,SAAA,IAAA,CAAA,GAAa,UAAb,EAAyB,CAAA,GAAI,QAA7B,EAAuC,CAAA,EAAvC,EAAuC;AACrC,UAAA,IAAA,GAAa,KAAA,CAAM,CAAN,CAAA,KAAM,KAAA,CAAa,CAAb,CAAA,GAAkB,IAAIC,UAAJ,CAAe,IAAf,EAAqB,KAAA,CAAM,KAA3B,CAAxB,CAAb;;AAEA,UAAA,QAAA,GAAoC,OAAA,GAChC,OAAA,CAAQ,CAAR,EAAW,IAAX,CADgC,GAE/B,KAAA,CAAc,CAAd,CAFL;;AAIA,UAAI,QAAJ,EAAI;AACF,QAAA,OAAA,CAAQ,CAAR,CAAA,GAAa,aAAA,CAAc,QAAd,CAAb;AAA2B;AAAA;AAAA;;AAQjC,MAAA,OAAA,GAAgB,KAAA,CAAM,GAAN,CAAU,UAAA,IAAA,EAAA,CAAA;AAAA,WAAa,UAAA,CAAW,IAAX,EAAiB,OAAA,CAAQ,CAAR,CAAjB,CAAb;AAAA,GAAV,CAAhB;AAEA,MAAA,OAAA,GAAgB,UAAA,CAAWC,aAAX,CAAhB;AACA,MAAA,WAAA,GAAoB,OAAA,CAAQ,OAAR,CAApB;AACA,MAAA,UAAA,GAAmB,OAAA,KAAY,WAAZ,IAA2B,QAAA,CAAS,OAAT,CAA9C;AAEA,EAAA,eAAA,CAAgB,YAAA;AACd,IAAA,QAAA,CAAS,OAAT;AAGA,IAAA,KAAA,CAAM,KAAN,GAAc,KAAd;AAGA,QAAQ,KAAR,GAAkB,KAAlB,CAAQ,KAAR;;AACA,QAAI,KAAA,CAAM,MAAV,EAAU;AACR,MAAA,KAAA,CAAM,KAAN,GAAc,EAAd;AACA,MAAA,IAAA,CAAK,KAAL,EAAY,UAAA,EAAA;AAAA,eAAM,EAAA,EAAN;AAAA,OAAZ,CAAA;AAAkB;;AAIpB,IAAA,IAAA,CAAK,QAAL,EAAe,UAAA,IAAA,EAAA;AACb,MAAA,UAAA,CAAW,IAAX,EAAiB,GAAjB,CAAA;AACA,MAAA,IAAA,CAAK,IAAL,CAAU,IAAV;AAAU,KAFZ,CAAA;AAMA,IAAA,IAAA,CAAK,KAAL,EAAY,UAAA,IAAA,EAAA,CAAA,EAAA;AACV,UAAA,OAAA,GAAe,OAAA,CAAQ,CAAR,CAAf;AACA,MAAA,UAAA,CAAW,IAAX,EAAiB,OAAjB,CAAA;AAGA,MAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAK,GAAL,CAAS,IAAT,CAAA;;AAGA,UAAI,UAAJ,EAAI;AACF,QAAA,IAAA,CAAK,KAAL,CAAW;AAAE,UAAA,OAAA,EAAS;AAAX,SAAX;AAAsB;;AAIxB,UAAA,MAAA,GAAe,OAAA,CAAQ,CAAR,CAAf;;AACA,UAAI,MAAJ,EAAI;AAEF,QAAA,UAAA,CAAW,IAAX,EAAiB,MAAA,CAAO,GAAxB,CAAA;;AAIA,YAAI,IAAA,CAAK,GAAT,EAAS;AACP,UAAA,IAAA,CAAK,KAAL,CAAW,IAAX,CAAgB,MAAhB;AAAgB,SADlB,MACkB;AAEhB,UAAA,IAAA,CAAK,KAAL,CAAW,MAAX;AAAW;AAAA;AAAA,KAvBjB,CAAA;AAuBiB,GA3CnB,CAAA;AAkDA,EAAA,OAAA,CAAQ;AAAA,WAAM,YAAA;AACZ,MAAA,IAAA,CAAK,KAAA,CAAM,KAAX,EAAkB,UAAA,IAAA;AAAA,eAAQ,IAAA,CAAK,IAAL,CAAU,IAAV,CAAR;AAAA,OAAlB,CAAA;AAAoC,KAD9B;AAAA,GAAR,CAAA;AAMA,MAAA,MAAA,GAAe,OAAA,CAAQ,GAAR,CAAY,UAAA,CAAA;AAAA,6BAAW,CAAX;AAAA,GAAZ,CAAf;AAEA,SAAO,GAAA,GAAM,CAAC,MAAD,EAAS,GAAT,CAAN,GAAsB,MAA7B;AAA6B;;mBCzKL,K,EAAA,I,EAAA;AACxB,MAAA,IAAA,GAAa,EAAA,CAAG,GAAH,CAAO,KAAP,CAAb;;AACA,oBAAwBC,UAAAA,CACtB,CADsBA,EAEtB,IAAA,GAAO,KAAP,GAAe,CAAC,KAAD,CAFOA,EAGtB,IAAA,GAAO,IAAA,IAAQ,EAAf,GAAoB,IAHEA,CAAxB;AAAA;AAAA;AAAA,MAAA,MAAA;AAAA,MAAA,GAAA;;AAKA,SAAO,IAAA,IAAQ,SAAA,CAAU,MAAV,IAAoB,CAA5B,GAAgC,CAAC,MAAD,EAAS,GAAT,CAAhC,GAAgD,MAAvD;AAAuD;;AC3DzD,IAAM,aAAA,GAAgB,SAAhB,aAAgB;AAAA,SAAM,IAAIH,SAAJ,EAAN;AAAA,CAAtB;;mBAE4B,S,YAAA;AAAA,SAC1B,QAAA,CAAS,aAAT,CAAA,CAAwB,CAAxB,CAD0B;AAAA,C;;kBC8B1B,M,EAAA,Q,EAAA,I,EAAA;AAIA,MAAA,OAAA,GAAgB,EAAA,CAAG,GAAH,CAAO,QAAP,KAAoB,QAApC;AACA,MAAI,OAAA,IAAW,CAAC,IAAhB,EAAsB,IAAA,GAAO,EAAP;AAGtB,MAAA,OAAA,GAAc,IAAd;AAEA,MAAA,MAAA,GAAeG,UAAAA,CACb,MADaA,EAEb,UAAA,CAAA,EAAA,IAAA,EAAA;AACE,QAAA,KAAA,GAAc,OAAA,GAAU,OAAA,CAAQ,CAAR,EAAW,IAAX,CAAV,GAA6B,QAA3C;AACA,IAAA,OAAA,GAAU,OAAA,IAAW,KAAA,CAAM,OAA3B;AACA,WAAO,KAAP;AAAO,GALIA,EASb,IAAA,IAAQ,CAAC,EAAD,CATKA,CAAf;AAYA,MAAA,GAAA,GAAY,MAAA,CAAO,CAAP,CAAZ;AAEA,EAAA,eAAA,CAAgB,YAAA;AACd,IAAA,IAAA,CAAK,GAAA,CAAI,OAAT,EAAkB,UAAA,IAAA,EAAA,CAAA,EAAA;AAChB,UAAA,MAAA,GAAe,GAAA,CAAI,OAAJ,CAAY,CAAA,IAAA,OAAA,GAAe,CAAf,GAAmB,CAAA,CAAnB,CAAZ,CAAf;AACA,UAAI,MAAJ,EAAY,IAAA,CAAK,KAAL,CAAW;AAAE,QAAA,EAAA,EAAI,MAAA,CAAO;AAAb,OAAX;AAAwB,KAFtC,CAAA;AAEsC,GAHxC,EAKG,IALH,CAAA;;AAOA,MAAI,OAAA,IAAW,SAAA,CAAU,MAAV,IAAoB,CAAnC,EAAmC;AACjC,IAAA,GAAA,CAAI,WAAJ,CAAA,GAAmB,UAAA,SAAA,EAAA,IAAA,EAAA,CAAA,EAAA;AACjB,UAAA,KAAA,GAAc,EAAA,CAAG,GAAH,CAAO,SAAP,IAAmB,SAAA,CAAS,CAAT,EAAY,IAAZ,CAAnB,GAAuC,SAArD;;AACA,UAAI,KAAJ,EAAI;AACF,YAAA,MAAA,GAAe,GAAA,CAAI,OAAJ,CAAY,CAAA,IAAA,KAAA,CAAW,OAAX,GAAqB,CAArB,GAAyB,CAAA,CAAzB,CAAZ,CAAf;AACA,YAAI,MAAJ,EAAY,KAAA,CAAM,EAAN,GAAW,MAAA,CAAO,OAAlB;AACZ,eAAO,KAAP;AAAO;AAAA,KALX;;AAQA,WAAO,MAAP;AAAO;;AAET,SAAO,MAAA,CAAO,CAAP,CAAP;AAAc;;ICtEH,KAAA,GAAQ,O;YAGA,O;aAGC,Q;YAGD,O;;uBC+CnB,I,EAAA,K,EAAA,I,EAAA;AAAA;AAIA,MAAQ,KAAR,GAAgE,KAAhE,CAAQ,KAAR;AAAA,MAAe,IAAf,GAAgE,KAAhE,CAAe,IAAf;AAAA,qBAAgE,KAAhE,CAAqB,KAArB;AAAA,MAAqB,KAArB,6BAA6B,CAA7B;AAAA,uBAAgE,KAAhE,CAAgC,OAAhC;AAAA,MAAgC,OAAhC,+BAA0C,IAA1C;AAAA,MAAgD,WAAhD,GAAgE,KAAhE,CAAgD,WAAhD;AAGA,MAAA,GAAA,GAAY,OAAA,CACV;AAAA,WAAO,WAAA,CAAU,MAAV,IAAoB,CAApB,GAAwB,IAAIH,SAAJ,EAAxB,GAA0C,KAAA,CAAjD;AAAA,GADU,EAEV,EAFU,CAAZ;AAMA,MAAA,KAAA,GAAc,OAAA,CAAQ,IAAR,CAAd;AACA,MAAA,WAAA,GAAuC,EAAvC;AAGA,MAAA,eAAA,GAAwB,MAAA,CAAiC,IAAjC,CAAxB;AACA,MAAA,eAAA,GAAwB,KAAA,GAAQ,IAAR,GAAe,eAAA,CAAgB,OAAvD;AACA,EAAA,eAAA,CAAgB,YAAA;AACd,IAAA,eAAA,CAAgB,OAAhB,GAA0B,WAA1B;AAA0B,GAD5B,CAAA;AAKA,EAAA,OAAA,CAAQ;AAAA,WAAM;AAAA,aACZ,IAAA,CAAK,eAAA,CAAgB,OAArB,EAA+B,UAAA,CAAA,EAAA;AAC7B,YAAI,CAAA,CAAE,OAAN,EAAM;AACJ,UAAA,YAAA,CAAa,CAAA,CAAE,YAAf,CAAA;AAAe;;AAEjB,QAAA,UAAA,CAAW,CAAA,CAAE,IAAb,EAAmB,GAAnB,CAAA;AACA,QAAA,CAAA,CAAE,IAAF,CAAO,IAAP,CAAY,IAAZ;AAAY,OALd,CADY;AAAA,KAAN;AAAA,GAAR,CAAA;AAcA,MAAA,IAAA,GAAa,OAAA,CAAQ,KAAR,EAAe,KAAf,EAAsB,eAAtB,CAAb;AAGA,MAAA,OAAA,GAAiB,KAAA,IAAS,eAAA,CAAgB,OAAzB,IAAqC,EAAtD;AACA,EAAA,eAAA,CAAgB;AAAA,WACd,IAAA,CAAK,OAAL,EAAc,kBAAe;AAAA,UAAZ,IAAY,UAAZ,IAAY;AAAA,UAAN,IAAM,UAAN,IAAM;AAAA,UAAA,GAAA,UAAA,GAAA;AAC3B,MAAA,UAAA,CAAW,IAAX,EAAiB,GAAjB,CAAA;AACA,MAAA,QAAA,CAAS,WAAT,EAAsB,IAAtB,EAA4B,GAA5B,CAAA;AAA4B,KAF9B,CADc;AAAA,GAAhB,CAAA;AAQA,MAAA,MAAA,GAAyB,EAAzB;AACA,MAAI,eAAJ,EACE,IAAA,CAAK,eAAL,EAAsB,UAAA,CAAA,EAAA,CAAA,EAAA;AAEpB,QAAI,CAAA,CAAE,OAAN,EAAM;AACJ,MAAA,YAAA,CAAa,CAAA,CAAE,YAAf,CAAA;AACA,MAAA,OAAA,CAAQ,IAAR,CAAa,CAAb;AAAa,KAFf,MAEe;AAEb,MAAA,CAAA,GAAI,MAAA,CAAO,CAAP,CAAA,GAAY,IAAA,CAAK,OAAL,CAAa,CAAA,CAAE,GAAf,CAAhB;AACA,UAAI,CAAC,CAAL,EAAQ,WAAA,CAAY,CAAZ,CAAA,GAAiB,CAAjB;AAAiB;AAAA,GAP7B,CAAA;AAYF,EAAA,IAAA,CAAK,KAAL,EAAY,UAAA,IAAA,EAAA,CAAA,EAAA;AACV,QAAI,CAAC,WAAA,CAAY,CAAZ,CAAL,EAAiB;AACf,MAAA,WAAA,CAAY,CAAZ,CAAA,GAAiB;AACf,QAAA,GAAA,EAAK,IAAA,CAAK,CAAL,CADU;AAEf,QAAA,IAAA,EAAA,IAFe;AAGf,QAAA,KAAA,EAAO,KAHQ;AAIf,QAAA,IAAA,EAAM,IAAI,UAAJ;AAJS,OAAjB;AAOA,MAAA,WAAA,CAAY,CAAZ,CAAA,CAAe,IAAf,CAAoB,IAApB,GAA2B,IAA3B;AAA2B;AAAA,GAT/B,CAAA;;AAeA,MAAI,MAAA,CAAO,MAAX,EAAW;AACT,QAAA,CAAA,GAAQ,CAAA,CAAR;AACA,IAAA,IAAA,CAAK,MAAL,EAAa,UAAA,QAAA,EAAA,SAAA,EAAA;AACX,UAAA,CAAA,GAAU,eAAA,CAAiB,SAAjB,CAAV;;AACA,UAAI,CAAC,QAAL,EAAK;AACH,QAAA,CAAA,GAAI,WAAA,CAAY,OAAZ,CAAoB,CAApB,CAAJ;AACA,QAAA,WAAA,CAAY,CAAZ,CAAA,mCAAsB,CAAtB;AAAyB,UAAA,IAAA,EAAM,KAAA,CAAM,QAAN;AAA/B;AAAqC,OAFvC,MAEuC,IAC5B,KAAA,CAAM,KADsB,EACtB;AACf,QAAA,WAAA,CAAY,MAAZ,CAAmB,EAAE,CAArB,EAAwB,CAAxB,EAA2B,CAA3B;AAA2B;AAAA,KAN/B,CAAA;AAM+B;;AAKjC,MAAI,EAAA,CAAG,GAAH,CAAO,IAAP,CAAJ,EAAW;AACT,IAAA,WAAA,CAAY,IAAZ,CAAiB,UAAA,CAAA,EAAA,CAAA;AAAA,aAAU,IAAA,CAAK,CAAA,CAAE,IAAP,EAAa,CAAA,CAAE,IAAf,CAAV;AAAA,KAAjB;AAA0C;;AAI5C,MAAA,KAAA,GAAY,CAAC,KAAb;AAGA,MAAA,WAAA,GAAoB,cAAA,EAApB;AAGA,MAAA,YAAA,GAAqB,eAAA,CAAoC,KAApC,CAArB;AAEA,MAAA,OAAA,GAAgB,IAAI,GAAJ,EAAhB;AACA,EAAA,IAAA,CAAK,WAAL,EAAkB,UAAA,CAAA,EAAA,CAAA,EAAA;AAChB,QAAA,GAAA,GAAY,CAAA,CAAE,GAAd;AACA,QAAA,SAAA,GAAkB,CAAA,CAAE,KAApB;AAEA,QAAA,EAAA;AACA,QAAA,KAAA;;AACA,QAAI,SAAA,IAAa,KAAjB,EAAiB;AACf,MAAA,EAAA,GAAK,KAAA,CAAM,KAAX;AACA,MAAA,KAAA,GAAQ,KAAR;AAAQ,KAFV,MAEU;AAER,UAAA,OAAA,GAAgB,IAAA,CAAK,OAAL,CAAa,GAAb,IAAoB,CAApC;;AACA,UAAI,SAAA,IAAa,KAAjB,EAAiB;AACf,YAAI,OAAJ,EAAI;AACF,UAAA,EAAA,GAAK,KAAA,CAAM,KAAX;AACA,UAAA,KAAA,GAAQ,KAAR;AAAQ,SAFV,MAEU,IACE,EAAA,GAAK,KAAA,CAAM,MADb,EACa;AACrB,UAAA,KAAA,GAAQ,MAAR;AAAQ,SAFA,MAGH;AAAA,OANT,MAMS,IACE,CAAC,OADH,EACG;AACV,QAAA,EAAA,GAAK,KAAA,CAAM,KAAX;AACA,QAAA,KAAA,GAAQ,KAAR;AAAQ,OAHD,MAIF;AAAA;;AAKT,IAAA,EAAA,GAAK,QAAA,CAAS,EAAT,EAAa,CAAA,CAAE,IAAf,EAAqB,CAArB,CAAL;AACA,IAAA,EAAA,GAAK,EAAA,CAAG,GAAH,CAAO,EAAP,IAAa,OAAA,CAAQ,EAAR,CAAb,GAA2B;AAAE,MAAA,EAAA,EAAA;AAAF,KAAhC;;AAEA,QAAI,CAAC,EAAA,CAAG,MAAR,EAAQ;AACN,UAAA,QAAA,GAAe,KAAA,CAAM,MAAN,IAAgB,YAAA,CAAa,MAA5C;;AACA,MAAA,EAAA,CAAG,MAAH,GAAY,QAAA,CAAS,QAAT,EAAiB,CAAA,CAAE,IAAnB,EAAyB,CAAzB,EAA4B,KAA5B,CAAZ;AAAwC;;AAI1C,QAAA,OAAA,mCACK,YADL;AAEE,MAAA,KAAA,EAAQ,KAAA,IAAS,KAFnB;AAIE,MAAA,KAAA,EAAO;AAJT,OAMM,EANN,CAAA;;AASA,QAAI,KAAA,IAAS,KAAT,IAAkB,EAAA,CAAG,GAAH,CAAO,OAAA,CAAQ,IAAf,CAAtB,EAAqC;AAInC,UAAA,IAAA,GACE,EAAA,CAAG,GAAH,CAAO,KAAA,CAAM,OAAb,KAAyB,eAAzB,GAA2C,KAAA,CAAM,IAAjD,GAAwD,KAAA,CAAM,OADhE;AAGA,MAAA,OAAA,CAAQ,IAAR,GAAe,QAAA,CAAS,IAAT,EAAe,CAAA,CAAE,IAAjB,EAAuB,CAAvB,CAAf;AAAsC;;AAGxC,QAAQ,SAAR,GAAsB,OAAtB,CAAQ,SAAR;;AACA,IAAA,OAAA,CAAQ,SAAR,GAAoB,UAAA,MAAA,EAAA;AAClB,MAAA,QAAA,CAAS,SAAT,EAAoB,MAApB,CAAA;AAEA,UAAA,YAAA,GAAoB,eAAA,CAAgB,OAApC;AACA,UAAA,EAAA,GAAU,YAAA,CAAY,IAAZ,CAAiB,UAAA,EAAA;AAAA,eAAK,EAAA,CAAE,GAAF,KAAU,GAAf;AAAA,OAAjB,CAAV;AACA,UAAI,CAAC,EAAL,EAAQ;;AAER,UAAI,MAAA,CAAO,SAAP,IAAoB,EAAA,CAAE,KAAF,IAAW,MAAnC,EAAmC;AAQjC;AAAA;;AAGF,UAAI,EAAA,CAAE,IAAF,CAAO,IAAX,EAAW;AACT,YAAA,IAAA,GAAa,YAAA,CAAY,KAAZ,CAAkB,UAAA,EAAA;AAAA,iBAAK,EAAA,CAAE,IAAF,CAAO,IAAZ;AAAA,SAAlB,CAAb;;AACA,YAAI,EAAA,CAAE,KAAF,IAAW,KAAf,EAAe;AACb,cAAA,MAAA,GAAe,QAAA,CAAS,OAAT,EAAkB,EAAA,CAAE,IAApB,CAAf;;AACA,cAAI,MAAA,KAAW,KAAf,EAAe;AACb,gBAAA,QAAA,GAAiB,MAAA,KAAW,IAAX,GAAkB,CAAlB,GAAsB,MAAvC;AACA,YAAA,EAAA,CAAE,OAAF,GAAY,IAAZ;;AAGA,gBAAI,CAAC,IAAD,IAAS,QAAA,GAAW,CAAxB,EAAwB;AAEtB,kBAAI,QAAA,IAAY,UAAhB,EACE,EAAA,CAAE,YAAF,GAAiB,UAAA,CAAW,WAAX,EAAwB,QAAxB,CAAjB;AACF;AAAA;AAAA;AAAA;;AAKN,YAAI,IAAA,IAAQ,YAAA,CAAY,IAAZ,CAAiB,UAAA,EAAA;AAAA,iBAAK,EAAA,CAAE,OAAP;AAAA,SAAjB,CAAZ,EAAoC;AAClC,UAAA,WAAA;AAAA;AAAA;AAAA,KArCN;;AA0CA,QAAA,OAAA,GAAgB,UAAA,CAAW,CAAA,CAAE,IAAb,EAAmB,OAAnB,CAAhB;AACA,IAAA,OAAA,CAAQ,GAAR,CAAY,CAAZ,EAAe;AAAE,MAAA,KAAA,EAAA,KAAF;AAAS,MAAA,OAAA,EAAA,OAAT;AAAkB,MAAA,OAAA,EAAA;AAAlB,KAAf;AAAiC,GAlGnC,CAAA;AAsGA,MAAA,OAAA,GAAgB,UAAA,CAAWE,aAAX,CAAhB;AACA,MAAA,WAAA,GAAoB,OAAA,CAAQ,OAAR,CAApB;AACA,MAAA,UAAA,GAAmB,OAAA,KAAY,WAAZ,IAA2B,QAAA,CAAS,OAAT,CAA9C;AAGA,EAAA,eAAA,CAAgB,YAAA;AACd,QAAI,UAAJ,EACE,IAAA,CAAK,WAAL,EAAkB,UAAA,CAAA,EAAA;AAChB,MAAA,CAAA,CAAE,IAAF,CAAO,KAAP,CAAa;AAAE,QAAA,OAAA,EAAS;AAAX,OAAb;AAAwB,KAD1B,CAAA;AAC0B,GAH9B,EAKG,CAAC,OAAD,CALH,CAAA;AAOA,EAAA,eAAA,CACE,YAAA;AACE,IAAA,IAAA,CAAK,OAAL,EAAc,kBAAmB,CAAnB,EAAmB;AAAA,UAAhB,KAAgB,UAAhB,KAAgB;AAAA,UAAT,OAAS,UAAT,OAAS;AAAA,UAAA,OAAA,UAAA,OAAA;AAC/B,UAAQ,IAAR,GAAiB,CAAjB,CAAQ,IAAR;AACA,MAAA,CAAA,CAAE,KAAF,GAAU,KAAV;AAGA,MAAA,GAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAK,GAAL,CAAS,IAAT,CAAA;AAGA,MAAA,UAAA,CAAW,IAAX,EAAiB,OAAA,CAAQ,GAAzB,CAAA;AAGA,MAAA,UAAA,CAAW,IAAX,EAAiB,OAAjB,CAAA;;AAGA,UAAI,UAAA,IAAc,KAAA,IAAS,KAA3B,EAA2B;AACzB,QAAA,IAAA,CAAK,KAAL,CAAW;AAAE,UAAA,OAAA,EAAS;AAAX,SAAX;AAAsB;;AAIxB,MAAA,IAAA,CAAK,IAAA,CAAK,GAAL,GAAW,QAAX,GAAsB,OAA3B,CAAA,CAAoC,OAApC;AAAoC,KAnBtC,CAAA;AAmBsC,GArB1C,EAwBE,KAAA,GAAQ,KAAA,CAAR,GAAiB,IAxBnB,CAAA;;AA2BA,MAAA,iBAAA,GAAwC,SAAxC,iBAAwC,CAAA,MAAA;AAAA,WAAA,eAAA,aAAA,CAAA,QAAA,EAAA,IAAA,EAEnC,WAAA,CAAY,GAAZ,CAAgB,UAAA,CAAA,EAAA,CAAA,EAAA;AACf,mBAAoB,OAAA,CAAQ,GAAR,CAAY,CAAZ,KAAkB,CAAA,CAAE,IAAxC;AAAA,UAAQ,OAAR,UAAQ,OAAR;;AACA,UAAA,IAAA,GAAkB,MAAA,mBAAY,OAAZ,GAAuB,CAAA,CAAE,IAAzB,EAA+B,CAA/B,EAAkC,CAAlC,CAAlB;AACA,aAAO,IAAA,IAAQ,IAAA,CAAK,IAAb,GAAa,eAAA,aAAA,CACjB,IAAA,CAAD,IADkB,kCAEZ,IAAA,CAAK,KAFO;AAGhB,QAAA,GAAA,EAAK,EAAA,CAAG,GAAH,CAAO,CAAA,CAAE,GAAT,KAAiB,EAAA,CAAG,GAAH,CAAO,CAAA,CAAE,GAAT,CAAjB,GAAiC,CAAA,CAAE,GAAnC,GAAyC,CAAA,CAAE,IAAF,CAAO,EAHrC;AAIhB,QAAA,GAAA,EAAK,IAAA,CAAK;AAJM,SAAb,GAOL,IAPF;AAOE,KAVH,CAFmC,CAAA;AAAA,GAAxC;;AAkBA,SAAO,GAAA,GAAM,CAAC,iBAAD,EAAoB,GAApB,CAAN,GAAiC,iBAAxC;AAAwC;;AAI1C,IAAA,OAAA,GAAc,CAAd;;AAEA,SAAA,OAAA,CAAA,KAAA,UAEgB,eAFhB,EAEgB;AAAA,MAAZ,GAAY,UAAZ,GAAY;AAAA,2BAAP,IAAO;AAAA,MAAP,IAAO,4BAAA,GAAA;;AAGd,MAAI,IAAA,KAAS,IAAb,EAAa;AACX,QAAA,MAAA,GAAe,IAAI,GAAJ,EAAf;AACA,WAAO,KAAA,CAAM,GAAN,CAAU,UAAA,IAAA,EAAA;AACf,UAAA,CAAA,GACE,eAAA,IACA,eAAA,CAAgB,IAAhB,CACE,UAAA,EAAA;AAAA,eAAK,EAAA,CAAE,IAAF,KAAW,IAAX,IAAmB,EAAA,CAAE,KAAF,KAAY,KAA/B,IAAwC,CAAC,MAAA,CAAO,GAAP,CAAW,EAAX,CAA9C;AAAA,OADF,CAFF;;AAKA,UAAI,CAAJ,EAAI;AACF,QAAA,MAAA,CAAO,GAAP,CAAW,CAAX;AACA,eAAO,CAAA,CAAE,GAAT;AAAS;;AAEX,aAAO,OAAA,EAAP;AAAO,KAVF,CAAP;AAUS;;AAGX,SAAO,EAAA,CAAG,GAAH,CAAO,IAAP,IAAe,KAAf,GAAuB,EAAA,CAAG,GAAH,CAAO,IAAP,IAAe,KAAA,CAAM,GAAN,CAAU,IAAV,CAAf,GAAiC,OAAA,CAAQ,IAAR,CAA/D;AAAuE;;SC3UlD,M,SAAE;AAAA,MAAA,QAAA,UAAA,QAAA;AAAA,MAAA,KAAA;;AACvB,SAAO,QAAA,CAASE,SAAAA,CAAU,KAAVA,CAAT,CAAP;AAA0B;;SCPyC,K,SAEnE;AAAA,MADA,KACA,UADA,KACA;AAAA,MAAA,QAAA,UAAA,QAAA;AAAA,MAAA,KAAA;;AAGA,MAAA,MAAA,GAAsBC,QAAAA,CAAS,KAAA,CAAM,MAAfA,EAAuB,KAAvBA,CAAtB;AACA,SAAO,KAAA,CAAM,GAAN,CAAU,UAAA,IAAA,EAAA,KAAA,EAAA;AACf,QAAA,MAAA,GAAe,QAAA,CAAS,IAAT,EAAe,KAAf,CAAf;AACA,WAAO,EAAA,CAAG,GAAH,CAAO,MAAP,IAAiB,MAAA,CAAO,MAAA,CAAO,KAAP,CAAP,CAAjB,GAAyC,MAAhD;AAAgD,GAF3C,CAAP;AAEkD;;SCbzB,U,SAEzB;AAAA,MADA,KACA,UADA,KACA;AAAA,MAAA,QAAA,UAAA,QAAA;AAAA,MAAA,KAAA;;AAGA,SAAO,aAAA,CAAc,KAAd,EAAqB,KAArB,CAAA,CAA4B,QAA5B,CAAP;AAAmC;;;;;;;AC6BnC,yBAEW,MAFX,EAEW,IAFX,EAEW;AAAA;;AAAA;;AAGT;AAHS,YAAA,MAAA,GAAA,MAAA;AAVX,YAAA,IAAA,GAAO,IAAP;AAMU,YAAA,OAAA,GAAU,IAAI,GAAJ,EAAV;AAQR,YAAK,IAAL,GAAY,kBAAA,MAAA,4BAAsB,IAAtB,EAAZ;;AAEA,QAAA,KAAA,GAAc,QAAK,IAAL,EAAd;;AACA,QAAA,QAAA,GAAiB,eAAA,CAAgB,KAAhB,CAAjB;AAGA,IAAA,WAAA,kCAAkB,QAAA,CAAS,MAAT,CAAgB,KAAhB,CAAlB,CAAA;AAVS;AAUyB;;;;WAGpC,iBAAA,GAAA,EAAA;AACE,UAAA,KAAA,GAAc,KAAK,IAAL,EAAd;;AACA,UAAA,QAAA,GAAiB,KAAK,GAAL,EAAjB;;AACA,UAAI,CAAC,OAAA,CAAQ,KAAR,EAAe,QAAf,CAAL,EAAoB;AAClB,QAAA,WAAA,CAAY,IAAZ,CAAA,CAAmB,QAAnB,CAA4B,KAA5B;;AACA,aAAK,SAAL,CAAe,KAAf,EAAsB,KAAK,IAA3B;AAA2B;;AAG7B,UAAI,CAAC,KAAK,IAAN,IAAc,SAAA,CAAU,KAAK,OAAf,CAAlB,EAAiC;AAC/B,QAAA,UAAA,CAAW,IAAX,CAAA;AAAW;AAAA;;;WAIL,gBAAA;AACR,UAAA,MAAA,GAA2B,EAAA,CAAG,GAAH,CAAO,KAAK,MAAZ,IACvB,KAAK,MAAL,CAAY,GAAZ,CAAgB,aAAhB,CADuB,GAEtB,OAAA,CAAQ,aAAA,CAAc,KAAK,MAAnB,CAAR,CAFL;AAIA,aAAO,KAAK,IAAL,gCAAa,MAAb,EAAP;AAAoB;;;WAGZ,kBAAA;AAAA;;AACR,UAAI,KAAK,IAAL,IAAa,CAAC,SAAA,CAAU,KAAK,OAAf,CAAlB,EAAiC;AAC/B,aAAK,IAAL,GAAY,KAAZ;AAEA,QAAA,IAAA,CAAK,UAAA,CAAW,IAAX,CAAL,EAAwB,UAAA,IAAA,EAAA;AACtB,UAAA,IAAA,CAAK,IAAL,GAAY,KAAZ;AAAY,SADd,CAAA;;AAIA,YAAId,OAAAA,CAAE,aAAN,EAAM;AACJ,UAAA,GAAA,CAAI,cAAJ,CAAmB;AAAA,mBAAM,OAAA,CAAK,OAAL,EAAN;AAAA,WAAnB;AACA,UAAA,UAAA,CAAW,IAAX,CAAA;AAAW,SAFb,MAEa;AAEX,UAAA,SAAA,CAAU,KAAV,CAAgB,IAAhB;AAAgB;AAAA;AAAA;;;WAMZ,mBAAA;AAAA;;AACR,UAAA,QAAA,GAAe,CAAf;AACA,MAAA,IAAA,CAAK,OAAA,CAAQ,KAAK,MAAb,CAAL,EAA2B,UAAA,MAAA,EAAA;AACzB,YAAI,aAAA,CAAc,MAAd,CAAJ,EAAkB;AAChB,UAAA,gBAAA,CAAiB,MAAjB,EAAyB,OAAzB,CAAA;AAAyB;;AAE3B,YAAI,YAAA,CAAa,MAAb,CAAJ,EAAiB;AACf,cAAI,CAAC,MAAA,CAAO,IAAZ,EAAY;AACV,YAAA,OAAA,CAAK,OAAL,CAAa,GAAb,CAAiB,MAAjB;AAAiB;;AAEnB,UAAA,QAAA,GAAW,IAAA,CAAK,GAAL,CAAS,QAAT,EAAmB,MAAA,CAAO,QAAP,GAAkB,CAArC,CAAX;AAAgD;AAAA,OARpD,CAAA;AAWA,WAAK,QAAL,GAAgB,QAAhB;;AACA,WAAK,MAAL;AAAK;;;WAIG,mBAAA;AAAA;;AACR,MAAA,IAAA,CAAK,OAAA,CAAQ,KAAK,MAAb,CAAL,EAA2B,UAAA,MAAA,EAAA;AACzB,YAAI,aAAA,CAAc,MAAd,CAAJ,EAAkB;AAChB,UAAA,mBAAA,CAAoB,MAApB,EAA4B,OAA5B,CAAA;AAA4B;AAAA,OAFhC,CAAA;;AAKA,WAAK,OAAL,CAAa,KAAb;;AACA,MAAA,UAAA,CAAW,IAAX,CAAA;AAAW;;;WAIb,uBAAA,KAAA,EAAA;AAGE,UAAI,KAAA,CAAM,IAAN,IAAc,QAAlB,EAAkB;AAChB,YAAI,KAAA,CAAM,IAAV,EAAU;AACR,eAAK,OAAL;AAAK,SADP,MACO;AAEL,eAAK,OAAL,CAAa,GAAb,CAAiB,KAAA,CAAM,MAAvB;;AACA,eAAK,MAAL;AAAK;AAAA,OALT,MAKS,IAKA,KAAA,CAAM,IAAN,IAAc,MALd,EAKc;AACrB,aAAK,OAAL,CAAa,MAAb,CAAoB,KAAA,CAAM,MAA1B;AAA0B,OANnB,MAMmB,IAInB,KAAA,CAAM,IAAN,IAAc,UAJK,EAIL;AACrB,aAAK,QAAL,GAAgB,OAAA,CAAQ,KAAK,MAAb,CAAA,CAAqB,MAArB,CACd,UAAA,OAAA,EAAA,MAAA;AAAA,iBACE,IAAA,CAAK,GAAL,CAAS,OAAT,EAAmB,CAAA,YAAA,CAAa,MAAb,CAAA,GAAuB,MAAA,CAAO,QAA9B,GAAyC,CAAzC,IAA8C,CAAjE,CADF;AAAA,SADc,EAGd,CAHc,CAAhB;AAGE;AAAA;;;;EAtHgD,U;;AA6HxD,SAAA,MAAA,CAAA,MAAA,EAAA;AACE,SAAO,MAAA,CAAO,IAAP,KAAgB,KAAvB;AAAuB;;AAIzB,SAAA,SAAA,CAAA,MAAA,EAAA;AAGE,SAAO,CAAC,MAAA,CAAO,IAAR,IAAgB,KAAA,CAAM,IAAN,CAAW,MAAX,EAAmB,KAAnB,CAAyB,MAAzB,CAAvB;AAAgD;;AAIlD,SAAA,UAAA,CAAA,IAAA,EAAA;AACE,MAAI,CAAC,IAAA,CAAK,IAAV,EAAU;AACR,IAAA,IAAA,CAAK,IAAL,GAAY,IAAZ;AAEA,IAAA,IAAA,CAAK,UAAA,CAAW,IAAX,CAAL,EAAwB,UAAA,IAAA,EAAA;AACtB,MAAA,IAAA,CAAK,IAAL,GAAY,IAAZ;AAAY,KADd,CAAA;AAIA,IAAA,kBAAA,CAAmB,IAAnB,EAAyB;AACvB,MAAA,IAAA,EAAM,MADiB;AAEvB,MAAA,MAAA,EAAQ;AAFe,KAAzB,CAAA;AAEU;AAAA;;ICzKD,EAAA,GAAmB,SAAnB,EAAmB,CAAA,MAAA;AAAA,qCAAA,IAAA;AAAA,IAAA,IAAA;AAAA;;AAAA,SAC9B,IAAIe,aAAJ,CAAkB,MAAlB,EAA0B,IAA1B,CAD8B;AAAA,C;;kBAIS,S,WAAA,CAAA,MAAA;AAAA,qCAAA,IAAA;AAAA,IAAA,IAAA;AAAA;;AAAA,SAAA,oBAAA,IACf,IAAIA,aAAJ,CAAkB,MAAlB,EAA0B,IAA1B,CADe;AAAA,C;;ACRzC,OAAA,CAAQ,MAAR,CAAe;AACb,EAAA,wBAAA,EAAA,wBADa;AAEb,EAAA,EAAA,EAAI,YAAC,MAAD,EAAC,IAAD;AAAA,WAAkB,IAAIA,aAAJ,CAAkB,MAAlB,EAA0B,IAA1B,CAAlB;AAAA;AAFS,CAAf;aAQsB,SAAA,CAAU,O","sourcesContent":["import { eachProp, is, toArray, isAnimatedString, Globals, getFluidValue, useLayoutEffect, each, raf, flush, FluidValue, deprecateInterpolate, callFluidObservers, frameLoop, hasFluidValue, flushCalls, isEqual, getFluidObservers, addFluidObserver, removeFluidObserver, noop, useMemoOne, deprecateDirectCall, useForceUpdate, usePrev, useOnce, createInterpolator, createStringInterpolator } from '@react-spring/shared';\nexport { Globals, createInterpolator } from '@react-spring/shared';\nimport { useContext, createElement, createContext, useMemo, useRef, useState, Fragment } from 'react';\nimport { getAnimated, AnimatedValue, getPayload, AnimatedString, getAnimatedType, setAnimated } from '@react-spring/animated';\nexport * from '@react-spring/types/animated';\nexport * from '@react-spring/types/interpolation';\n\nfunction callProp(value, ...args) {\n  return is.fun(value) ? value(...args) : value;\n}\nconst matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\nconst resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;\nconst getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;\nconst noopTransform = (value) => value;\nconst getDefaultProps = (props, transform = noopTransform) => {\n  let keys = DEFAULT_PROPS;\n  if (props.default && props.default !== true) {\n    props = props.default;\n    keys = Object.keys(props);\n  }\n  const defaults = {};\n  for (const key of keys) {\n    const value = transform(props[key], key);\n    if (!is.und(value)) {\n      defaults[key] = value;\n    }\n  }\n  return defaults;\n};\nconst DEFAULT_PROPS = [\n  \"config\",\n  \"onProps\",\n  \"onStart\",\n  \"onChange\",\n  \"onPause\",\n  \"onResume\",\n  \"onRest\"\n];\nconst RESERVED_PROPS = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onPause: 1,\n  onResume: 1,\n  onRest: 1,\n  onResolve: 1,\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  onDestroyed: 1,\n  keys: 1,\n  callId: 1,\n  parentId: 1\n};\nfunction getForwardProps(props) {\n  const forward = {};\n  let count = 0;\n  eachProp(props, (value, prop) => {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n      count++;\n    }\n  });\n  if (count) {\n    return forward;\n  }\n}\nfunction inferTo(props) {\n  const to = getForwardProps(props);\n  if (to) {\n    const out = {to};\n    eachProp(props, (val, key) => key in to || (out[key] = val));\n    return out;\n  }\n  return {...props};\n}\nfunction computeGoal(value) {\n  value = getFluidValue(value);\n  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? Globals.createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\nfunction hasProps(props) {\n  for (const _ in props)\n    return true;\n  return false;\n}\nfunction isAsyncTo(to) {\n  return is.fun(to) || is.arr(to) && is.obj(to[0]);\n}\nfunction detachRefs(ctrl, ref) {\n  var _a;\n  (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);\n  ref == null ? void 0 : ref.delete(ctrl);\n}\nfunction replaceRef(ctrl, ref) {\n  var _a;\n  if (ref && ctrl.ref !== ref) {\n    (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);\n    ref.add(ctrl);\n    ctrl.ref = ref;\n  }\n}\n\nfunction useChain(refs, timeSteps, timeFrame = 1e3) {\n  useLayoutEffect(() => {\n    if (timeSteps) {\n      let prevDelay = 0;\n      each(refs, (ref, i) => {\n        const controllers = ref.current;\n        if (controllers.length) {\n          let delay = timeFrame * timeSteps[i];\n          if (isNaN(delay))\n            delay = prevDelay;\n          else\n            prevDelay = delay;\n          each(controllers, (ctrl) => {\n            each(ctrl.queue, (props) => {\n              const memoizedDelayProp = props.delay;\n              props.delay = (key) => delay + callProp(memoizedDelayProp || 0, key);\n            });\n            ctrl.start();\n          });\n        }\n      });\n    } else {\n      let p = Promise.resolve();\n      each(refs, (ref) => {\n        const controllers = ref.current;\n        if (controllers.length) {\n          const queues = controllers.map((ctrl) => {\n            const q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          });\n          p = p.then(() => {\n            each(controllers, (ctrl, i) => each(queues[i] || [], (update) => ctrl.queue.push(update)));\n            return ref.start();\n          });\n        }\n      });\n    }\n  });\n}\n\nconst config = {\n  default: {tension: 170, friction: 26},\n  gentle: {tension: 120, friction: 14},\n  wobbly: {tension: 180, friction: 12},\n  stiff: {tension: 210, friction: 20},\n  slow: {tension: 280, friction: 60},\n  molasses: {tension: 280, friction: 120}\n};\n\nconst linear = (t) => t;\nconst defaults = {\n  ...config.default,\n  mass: 1,\n  damping: 1,\n  easing: linear,\n  clamp: false\n};\nclass AnimationConfig {\n  constructor() {\n    this.velocity = 0;\n    Object.assign(this, defaults);\n  }\n}\nfunction mergeConfig(config, newConfig, defaultConfig) {\n  if (defaultConfig) {\n    defaultConfig = {...defaultConfig};\n    sanitizeConfig(defaultConfig, newConfig);\n    newConfig = {...defaultConfig, ...newConfig};\n  }\n  sanitizeConfig(config, newConfig);\n  Object.assign(config, newConfig);\n  for (const key in defaults) {\n    if (config[key] == null) {\n      config[key] = defaults[key];\n    }\n  }\n  let {mass, frequency, damping} = config;\n  if (!is.und(frequency)) {\n    if (frequency < 0.01)\n      frequency = 0.01;\n    if (damping < 0)\n      damping = 0;\n    config.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n    config.friction = 4 * Math.PI * damping * mass / frequency;\n  }\n  return config;\n}\nfunction sanitizeConfig(config, props) {\n  if (!is.und(props.decay)) {\n    config.duration = void 0;\n  } else {\n    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);\n    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {\n      config.duration = void 0;\n      config.decay = void 0;\n    }\n    if (isTensionConfig) {\n      config.frequency = void 0;\n    }\n  }\n}\n\nconst emptyArray = [];\nclass Animation {\n  constructor() {\n    this.changed = false;\n    this.values = emptyArray;\n    this.toValues = null;\n    this.fromValues = emptyArray;\n    this.config = new AnimationConfig();\n    this.immediate = false;\n  }\n}\n\nfunction scheduleProps(callId, {key, props, defaultProps, state, actions}) {\n  return new Promise((resolve, reject) => {\n    var _a;\n    let delay;\n    let timeout;\n    let cancel = matchProp((_a = props.cancel) != null ? _a : defaultProps == null ? void 0 : defaultProps.cancel, key);\n    if (cancel) {\n      onStart();\n    } else {\n      if (!is.und(props.pause)) {\n        state.paused = matchProp(props.pause, key);\n      }\n      let pause = defaultProps == null ? void 0 : defaultProps.pause;\n      if (pause !== true) {\n        pause = state.paused || matchProp(pause, key);\n      }\n      delay = callProp(props.delay || 0, key);\n      if (pause) {\n        state.resumeQueue.add(onResume);\n        actions.pause();\n      } else {\n        actions.resume();\n        onResume();\n      }\n    }\n    function onPause() {\n      state.resumeQueue.add(onResume);\n      state.timeouts.delete(timeout);\n      timeout.cancel();\n      delay = timeout.time - raf.now();\n    }\n    function onResume() {\n      if (delay > 0) {\n        timeout = raf.setTimeout(onStart, delay);\n        state.pauseQueue.add(onPause);\n        state.timeouts.add(timeout);\n      } else {\n        onStart();\n      }\n    }\n    function onStart() {\n      state.pauseQueue.delete(onPause);\n      state.timeouts.delete(timeout);\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true;\n      }\n      try {\n        actions.start({...props, callId, cancel}, resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n}\n\nconst getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result) => result.finished));\nconst getNoopResult = (value) => ({\n  value,\n  noop: true,\n  finished: true,\n  cancelled: false\n});\nconst getFinishedResult = (value, finished, cancelled = false) => ({\n  value,\n  finished,\n  cancelled\n});\nconst getCancelledResult = (value) => ({\n  value,\n  cancelled: true,\n  finished: false\n});\n\nfunction runAsync(to, props, state, target) {\n  const {callId, parentId, onRest} = props;\n  const {asyncTo: prevTo, promise: prevPromise} = state;\n  if (!parentId && to === prevTo && !props.reset) {\n    return prevPromise;\n  }\n  return state.promise = (async () => {\n    state.asyncId = callId;\n    state.asyncTo = to;\n    const defaultProps = getDefaultProps(props, (value, key) => key === \"onRest\" ? void 0 : value);\n    let preventBail;\n    let bail;\n    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));\n    const bailIfEnded = (bailSignal) => {\n      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);\n      if (bailResult) {\n        bailSignal.result = bailResult;\n        bail(bailSignal);\n        throw bailSignal;\n      }\n    };\n    const animate = (arg1, arg2) => {\n      const bailSignal = new BailSignal();\n      const skipAnimationSignal = new SkipAniamtionSignal();\n      return (async () => {\n        if (Globals.skipAnimation) {\n          stopAsync(state);\n          skipAnimationSignal.result = getFinishedResult(target, false);\n          bail(skipAnimationSignal);\n          throw skipAnimationSignal;\n        }\n        bailIfEnded(bailSignal);\n        const props2 = is.obj(arg1) ? {...arg1} : {...arg2, to: arg1};\n        props2.parentId = callId;\n        eachProp(defaultProps, (value, key) => {\n          if (is.und(props2[key])) {\n            props2[key] = value;\n          }\n        });\n        const result2 = await target.start(props2);\n        bailIfEnded(bailSignal);\n        if (state.paused) {\n          await new Promise((resume) => {\n            state.resumeQueue.add(resume);\n          });\n        }\n        return result2;\n      })();\n    };\n    let result;\n    if (Globals.skipAnimation) {\n      stopAsync(state);\n      return getFinishedResult(target, false);\n    }\n    try {\n      let animating;\n      if (is.arr(to)) {\n        animating = (async (queue) => {\n          for (const props2 of queue) {\n            await animate(props2);\n          }\n        })(to);\n      } else {\n        animating = Promise.resolve(to(animate, target.stop.bind(target)));\n      }\n      await Promise.all([animating.then(preventBail), bailPromise]);\n      result = getFinishedResult(target.get(), true, false);\n    } catch (err) {\n      if (err instanceof BailSignal) {\n        result = err.result;\n      } else if (err instanceof SkipAniamtionSignal) {\n        result = err.result;\n      } else {\n        throw err;\n      }\n    } finally {\n      if (callId == state.asyncId) {\n        state.asyncId = parentId;\n        state.asyncTo = parentId ? prevTo : void 0;\n        state.promise = parentId ? prevPromise : void 0;\n      }\n    }\n    if (is.fun(onRest)) {\n      raf.batchedUpdates(() => {\n        onRest(result, target, target.item);\n      });\n    }\n    return result;\n  })();\n}\nfunction stopAsync(state, cancelId) {\n  flush(state.timeouts, (t) => t.cancel());\n  state.pauseQueue.clear();\n  state.resumeQueue.clear();\n  state.asyncId = state.asyncTo = state.promise = void 0;\n  if (cancelId)\n    state.cancelId = cancelId;\n}\nclass BailSignal extends Error {\n  constructor() {\n    super(\"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\");\n  }\n}\nclass SkipAniamtionSignal extends Error {\n  constructor() {\n    super(\"SkipAnimationSignal\");\n  }\n}\n\nconst isFrameValue = (value) => value instanceof FrameValue;\nlet nextId = 1;\nclass FrameValue extends FluidValue {\n  constructor() {\n    super(...arguments);\n    this.id = nextId++;\n    this._priority = 0;\n  }\n  get priority() {\n    return this._priority;\n  }\n  set priority(priority) {\n    if (this._priority != priority) {\n      this._priority = priority;\n      this._onPriorityChange(priority);\n    }\n  }\n  get() {\n    const node = getAnimated(this);\n    return node && node.getValue();\n  }\n  to(...args) {\n    return Globals.to(this, args);\n  }\n  interpolate(...args) {\n    deprecateInterpolate();\n    return Globals.to(this, args);\n  }\n  toJSON() {\n    return this.get();\n  }\n  observerAdded(count) {\n    if (count == 1)\n      this._attach();\n  }\n  observerRemoved(count) {\n    if (count == 0)\n      this._detach();\n  }\n  _attach() {\n  }\n  _detach() {\n  }\n  _onChange(value, idle = false) {\n    callFluidObservers(this, {\n      type: \"change\",\n      parent: this,\n      value,\n      idle\n    });\n  }\n  _onPriorityChange(priority) {\n    if (!this.idle) {\n      frameLoop.sort(this);\n    }\n    callFluidObservers(this, {\n      type: \"priority\",\n      parent: this,\n      priority\n    });\n  }\n}\n\nconst $P = Symbol.for(\"SpringPhase\");\nconst HAS_ANIMATED = 1;\nconst IS_ANIMATING = 2;\nconst IS_PAUSED = 4;\nconst hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;\nconst isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;\nconst isPaused = (target) => (target[$P] & IS_PAUSED) > 0;\nconst setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\nconst setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n\nclass SpringValue extends FrameValue {\n  constructor(arg1, arg2) {\n    super();\n    this.animation = new Animation();\n    this.defaultProps = {};\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._pendingCalls = new Set();\n    this._lastCallId = 0;\n    this._lastToId = 0;\n    this._memoizedDuration = 0;\n    if (!is.und(arg1) || !is.und(arg2)) {\n      const props = is.obj(arg1) ? {...arg1} : {...arg2, from: arg1};\n      if (is.und(props.default)) {\n        props.default = true;\n      }\n      this.start(props);\n    }\n  }\n  get idle() {\n    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n  }\n  get goal() {\n    return getFluidValue(this.animation.to);\n  }\n  get velocity() {\n    const node = getAnimated(this);\n    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);\n  }\n  get hasAnimated() {\n    return hasAnimated(this);\n  }\n  get isAnimating() {\n    return isAnimating(this);\n  }\n  get isPaused() {\n    return isPaused(this);\n  }\n  advance(dt) {\n    let idle = true;\n    let changed = false;\n    const anim = this.animation;\n    let {config, toValues} = anim;\n    const payload = getPayload(anim.to);\n    if (!payload && hasFluidValue(anim.to)) {\n      toValues = toArray(getFluidValue(anim.to));\n    }\n    anim.values.forEach((node2, i) => {\n      if (node2.done)\n        return;\n      const to = node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n      let finished = anim.immediate;\n      let position = to;\n      if (!finished) {\n        position = node2.lastPosition;\n        if (config.tension <= 0) {\n          node2.done = true;\n          return;\n        }\n        let elapsed = node2.elapsedTime += dt;\n        const from = anim.fromValues[i];\n        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config.velocity) ? config.velocity[i] : config.velocity;\n        let velocity;\n        if (!is.und(config.duration)) {\n          let p = 1;\n          if (config.duration > 0) {\n            if (this._memoizedDuration !== config.duration) {\n              this._memoizedDuration = config.duration;\n              if (node2.durationProgress > 0) {\n                node2.elapsedTime = config.duration * node2.durationProgress;\n                elapsed = node2.elapsedTime += dt;\n              }\n            }\n            p = (config.progress || 0) + elapsed / this._memoizedDuration;\n            p = p > 1 ? 1 : p < 0 ? 0 : p;\n            node2.durationProgress = p;\n          }\n          position = from + config.easing(p) * (to - from);\n          velocity = (position - node2.lastPosition) / dt;\n          finished = p == 1;\n        } else if (config.decay) {\n          const decay = config.decay === true ? 0.998 : config.decay;\n          const e = Math.exp(-(1 - decay) * elapsed);\n          position = from + v0 / (1 - decay) * (1 - e);\n          finished = Math.abs(node2.lastPosition - position) < 0.1;\n          velocity = v0 * e;\n        } else {\n          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n          const precision = config.precision || (from == to ? 5e-3 : Math.min(1, Math.abs(to - from) * 1e-3));\n          const restVelocity = config.restVelocity || precision / 10;\n          const bounceFactor = config.clamp ? 0 : config.bounce;\n          const canBounce = !is.und(bounceFactor);\n          const isGrowing = from == to ? node2.v0 > 0 : from < to;\n          let isMoving;\n          let isBouncing = false;\n          const step = 1;\n          const numSteps = Math.ceil(dt / step);\n          for (let n = 0; n < numSteps; ++n) {\n            isMoving = Math.abs(velocity) > restVelocity;\n            if (!isMoving) {\n              finished = Math.abs(to - position) <= precision;\n              if (finished) {\n                break;\n              }\n            }\n            if (canBounce) {\n              isBouncing = position == to || position > to == isGrowing;\n              if (isBouncing) {\n                velocity = -velocity * bounceFactor;\n                position = to;\n              }\n            }\n            const springForce = -config.tension * 1e-6 * (position - to);\n            const dampingForce = -config.friction * 1e-3 * velocity;\n            const acceleration = (springForce + dampingForce) / config.mass;\n            velocity = velocity + acceleration * step;\n            position = position + velocity * step;\n          }\n        }\n        node2.lastVelocity = velocity;\n        if (Number.isNaN(position)) {\n          console.warn(`Got NaN while animating:`, this);\n          finished = true;\n        }\n      }\n      if (payload && !payload[i].done) {\n        finished = false;\n      }\n      if (finished) {\n        node2.done = true;\n      } else {\n        idle = false;\n      }\n      if (node2.setValue(position, config.round)) {\n        changed = true;\n      }\n    });\n    const node = getAnimated(this);\n    if (idle) {\n      const value = getFluidValue(anim.to);\n      if (node.setValue(value) || changed) {\n        this._onChange(value);\n      }\n      this._stop();\n    } else if (changed) {\n      this._onChange(node.getValue());\n    }\n  }\n  set(value) {\n    raf.batchedUpdates(() => {\n      this._stop();\n      this._focus(value);\n      this._set(value);\n    });\n    return this;\n  }\n  pause() {\n    this._update({pause: true});\n  }\n  resume() {\n    this._update({pause: false});\n  }\n  finish() {\n    if (isAnimating(this)) {\n      const {to, config} = this.animation;\n      raf.batchedUpdates(() => {\n        this._onStart();\n        if (!config.decay) {\n          this._set(to, false);\n        }\n        this._stop();\n      });\n    }\n    return this;\n  }\n  update(props) {\n    const queue = this.queue || (this.queue = []);\n    queue.push(props);\n    return this;\n  }\n  start(to, arg2) {\n    let queue;\n    if (!is.und(to)) {\n      queue = [is.obj(to) ? to : {...arg2, to}];\n    } else {\n      queue = this.queue || [];\n      this.queue = [];\n    }\n    return Promise.all(queue.map((props) => this._update(props))).then((results) => getCombinedResult(this, results));\n  }\n  stop(cancel) {\n    const {to} = this.animation;\n    this._focus(this.get());\n    stopAsync(this._state, cancel && this._lastCallId);\n    raf.batchedUpdates(() => this._stop(to, cancel));\n    return this;\n  }\n  reset() {\n    this._update({reset: true});\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._start();\n    } else if (event.type == \"priority\") {\n      this.priority = event.priority + 1;\n    }\n  }\n  _prepareNode(props) {\n    const key = this.key || \"\";\n    let {to, from} = props;\n    to = is.obj(to) ? to[key] : to;\n    if (to == null || isAsyncTo(to)) {\n      to = void 0;\n    }\n    from = is.obj(from) ? from[key] : from;\n    if (from == null) {\n      from = void 0;\n    }\n    const range = {to, from};\n    if (!hasAnimated(this)) {\n      if (props.reverse)\n        [to, from] = [from, to];\n      from = getFluidValue(from);\n      if (!is.und(from)) {\n        this._set(from);\n      } else if (!getAnimated(this)) {\n        this._set(to);\n      }\n    }\n    return range;\n  }\n  _update({...props}, isLoop) {\n    const {key, defaultProps} = this;\n    if (props.default)\n      Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));\n    mergeActiveFn(this, props, \"onProps\");\n    sendEvent(this, \"onProps\", props, this);\n    const range = this._prepareNode(props);\n    if (Object.isFrozen(this)) {\n      throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n    }\n    const state = this._state;\n    return scheduleProps(++this._lastCallId, {\n      key,\n      props,\n      defaultProps,\n      state,\n      actions: {\n        pause: () => {\n          if (!isPaused(this)) {\n            setPausedBit(this, true);\n            flushCalls(state.pauseQueue);\n            sendEvent(this, \"onPause\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n          }\n        },\n        resume: () => {\n          if (isPaused(this)) {\n            setPausedBit(this, false);\n            if (isAnimating(this)) {\n              this._resume();\n            }\n            flushCalls(state.resumeQueue);\n            sendEvent(this, \"onResume\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n          }\n        },\n        start: this._merge.bind(this, range)\n      }\n    }).then((result) => {\n      if (props.loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props);\n        if (nextProps) {\n          return this._update(nextProps, true);\n        }\n      }\n      return result;\n    });\n  }\n  _merge(range, props, resolve) {\n    if (props.cancel) {\n      this.stop(true);\n      return resolve(getCancelledResult(this));\n    }\n    const hasToProp = !is.und(range.to);\n    const hasFromProp = !is.und(range.from);\n    if (hasToProp || hasFromProp) {\n      if (props.callId > this._lastToId) {\n        this._lastToId = props.callId;\n      } else {\n        return resolve(getCancelledResult(this));\n      }\n    }\n    const {key, defaultProps, animation: anim} = this;\n    const {to: prevTo, from: prevFrom} = anim;\n    let {to = prevTo, from = prevFrom} = range;\n    if (hasFromProp && !hasToProp && (!props.default || is.und(to))) {\n      to = from;\n    }\n    if (props.reverse)\n      [to, from] = [from, to];\n    const hasFromChanged = !isEqual(from, prevFrom);\n    if (hasFromChanged) {\n      anim.from = from;\n    }\n    from = getFluidValue(from);\n    const hasToChanged = !isEqual(to, prevTo);\n    if (hasToChanged) {\n      this._focus(to);\n    }\n    const hasAsyncTo = isAsyncTo(props.to);\n    const {config} = anim;\n    const {decay, velocity} = config;\n    if (hasToProp || hasFromProp) {\n      config.velocity = 0;\n    }\n    if (props.config && !hasAsyncTo) {\n      mergeConfig(config, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n    }\n    let node = getAnimated(this);\n    if (!node || is.und(to)) {\n      return resolve(getFinishedResult(this, true));\n    }\n    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);\n    const value = reset ? from : this.get();\n    const goal = computeGoal(to);\n    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);\n    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n    if (hasToChanged) {\n      const nodeType = getAnimatedType(to);\n      if (nodeType !== node.constructor) {\n        if (immediate) {\n          node = this._set(goal);\n        } else\n          throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the \"to\" prop suggests`);\n      }\n    }\n    const goalType = node.constructor;\n    let started = hasFluidValue(to);\n    let finished = false;\n    if (!started) {\n      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n      if (hasToChanged || hasValueChanged) {\n        finished = isEqual(computeGoal(value), goal);\n        started = !finished;\n      }\n      if (!isEqual(config.decay, decay) || !isEqual(config.velocity, velocity)) {\n        started = true;\n      }\n    }\n    if (finished && isAnimating(this)) {\n      if (anim.changed && !reset) {\n        started = true;\n      } else if (!started) {\n        this._stop(prevTo);\n      }\n    }\n    if (!hasAsyncTo) {\n      if (started || hasFluidValue(prevTo)) {\n        anim.values = node.getPayload();\n        anim.toValues = hasFluidValue(to) ? null : goalType == AnimatedString ? [1] : toArray(goal);\n      }\n      if (anim.immediate != immediate) {\n        anim.immediate = immediate;\n        if (!immediate && !reset) {\n          this._set(prevTo);\n        }\n      }\n      if (started) {\n        const {onRest} = anim;\n        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));\n        const result = getFinishedResult(this, checkFinished(this, prevTo));\n        flushCalls(this._pendingCalls, result);\n        this._pendingCalls.add(resolve);\n        if (anim.changed)\n          raf.batchedUpdates(() => {\n            var _a;\n            anim.changed = !reset;\n            onRest == null ? void 0 : onRest(result, this);\n            if (reset) {\n              callProp(defaultProps.onRest, result);\n            } else {\n              (_a = anim.onStart) == null ? void 0 : _a.call(anim, result, this);\n            }\n          });\n      }\n    }\n    if (reset) {\n      this._set(value);\n    }\n    if (hasAsyncTo) {\n      resolve(runAsync(props.to, props, this._state, this));\n    } else if (started) {\n      this._start();\n    } else if (isAnimating(this) && !hasToChanged) {\n      this._pendingCalls.add(resolve);\n    } else {\n      resolve(getNoopResult(value));\n    }\n  }\n  _focus(value) {\n    const anim = this.animation;\n    if (value !== anim.to) {\n      if (getFluidObservers(this)) {\n        this._detach();\n      }\n      anim.to = value;\n      if (getFluidObservers(this)) {\n        this._attach();\n      }\n    }\n  }\n  _attach() {\n    let priority = 0;\n    const {to} = this.animation;\n    if (hasFluidValue(to)) {\n      addFluidObserver(to, this);\n      if (isFrameValue(to)) {\n        priority = to.priority + 1;\n      }\n    }\n    this.priority = priority;\n  }\n  _detach() {\n    const {to} = this.animation;\n    if (hasFluidValue(to)) {\n      removeFluidObserver(to, this);\n    }\n  }\n  _set(arg, idle = true) {\n    const value = getFluidValue(arg);\n    if (!is.und(value)) {\n      const oldNode = getAnimated(this);\n      if (!oldNode || !isEqual(value, oldNode.getValue())) {\n        const nodeType = getAnimatedType(value);\n        if (!oldNode || oldNode.constructor != nodeType) {\n          setAnimated(this, nodeType.create(value));\n        } else {\n          oldNode.setValue(value);\n        }\n        if (oldNode) {\n          raf.batchedUpdates(() => {\n            this._onChange(value, idle);\n          });\n        }\n      }\n    }\n    return getAnimated(this);\n  }\n  _onStart() {\n    const anim = this.animation;\n    if (!anim.changed) {\n      anim.changed = true;\n      sendEvent(this, \"onStart\", getFinishedResult(this, checkFinished(this, anim.to)), this);\n    }\n  }\n  _onChange(value, idle) {\n    if (!idle) {\n      this._onStart();\n      callProp(this.animation.onChange, value, this);\n    }\n    callProp(this.defaultProps.onChange, value, this);\n    super._onChange(value, idle);\n  }\n  _start() {\n    const anim = this.animation;\n    getAnimated(this).reset(getFluidValue(anim.to));\n    if (!anim.immediate) {\n      anim.fromValues = anim.values.map((node) => node.lastPosition);\n    }\n    if (!isAnimating(this)) {\n      setActiveBit(this, true);\n      if (!isPaused(this)) {\n        this._resume();\n      }\n    }\n  }\n  _resume() {\n    if (Globals.skipAnimation) {\n      this.finish();\n    } else {\n      frameLoop.start(this);\n    }\n  }\n  _stop(goal, cancel) {\n    if (isAnimating(this)) {\n      setActiveBit(this, false);\n      const anim = this.animation;\n      each(anim.values, (node) => {\n        node.done = true;\n      });\n      if (anim.toValues) {\n        anim.onChange = anim.onPause = anim.onResume = void 0;\n      }\n      callFluidObservers(this, {\n        type: \"idle\",\n        parent: this\n      });\n      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));\n      flushCalls(this._pendingCalls, result);\n      if (anim.changed) {\n        anim.changed = false;\n        sendEvent(this, \"onRest\", result, this);\n      }\n    }\n  }\n}\nfunction checkFinished(target, to) {\n  const goal = computeGoal(to);\n  const value = computeGoal(target.get());\n  return isEqual(value, goal);\n}\nfunction createLoopUpdate(props, loop = props.loop, to = props.to) {\n  let loopRet = callProp(loop);\n  if (loopRet) {\n    const overrides = loopRet !== true && inferTo(loopRet);\n    const reverse = (overrides || props).reverse;\n    const reset = !overrides || overrides.reset;\n    return createUpdate({\n      ...props,\n      loop,\n      default: false,\n      pause: void 0,\n      to: !reverse || isAsyncTo(to) ? to : void 0,\n      from: reset ? props.from : void 0,\n      reset,\n      ...overrides\n    });\n  }\n}\nfunction createUpdate(props) {\n  const {to, from} = props = inferTo(props);\n  const keys = new Set();\n  if (is.obj(to))\n    findDefined(to, keys);\n  if (is.obj(from))\n    findDefined(from, keys);\n  props.keys = keys.size ? Array.from(keys) : null;\n  return props;\n}\nfunction declareUpdate(props) {\n  const update = createUpdate(props);\n  if (is.und(update.default)) {\n    update.default = getDefaultProps(update);\n  }\n  return update;\n}\nfunction findDefined(values, keys) {\n  eachProp(values, (value, key) => value != null && keys.add(key));\n}\nconst ACTIVE_EVENTS = [\n  \"onStart\",\n  \"onRest\",\n  \"onChange\",\n  \"onPause\",\n  \"onResume\"\n];\nfunction mergeActiveFn(target, props, type) {\n  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\nfunction sendEvent(target, type, ...args) {\n  var _a, _b, _c, _d;\n  (_b = (_a = target.animation)[type]) == null ? void 0 : _b.call(_a, ...args);\n  (_d = (_c = target.defaultProps)[type]) == null ? void 0 : _d.call(_c, ...args);\n}\n\nconst BATCHED_EVENTS = [\"onStart\", \"onChange\", \"onRest\"];\nlet nextId$1 = 1;\nclass Controller {\n  constructor(props, flush2) {\n    this.id = nextId$1++;\n    this.springs = {};\n    this.queue = [];\n    this._lastAsyncId = 0;\n    this._active = new Set();\n    this._changed = new Set();\n    this._started = false;\n    this._state = {\n      paused: false,\n      pauseQueue: new Set(),\n      resumeQueue: new Set(),\n      timeouts: new Set()\n    };\n    this._events = {\n      onStart: new Map(),\n      onChange: new Map(),\n      onRest: new Map()\n    };\n    this._onFrame = this._onFrame.bind(this);\n    if (flush2) {\n      this._flush = flush2;\n    }\n    if (props) {\n      this.start({default: true, ...props});\n    }\n  }\n  get idle() {\n    return !this._state.asyncTo && Object.values(this.springs).every((spring) => spring.idle);\n  }\n  get item() {\n    return this._item;\n  }\n  set item(item) {\n    this._item = item;\n  }\n  get() {\n    const values = {};\n    this.each((spring, key) => values[key] = spring.get());\n    return values;\n  }\n  set(values) {\n    for (const key in values) {\n      const value = values[key];\n      if (!is.und(value)) {\n        this.springs[key].set(value);\n      }\n    }\n  }\n  update(props) {\n    if (props) {\n      this.queue.push(createUpdate(props));\n    }\n    return this;\n  }\n  start(props) {\n    let {queue} = this;\n    if (props) {\n      queue = toArray(props).map(createUpdate);\n    } else {\n      this.queue = [];\n    }\n    if (this._flush) {\n      return this._flush(this, queue);\n    }\n    prepareKeys(this, queue);\n    return flushUpdateQueue(this, queue);\n  }\n  stop(arg, keys) {\n    if (arg !== !!arg) {\n      keys = arg;\n    }\n    if (keys) {\n      const springs = this.springs;\n      each(toArray(keys), (key) => springs[key].stop(!!arg));\n    } else {\n      stopAsync(this._state, this._lastAsyncId);\n      this.each((spring) => spring.stop(!!arg));\n    }\n    return this;\n  }\n  pause(keys) {\n    if (is.und(keys)) {\n      this.start({pause: true});\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), (key) => springs[key].pause());\n    }\n    return this;\n  }\n  resume(keys) {\n    if (is.und(keys)) {\n      this.start({pause: false});\n    } else {\n      const springs = this.springs;\n      each(toArray(keys), (key) => springs[key].resume());\n    }\n    return this;\n  }\n  each(iterator) {\n    eachProp(this.springs, iterator);\n  }\n  _onFrame() {\n    const {onStart, onChange, onRest} = this._events;\n    const active = this._active.size > 0;\n    const changed = this._changed.size > 0;\n    if (active && !this._started || changed && !this._started) {\n      this._started = true;\n      flush(onStart, ([onStart2, result]) => {\n        result.value = this.get();\n        onStart2(result, this, this._item);\n      });\n    }\n    const idle = !active && this._started;\n    const values = changed || idle && onRest.size ? this.get() : null;\n    if (changed && onChange.size) {\n      flush(onChange, ([onChange2, result]) => {\n        result.value = values;\n        onChange2(result, this, this._item);\n      });\n    }\n    if (idle) {\n      this._started = false;\n      flush(onRest, ([onRest2, result]) => {\n        result.value = values;\n        onRest2(result, this, this._item);\n      });\n    }\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      this._changed.add(event.parent);\n      if (!event.idle) {\n        this._active.add(event.parent);\n      }\n    } else if (event.type == \"idle\") {\n      this._active.delete(event.parent);\n    } else\n      return;\n    raf.onFrame(this._onFrame);\n  }\n}\nfunction flushUpdateQueue(ctrl, queue) {\n  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then((results) => getCombinedResult(ctrl, results));\n}\nasync function flushUpdate(ctrl, props, isLoop) {\n  const {keys, to, from, loop, onRest, onResolve} = props;\n  const defaults = is.obj(props.default) && props.default;\n  if (loop) {\n    props.loop = false;\n  }\n  if (to === false)\n    props.to = null;\n  if (from === false)\n    props.from = null;\n  const asyncTo = is.arr(to) || is.fun(to) ? to : void 0;\n  if (asyncTo) {\n    props.to = void 0;\n    props.onRest = void 0;\n    if (defaults) {\n      defaults.onRest = void 0;\n    }\n  } else {\n    each(BATCHED_EVENTS, (key) => {\n      const handler = props[key];\n      if (is.fun(handler)) {\n        const queue = ctrl[\"_events\"][key];\n        props[key] = ({finished, cancelled}) => {\n          const result2 = queue.get(handler);\n          if (result2) {\n            if (!finished)\n              result2.finished = false;\n            if (cancelled)\n              result2.cancelled = true;\n          } else {\n            queue.set(handler, {\n              value: null,\n              finished: finished || false,\n              cancelled: cancelled || false\n            });\n          }\n        };\n        if (defaults) {\n          defaults[key] = props[key];\n        }\n      }\n    });\n  }\n  const state = ctrl[\"_state\"];\n  if (props.pause === !state.paused) {\n    state.paused = props.pause;\n    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);\n  } else if (state.paused) {\n    props.pause = true;\n  }\n  const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));\n  const cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n  if (asyncTo || cancel && state.asyncId) {\n    promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n      props,\n      state,\n      actions: {\n        pause: noop,\n        resume: noop,\n        start(props2, resolve) {\n          if (cancel) {\n            stopAsync(state, ctrl[\"_lastAsyncId\"]);\n            resolve(getCancelledResult(ctrl));\n          } else {\n            props2.onRest = onRest;\n            resolve(runAsync(asyncTo, props2, state, ctrl));\n          }\n        }\n      }\n    }));\n  }\n  if (state.paused) {\n    await new Promise((resume) => {\n      state.resumeQueue.add(resume);\n    });\n  }\n  const result = getCombinedResult(ctrl, await Promise.all(promises));\n  if (loop && result.finished && !(isLoop && result.noop)) {\n    const nextProps = createLoopUpdate(props, loop, to);\n    if (nextProps) {\n      prepareKeys(ctrl, [nextProps]);\n      return flushUpdate(ctrl, nextProps, true);\n    }\n  }\n  if (onResolve) {\n    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));\n  }\n  return result;\n}\nfunction getSprings(ctrl, props) {\n  const springs = {...ctrl.springs};\n  if (props) {\n    each(toArray(props), (props2) => {\n      if (is.und(props2.keys)) {\n        props2 = createUpdate(props2);\n      }\n      if (!is.obj(props2.to)) {\n        props2 = {...props2, to: void 0};\n      }\n      prepareSprings(springs, props2, (key) => {\n        return createSpring(key);\n      });\n    });\n  }\n  return springs;\n}\nfunction setSprings(ctrl, springs) {\n  eachProp(springs, (spring, key) => {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring;\n      addFluidObserver(spring, ctrl);\n    }\n  });\n}\nfunction createSpring(key, observer) {\n  const spring = new SpringValue();\n  spring.key = key;\n  if (observer) {\n    addFluidObserver(spring, observer);\n  }\n  return spring;\n}\nfunction prepareSprings(springs, props, create) {\n  if (props.keys) {\n    each(props.keys, (key) => {\n      const spring = springs[key] || (springs[key] = create(key));\n      spring[\"_prepareNode\"](props);\n    });\n  }\n}\nfunction prepareKeys(ctrl, queue) {\n  each(queue, (props) => {\n    prepareSprings(ctrl.springs, props, (key) => {\n      return createSpring(key, ctrl);\n    });\n  });\n}\n\nconst SpringContext = ({\n  children,\n  ...props\n}) => {\n  const inherited = useContext(ctx);\n  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;\n  props = useMemoOne(() => ({pause, immediate}), [pause, immediate]);\n  const {Provider} = ctx;\n  return /* @__PURE__ */ createElement(Provider, {\n    value: props\n  }, children);\n};\nconst ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\nfunction makeContext(target, init) {\n  Object.assign(target, createContext(init));\n  target.Provider._context = target;\n  target.Consumer._context = target;\n  return target;\n}\n\nclass SpringRef extends Function {\n  constructor() {\n    super(\"return arguments.callee._call.apply(arguments.callee, arguments)\");\n    this.current = [];\n  }\n  _call(props) {\n    deprecateDirectCall();\n    this.start(props);\n  }\n  set(values) {\n    each(this.current, (ctrl) => ctrl.set(values));\n  }\n  start(props) {\n    const results = [];\n    each(this.current, (ctrl, i) => {\n      if (is.und(props)) {\n        results.push(ctrl.start());\n      } else {\n        const update = this._getProps(props, ctrl, i);\n        if (update) {\n          results.push(ctrl.start(update));\n        }\n      }\n    });\n    return results;\n  }\n  update(props) {\n    each(this.current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));\n    return this;\n  }\n  add(ctrl) {\n    if (!this.current.includes(ctrl)) {\n      this.current.push(ctrl);\n    }\n  }\n  delete(ctrl) {\n    const i = this.current.indexOf(ctrl);\n    if (~i)\n      this.current.splice(i, 1);\n  }\n  _getProps(arg, ctrl, index) {\n    return is.fun(arg) ? arg(index, ctrl) : arg;\n  }\n}\neach([\"stop\", \"pause\", \"resume\"], (key) => {\n  SpringRef.prototype[key] = function() {\n    each(this.current, (ctrl) => ctrl[key](...arguments));\n    return this;\n  };\n});\n\nfunction useSprings(length, props, deps) {\n  const propsFn = is.fun(props) && props;\n  if (propsFn && !deps)\n    deps = [];\n  const ref = useMemo(() => propsFn || arguments.length == 3 ? new SpringRef() : void 0, []);\n  const layoutId = useRef(0);\n  const forceUpdate = useForceUpdate();\n  const state = useMemo(() => ({\n    ctrls: [],\n    queue: [],\n    flush(ctrl, updates2) {\n      const springs2 = getSprings(ctrl, updates2);\n      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);\n      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {\n        setSprings(ctrl, springs2);\n        state.queue.push(() => {\n          resolve(flushUpdateQueue(ctrl, updates2));\n        });\n        forceUpdate();\n      });\n    }\n  }), []);\n  const ctrls = [...state.ctrls];\n  const updates = [];\n  const prevLength = usePrev(length) || 0;\n  const oldCtrls = ctrls.slice(length, prevLength);\n  useMemo(() => {\n    ctrls.length = length;\n    declareUpdates(prevLength, length);\n  }, [length]);\n  useMemo(() => {\n    declareUpdates(0, Math.min(prevLength, length));\n  }, deps);\n  function declareUpdates(startIndex, endIndex) {\n    for (let i = startIndex; i < endIndex; i++) {\n      const ctrl = ctrls[i] || (ctrls[i] = new Controller(null, state.flush));\n      const update = propsFn ? propsFn(i, ctrl) : props[i];\n      if (update) {\n        updates[i] = declareUpdate(update);\n      }\n    }\n  }\n  const springs = ctrls.map((ctrl, i) => getSprings(ctrl, updates[i]));\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    layoutId.current++;\n    state.ctrls = ctrls;\n    const {queue} = state;\n    if (queue.length) {\n      state.queue = [];\n      each(queue, (cb) => cb());\n    }\n    each(oldCtrls, (ctrl) => {\n      detachRefs(ctrl, ref);\n      ctrl.stop(true);\n    });\n    each(ctrls, (ctrl, i) => {\n      const values2 = springs[i];\n      setSprings(ctrl, values2);\n      ref == null ? void 0 : ref.add(ctrl);\n      if (hasContext) {\n        ctrl.start({default: context});\n      }\n      const update = updates[i];\n      if (update) {\n        replaceRef(ctrl, update.ref);\n        if (ctrl.ref) {\n          ctrl.queue.push(update);\n        } else {\n          ctrl.start(update);\n        }\n      }\n    });\n  });\n  useOnce(() => () => {\n    each(state.ctrls, (ctrl) => ctrl.stop(true));\n  });\n  const values = springs.map((x) => ({...x}));\n  return ref ? [values, ref] : values;\n}\n\nfunction useSpring(props, deps) {\n  const isFn = is.fun(props);\n  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);\n  return isFn || arguments.length == 2 ? [values, ref] : values;\n}\n\nconst initSpringRef = () => new SpringRef();\nconst useSpringRef = () => useState(initSpringRef)[0];\n\nfunction useTrail(length, propsArg, deps) {\n  const propsFn = is.fun(propsArg) && propsArg;\n  if (propsFn && !deps)\n    deps = [];\n  let reverse = true;\n  const result = useSprings(length, (i, ctrl) => {\n    const props = propsFn ? propsFn(i, ctrl) : propsArg;\n    reverse = reverse && props.reverse;\n    return props;\n  }, deps || [{}]);\n  const ref = result[1];\n  useLayoutEffect(() => {\n    each(ref.current, (ctrl, i) => {\n      const parent = ref.current[i + (reverse ? 1 : -1)];\n      if (parent)\n        ctrl.start({to: parent.springs});\n    });\n  }, deps);\n  if (propsFn || arguments.length == 3) {\n    ref[\"_getProps\"] = (propsArg2, ctrl, i) => {\n      const props = is.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n      if (props) {\n        const parent = ref.current[i + (props.reverse ? 1 : -1)];\n        if (parent)\n          props.to = parent.springs;\n        return props;\n      }\n    };\n    return result;\n  }\n  return result[0];\n}\n\nconst MOUNT = \"mount\";\nconst ENTER = \"enter\";\nconst UPDATE = \"update\";\nconst LEAVE = \"leave\";\n\nfunction useTransition(data, props, deps) {\n  const {reset, sort, trail = 0, expires = true, onDestroyed} = props;\n  const ref = useMemo(() => arguments.length == 3 ? new SpringRef() : void 0, []);\n  const items = toArray(data);\n  const transitions = [];\n  const usedTransitions = useRef(null);\n  const prevTransitions = reset ? null : usedTransitions.current;\n  useLayoutEffect(() => {\n    usedTransitions.current = transitions;\n  });\n  useOnce(() => () => each(usedTransitions.current, (t) => {\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n    }\n    detachRefs(t.ctrl, ref);\n    t.ctrl.stop(true);\n  }));\n  const keys = getKeys(items, props, prevTransitions);\n  const expired = reset && usedTransitions.current || [];\n  useLayoutEffect(() => each(expired, ({ctrl, item, key}) => {\n    detachRefs(ctrl, ref);\n    callProp(onDestroyed, item, key);\n  }));\n  const reused = [];\n  if (prevTransitions)\n    each(prevTransitions, (t, i) => {\n      if (t.expired) {\n        clearTimeout(t.expirationId);\n        expired.push(t);\n      } else {\n        i = reused[i] = keys.indexOf(t.key);\n        if (~i)\n          transitions[i] = t;\n      }\n    });\n  each(items, (item, i) => {\n    if (!transitions[i]) {\n      transitions[i] = {\n        key: keys[i],\n        item,\n        phase: MOUNT,\n        ctrl: new Controller()\n      };\n      transitions[i].ctrl.item = item;\n    }\n  });\n  if (reused.length) {\n    let i = -1;\n    each(reused, (keyIndex, prevIndex) => {\n      const t = prevTransitions[prevIndex];\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = {...t, item: items[keyIndex]};\n      } else if (props.leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n  if (is.fun(sort)) {\n    transitions.sort((a, b) => sort(a.item, b.item));\n  }\n  let delay = -trail;\n  const forceUpdate = useForceUpdate();\n  const defaultProps = getDefaultProps(props);\n  const changes = new Map();\n  each(transitions, (t, i) => {\n    const key = t.key;\n    const prevPhase = t.phase;\n    let to;\n    let phase;\n    if (prevPhase == MOUNT) {\n      to = props.enter;\n      phase = ENTER;\n    } else {\n      const isLeave = keys.indexOf(key) < 0;\n      if (prevPhase != LEAVE) {\n        if (isLeave) {\n          to = props.leave;\n          phase = LEAVE;\n        } else if (to = props.update) {\n          phase = UPDATE;\n        } else\n          return;\n      } else if (!isLeave) {\n        to = props.enter;\n        phase = ENTER;\n      } else\n        return;\n    }\n    to = callProp(to, t.item, i);\n    to = is.obj(to) ? inferTo(to) : {to};\n    if (!to.config) {\n      const config = props.config || defaultProps.config;\n      to.config = callProp(config, t.item, i, phase);\n    }\n    const payload = {\n      ...defaultProps,\n      delay: delay += trail,\n      reset: false,\n      ...to\n    };\n    if (phase == ENTER && is.und(payload.from)) {\n      const from = is.und(props.initial) || prevTransitions ? props.from : props.initial;\n      payload.from = callProp(from, t.item, i);\n    }\n    const {onResolve} = payload;\n    payload.onResolve = (result) => {\n      callProp(onResolve, result);\n      const transitions2 = usedTransitions.current;\n      const t2 = transitions2.find((t3) => t3.key === key);\n      if (!t2)\n        return;\n      if (result.cancelled && t2.phase != UPDATE) {\n        return;\n      }\n      if (t2.ctrl.idle) {\n        const idle = transitions2.every((t3) => t3.ctrl.idle);\n        if (t2.phase == LEAVE) {\n          const expiry = callProp(expires, t2.item);\n          if (expiry !== false) {\n            const expiryMs = expiry === true ? 0 : expiry;\n            t2.expired = true;\n            if (!idle && expiryMs > 0) {\n              if (expiryMs <= 2147483647)\n                t2.expirationId = setTimeout(forceUpdate, expiryMs);\n              return;\n            }\n          }\n        }\n        if (idle && transitions2.some((t3) => t3.expired)) {\n          forceUpdate();\n        }\n      }\n    };\n    const springs = getSprings(t.ctrl, payload);\n    changes.set(t, {phase, springs, payload});\n  });\n  const context = useContext(SpringContext);\n  const prevContext = usePrev(context);\n  const hasContext = context !== prevContext && hasProps(context);\n  useLayoutEffect(() => {\n    if (hasContext)\n      each(transitions, (t) => {\n        t.ctrl.start({default: context});\n      });\n  }, [context]);\n  useLayoutEffect(() => {\n    each(changes, ({phase, springs, payload}, t) => {\n      const {ctrl} = t;\n      t.phase = phase;\n      ref == null ? void 0 : ref.add(ctrl);\n      replaceRef(ctrl, payload.ref);\n      setSprings(ctrl, springs);\n      if (hasContext && phase == ENTER) {\n        ctrl.start({default: context});\n      }\n      ctrl[ctrl.ref ? \"update\" : \"start\"](payload);\n    });\n  }, reset ? void 0 : deps);\n  const renderTransitions = (render) => /* @__PURE__ */ createElement(Fragment, null, transitions.map((t, i) => {\n    const {springs} = changes.get(t) || t.ctrl;\n    const elem = render({...springs}, t.item, t, i);\n    return elem && elem.type ? /* @__PURE__ */ createElement(elem.type, {\n      ...elem.props,\n      key: is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id,\n      ref: elem.ref\n    }) : elem;\n  }));\n  return ref ? [renderTransitions, ref] : renderTransitions;\n}\nlet nextKey = 1;\nfunction getKeys(items, {key, keys = key}, prevTransitions) {\n  if (keys === null) {\n    const reused = new Set();\n    return items.map((item) => {\n      const t = prevTransitions && prevTransitions.find((t2) => t2.item === item && t2.phase !== LEAVE && !reused.has(t2));\n      if (t) {\n        reused.add(t);\n        return t.key;\n      }\n      return nextKey++;\n    });\n  }\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);\n}\n\nfunction Spring({children, ...props}) {\n  return children(useSpring(props));\n}\n\nfunction Trail({\n  items,\n  children,\n  ...props\n}) {\n  const trails = useTrail(items.length, props);\n  return items.map((item, index) => {\n    const result = children(item, index);\n    return is.fun(result) ? result(trails[index]) : result;\n  });\n}\n\nfunction Transition({\n  items,\n  children,\n  ...props\n}) {\n  return useTransition(items, props)(children);\n}\n\nclass Interpolation extends FrameValue {\n  constructor(source, args) {\n    super();\n    this.source = source;\n    this.idle = true;\n    this._active = new Set();\n    this.calc = createInterpolator(...args);\n    const value = this._get();\n    const nodeType = getAnimatedType(value);\n    setAnimated(this, nodeType.create(value));\n  }\n  advance(_dt) {\n    const value = this._get();\n    const oldValue = this.get();\n    if (!isEqual(value, oldValue)) {\n      getAnimated(this).setValue(value);\n      this._onChange(value, this.idle);\n    }\n    if (!this.idle && checkIdle(this._active)) {\n      becomeIdle(this);\n    }\n  }\n  _get() {\n    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));\n    return this.calc(...inputs);\n  }\n  _start() {\n    if (this.idle && !checkIdle(this._active)) {\n      this.idle = false;\n      each(getPayload(this), (node) => {\n        node.done = false;\n      });\n      if (Globals.skipAnimation) {\n        raf.batchedUpdates(() => this.advance());\n        becomeIdle(this);\n      } else {\n        frameLoop.start(this);\n      }\n    }\n  }\n  _attach() {\n    let priority = 1;\n    each(toArray(this.source), (source) => {\n      if (hasFluidValue(source)) {\n        addFluidObserver(source, this);\n      }\n      if (isFrameValue(source)) {\n        if (!source.idle) {\n          this._active.add(source);\n        }\n        priority = Math.max(priority, source.priority + 1);\n      }\n    });\n    this.priority = priority;\n    this._start();\n  }\n  _detach() {\n    each(toArray(this.source), (source) => {\n      if (hasFluidValue(source)) {\n        removeFluidObserver(source, this);\n      }\n    });\n    this._active.clear();\n    becomeIdle(this);\n  }\n  eventObserved(event) {\n    if (event.type == \"change\") {\n      if (event.idle) {\n        this.advance();\n      } else {\n        this._active.add(event.parent);\n        this._start();\n      }\n    } else if (event.type == \"idle\") {\n      this._active.delete(event.parent);\n    } else if (event.type == \"priority\") {\n      this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n    }\n  }\n}\nfunction isIdle(source) {\n  return source.idle !== false;\n}\nfunction checkIdle(active) {\n  return !active.size || Array.from(active).every(isIdle);\n}\nfunction becomeIdle(self) {\n  if (!self.idle) {\n    self.idle = true;\n    each(getPayload(self), (node) => {\n      node.done = true;\n    });\n    callFluidObservers(self, {\n      type: \"idle\",\n      parent: self\n    });\n  }\n}\n\nconst to = (source, ...args) => new Interpolation(source, args);\nconst interpolate = (source, ...args) => (deprecateInterpolate(), new Interpolation(source, args));\n\nGlobals.assign({\n  createStringInterpolator,\n  to: (source, args) => new Interpolation(source, args)\n});\nconst update = frameLoop.advance;\n\nexport { BailSignal, Controller, FrameValue, Interpolation, Spring, SpringContext, SpringRef, SpringValue, Trail, Transition, config, inferTo, interpolate, to, update, useChain, useSpring, useSpringRef, useSprings, useTrail, useTransition };\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"module"}