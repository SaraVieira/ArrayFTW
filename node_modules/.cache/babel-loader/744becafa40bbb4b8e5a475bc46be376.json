{"ast":null,"code":"import { DepthTexture, UnsignedShortType, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, CustomBlending, Vector3, MathUtils, DataTexture, FloatType, RepeatWrapping } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SSAOPass = function SSAOPass(scene, camera, width, height) {\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.camera = camera;\n  this.scene = scene;\n  this.kernelRadius = 8;\n  this.kernelSize = 32;\n  this.kernel = [];\n  this.noiseTexture = null;\n  this.output = 0;\n  this.minDistance = 0.005;\n  this.maxDistance = 0.1;\n  this._visibilityCache = new Map(); //\n\n  this.generateSampleKernel();\n  this.generateRandomKernelRotations(); // beauty render target\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target with depth buffer\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture\n  }); // ssao render target\n\n  this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n  if (SSAOShader === undefined) {\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n  }\n\n  this.ssaoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOShader.defines),\n    uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n    vertexShader: SSAOShader.vertexShader,\n    fragmentShader: SSAOShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending; // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n    vertexShader: SSAOBlurShader.vertexShader,\n    fragmentShader: SSAOBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAODepthShader.defines),\n    uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n    vertexShader: SSAODepthShader.vertexShader,\n    fragmentShader: SSAODepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: DstColorFactor,\n    blendDst: ZeroFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: DstAlphaFactor,\n    blendDstAlpha: ZeroFactor,\n    blendEquationAlpha: AddEquation\n  });\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\n\nSSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSAOPass,\n  dispose: function dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  },\n  generateSampleKernel: function generateSampleKernel() {\n    var kernelSize = this.kernelSize;\n    var kernel = this.kernel;\n\n    for (var i = 0; i < kernelSize; i++) {\n      var sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      var scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  },\n  generateRandomKernelRotations: function generateRandomKernelRotations() {\n    var width = 4,\n        height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    var simplex = new SimplexNoise();\n    var size = width * height;\n    var data = new Float32Array(size * 4);\n\n    for (var i = 0; i < size; i++) {\n      var stride = i * 4;\n      var x = Math.random() * 2 - 1;\n      var y = Math.random() * 2 - 1;\n      var z = 0;\n      var noise = simplex.noise3d(x, y, z);\n      data[stride] = noise;\n      data[stride + 1] = noise;\n      data[stride + 2] = noise;\n      data[stride + 3] = 1;\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RGBAFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n  },\n  overrideVisibility: function overrideVisibility() {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  },\n  restoreVisibility: function restoreVisibility() {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      var visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n});\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\nexport { SSAOPass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"names":["DepthTexture","UnsignedShortType","WebGLRenderTarget","LinearFilter","RGBAFormat","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","CustomBlending","Vector3","MathUtils","DataTexture","FloatType","RepeatWrapping","FullScreenQuad","Pass","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","scene","camera","width","height","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","type","beautyRenderTarget","minFilter","magFilter","format","normalRenderTarget","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","prototype","create","constructor","dispose","render","renderer","writeBuffer","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","stride","noise","noise3d","wrapS","wrapT","cache","traverse","object","visible","isPoints","isLine","get"],"mappings":"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","sourcesContent":["import { DepthTexture, UnsignedShortType, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, CustomBlending, Vector3, MathUtils, DataTexture, FloatType, RepeatWrapping } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SSAOPass = function (scene, camera, width, height) {\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.camera = camera;\n  this.scene = scene;\n  this.kernelRadius = 8;\n  this.kernelSize = 32;\n  this.kernel = [];\n  this.noiseTexture = null;\n  this.output = 0;\n  this.minDistance = 0.005;\n  this.maxDistance = 0.1;\n  this._visibilityCache = new Map(); //\n\n  this.generateSampleKernel();\n  this.generateRandomKernelRotations(); // beauty render target\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target with depth buffer\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture\n  }); // ssao render target\n\n  this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n  if (SSAOShader === undefined) {\n    console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n  }\n\n  this.ssaoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOShader.defines),\n    uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n    vertexShader: SSAOShader.vertexShader,\n    fragmentShader: SSAOShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\n  this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\n  this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending; // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAOBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n    vertexShader: SSAOBlurShader.vertexShader,\n    fragmentShader: SSAOBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSAODepthShader.defines),\n    uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n    vertexShader: SSAODepthShader.vertexShader,\n    fragmentShader: SSAODepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: DstColorFactor,\n    blendDst: ZeroFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: DstAlphaFactor,\n    blendDstAlpha: ZeroFactor,\n    blendEquationAlpha: AddEquation\n  });\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\n\nSSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSAOPass,\n  dispose: function () {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.ssaoRenderTarget.dispose();\n    this.blurRenderTarget.dispose(); // dispose materials\n\n    this.normalMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function (renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n    this.overrideVisibility();\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    this.restoreVisibility(); // render SSAO\n\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n    switch (this.output) {\n      case SSAOPass.OUTPUT.SSAO:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Blur:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n        this.copyMaterial.blending = CustomBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSAOPass: Unknown output type.');\n    }\n  },\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function (width, height) {\n    this.width = width;\n    this.height = height;\n    this.beautyRenderTarget.setSize(width, height);\n    this.ssaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n  },\n  generateSampleKernel: function () {\n    var kernelSize = this.kernelSize;\n    var kernel = this.kernel;\n\n    for (let i = 0; i < kernelSize; i++) {\n      var sample = new Vector3();\n      sample.x = Math.random() * 2 - 1;\n      sample.y = Math.random() * 2 - 1;\n      sample.z = Math.random();\n      sample.normalize();\n      var scale = i / kernelSize;\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\n      sample.multiplyScalar(scale);\n      kernel.push(sample);\n    }\n  },\n  generateRandomKernelRotations: function () {\n    var width = 4,\n        height = 4;\n\n    if (SimplexNoise === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n    }\n\n    var simplex = new SimplexNoise();\n    var size = width * height;\n    var data = new Float32Array(size * 4);\n\n    for (let i = 0; i < size; i++) {\n      var stride = i * 4;\n      var x = Math.random() * 2 - 1;\n      var y = Math.random() * 2 - 1;\n      var z = 0;\n      var noise = simplex.noise3d(x, y, z);\n      data[stride] = noise;\n      data[stride + 1] = noise;\n      data[stride + 2] = noise;\n      data[stride + 3] = 1;\n    }\n\n    this.noiseTexture = new DataTexture(data, width, height, RGBAFormat, FloatType);\n    this.noiseTexture.wrapS = RepeatWrapping;\n    this.noiseTexture.wrapT = RepeatWrapping;\n  },\n  overrideVisibility: function () {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  },\n  restoreVisibility: function () {\n    var scene = this.scene;\n    var cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      var visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n});\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\n\nexport { SSAOPass };\n"]},"metadata":{},"sourceType":"module"}