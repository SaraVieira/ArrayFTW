{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\n\nfunction SubSlotNode(slots) {\n  TempNode.call(this);\n  this.slots = slots || {};\n}\n\nSubSlotNode.prototype = Object.create(TempNode.prototype);\nSubSlotNode.prototype.constructor = SubSlotNode;\nSubSlotNode.prototype.nodeType = 'SubSlot';\n\nSubSlotNode.prototype.getType = function (builder, output) {\n  return output;\n};\n\nSubSlotNode.prototype.generate = function (builder, output) {\n  if (this.slots[builder.slot]) {\n    return this.slots[builder.slot].build(builder, output);\n  }\n\n  return builder.format('0.0', 'f', output);\n};\n\nSubSlotNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n\n  for (var prop in source.slots) {\n    this.slots[prop] = source.slots[prop];\n  }\n\n  return this;\n};\n\nSubSlotNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.slots = {};\n\n    for (var prop in this.slots) {\n      var slot = this.slots[prop];\n\n      if (slot) {\n        data.slots[prop] = slot.toJSON(meta).uuid;\n      }\n    }\n  }\n\n  return data;\n};\n\nexport { SubSlotNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/utils/SubSlotNode.js"],"names":["TempNode","SubSlotNode","slots","call","prototype","Object","create","constructor","nodeType","getType","builder","output","generate","slot","build","format","copy","source","prop","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"AAAA,SAASA,QAAT,QAAyB,qBAAzB;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BF,EAAAA,QAAQ,CAACG,IAAT,CAAc,IAAd;AACA,OAAKD,KAAL,GAAaA,KAAK,IAAI,EAAtB;AACD;;AAEDD,WAAW,CAACG,SAAZ,GAAwBC,MAAM,CAACC,MAAP,CAAcN,QAAQ,CAACI,SAAvB,CAAxB;AACAH,WAAW,CAACG,SAAZ,CAAsBG,WAAtB,GAAoCN,WAApC;AACAA,WAAW,CAACG,SAAZ,CAAsBI,QAAtB,GAAiC,SAAjC;;AAEAP,WAAW,CAACG,SAAZ,CAAsBK,OAAtB,GAAgC,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACzD,SAAOA,MAAP;AACD,CAFD;;AAIAV,WAAW,CAACG,SAAZ,CAAsBQ,QAAtB,GAAiC,UAAUF,OAAV,EAAmBC,MAAnB,EAA2B;AAC1D,MAAI,KAAKT,KAAL,CAAWQ,OAAO,CAACG,IAAnB,CAAJ,EAA8B;AAC5B,WAAO,KAAKX,KAAL,CAAWQ,OAAO,CAACG,IAAnB,EAAyBC,KAAzB,CAA+BJ,OAA/B,EAAwCC,MAAxC,CAAP;AACD;;AAED,SAAOD,OAAO,CAACK,MAAR,CAAe,KAAf,EAAsB,GAAtB,EAA2BJ,MAA3B,CAAP;AACD,CAND;;AAQAV,WAAW,CAACG,SAAZ,CAAsBY,IAAtB,GAA6B,UAAUC,MAAV,EAAkB;AAC7CjB,EAAAA,QAAQ,CAACI,SAAT,CAAmBY,IAAnB,CAAwBb,IAAxB,CAA6B,IAA7B,EAAmCc,MAAnC;;AAEA,OAAK,IAAIC,IAAT,IAAiBD,MAAM,CAACf,KAAxB,EAA+B;AAC7B,SAAKA,KAAL,CAAWgB,IAAX,IAAmBD,MAAM,CAACf,KAAP,CAAagB,IAAb,CAAnB;AACD;;AAED,SAAO,IAAP;AACD,CARD;;AAUAjB,WAAW,CAACG,SAAZ,CAAsBe,MAAtB,GAA+B,UAAUC,IAAV,EAAgB;AAC7C,MAAIC,IAAI,GAAG,KAAKC,WAAL,CAAiBF,IAAjB,CAAX;;AAEA,MAAI,CAACC,IAAL,EAAW;AACTA,IAAAA,IAAI,GAAG,KAAKE,cAAL,CAAoBH,IAApB,CAAP;AACAC,IAAAA,IAAI,CAACnB,KAAL,GAAa,EAAb;;AAEA,SAAK,IAAIgB,IAAT,IAAiB,KAAKhB,KAAtB,EAA6B;AAC3B,UAAIW,IAAI,GAAG,KAAKX,KAAL,CAAWgB,IAAX,CAAX;;AAEA,UAAIL,IAAJ,EAAU;AACRQ,QAAAA,IAAI,CAACnB,KAAL,CAAWgB,IAAX,IAAmBL,IAAI,CAACM,MAAL,CAAYC,IAAZ,EAAkBI,IAArC;AACD;AACF;AACF;;AAED,SAAOH,IAAP;AACD,CAjBD;;AAmBA,SAASpB,WAAT","sourcesContent":["import { TempNode } from '../core/TempNode.js';\n\nfunction SubSlotNode(slots) {\n  TempNode.call(this);\n  this.slots = slots || {};\n}\n\nSubSlotNode.prototype = Object.create(TempNode.prototype);\nSubSlotNode.prototype.constructor = SubSlotNode;\nSubSlotNode.prototype.nodeType = 'SubSlot';\n\nSubSlotNode.prototype.getType = function (builder, output) {\n  return output;\n};\n\nSubSlotNode.prototype.generate = function (builder, output) {\n  if (this.slots[builder.slot]) {\n    return this.slots[builder.slot].build(builder, output);\n  }\n\n  return builder.format('0.0', 'f', output);\n};\n\nSubSlotNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n\n  for (let prop in source.slots) {\n    this.slots[prop] = source.slots[prop];\n  }\n\n  return this;\n};\n\nSubSlotNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.slots = {};\n\n    for (let prop in this.slots) {\n      var slot = this.slots[prop];\n\n      if (slot) {\n        data.slots[prop] = slot.toJSON(meta).uuid;\n      }\n    }\n  }\n\n  return data;\n};\n\nexport { SubSlotNode };\n"]},"metadata":{},"sourceType":"module"}