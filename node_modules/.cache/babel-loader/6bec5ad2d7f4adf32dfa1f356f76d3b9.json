{"ast":null,"code":"import { UniformsUtils, ShaderMaterial, WebGLRenderTarget, LinearFilter, RGBFormat } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SavePass = function SavePass(renderTarget) {\n  if (CopyShader === undefined) console.error('THREE.SavePass relies on CopyShader');\n  var shader = CopyShader;\n  this.textureID = 'tDiffuse';\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.renderTarget = renderTarget;\n\n  if (this.renderTarget === undefined) {\n    this.renderTarget = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat\n    });\n    this.renderTarget.texture.name = 'SavePass.rt';\n  }\n\n  this.needsSwap = false;\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nSavePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SavePass,\n  render: function render(renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n});\nexport { SavePass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/SavePass.js"],"names":["UniformsUtils","ShaderMaterial","WebGLRenderTarget","LinearFilter","RGBFormat","FullScreenQuad","Pass","CopyShader","SavePass","renderTarget","undefined","console","error","shader","textureID","uniforms","clone","material","vertexShader","fragmentShader","window","innerWidth","innerHeight","minFilter","magFilter","format","texture","name","needsSwap","fsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","value","setRenderTarget","clear"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,EAAwCC,iBAAxC,EAA2DC,YAA3D,EAAyEC,SAAzE,QAA0F,OAA1F;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,WAArC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,IAAIC,QAAQ,GAAG,SAAXA,QAAW,CAAUC,YAAV,EAAwB;AACrC,MAAIF,UAAU,KAAKG,SAAnB,EAA8BC,OAAO,CAACC,KAAR,CAAc,qCAAd;AAC9B,MAAIC,MAAM,GAAGN,UAAb;AACA,OAAKO,SAAL,GAAiB,UAAjB;AACA,OAAKC,QAAL,GAAgBf,aAAa,CAACgB,KAAd,CAAoBH,MAAM,CAACE,QAA3B,CAAhB;AACA,OAAKE,QAAL,GAAgB,IAAIhB,cAAJ,CAAmB;AACjCc,IAAAA,QAAQ,EAAE,KAAKA,QADkB;AAEjCG,IAAAA,YAAY,EAAEL,MAAM,CAACK,YAFY;AAGjCC,IAAAA,cAAc,EAAEN,MAAM,CAACM;AAHU,GAAnB,CAAhB;AAKA,OAAKV,YAAL,GAAoBA,YAApB;;AAEA,MAAI,KAAKA,YAAL,KAAsBC,SAA1B,EAAqC;AACnC,SAAKD,YAAL,GAAoB,IAAIP,iBAAJ,CAAsBkB,MAAM,CAACC,UAA7B,EAAyCD,MAAM,CAACE,WAAhD,EAA6D;AAC/EC,MAAAA,SAAS,EAAEpB,YADoE;AAE/EqB,MAAAA,SAAS,EAAErB,YAFoE;AAG/EsB,MAAAA,MAAM,EAAErB;AAHuE,KAA7D,CAApB;AAKA,SAAKK,YAAL,CAAkBiB,OAAlB,CAA0BC,IAA1B,GAAiC,aAAjC;AACD;;AAED,OAAKC,SAAL,GAAiB,KAAjB;AACA,OAAKC,MAAL,GAAc,IAAIxB,cAAJ,CAAmB,KAAKY,QAAxB,CAAd;AACD,CAvBD;;AAyBAT,QAAQ,CAACsB,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAc3B,IAAI,CAACwB,SAAnB,CAAd,EAA6C;AAChEI,EAAAA,WAAW,EAAE1B,QADmD;AAEhE2B,EAAAA,MAAM,EAAE,gBAAUC,QAAV,EAAoBC,WAApB,EAAiCC,UAAjC,EAA6C;AACnD,QAAI,KAAKvB,QAAL,CAAc,KAAKD,SAAnB,CAAJ,EAAmC;AACjC,WAAKC,QAAL,CAAc,KAAKD,SAAnB,EAA8ByB,KAA9B,GAAsCD,UAAU,CAACZ,OAAjD;AACD;;AAEDU,IAAAA,QAAQ,CAACI,eAAT,CAAyB,KAAK/B,YAA9B;AACA,QAAI,KAAKgC,KAAT,EAAgBL,QAAQ,CAACK,KAAT;AAChB,SAAKZ,MAAL,CAAYM,MAAZ,CAAmBC,QAAnB;AACD;AAV+D,CAA7C,CAArB;AAaA,SAAS5B,QAAT","sourcesContent":["import { UniformsUtils, ShaderMaterial, WebGLRenderTarget, LinearFilter, RGBFormat } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SavePass = function (renderTarget) {\n  if (CopyShader === undefined) console.error('THREE.SavePass relies on CopyShader');\n  var shader = CopyShader;\n  this.textureID = 'tDiffuse';\n  this.uniforms = UniformsUtils.clone(shader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader\n  });\n  this.renderTarget = renderTarget;\n\n  if (this.renderTarget === undefined) {\n    this.renderTarget = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat\n    });\n    this.renderTarget.texture.name = 'SavePass.rt';\n  }\n\n  this.needsSwap = false;\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nSavePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SavePass,\n  render: function (renderer, writeBuffer, readBuffer) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n});\n\nexport { SavePass };\n"]},"metadata":{},"sourceType":"module"}