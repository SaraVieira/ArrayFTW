{"ast":null,"code":"import { Node } from './Node.js';\n\nfunction AttributeNode(name, type) {\n  Node.call(this, type);\n  this.name = name;\n}\n\nAttributeNode.prototype = Object.create(Node.prototype);\nAttributeNode.prototype.constructor = AttributeNode;\nAttributeNode.prototype.nodeType = 'Attribute';\n\nAttributeNode.prototype.getAttributeType = function (builder) {\n  return typeof this.type === 'number' ? builder.getConstructorFromLength(this.type) : this.type;\n};\n\nAttributeNode.prototype.getType = function (builder) {\n  var type = this.getAttributeType(builder);\n  return builder.getTypeByFormat(type);\n};\n\nAttributeNode.prototype.generate = function (builder, output) {\n  var type = this.getAttributeType(builder);\n  var attribute = builder.getAttribute(this.name, type),\n      name = builder.isShader('vertex') ? this.name : attribute.varying.name;\n  return builder.format(name, this.getType(builder), output);\n};\n\nAttributeNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source);\n  this.type = source.type;\n  return this;\n};\n\nAttributeNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.type = this.type;\n  }\n\n  return data;\n};\n\nexport { AttributeNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/core/AttributeNode.js"],"names":["Node","AttributeNode","name","type","call","prototype","Object","create","constructor","nodeType","getAttributeType","builder","getConstructorFromLength","getType","getTypeByFormat","generate","output","attribute","getAttribute","isShader","varying","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode"],"mappings":"AAAA,SAASA,IAAT,QAAqB,WAArB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AACjCH,EAAAA,IAAI,CAACI,IAAL,CAAU,IAAV,EAAgBD,IAAhB;AACA,OAAKD,IAAL,GAAYA,IAAZ;AACD;;AAEDD,aAAa,CAACI,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAcP,IAAI,CAACK,SAAnB,CAA1B;AACAJ,aAAa,CAACI,SAAd,CAAwBG,WAAxB,GAAsCP,aAAtC;AACAA,aAAa,CAACI,SAAd,CAAwBI,QAAxB,GAAmC,WAAnC;;AAEAR,aAAa,CAACI,SAAd,CAAwBK,gBAAxB,GAA2C,UAAUC,OAAV,EAAmB;AAC5D,SAAO,OAAO,KAAKR,IAAZ,KAAqB,QAArB,GAAgCQ,OAAO,CAACC,wBAAR,CAAiC,KAAKT,IAAtC,CAAhC,GAA8E,KAAKA,IAA1F;AACD,CAFD;;AAIAF,aAAa,CAACI,SAAd,CAAwBQ,OAAxB,GAAkC,UAAUF,OAAV,EAAmB;AACnD,MAAIR,IAAI,GAAG,KAAKO,gBAAL,CAAsBC,OAAtB,CAAX;AACA,SAAOA,OAAO,CAACG,eAAR,CAAwBX,IAAxB,CAAP;AACD,CAHD;;AAKAF,aAAa,CAACI,SAAd,CAAwBU,QAAxB,GAAmC,UAAUJ,OAAV,EAAmBK,MAAnB,EAA2B;AAC5D,MAAIb,IAAI,GAAG,KAAKO,gBAAL,CAAsBC,OAAtB,CAAX;AACA,MAAIM,SAAS,GAAGN,OAAO,CAACO,YAAR,CAAqB,KAAKhB,IAA1B,EAAgCC,IAAhC,CAAhB;AAAA,MACID,IAAI,GAAGS,OAAO,CAACQ,QAAR,CAAiB,QAAjB,IAA6B,KAAKjB,IAAlC,GAAyCe,SAAS,CAACG,OAAV,CAAkBlB,IADtE;AAEA,SAAOS,OAAO,CAACU,MAAR,CAAenB,IAAf,EAAqB,KAAKW,OAAL,CAAaF,OAAb,CAArB,EAA4CK,MAA5C,CAAP;AACD,CALD;;AAOAf,aAAa,CAACI,SAAd,CAAwBiB,IAAxB,GAA+B,UAAUC,MAAV,EAAkB;AAC/CvB,EAAAA,IAAI,CAACK,SAAL,CAAeiB,IAAf,CAAoBlB,IAApB,CAAyB,IAAzB,EAA+BmB,MAA/B;AACA,OAAKpB,IAAL,GAAYoB,MAAM,CAACpB,IAAnB;AACA,SAAO,IAAP;AACD,CAJD;;AAMAF,aAAa,CAACI,SAAd,CAAwBmB,MAAxB,GAAiC,UAAUC,IAAV,EAAgB;AAC/C,MAAIC,IAAI,GAAG,KAAKC,WAAL,CAAiBF,IAAjB,CAAX;;AAEA,MAAI,CAACC,IAAL,EAAW;AACTA,IAAAA,IAAI,GAAG,KAAKE,cAAL,CAAoBH,IAApB,CAAP;AACAC,IAAAA,IAAI,CAACvB,IAAL,GAAY,KAAKA,IAAjB;AACD;;AAED,SAAOuB,IAAP;AACD,CATD;;AAWA,SAASzB,aAAT","sourcesContent":["import { Node } from './Node.js';\n\nfunction AttributeNode(name, type) {\n  Node.call(this, type);\n  this.name = name;\n}\n\nAttributeNode.prototype = Object.create(Node.prototype);\nAttributeNode.prototype.constructor = AttributeNode;\nAttributeNode.prototype.nodeType = 'Attribute';\n\nAttributeNode.prototype.getAttributeType = function (builder) {\n  return typeof this.type === 'number' ? builder.getConstructorFromLength(this.type) : this.type;\n};\n\nAttributeNode.prototype.getType = function (builder) {\n  var type = this.getAttributeType(builder);\n  return builder.getTypeByFormat(type);\n};\n\nAttributeNode.prototype.generate = function (builder, output) {\n  var type = this.getAttributeType(builder);\n  var attribute = builder.getAttribute(this.name, type),\n      name = builder.isShader('vertex') ? this.name : attribute.varying.name;\n  return builder.format(name, this.getType(builder), output);\n};\n\nAttributeNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source);\n  this.type = source.type;\n  return this;\n};\n\nAttributeNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.type = this.type;\n  }\n\n  return data;\n};\n\nexport { AttributeNode };\n"]},"metadata":{},"sourceType":"module"}