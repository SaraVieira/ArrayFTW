{"ast":null,"code":"import { Loader, UnsignedByteType, CubeTexture, HalfFloatType, LinearEncoding, RGBFormat, LinearFilter, FloatType, RGBEEncoding, RGBAFormat, NearestFilter, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nvar HDRCubeTextureLoader = function HDRCubeTextureLoader(manager) {\n  Loader.call(this, manager);\n  this.hdrLoader = new RGBELoader();\n  this.type = UnsignedByteType;\n};\n\nHDRCubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: HDRCubeTextureLoader,\n  load: function load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    var texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case UnsignedByteType:\n        texture.encoding = RGBEEncoding;\n        texture.format = RGBAFormat;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    var scope = this;\n    var loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        var texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          var dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (var i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  },\n  setDataType: function setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n});\nexport { HDRCubeTextureLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"names":["Loader","UnsignedByteType","CubeTexture","HalfFloatType","LinearEncoding","RGBFormat","LinearFilter","FloatType","RGBEEncoding","RGBAFormat","NearestFilter","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","manager","call","hdrLoader","type","prototype","Object","assign","create","constructor","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","encoding","format","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","undefined","dataTexture","width","height","images","needsUpdate","length","value"],"mappings":"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","sourcesContent":["import { Loader, UnsignedByteType, CubeTexture, HalfFloatType, LinearEncoding, RGBFormat, LinearFilter, FloatType, RGBEEncoding, RGBAFormat, NearestFilter, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nvar HDRCubeTextureLoader = function (manager) {\n  Loader.call(this, manager);\n  this.hdrLoader = new RGBELoader();\n  this.type = UnsignedByteType;\n};\n\nHDRCubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: HDRCubeTextureLoader,\n  load: function (urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    var texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case UnsignedByteType:\n        texture.encoding = RGBEEncoding;\n        texture.format = RGBAFormat;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    var scope = this;\n    var loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        var texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          var dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  },\n  setDataType: function (value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n});\n\nexport { HDRCubeTextureLoader };\n"]},"metadata":{},"sourceType":"module"}