{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { LuminanceNode } from './LuminanceNode.js';\n\nfunction ColorAdjustmentNode(rgb, adjustment, method) {\n  TempNode.call(this, 'v3');\n  this.rgb = rgb;\n  this.adjustment = adjustment;\n  this.method = method || ColorAdjustmentNode.SATURATION;\n}\n\nColorAdjustmentNode.Nodes = function () {\n  var hue = new FunctionNode(['vec3 hue(vec3 rgb, float adjustment) {', '\tconst mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);', '\tconst mat3 YIQtoRGB = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.107, 1.7046);', '\tvec3 yiq = RGBtoYIQ * rgb;', '\tfloat hue = atan(yiq.z, yiq.y) + adjustment;', '\tfloat chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);', '\treturn YIQtoRGB * vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));', '}'].join('\\n'));\n  var saturation = new FunctionNode([// Algorithm from Chapter 16 of OpenGL Shading Language\n  'vec3 saturation(vec3 rgb, float adjustment) {', '\tvec3 intensity = vec3( luminance( rgb ) );', '\treturn mix( intensity, rgb, adjustment );', '}'].join('\\n'), [LuminanceNode.Nodes.luminance]); // include LuminanceNode function\n\n  var vibrance = new FunctionNode([// Shader by Evan Wallace adapted by @lo-th\n  'vec3 vibrance(vec3 rgb, float adjustment) {', '\tfloat average = (rgb.r + rgb.g + rgb.b) / 3.0;', '\tfloat mx = max(rgb.r, max(rgb.g, rgb.b));', '\tfloat amt = (mx - average) * (-3.0 * adjustment);', '\treturn mix(rgb.rgb, vec3(mx), amt);', '}'].join('\\n'));\n  return {\n    hue: hue,\n    saturation: saturation,\n    vibrance: vibrance\n  };\n}();\n\nColorAdjustmentNode.SATURATION = 'saturation';\nColorAdjustmentNode.HUE = 'hue';\nColorAdjustmentNode.VIBRANCE = 'vibrance';\nColorAdjustmentNode.BRIGHTNESS = 'brightness';\nColorAdjustmentNode.CONTRAST = 'contrast';\nColorAdjustmentNode.prototype = Object.create(TempNode.prototype);\nColorAdjustmentNode.prototype.constructor = ColorAdjustmentNode;\nColorAdjustmentNode.prototype.nodeType = 'ColorAdjustment';\nColorAdjustmentNode.prototype.hashProperties = ['method'];\n\nColorAdjustmentNode.prototype.generate = function (builder, output) {\n  var rgb = this.rgb.build(builder, 'v3'),\n      adjustment = this.adjustment.build(builder, 'f');\n\n  switch (this.method) {\n    case ColorAdjustmentNode.BRIGHTNESS:\n      return builder.format('( ' + rgb + ' + ' + adjustment + ' )', this.getType(builder), output);\n\n    case ColorAdjustmentNode.CONTRAST:\n      return builder.format('( ' + rgb + ' * ' + adjustment + ' )', this.getType(builder), output);\n  }\n\n  var method = builder.include(ColorAdjustmentNode.Nodes[this.method]);\n  return builder.format(method + '( ' + rgb + ', ' + adjustment + ' )', this.getType(builder), output);\n};\n\nColorAdjustmentNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.rgb = source.rgb;\n  this.adjustment = source.adjustment;\n  this.method = source.method;\n  return this;\n};\n\nColorAdjustmentNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.rgb = this.rgb.toJSON(meta).uuid;\n    data.adjustment = this.adjustment.toJSON(meta).uuid;\n    data.method = this.method;\n  }\n\n  return data;\n};\n\nexport { ColorAdjustmentNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/effects/ColorAdjustmentNode.js"],"names":["TempNode","FunctionNode","LuminanceNode","ColorAdjustmentNode","rgb","adjustment","method","call","SATURATION","Nodes","hue","join","saturation","luminance","vibrance","HUE","VIBRANCE","BRIGHTNESS","CONTRAST","prototype","Object","create","constructor","nodeType","hashProperties","generate","builder","output","build","format","getType","include","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"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","sourcesContent":["import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { LuminanceNode } from './LuminanceNode.js';\n\nfunction ColorAdjustmentNode(rgb, adjustment, method) {\n  TempNode.call(this, 'v3');\n  this.rgb = rgb;\n  this.adjustment = adjustment;\n  this.method = method || ColorAdjustmentNode.SATURATION;\n}\n\nColorAdjustmentNode.Nodes = function () {\n  var hue = new FunctionNode(['vec3 hue(vec3 rgb, float adjustment) {', '\tconst mat3 RGBtoYIQ = mat3(0.299, 0.587, 0.114, 0.595716, -0.274453, -0.321263, 0.211456, -0.522591, 0.311135);', '\tconst mat3 YIQtoRGB = mat3(1.0, 0.9563, 0.6210, 1.0, -0.2721, -0.6474, 1.0, -1.107, 1.7046);', '\tvec3 yiq = RGBtoYIQ * rgb;', '\tfloat hue = atan(yiq.z, yiq.y) + adjustment;', '\tfloat chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);', '\treturn YIQtoRGB * vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));', '}'].join('\\n'));\n  var saturation = new FunctionNode([// Algorithm from Chapter 16 of OpenGL Shading Language\n  'vec3 saturation(vec3 rgb, float adjustment) {', '\tvec3 intensity = vec3( luminance( rgb ) );', '\treturn mix( intensity, rgb, adjustment );', '}'].join('\\n'), [LuminanceNode.Nodes.luminance]); // include LuminanceNode function\n\n  var vibrance = new FunctionNode([// Shader by Evan Wallace adapted by @lo-th\n  'vec3 vibrance(vec3 rgb, float adjustment) {', '\tfloat average = (rgb.r + rgb.g + rgb.b) / 3.0;', '\tfloat mx = max(rgb.r, max(rgb.g, rgb.b));', '\tfloat amt = (mx - average) * (-3.0 * adjustment);', '\treturn mix(rgb.rgb, vec3(mx), amt);', '}'].join('\\n'));\n  return {\n    hue: hue,\n    saturation: saturation,\n    vibrance: vibrance\n  };\n}();\n\nColorAdjustmentNode.SATURATION = 'saturation';\nColorAdjustmentNode.HUE = 'hue';\nColorAdjustmentNode.VIBRANCE = 'vibrance';\nColorAdjustmentNode.BRIGHTNESS = 'brightness';\nColorAdjustmentNode.CONTRAST = 'contrast';\nColorAdjustmentNode.prototype = Object.create(TempNode.prototype);\nColorAdjustmentNode.prototype.constructor = ColorAdjustmentNode;\nColorAdjustmentNode.prototype.nodeType = 'ColorAdjustment';\nColorAdjustmentNode.prototype.hashProperties = ['method'];\n\nColorAdjustmentNode.prototype.generate = function (builder, output) {\n  var rgb = this.rgb.build(builder, 'v3'),\n      adjustment = this.adjustment.build(builder, 'f');\n\n  switch (this.method) {\n    case ColorAdjustmentNode.BRIGHTNESS:\n      return builder.format('( ' + rgb + ' + ' + adjustment + ' )', this.getType(builder), output);\n\n    case ColorAdjustmentNode.CONTRAST:\n      return builder.format('( ' + rgb + ' * ' + adjustment + ' )', this.getType(builder), output);\n  }\n\n  var method = builder.include(ColorAdjustmentNode.Nodes[this.method]);\n  return builder.format(method + '( ' + rgb + ', ' + adjustment + ' )', this.getType(builder), output);\n};\n\nColorAdjustmentNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.rgb = source.rgb;\n  this.adjustment = source.adjustment;\n  this.method = source.method;\n  return this;\n};\n\nColorAdjustmentNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.rgb = this.rgb.toJSON(meta).uuid;\n    data.adjustment = this.adjustment.toJSON(meta).uuid;\n    data.method = this.method;\n  }\n\n  return data;\n};\n\nexport { ColorAdjustmentNode };\n"]},"metadata":{},"sourceType":"module"}