{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { MaxMIPLevelNode } from './MaxMIPLevelNode.js';\n\nfunction SpecularMIPLevelNode(roughness, texture) {\n  TempNode.call(this, 'f');\n  this.roughness = roughness;\n  this.texture = texture;\n  this.maxMIPLevel = undefined;\n}\n\nSpecularMIPLevelNode.Nodes = function () {\n  var getSpecularMIPLevel = new FunctionNode([// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\n  'float getSpecularMIPLevel( const in float roughness, const in float maxMIPLevelScalar ) {', '\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );', '\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );', // clamp to allowable LOD ranges.\n  '\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );', '}'].join('\\n'));\n  return {\n    getSpecularMIPLevel: getSpecularMIPLevel\n  };\n}();\n\nSpecularMIPLevelNode.prototype = Object.create(TempNode.prototype);\nSpecularMIPLevelNode.prototype.constructor = SpecularMIPLevelNode;\nSpecularMIPLevelNode.prototype.nodeType = 'SpecularMIPLevel';\n\nSpecularMIPLevelNode.prototype.setTexture = function (texture) {\n  this.texture = texture;\n  return this;\n};\n\nSpecularMIPLevelNode.prototype.generate = function (builder, output) {\n  if (builder.isShader('fragment')) {\n    this.maxMIPLevel = this.maxMIPLevel || new MaxMIPLevelNode();\n    this.maxMIPLevel.texture = this.texture;\n    var getSpecularMIPLevel = builder.include(SpecularMIPLevelNode.Nodes.getSpecularMIPLevel);\n    return builder.format(getSpecularMIPLevel + '( ' + this.roughness.build(builder, 'f') + ', ' + this.maxMIPLevel.build(builder, 'f') + ' )', this.type, output);\n  } else {\n    console.warn('THREE.SpecularMIPLevelNode is not compatible with ' + builder.shader + ' shader.');\n    return builder.format('0.0', this.type, output);\n  }\n};\n\nSpecularMIPLevelNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.texture = source.texture;\n  this.roughness = source.roughness;\n  return this;\n};\n\nSpecularMIPLevelNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.texture = this.texture;\n    data.roughness = this.roughness;\n  }\n\n  return data;\n};\n\nexport { SpecularMIPLevelNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/utils/SpecularMIPLevelNode.js"],"names":["TempNode","FunctionNode","MaxMIPLevelNode","SpecularMIPLevelNode","roughness","texture","call","maxMIPLevel","undefined","Nodes","getSpecularMIPLevel","join","prototype","Object","create","constructor","nodeType","setTexture","generate","builder","output","isShader","include","format","build","type","console","warn","shader","copy","source","toJSON","meta","data","getJSONNode","createJSONNode"],"mappings":"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","sourcesContent":["import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { MaxMIPLevelNode } from './MaxMIPLevelNode.js';\n\nfunction SpecularMIPLevelNode(roughness, texture) {\n  TempNode.call(this, 'f');\n  this.roughness = roughness;\n  this.texture = texture;\n  this.maxMIPLevel = undefined;\n}\n\nSpecularMIPLevelNode.Nodes = function () {\n  var getSpecularMIPLevel = new FunctionNode([// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\n  'float getSpecularMIPLevel( const in float roughness, const in float maxMIPLevelScalar ) {', '\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );', '\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );', // clamp to allowable LOD ranges.\n  '\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );', '}'].join('\\n'));\n  return {\n    getSpecularMIPLevel: getSpecularMIPLevel\n  };\n}();\n\nSpecularMIPLevelNode.prototype = Object.create(TempNode.prototype);\nSpecularMIPLevelNode.prototype.constructor = SpecularMIPLevelNode;\nSpecularMIPLevelNode.prototype.nodeType = 'SpecularMIPLevel';\n\nSpecularMIPLevelNode.prototype.setTexture = function (texture) {\n  this.texture = texture;\n  return this;\n};\n\nSpecularMIPLevelNode.prototype.generate = function (builder, output) {\n  if (builder.isShader('fragment')) {\n    this.maxMIPLevel = this.maxMIPLevel || new MaxMIPLevelNode();\n    this.maxMIPLevel.texture = this.texture;\n    var getSpecularMIPLevel = builder.include(SpecularMIPLevelNode.Nodes.getSpecularMIPLevel);\n    return builder.format(getSpecularMIPLevel + '( ' + this.roughness.build(builder, 'f') + ', ' + this.maxMIPLevel.build(builder, 'f') + ' )', this.type, output);\n  } else {\n    console.warn('THREE.SpecularMIPLevelNode is not compatible with ' + builder.shader + ' shader.');\n    return builder.format('0.0', this.type, output);\n  }\n};\n\nSpecularMIPLevelNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.texture = source.texture;\n  this.roughness = source.roughness;\n  return this;\n};\n\nSpecularMIPLevelNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.texture = this.texture;\n    data.roughness = this.roughness;\n  }\n\n  return data;\n};\n\nexport { SpecularMIPLevelNode };\n"]},"metadata":{},"sourceType":"module"}