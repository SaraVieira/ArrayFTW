{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, BufferAttribute, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nvar FBXLoader = function () {\n  var fbxTree;\n  var connections;\n  var sceneGraph;\n\n  function FBXLoader(manager) {\n    Loader.call(this, manager);\n  }\n\n  FBXLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n    constructor: FBXLoader,\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    },\n    parse: function parse(FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n\n        fbxTree = new TextParser().parse(FBXText);\n      } // console.log( fbxTree );\n\n\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }); // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n  function FBXTreeParser(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  FBXTreeParser.prototype = {\n    constructor: FBXTreeParser,\n    parse: function parse() {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    },\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n    parseConnections: function parseConnections() {\n      var connectionMap = new Map();\n\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n\n      return connectionMap;\n    },\n    // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n    parseImages: function parseImages() {\n      var images = {};\n      var blobs = {};\n\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n\n        for (var nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n\n      for (var _id in images) {\n        var filename = images[_id];\n        if (blobs[filename] !== undefined) images[_id] = blobs[filename];else images[_id] = images[_id].split('\\\\').pop();\n      }\n\n      return images;\n    },\n    // Parse embedded image data in FBXTree.Video.Content\n    parseImage: function parseImage(videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n\n        case 'png':\n          type = 'image/png';\n          break;\n\n        case 'tif':\n          type = 'image/tiff';\n          break;\n\n        case 'tga':\n          if (this.manager.getHandler('.tga') === null) {\n            console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n          }\n\n          type = 'image/tga';\n          break;\n\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n\n      if (typeof content === 'string') {\n        // ASCII format\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    },\n    // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n    parseTextures: function parseTextures(images) {\n      var textureMap = new Map();\n\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n\n        for (var nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n\n      return textureMap;\n    },\n    // Parse individual node in FBXTree.Objects.Texture\n    parseTexture: function parseTexture(textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n\n      return texture;\n    },\n    // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n    loadTexture: function loadTexture(textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n\n      if (extension === 'tga') {\n        var loader = this.manager.getHandler('.tga');\n\n        if (loader === null) {\n          console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    },\n    // Parse nodes in FBXTree.Objects.Material\n    parseMaterials: function parseMaterials(textureMap) {\n      var materialMap = new Map();\n\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n\n        for (var nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n\n      return materialMap;\n    },\n    // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n    parseMaterial: function parseMaterial(materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n      if (typeof type === 'object') {\n        type = type.value;\n      } // Ignore unused materials which don't have any connections.\n\n\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    },\n    // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n    parseParameters: function parseParameters(materialNode, textureMap, ID) {\n      var parameters = {};\n\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'Maya|TEX_ao_map':\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'DiffuseColor':\n          case 'Maya|TEX_color_map':\n            parameters.map = scope.getTexture(textureMap, child.ID);\n            parameters.map.encoding = sRGBEncoding;\n            break;\n\n          case 'DisplacementColor':\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'EmissiveColor':\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n            parameters.emissiveMap.encoding = sRGBEncoding;\n            break;\n\n          case 'NormalMap':\n          case 'Maya|TEX_normal_map':\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'ReflectionColor':\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n            break;\n\n          case 'SpecularColor':\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n            parameters.specularMap.encoding = sRGBEncoding;\n            break;\n\n          case 'TransparentColor':\n          case 'TransparencyFactor':\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n\n          case 'SpecularFactor': // AKA specularLevel\n\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    },\n    // get a texture from the textureMap for use by a material.\n    getTexture: function getTexture(textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n\n      return textureMap.get(id);\n    },\n    // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n    parseDeformers: function parseDeformers() {\n      var skeletons = {};\n      var morphTargets = {};\n\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n\n        for (var nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    },\n    // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n    parseSkeleton: function parseSkeleton(relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n\n        };\n\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    },\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n    parseMorphTargets: function parseMorphTargets(relationships, deformerNodes) {\n      var rawMorphTargets = [];\n\n      for (var i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n          return child.relationship === undefined;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n\n      return rawMorphTargets;\n    },\n    // create the main Group() to be returned by the loader\n    parseScene: function parseScene(deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      this.setupMorphMaterials();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n\n      sceneGraph.animations = animations;\n    },\n    // parse nodes in FBXTree.Objects.Model\n    parseModels: function parseModels(skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n\n      for (var nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n\n            case 'LimbNode':\n            case 'Root':\n              model = new Bone();\n              break;\n\n            case 'Null':\n            default:\n              model = new Group();\n              break;\n          }\n\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n          model.ID = id;\n        }\n\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n\n      return modelMap;\n    },\n    buildSkeleton: function buildSkeleton(relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        for (var ID in skeletons) {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n              bone.ID = id;\n              skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        }\n      });\n      return bone;\n    },\n    // create a PerspectiveCamera or OrthographicCamera\n    createCamera: function createCamera(relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n\n      if (cameraAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n\n        var nearClippingPlane = 1;\n\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n\n        var farClippingPlane = 1000;\n\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n\n        var aspect = width / height;\n        var fov = 45;\n\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n\n          case 1:\n            // Orthographic\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new Object3D();\n            break;\n        }\n      }\n\n      return model;\n    },\n    // Create a DirectionalLight, PointLight or SpotLight\n    createLight: function createLight(relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n\n      if (lightAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type; // LightType can be undefined for Point lights\n\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n\n        var color = 0xffffff;\n\n        if (lightAttribute.Color !== undefined) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n\n        var distance = 0;\n\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n        var decay = 1;\n\n        switch (type) {\n          case 0:\n            // Point\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n\n          case 1:\n            // Directional\n            model = new DirectionalLight(color, intensity);\n            break;\n\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n\n            var penumbra = 0;\n\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n            model = new PointLight(color, intensity);\n            break;\n        }\n\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n\n      return model;\n    },\n    createMesh: function createMesh(relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = []; // get geometry and materials(s) from connections\n\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = true;\n        });\n      }\n\n      if (geometry.FBX_Deformer) {\n        materials.forEach(function (material) {\n          material.skinning = true;\n        });\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n\n      return model;\n    },\n    createCurve: function createCurve(relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n      var material = new LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    },\n    // parse the model node for transform data\n    getTransformData: function getTransformData(model, modelNode) {\n      var transformData = {};\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    },\n    setLookAtProperties: function setLookAtProperties(model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    },\n    bindSkeleton: function bindSkeleton(skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n\n      for (var ID in skeletons) {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      }\n    },\n    parsePoseNodes: function parsePoseNodes() {\n      var bindMatrices = {};\n\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n\n        for (var nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose') {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n\n      return bindMatrices;\n    },\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n    createAmbientLight: function createAmbientLight() {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    },\n    setupMorphMaterials: function setupMorphMaterials() {\n      var scope = this;\n      sceneGraph.traverse(function (child) {\n        if (child.isMesh) {\n          if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n            if (Array.isArray(child.material)) {\n              child.material.forEach(function (material, i) {\n                scope.setupMorphMaterial(child, material, i);\n              });\n            } else {\n              scope.setupMorphMaterial(child, child.material);\n            }\n          }\n        }\n      });\n    },\n    setupMorphMaterial: function setupMorphMaterial(child, material, index) {\n      var uuid = child.uuid;\n      var matUuid = material.uuid; // if a geometry has morph targets, it cannot share the material with other geometries\n\n      var sharedMat = false;\n      sceneGraph.traverse(function (node) {\n        if (node.isMesh) {\n          if (Array.isArray(node.material)) {\n            node.material.forEach(function (mat) {\n              if (mat.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n            });\n          } else if (node.material.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n        }\n      });\n\n      if (sharedMat === true) {\n        var clonedMat = material.clone();\n        clonedMat.morphTargets = true;\n        if (index === undefined) child.material = clonedMat;else child.material[index] = clonedMat;\n      } else material.morphTargets = true;\n    }\n  }; // parse Geometry data from FBXTree and return map of BufferGeometries\n\n  function GeometryParser() {}\n\n  GeometryParser.prototype = {\n    constructor: GeometryParser,\n    // Parse nodes in FBXTree.Objects.Geometry\n    parse: function parse(deformers) {\n      var geometryMap = new Map();\n\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n\n        for (var nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n\n      return geometryMap;\n    },\n    // Parse single node in FBXTree.Objects.Geometry\n    parseGeometry: function parseGeometry(relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n      }\n    },\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\n    parseMeshGeometry: function parseMeshGeometry(relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      }); // don't create geometry if it is not associated with any models\n\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== undefined) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      }); // Assume one model and get the preRotation from that\n      // if there is more than one model associated with the geometry this may cause problems\n\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    },\n    // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n    genGeometry: function genGeometry(geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute('position', positionAttribute);\n\n      if (buffers.colors.length > 0) {\n        geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n      }\n\n      if (skeleton) {\n        geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n        geo.FBX_Deformer = skeleton;\n      }\n\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute('normal', normalAttribute);\n      }\n\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n        if (i === 0) {\n          name = 'uv';\n        }\n\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        }); // the loop above doesn't add the last group, do that here.\n\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        } // case where there are multiple materials but the whole geometry is only\n        // using one of them\n\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    },\n    parseGeoNode: function parseGeoNode(geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n\n          i++;\n        }\n      }\n\n      geoInfo.weightTable = {};\n\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n\n      return geoInfo;\n    },\n    genBuffers: function genBuffers(geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false; // these will hold data for a single face\n\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var endOfFace = false; // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n          endOfFace = true;\n        }\n\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          } // if the weight array is shorter than 4 pad with 0s\n\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n\n          for (var i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n\n        if (geoInfo.normal) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n\n        faceLength++;\n\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0; // reset arrays for the next face\n\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    },\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n    genFace: function genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      var _loop = function _loop(i) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      };\n\n      for (var i = 2; i < faceLength; i++) {\n        _loop(i);\n      }\n    },\n    addMorphTargets: function addMorphTargets(parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n          if (morphGeoNode !== undefined) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    },\n    // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n    genMorphGeometry: function genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n\n      for (var i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      } // TODO: add morph normal support\n\n\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    },\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n    parseNormals: function parseNormals(NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n    parseUVs: function parseUVs(UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n    parseVertexColors: function parseVertexColors(ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n    parseMaterialIndices: function parseMaterialIndices(MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n\n      var materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n\n      var materialIndices = [];\n\n      for (var i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n    parseNurbsGeometry: function parseNurbsGeometry(geoNode) {\n      if (NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new BufferGeometry();\n      }\n\n      var order = parseInt(geoNode.Order);\n\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n\n      for (var i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n\n      var startKnot, endKnot;\n\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n\n        for (var _i = 0; _i < degree; ++_i) {\n          controlPoints.push(controlPoints[_i]);\n        }\n      }\n\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var vertices = curve.getPoints(controlPoints.length * 7);\n      var positions = new Float32Array(vertices.length * 3);\n      vertices.forEach(function (vertex, i) {\n        vertex.toArray(positions, i * 3);\n      });\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new BufferAttribute(positions, 3));\n      return geometry;\n    }\n  }; // parse animation data from FBXTree\n\n  function AnimationParser() {}\n\n  AnimationParser.prototype = {\n    constructor: AnimationParser,\n    // take raw animation clips and turn them into three.js animation clips\n    parse: function parse() {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n\n      if (rawClips !== undefined) {\n        for (var key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n\n      return animationClips;\n    },\n    parseClips: function parseClips() {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n    parseAnimationCurveNodes: function parseAnimationCurveNodes() {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n\n      for (var nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n\n      return curveNodesMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n    parseAnimationCurves: function parseAnimationCurves(curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (var nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    },\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n    parseAnimationLayers: function parseAnimationLayers(curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n\n      for (var nodeID in rawLayers) {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n\n                  if (modelID !== undefined) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                    if (rawModel === undefined) {\n                      console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                      return;\n                    }\n\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child) {\n                      if (child.ID === rawModel.id) {\n                        node.transform = child.matrix;\n                        if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                    // animation value as well\n\n                    if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                  var modelID = connections.get(geoID).parents[0].ID;\n                  var rawModel = fbxTree.Objects.Model[modelID];\n                  var node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = node;\n                }\n\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      }\n\n      return layersMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n    parseAnimStacks: function parseAnimStacks(layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n      var rawClips = {};\n\n      for (var nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n\n      return rawClips;\n    },\n    addClip: function addClip(rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    },\n    generateTracks: function generateTracks(rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n\n      return tracks;\n    },\n    generateVectorTrack: function generateVectorTrack(modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n    },\n    generateRotationTrack: function generateRotationTrack(modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n      if (preRotation !== undefined) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n\n      if (postRotation !== undefined) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n\n      for (var i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n\n      return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    },\n    generateMorphTrack: function generateMorphTrack(rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    },\n    // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n    getTimesForAllAxes: function getTimesForAllAxes(curves) {\n      var times = []; // first join together the times for each axis, if defined\n\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n      times = times.sort(function (a, b) {\n        return a - b;\n      }); // and remove duplicates\n\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n\n        for (var i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n\n        times = times.slice(0, targetIndex);\n      }\n\n      return times;\n    },\n    getKeyframeTrackValues: function getKeyframeTrackValues(times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    },\n    // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n    interpolateRotations: function interpolateRotations(curve) {\n      for (var i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }; // parse an FBX file in ASCII format\n\n  function TextParser() {}\n\n  TextParser.prototype = {\n    constructor: TextParser,\n    getPrevNode: function getPrevNode() {\n      return this.nodeStack[this.currentIndent - 2];\n    },\n    getCurrentNode: function getCurrentNode() {\n      return this.nodeStack[this.currentIndent - 1];\n    },\n    getCurrentProp: function getCurrentProp() {\n      return this.currentProp;\n    },\n    pushStack: function pushStack(node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    },\n    popStack: function popStack() {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    },\n    setCurrentProp: function setCurrentProp(val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    },\n    parse: function parse(text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    },\n    parseNodeBegin: function parseNodeBegin(line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    },\n    parseNodeAttr: function parseNodeAttr(attrs) {\n      var id = attrs[0];\n\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n\n      var name = '',\n          type = '';\n\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    },\n    parseNodeProperty: function parseNodeProperty(line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      } // Connections\n\n\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      } // Node\n\n\n      if (propName === 'Node') currentNode.id = propValue; // connections\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n\n      this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    },\n    parseNodePropertyContinued: function parseNodePropertyContinued(line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    },\n    // parse \"Property70\"\n    parseNodeSpecialProperty: function parseNodeSpecialProperty(line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n\n      this.getPrevNode()[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }; // Parse an FBX file in Binary format\n\n  function BinaryParser() {}\n\n  BinaryParser.prototype = {\n    constructor: BinaryParser,\n    parse: function parse(buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n\n      if (version < 6400) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n      }\n\n      var allNodes = new FBXTree();\n\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n\n      return allNodes;\n    },\n    // Check if reader has reached the end of content.\n    endOfContent: function endOfContent(reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    },\n    // recursively parse nodes until the end of the file is reached\n    parseNode: function parseNode(reader, version) {\n      var node = {}; // The first three data sizes depends on version.\n\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      var propertyList = [];\n\n      for (var i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    },\n    parseSubNode: function parseSubNode(name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        } // this will be copied to parent, see above\n\n\n        node[innerPropName] = {\n          type: innerPropType1,\n          type2: innerPropType2,\n          flag: innerPropFlag,\n          value: innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    },\n    parseProperty: function parseProperty(reader) {\n      var type = reader.getString(1);\n\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n\n        case 'D':\n          return reader.getFloat64();\n\n        case 'F':\n          return reader.getFloat32();\n\n        case 'I':\n          return reader.getInt32();\n\n        case 'L':\n          return reader.getInt64();\n\n        case 'R':\n          var length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n\n        case 'S':\n          var length = reader.getUint32();\n          return reader.getString(length);\n\n        case 'Y':\n          return reader.getInt16();\n\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          var compressedLength = reader.getUint32();\n\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n\n          var data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          var reader2 = new BinaryReader(data.buffer);\n\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  };\n\n  function BinaryReader(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  BinaryReader.prototype = {\n    constructor: BinaryReader,\n    getOffset: function getOffset() {\n      return this.offset;\n    },\n    size: function size() {\n      return this.dv.buffer.byteLength;\n    },\n    skip: function skip(length) {\n      this.offset += length;\n    },\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n    getBoolean: function getBoolean() {\n      return (this.getUint8() & 1) === 1;\n    },\n    getBooleanArray: function getBooleanArray(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n\n      return a;\n    },\n    getUint8: function getUint8() {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    },\n    getInt16: function getInt16() {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    },\n    getInt32: function getInt32() {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getInt32Array: function getInt32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n\n      return a;\n    },\n    getUint32: function getUint32() {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n    getInt64: function getInt64() {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n\n      if (high & 0x80000000) {\n        high = ~high & 0xffffffff;\n        low = ~low & 0xffffffff;\n        if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n        low = low + 1 & 0xffffffff;\n        return -(high * 0x100000000 + low);\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getInt64Array: function getInt64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n\n      return a;\n    },\n    // Note: see getInt64() comment\n    getUint64: function getUint64() {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getFloat32: function getFloat32() {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getFloat32Array: function getFloat32Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n\n      return a;\n    },\n    getFloat64: function getFloat64() {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    },\n    getFloat64Array: function getFloat64Array(size) {\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n\n      return a;\n    },\n    getArrayBuffer: function getArrayBuffer(size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    },\n    getString: function getString(size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n\n      for (var i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }; // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n  // and BinaryParser( FBX Binary format)\n\n  function FBXTree() {}\n\n  FBXTree.prototype = {\n    constructor: FBXTree,\n    add: function add(key, val) {\n      this[key] = val;\n    }\n  }; // ************** UTILITY FUNCTIONS **************\n\n  function isFbxFormatBinary(buffer) {\n    var CORRECT = 'Kaydara FBX Binary  \\0';\n    return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n  }\n\n  function isFbxFormatASCII(text) {\n    var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n    var cursor = 0;\n\n    function read(offset) {\n      var result = text[offset - 1];\n      text = text.slice(cursor + offset);\n      cursor++;\n      return result;\n    }\n\n    for (var i = 0; i < CORRECT.length; ++i) {\n      var num = read(1);\n\n      if (num === CORRECT[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function getFbxVersion(text) {\n    var versionRegExp = /FBXVersion: (\\d+)/;\n    var match = text.match(versionRegExp);\n\n    if (match) {\n      var version = parseInt(match[1]);\n      return version;\n    }\n\n    throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n  } // Converts FBX ticks into real time seconds.\n\n\n  function convertFBXTimeToSeconds(time) {\n    return time / 46186158000;\n  }\n\n  var dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\n  function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n    var index;\n\n    switch (infoObject.mappingType) {\n      case 'ByPolygonVertex':\n        index = polygonVertexIndex;\n        break;\n\n      case 'ByPolygon':\n        index = polygonIndex;\n        break;\n\n      case 'ByVertice':\n        index = vertexIndex;\n        break;\n\n      case 'AllSame':\n        index = infoObject.indices[0];\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n    }\n\n    if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n    var from = index * infoObject.dataSize;\n    var to = from + infoObject.dataSize;\n    return slice(dataArray, infoObject.buffer, from, to);\n  }\n\n  var tempEuler = new Euler();\n  var tempVec = new Vector3(); // generate transformation from FBX transform data\n  // ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n  // ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\n  function generateTransform(transformData) {\n    var lTranslationM = new Matrix4();\n    var lPreRotationM = new Matrix4();\n    var lRotationM = new Matrix4();\n    var lPostRotationM = new Matrix4();\n    var lScalingM = new Matrix4();\n    var lScalingPivotM = new Matrix4();\n    var lScalingOffsetM = new Matrix4();\n    var lRotationOffsetM = new Matrix4();\n    var lRotationPivotM = new Matrix4();\n    var lParentGX = new Matrix4();\n    var lParentLX = new Matrix4();\n    var lGlobalT = new Matrix4();\n    var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n    if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n    if (transformData.preRotation) {\n      var array = transformData.preRotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n\n    if (transformData.rotation) {\n      var array = transformData.rotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n\n    if (transformData.postRotation) {\n      var array = transformData.postRotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n      lPostRotationM.invert();\n    }\n\n    if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n    if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n    if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n    if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n    if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n    if (transformData.parentMatrixWorld) {\n      lParentLX.copy(transformData.parentMatrix);\n      lParentGX.copy(transformData.parentMatrixWorld);\n    }\n\n    var lLRM = new Matrix4().copy(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n    var lParentGRM = new Matrix4();\n    lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n    var lParentTM = new Matrix4();\n    lParentTM.copyPosition(lParentGX);\n    var lParentGSM = new Matrix4();\n    var lParentGRSM = new Matrix4().copy(lParentTM).invert().multiply(lParentGX);\n    lParentGSM.copy(lParentGRM).invert().multiply(lParentGRSM);\n    var lLSM = lScalingM;\n    var lGlobalRS = new Matrix4();\n\n    if (inheritType === 0) {\n      lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n    } else if (inheritType === 1) {\n      lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n    } else {\n      var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n      var lParentLSM_inv = new Matrix4().copy(lParentLSM).invert();\n      var lParentGSM_noLocal = new Matrix4().copy(lParentGSM).multiply(lParentLSM_inv);\n      lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n    }\n\n    var lRotationPivotM_inv = new Matrix4();\n    lRotationPivotM_inv.copy(lRotationPivotM).invert();\n    var lScalingPivotM_inv = new Matrix4();\n    lScalingPivotM_inv.copy(lScalingPivotM).invert(); // Calculate the local transform matrix\n\n    var lTransform = new Matrix4();\n    lTransform.copy(lTranslationM).multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n    var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n    var lGlobalTranslation = new Matrix4().copy(lParentGX).multiply(lLocalTWithAllPivotAndOffsetInfo);\n    lGlobalT.copyPosition(lGlobalTranslation);\n    lTransform = new Matrix4().copy(lGlobalT).multiply(lGlobalRS); // from global to local\n\n    lTransform.premultiply(lParentGX.invert());\n    return lTransform;\n  } // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n  // ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\n  function getEulerOrder(order) {\n    order = order || 0;\n    var enums = ['ZYX', // -> XYZ extrinsic\n    'YZX', // -> XZY extrinsic\n    'XZY', // -> YZX extrinsic\n    'ZXY', // -> YXZ extrinsic\n    'YXZ', // -> ZXY extrinsic\n    'XYZ' // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n    ];\n\n    if (order === 6) {\n      console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n      return enums[0];\n    }\n\n    return enums[order];\n  } // Parses comma separated list of numbers and returns them an array.\n  // Used internally by the TextParser\n\n\n  function parseNumberArray(value) {\n    var array = value.split(',').map(function (val) {\n      return parseFloat(val);\n    });\n    return array;\n  }\n\n  function convertArrayBufferToString(buffer, from, to) {\n    if (from === undefined) from = 0;\n    if (to === undefined) to = buffer.byteLength;\n    return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n  }\n\n  function append(a, b) {\n    for (var i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n      a[j] = b[i];\n    }\n  }\n\n  function slice(a, b, from, to) {\n    for (var i = from, j = 0; i < to; i++, j++) {\n      a[j] = b[i];\n    }\n\n    return a;\n  } // inject array a2 into array a1 at index\n\n\n  function inject(a1, index, a2) {\n    return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n  }\n\n  return FBXLoader;\n}();\n\nexport { FBXLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/FBXLoader.js"],"names":["Loader","LoaderUtils","FileLoader","TextureLoader","RepeatWrapping","ClampToEdgeWrapping","Texture","MeshPhongMaterial","MeshLambertMaterial","Color","sRGBEncoding","EquirectangularReflectionMapping","Matrix4","Group","Bone","PropertyBinding","Object3D","OrthographicCamera","PerspectiveCamera","PointLight","MathUtils","SpotLight","DirectionalLight","SkinnedMesh","Mesh","LineBasicMaterial","Line","Vector3","Skeleton","AmbientLight","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","Matrix3","Vector4","BufferAttribute","AnimationClip","Quaternion","Euler","VectorKeyframeTrack","QuaternionKeyframeTrack","NumberKeyframeTrack","unzlibSync","NURBSCurve","FBXLoader","fbxTree","connections","sceneGraph","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","FBXBuffer","isFbxFormatBinary","BinaryParser","FBXText","convertArrayBufferToString","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","rawConnections","Connections","forEach","rawConnection","fromID","toID","relationship","has","set","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","id","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","byteLength","base64Content","image","parseImage","filename","undefined","split","pop","content","fileName","extension","slice","lastIndexOf","toLowerCase","type","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","value","valueV","wrapS","wrapT","values","Scaling","repeat","x","y","currentPath","length","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","displacementMap","emissiveMap","normalMap","envMap","mapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","TransformLink","a","Indexes","Weights","bones","rawMorphTargets","i","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","parentConnections","connection","parent","add","bindSkeleton","createAmbientLight","setupMorphMaterials","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","sanitizeNodeName","getTransformData","bone","subBone","copy","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","decay","angle","Math","PI","InnerAngle","degToRad","penumbra","OuterAngle","max","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","skinning","normalizeSkinWeights","reduce","geo","linewidth","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","geoRelationships","geoConnParent","bind","BindPoseNode","Pose","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","r","g","b","isMesh","morphAttributes","setupMorphMaterial","index","uuid","matUuid","sharedMat","mat","clonedMat","clone","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","setAttribute","colors","weightsIndices","vertexWeights","normal","normalMatrix","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","j","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","morphTargetsRelative","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","degree","knots","KnotVector","controlPoints","pointsValues","Points","l","startKnot","endKnot","Form","curve","vertices","getPoints","positions","toArray","animationClips","rawClips","parseClips","key","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","z","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","decompose","setFromQuaternion","T","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","val","morphNum","getObjectByName","morphTargetDictionary","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","timeSpan","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","text","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","parentName","parseNodeSpecialProperty","connProps","from","to","rest","elem","append","parseNumberArray","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","reader2","littleEndian","dv","DataView","offset","low","high","nullByte","decodeText","CORRECT","cursor","read","result","num","versionRegExp","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGSM","lParentGRSM","lLSM","lGlobalRS","lParentLSM","setFromMatrixScale","lParentLSM_inv","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"mappings":"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","sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, RepeatWrapping, ClampToEdgeWrapping, Texture, MeshPhongMaterial, MeshLambertMaterial, Color, sRGBEncoding, EquirectangularReflectionMapping, Matrix4, Group, Bone, PropertyBinding, Object3D, OrthographicCamera, PerspectiveCamera, PointLight, MathUtils, SpotLight, DirectionalLight, SkinnedMesh, Mesh, LineBasicMaterial, Line, Vector3, Skeleton, AmbientLight, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, Matrix3, Vector4, BufferAttribute, AnimationClip, Quaternion, Euler, VectorKeyframeTrack, QuaternionKeyframeTrack, NumberKeyframeTrack } from 'three';\nimport { unzlibSync } from 'fflate';\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\n\n/**\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\nvar FBXLoader = function () {\n  var fbxTree;\n  var connections;\n  var sceneGraph;\n\n  function FBXLoader(manager) {\n    Loader.call(this, manager);\n  }\n\n  FBXLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n    constructor: FBXLoader,\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    },\n    parse: function (FBXBuffer, path) {\n      if (isFbxFormatBinary(FBXBuffer)) {\n        fbxTree = new BinaryParser().parse(FBXBuffer);\n      } else {\n        var FBXText = convertArrayBufferToString(FBXBuffer);\n\n        if (!isFbxFormatASCII(FBXText)) {\n          throw new Error('THREE.FBXLoader: Unknown format.');\n        }\n\n        if (getFbxVersion(FBXText) < 7000) {\n          throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion(FBXText));\n        }\n\n        fbxTree = new TextParser().parse(FBXText);\n      } // console.log( fbxTree );\n\n\n      var textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n      return new FBXTreeParser(textureLoader, this.manager).parse(fbxTree);\n    }\n  }); // Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\n\n  function FBXTreeParser(textureLoader, manager) {\n    this.textureLoader = textureLoader;\n    this.manager = manager;\n  }\n\n  FBXTreeParser.prototype = {\n    constructor: FBXTreeParser,\n    parse: function () {\n      connections = this.parseConnections();\n      var images = this.parseImages();\n      var textures = this.parseTextures(images);\n      var materials = this.parseMaterials(textures);\n      var deformers = this.parseDeformers();\n      var geometryMap = new GeometryParser().parse(deformers);\n      this.parseScene(deformers, geometryMap, materials);\n      return sceneGraph;\n    },\n    // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n    // and details the connection type\n    parseConnections: function () {\n      var connectionMap = new Map();\n\n      if ('Connections' in fbxTree) {\n        var rawConnections = fbxTree.Connections.connections;\n        rawConnections.forEach(function (rawConnection) {\n          var fromID = rawConnection[0];\n          var toID = rawConnection[1];\n          var relationship = rawConnection[2];\n\n          if (!connectionMap.has(fromID)) {\n            connectionMap.set(fromID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var parentRelationship = {\n            ID: toID,\n            relationship: relationship\n          };\n          connectionMap.get(fromID).parents.push(parentRelationship);\n\n          if (!connectionMap.has(toID)) {\n            connectionMap.set(toID, {\n              parents: [],\n              children: []\n            });\n          }\n\n          var childRelationship = {\n            ID: fromID,\n            relationship: relationship\n          };\n          connectionMap.get(toID).children.push(childRelationship);\n        });\n      }\n\n      return connectionMap;\n    },\n    // Parse FBXTree.Objects.Video for embedded image data\n    // These images are connected to textures in FBXTree.Objects.Textures\n    // via FBXTree.Connections.\n    parseImages: function () {\n      var images = {};\n      var blobs = {};\n\n      if ('Video' in fbxTree.Objects) {\n        var videoNodes = fbxTree.Objects.Video;\n\n        for (let nodeID in videoNodes) {\n          var videoNode = videoNodes[nodeID];\n          var id = parseInt(nodeID);\n          images[id] = videoNode.RelativeFilename || videoNode.Filename; // raw image data is in videoNode.Content\n\n          if ('Content' in videoNode) {\n            var arrayBufferContent = videoNode.Content instanceof ArrayBuffer && videoNode.Content.byteLength > 0;\n            var base64Content = typeof videoNode.Content === 'string' && videoNode.Content !== '';\n\n            if (arrayBufferContent || base64Content) {\n              var image = this.parseImage(videoNodes[nodeID]);\n              blobs[videoNode.RelativeFilename || videoNode.Filename] = image;\n            }\n          }\n        }\n      }\n\n      for (let id in images) {\n        var filename = images[id];\n        if (blobs[filename] !== undefined) images[id] = blobs[filename];else images[id] = images[id].split('\\\\').pop();\n      }\n\n      return images;\n    },\n    // Parse embedded image data in FBXTree.Video.Content\n    parseImage: function (videoNode) {\n      var content = videoNode.Content;\n      var fileName = videoNode.RelativeFilename || videoNode.Filename;\n      var extension = fileName.slice(fileName.lastIndexOf('.') + 1).toLowerCase();\n      var type;\n\n      switch (extension) {\n        case 'bmp':\n          type = 'image/bmp';\n          break;\n\n        case 'jpg':\n        case 'jpeg':\n          type = 'image/jpeg';\n          break;\n\n        case 'png':\n          type = 'image/png';\n          break;\n\n        case 'tif':\n          type = 'image/tiff';\n          break;\n\n        case 'tga':\n          if (this.manager.getHandler('.tga') === null) {\n            console.warn('FBXLoader: TGA loader not found, skipping ', fileName);\n          }\n\n          type = 'image/tga';\n          break;\n\n        default:\n          console.warn('FBXLoader: Image type \"' + extension + '\" is not supported.');\n          return;\n      }\n\n      if (typeof content === 'string') {\n        // ASCII format\n        return 'data:' + type + ';base64,' + content;\n      } else {\n        // Binary Format\n        var array = new Uint8Array(content);\n        return window.URL.createObjectURL(new Blob([array], {\n          type: type\n        }));\n      }\n    },\n    // Parse nodes in FBXTree.Objects.Texture\n    // These contain details such as UV scaling, cropping, rotation etc and are connected\n    // to images in FBXTree.Objects.Video\n    parseTextures: function (images) {\n      var textureMap = new Map();\n\n      if ('Texture' in fbxTree.Objects) {\n        var textureNodes = fbxTree.Objects.Texture;\n\n        for (let nodeID in textureNodes) {\n          var texture = this.parseTexture(textureNodes[nodeID], images);\n          textureMap.set(parseInt(nodeID), texture);\n        }\n      }\n\n      return textureMap;\n    },\n    // Parse individual node in FBXTree.Objects.Texture\n    parseTexture: function (textureNode, images) {\n      var texture = this.loadTexture(textureNode, images);\n      texture.ID = textureNode.id;\n      texture.name = textureNode.attrName;\n      var wrapModeU = textureNode.WrapModeU;\n      var wrapModeV = textureNode.WrapModeV;\n      var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n      var valueV = wrapModeV !== undefined ? wrapModeV.value : 0; // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n      // 0: repeat(default), 1: clamp\n\n      texture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n      texture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\n\n      if ('Scaling' in textureNode) {\n        var values = textureNode.Scaling.value;\n        texture.repeat.x = values[0];\n        texture.repeat.y = values[1];\n      }\n\n      return texture;\n    },\n    // load a texture specified as a blob or data URI, or via an external URL using TextureLoader\n    loadTexture: function (textureNode, images) {\n      var fileName;\n      var currentPath = this.textureLoader.path;\n      var children = connections.get(textureNode.id).children;\n\n      if (children !== undefined && children.length > 0 && images[children[0].ID] !== undefined) {\n        fileName = images[children[0].ID];\n\n        if (fileName.indexOf('blob:') === 0 || fileName.indexOf('data:') === 0) {\n          this.textureLoader.setPath(undefined);\n        }\n      }\n\n      var texture;\n      var extension = textureNode.FileName.slice(-3).toLowerCase();\n\n      if (extension === 'tga') {\n        var loader = this.manager.getHandler('.tga');\n\n        if (loader === null) {\n          console.warn('FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename);\n          texture = new Texture();\n        } else {\n          texture = loader.load(fileName);\n        }\n      } else if (extension === 'psd') {\n        console.warn('FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename);\n        texture = new Texture();\n      } else {\n        texture = this.textureLoader.load(fileName);\n      }\n\n      this.textureLoader.setPath(currentPath);\n      return texture;\n    },\n    // Parse nodes in FBXTree.Objects.Material\n    parseMaterials: function (textureMap) {\n      var materialMap = new Map();\n\n      if ('Material' in fbxTree.Objects) {\n        var materialNodes = fbxTree.Objects.Material;\n\n        for (let nodeID in materialNodes) {\n          var material = this.parseMaterial(materialNodes[nodeID], textureMap);\n          if (material !== null) materialMap.set(parseInt(nodeID), material);\n        }\n      }\n\n      return materialMap;\n    },\n    // Parse single node in FBXTree.Objects.Material\n    // Materials are connected to texture maps in FBXTree.Objects.Textures\n    // FBX format currently only supports Lambert and Phong shading models\n    parseMaterial: function (materialNode, textureMap) {\n      var ID = materialNode.id;\n      var name = materialNode.attrName;\n      var type = materialNode.ShadingModel; // Case where FBX wraps shading model in property object.\n\n      if (typeof type === 'object') {\n        type = type.value;\n      } // Ignore unused materials which don't have any connections.\n\n\n      if (!connections.has(ID)) return null;\n      var parameters = this.parseParameters(materialNode, textureMap, ID);\n      var material;\n\n      switch (type.toLowerCase()) {\n        case 'phong':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          console.warn('THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type);\n          material = new MeshPhongMaterial();\n          break;\n      }\n\n      material.setValues(parameters);\n      material.name = name;\n      return material;\n    },\n    // Parse FBX material and return parameters suitable for a three.js material\n    // Also parse the texture map and return any textures associated with the material\n    parseParameters: function (materialNode, textureMap, ID) {\n      var parameters = {};\n\n      if (materialNode.BumpFactor) {\n        parameters.bumpScale = materialNode.BumpFactor.value;\n      }\n\n      if (materialNode.Diffuse) {\n        parameters.color = new Color().fromArray(materialNode.Diffuse.value);\n      } else if (materialNode.DiffuseColor && (materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB')) {\n        // The blender exporter exports diffuse here instead of in materialNode.Diffuse\n        parameters.color = new Color().fromArray(materialNode.DiffuseColor.value);\n      }\n\n      if (materialNode.DisplacementFactor) {\n        parameters.displacementScale = materialNode.DisplacementFactor.value;\n      }\n\n      if (materialNode.Emissive) {\n        parameters.emissive = new Color().fromArray(materialNode.Emissive.value);\n      } else if (materialNode.EmissiveColor && (materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB')) {\n        // The blender exporter exports emissive color here instead of in materialNode.Emissive\n        parameters.emissive = new Color().fromArray(materialNode.EmissiveColor.value);\n      }\n\n      if (materialNode.EmissiveFactor) {\n        parameters.emissiveIntensity = parseFloat(materialNode.EmissiveFactor.value);\n      }\n\n      if (materialNode.Opacity) {\n        parameters.opacity = parseFloat(materialNode.Opacity.value);\n      }\n\n      if (parameters.opacity < 1.0) {\n        parameters.transparent = true;\n      }\n\n      if (materialNode.ReflectionFactor) {\n        parameters.reflectivity = materialNode.ReflectionFactor.value;\n      }\n\n      if (materialNode.Shininess) {\n        parameters.shininess = materialNode.Shininess.value;\n      }\n\n      if (materialNode.Specular) {\n        parameters.specular = new Color().fromArray(materialNode.Specular.value);\n      } else if (materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color') {\n        // The blender exporter exports specular color here instead of in materialNode.Specular\n        parameters.specular = new Color().fromArray(materialNode.SpecularColor.value);\n      }\n\n      var scope = this;\n      connections.get(ID).children.forEach(function (child) {\n        var type = child.relationship;\n\n        switch (type) {\n          case 'Bump':\n            parameters.bumpMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'Maya|TEX_ao_map':\n            parameters.aoMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'DiffuseColor':\n          case 'Maya|TEX_color_map':\n            parameters.map = scope.getTexture(textureMap, child.ID);\n            parameters.map.encoding = sRGBEncoding;\n            break;\n\n          case 'DisplacementColor':\n            parameters.displacementMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'EmissiveColor':\n            parameters.emissiveMap = scope.getTexture(textureMap, child.ID);\n            parameters.emissiveMap.encoding = sRGBEncoding;\n            break;\n\n          case 'NormalMap':\n          case 'Maya|TEX_normal_map':\n            parameters.normalMap = scope.getTexture(textureMap, child.ID);\n            break;\n\n          case 'ReflectionColor':\n            parameters.envMap = scope.getTexture(textureMap, child.ID);\n            parameters.envMap.mapping = EquirectangularReflectionMapping;\n            parameters.envMap.encoding = sRGBEncoding;\n            break;\n\n          case 'SpecularColor':\n            parameters.specularMap = scope.getTexture(textureMap, child.ID);\n            parameters.specularMap.encoding = sRGBEncoding;\n            break;\n\n          case 'TransparentColor':\n          case 'TransparencyFactor':\n            parameters.alphaMap = scope.getTexture(textureMap, child.ID);\n            parameters.transparent = true;\n            break;\n\n          case 'AmbientColor':\n          case 'ShininessExponent': // AKA glossiness map\n\n          case 'SpecularFactor': // AKA specularLevel\n\n          case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\n          default:\n            console.warn('THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type);\n            break;\n        }\n      });\n      return parameters;\n    },\n    // get a texture from the textureMap for use by a material.\n    getTexture: function (textureMap, id) {\n      // if the texture is a layered texture, just use the first layer and issue a warning\n      if ('LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture) {\n        console.warn('THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.');\n        id = connections.get(id).children[0].ID;\n      }\n\n      return textureMap.get(id);\n    },\n    // Parse nodes in FBXTree.Objects.Deformer\n    // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n    // Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n    parseDeformers: function () {\n      var skeletons = {};\n      var morphTargets = {};\n\n      if ('Deformer' in fbxTree.Objects) {\n        var DeformerNodes = fbxTree.Objects.Deformer;\n\n        for (let nodeID in DeformerNodes) {\n          var deformerNode = DeformerNodes[nodeID];\n          var relationships = connections.get(parseInt(nodeID));\n\n          if (deformerNode.attrType === 'Skin') {\n            var skeleton = this.parseSkeleton(relationships, DeformerNodes);\n            skeleton.ID = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: skeleton attached to more than one geometry is not supported.');\n            skeleton.geometryID = relationships.parents[0].ID;\n            skeletons[nodeID] = skeleton;\n          } else if (deformerNode.attrType === 'BlendShape') {\n            var morphTarget = {\n              id: nodeID\n            };\n            morphTarget.rawTargets = this.parseMorphTargets(relationships, DeformerNodes);\n            morphTarget.id = nodeID;\n            if (relationships.parents.length > 1) console.warn('THREE.FBXLoader: morph target attached to more than one geometry is not supported.');\n            morphTargets[nodeID] = morphTarget;\n          }\n        }\n      }\n\n      return {\n        skeletons: skeletons,\n        morphTargets: morphTargets\n      };\n    },\n    // Parse single nodes in FBXTree.Objects.Deformer\n    // The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n    // Each skin node represents a skeleton and each cluster node represents a bone\n    parseSkeleton: function (relationships, deformerNodes) {\n      var rawBones = [];\n      relationships.children.forEach(function (child) {\n        var boneNode = deformerNodes[child.ID];\n        if (boneNode.attrType !== 'Cluster') return;\n        var rawBone = {\n          ID: child.ID,\n          indices: [],\n          weights: [],\n          transformLink: new Matrix4().fromArray(boneNode.TransformLink.a) // transform: new Matrix4().fromArray( boneNode.Transform.a ),\n          // linkMode: boneNode.Mode,\n\n        };\n\n        if ('Indexes' in boneNode) {\n          rawBone.indices = boneNode.Indexes.a;\n          rawBone.weights = boneNode.Weights.a;\n        }\n\n        rawBones.push(rawBone);\n      });\n      return {\n        rawBones: rawBones,\n        bones: []\n      };\n    },\n    // The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n    parseMorphTargets: function (relationships, deformerNodes) {\n      var rawMorphTargets = [];\n\n      for (let i = 0; i < relationships.children.length; i++) {\n        var child = relationships.children[i];\n        var morphTargetNode = deformerNodes[child.ID];\n        var rawMorphTarget = {\n          name: morphTargetNode.attrName,\n          initialWeight: morphTargetNode.DeformPercent,\n          id: morphTargetNode.id,\n          fullWeights: morphTargetNode.FullWeights.a\n        };\n        if (morphTargetNode.attrType !== 'BlendShapeChannel') return;\n        rawMorphTarget.geoID = connections.get(parseInt(child.ID)).children.filter(function (child) {\n          return child.relationship === undefined;\n        })[0].ID;\n        rawMorphTargets.push(rawMorphTarget);\n      }\n\n      return rawMorphTargets;\n    },\n    // create the main Group() to be returned by the loader\n    parseScene: function (deformers, geometryMap, materialMap) {\n      sceneGraph = new Group();\n      var modelMap = this.parseModels(deformers.skeletons, geometryMap, materialMap);\n      var modelNodes = fbxTree.Objects.Model;\n      var scope = this;\n      modelMap.forEach(function (model) {\n        var modelNode = modelNodes[model.ID];\n        scope.setLookAtProperties(model, modelNode);\n        var parentConnections = connections.get(model.ID).parents;\n        parentConnections.forEach(function (connection) {\n          var parent = modelMap.get(connection.ID);\n          if (parent !== undefined) parent.add(model);\n        });\n\n        if (model.parent === null) {\n          sceneGraph.add(model);\n        }\n      });\n      this.bindSkeleton(deformers.skeletons, geometryMap, modelMap);\n      this.createAmbientLight();\n      this.setupMorphMaterials();\n      sceneGraph.traverse(function (node) {\n        if (node.userData.transformData) {\n          if (node.parent) {\n            node.userData.transformData.parentMatrix = node.parent.matrix;\n            node.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\n          }\n\n          var transform = generateTransform(node.userData.transformData);\n          node.applyMatrix4(transform);\n          node.updateWorldMatrix();\n        }\n      });\n      var animations = new AnimationParser().parse(); // if all the models where already combined in a single group, just return that\n\n      if (sceneGraph.children.length === 1 && sceneGraph.children[0].isGroup) {\n        sceneGraph.children[0].animations = animations;\n        sceneGraph = sceneGraph.children[0];\n      }\n\n      sceneGraph.animations = animations;\n    },\n    // parse nodes in FBXTree.Objects.Model\n    parseModels: function (skeletons, geometryMap, materialMap) {\n      var modelMap = new Map();\n      var modelNodes = fbxTree.Objects.Model;\n\n      for (let nodeID in modelNodes) {\n        var id = parseInt(nodeID);\n        var node = modelNodes[nodeID];\n        var relationships = connections.get(id);\n        var model = this.buildSkeleton(relationships, skeletons, id, node.attrName);\n\n        if (!model) {\n          switch (node.attrType) {\n            case 'Camera':\n              model = this.createCamera(relationships);\n              break;\n\n            case 'Light':\n              model = this.createLight(relationships);\n              break;\n\n            case 'Mesh':\n              model = this.createMesh(relationships, geometryMap, materialMap);\n              break;\n\n            case 'NurbsCurve':\n              model = this.createCurve(relationships, geometryMap);\n              break;\n\n            case 'LimbNode':\n            case 'Root':\n              model = new Bone();\n              break;\n\n            case 'Null':\n            default:\n              model = new Group();\n              break;\n          }\n\n          model.name = node.attrName ? PropertyBinding.sanitizeNodeName(node.attrName) : '';\n          model.ID = id;\n        }\n\n        this.getTransformData(model, node);\n        modelMap.set(id, model);\n      }\n\n      return modelMap;\n    },\n    buildSkeleton: function (relationships, skeletons, id, name) {\n      var bone = null;\n      relationships.parents.forEach(function (parent) {\n        for (let ID in skeletons) {\n          var skeleton = skeletons[ID];\n          skeleton.rawBones.forEach(function (rawBone, i) {\n            if (rawBone.ID === parent.ID) {\n              var subBone = bone;\n              bone = new Bone();\n              bone.matrixWorld.copy(rawBone.transformLink); // set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\n              bone.name = name ? PropertyBinding.sanitizeNodeName(name) : '';\n              bone.ID = id;\n              skeleton.bones[i] = bone; // In cases where a bone is shared between multiple meshes\n              // duplicate the bone here and and it as a child of the first bone\n\n              if (subBone !== null) {\n                bone.add(subBone);\n              }\n            }\n          });\n        }\n      });\n      return bone;\n    },\n    // create a PerspectiveCamera or OrthographicCamera\n    createCamera: function (relationships) {\n      var model;\n      var cameraAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          cameraAttribute = attr;\n        }\n      });\n\n      if (cameraAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type = 0;\n\n        if (cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1) {\n          type = 1;\n        }\n\n        var nearClippingPlane = 1;\n\n        if (cameraAttribute.NearPlane !== undefined) {\n          nearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n        }\n\n        var farClippingPlane = 1000;\n\n        if (cameraAttribute.FarPlane !== undefined) {\n          farClippingPlane = cameraAttribute.FarPlane.value / 1000;\n        }\n\n        var width = window.innerWidth;\n        var height = window.innerHeight;\n\n        if (cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined) {\n          width = cameraAttribute.AspectWidth.value;\n          height = cameraAttribute.AspectHeight.value;\n        }\n\n        var aspect = width / height;\n        var fov = 45;\n\n        if (cameraAttribute.FieldOfView !== undefined) {\n          fov = cameraAttribute.FieldOfView.value;\n        }\n\n        var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n        switch (type) {\n          case 0:\n            // Perspective\n            model = new PerspectiveCamera(fov, aspect, nearClippingPlane, farClippingPlane);\n            if (focalLength !== null) model.setFocalLength(focalLength);\n            break;\n\n          case 1:\n            // Orthographic\n            model = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, nearClippingPlane, farClippingPlane);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown camera type ' + type + '.');\n            model = new Object3D();\n            break;\n        }\n      }\n\n      return model;\n    },\n    // Create a DirectionalLight, PointLight or SpotLight\n    createLight: function (relationships) {\n      var model;\n      var lightAttribute;\n      relationships.children.forEach(function (child) {\n        var attr = fbxTree.Objects.NodeAttribute[child.ID];\n\n        if (attr !== undefined) {\n          lightAttribute = attr;\n        }\n      });\n\n      if (lightAttribute === undefined) {\n        model = new Object3D();\n      } else {\n        var type; // LightType can be undefined for Point lights\n\n        if (lightAttribute.LightType === undefined) {\n          type = 0;\n        } else {\n          type = lightAttribute.LightType.value;\n        }\n\n        var color = 0xffffff;\n\n        if (lightAttribute.Color !== undefined) {\n          color = new Color().fromArray(lightAttribute.Color.value);\n        }\n\n        var intensity = lightAttribute.Intensity === undefined ? 1 : lightAttribute.Intensity.value / 100; // light disabled\n\n        if (lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0) {\n          intensity = 0;\n        }\n\n        var distance = 0;\n\n        if (lightAttribute.FarAttenuationEnd !== undefined) {\n          if (lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0) {\n            distance = 0;\n          } else {\n            distance = lightAttribute.FarAttenuationEnd.value;\n          }\n        } // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\n\n        var decay = 1;\n\n        switch (type) {\n          case 0:\n            // Point\n            model = new PointLight(color, intensity, distance, decay);\n            break;\n\n          case 1:\n            // Directional\n            model = new DirectionalLight(color, intensity);\n            break;\n\n          case 2:\n            // Spot\n            var angle = Math.PI / 3;\n\n            if (lightAttribute.InnerAngle !== undefined) {\n              angle = MathUtils.degToRad(lightAttribute.InnerAngle.value);\n            }\n\n            var penumbra = 0;\n\n            if (lightAttribute.OuterAngle !== undefined) {\n              // TODO: this is not correct - FBX calculates outer and inner angle in degrees\n              // with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n              // while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n              penumbra = MathUtils.degToRad(lightAttribute.OuterAngle.value);\n              penumbra = Math.max(penumbra, 1);\n            }\n\n            model = new SpotLight(color, intensity, distance, angle, penumbra, decay);\n            break;\n\n          default:\n            console.warn('THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.');\n            model = new PointLight(color, intensity);\n            break;\n        }\n\n        if (lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1) {\n          model.castShadow = true;\n        }\n      }\n\n      return model;\n    },\n    createMesh: function (relationships, geometryMap, materialMap) {\n      var model;\n      var geometry = null;\n      var material = null;\n      var materials = []; // get geometry and materials(s) from connections\n\n      relationships.children.forEach(function (child) {\n        if (geometryMap.has(child.ID)) {\n          geometry = geometryMap.get(child.ID);\n        }\n\n        if (materialMap.has(child.ID)) {\n          materials.push(materialMap.get(child.ID));\n        }\n      });\n\n      if (materials.length > 1) {\n        material = materials;\n      } else if (materials.length > 0) {\n        material = materials[0];\n      } else {\n        material = new MeshPhongMaterial({\n          color: 0xcccccc\n        });\n        materials.push(material);\n      }\n\n      if ('color' in geometry.attributes) {\n        materials.forEach(function (material) {\n          material.vertexColors = true;\n        });\n      }\n\n      if (geometry.FBX_Deformer) {\n        materials.forEach(function (material) {\n          material.skinning = true;\n        });\n        model = new SkinnedMesh(geometry, material);\n        model.normalizeSkinWeights();\n      } else {\n        model = new Mesh(geometry, material);\n      }\n\n      return model;\n    },\n    createCurve: function (relationships, geometryMap) {\n      var geometry = relationships.children.reduce(function (geo, child) {\n        if (geometryMap.has(child.ID)) geo = geometryMap.get(child.ID);\n        return geo;\n      }, null); // FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\n      var material = new LineBasicMaterial({\n        color: 0x3300ff,\n        linewidth: 1\n      });\n      return new Line(geometry, material);\n    },\n    // parse the model node for transform data\n    getTransformData: function (model, modelNode) {\n      var transformData = {};\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);else transformData.eulerOrder = 'ZYX';\n      if ('Lcl_Translation' in modelNode) transformData.translation = modelNode.Lcl_Translation.value;\n      if ('PreRotation' in modelNode) transformData.preRotation = modelNode.PreRotation.value;\n      if ('Lcl_Rotation' in modelNode) transformData.rotation = modelNode.Lcl_Rotation.value;\n      if ('PostRotation' in modelNode) transformData.postRotation = modelNode.PostRotation.value;\n      if ('Lcl_Scaling' in modelNode) transformData.scale = modelNode.Lcl_Scaling.value;\n      if ('ScalingOffset' in modelNode) transformData.scalingOffset = modelNode.ScalingOffset.value;\n      if ('ScalingPivot' in modelNode) transformData.scalingPivot = modelNode.ScalingPivot.value;\n      if ('RotationOffset' in modelNode) transformData.rotationOffset = modelNode.RotationOffset.value;\n      if ('RotationPivot' in modelNode) transformData.rotationPivot = modelNode.RotationPivot.value;\n      model.userData.transformData = transformData;\n    },\n    setLookAtProperties: function (model, modelNode) {\n      if ('LookAtProperty' in modelNode) {\n        var children = connections.get(model.ID).children;\n        children.forEach(function (child) {\n          if (child.relationship === 'LookAtProperty') {\n            var lookAtTarget = fbxTree.Objects.Model[child.ID];\n\n            if ('Lcl_Translation' in lookAtTarget) {\n              var pos = lookAtTarget.Lcl_Translation.value; // DirectionalLight, SpotLight\n\n              if (model.target !== undefined) {\n                model.target.position.fromArray(pos);\n                sceneGraph.add(model.target);\n              } else {\n                // Cameras and other Object3Ds\n                model.lookAt(new Vector3().fromArray(pos));\n              }\n            }\n          }\n        });\n      }\n    },\n    bindSkeleton: function (skeletons, geometryMap, modelMap) {\n      var bindMatrices = this.parsePoseNodes();\n\n      for (let ID in skeletons) {\n        var skeleton = skeletons[ID];\n        var parents = connections.get(parseInt(skeleton.ID)).parents;\n        parents.forEach(function (parent) {\n          if (geometryMap.has(parent.ID)) {\n            var geoID = parent.ID;\n            var geoRelationships = connections.get(geoID);\n            geoRelationships.parents.forEach(function (geoConnParent) {\n              if (modelMap.has(geoConnParent.ID)) {\n                var model = modelMap.get(geoConnParent.ID);\n                model.bind(new Skeleton(skeleton.bones), bindMatrices[geoConnParent.ID]);\n              }\n            });\n          }\n        });\n      }\n    },\n    parsePoseNodes: function () {\n      var bindMatrices = {};\n\n      if ('Pose' in fbxTree.Objects) {\n        var BindPoseNode = fbxTree.Objects.Pose;\n\n        for (let nodeID in BindPoseNode) {\n          if (BindPoseNode[nodeID].attrType === 'BindPose') {\n            var poseNodes = BindPoseNode[nodeID].PoseNode;\n\n            if (Array.isArray(poseNodes)) {\n              poseNodes.forEach(function (poseNode) {\n                bindMatrices[poseNode.Node] = new Matrix4().fromArray(poseNode.Matrix.a);\n              });\n            } else {\n              bindMatrices[poseNodes.Node] = new Matrix4().fromArray(poseNodes.Matrix.a);\n            }\n          }\n        }\n      }\n\n      return bindMatrices;\n    },\n    // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n    createAmbientLight: function () {\n      if ('GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings) {\n        var ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n        var r = ambientColor[0];\n        var g = ambientColor[1];\n        var b = ambientColor[2];\n\n        if (r !== 0 || g !== 0 || b !== 0) {\n          var color = new Color(r, g, b);\n          sceneGraph.add(new AmbientLight(color, 1));\n        }\n      }\n    },\n    setupMorphMaterials: function () {\n      var scope = this;\n      sceneGraph.traverse(function (child) {\n        if (child.isMesh) {\n          if (child.geometry.morphAttributes.position && child.geometry.morphAttributes.position.length) {\n            if (Array.isArray(child.material)) {\n              child.material.forEach(function (material, i) {\n                scope.setupMorphMaterial(child, material, i);\n              });\n            } else {\n              scope.setupMorphMaterial(child, child.material);\n            }\n          }\n        }\n      });\n    },\n    setupMorphMaterial: function (child, material, index) {\n      var uuid = child.uuid;\n      var matUuid = material.uuid; // if a geometry has morph targets, it cannot share the material with other geometries\n\n      var sharedMat = false;\n      sceneGraph.traverse(function (node) {\n        if (node.isMesh) {\n          if (Array.isArray(node.material)) {\n            node.material.forEach(function (mat) {\n              if (mat.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n            });\n          } else if (node.material.uuid === matUuid && node.uuid !== uuid) sharedMat = true;\n        }\n      });\n\n      if (sharedMat === true) {\n        var clonedMat = material.clone();\n        clonedMat.morphTargets = true;\n        if (index === undefined) child.material = clonedMat;else child.material[index] = clonedMat;\n      } else material.morphTargets = true;\n    }\n  }; // parse Geometry data from FBXTree and return map of BufferGeometries\n\n  function GeometryParser() {}\n\n  GeometryParser.prototype = {\n    constructor: GeometryParser,\n    // Parse nodes in FBXTree.Objects.Geometry\n    parse: function (deformers) {\n      var geometryMap = new Map();\n\n      if ('Geometry' in fbxTree.Objects) {\n        var geoNodes = fbxTree.Objects.Geometry;\n\n        for (let nodeID in geoNodes) {\n          var relationships = connections.get(parseInt(nodeID));\n          var geo = this.parseGeometry(relationships, geoNodes[nodeID], deformers);\n          geometryMap.set(parseInt(nodeID), geo);\n        }\n      }\n\n      return geometryMap;\n    },\n    // Parse single node in FBXTree.Objects.Geometry\n    parseGeometry: function (relationships, geoNode, deformers) {\n      switch (geoNode.attrType) {\n        case 'Mesh':\n          return this.parseMeshGeometry(relationships, geoNode, deformers);\n\n        case 'NurbsCurve':\n          return this.parseNurbsGeometry(geoNode);\n      }\n    },\n    // Parse single node mesh geometry in FBXTree.Objects.Geometry\n    parseMeshGeometry: function (relationships, geoNode, deformers) {\n      var skeletons = deformers.skeletons;\n      var morphTargets = [];\n      var modelNodes = relationships.parents.map(function (parent) {\n        return fbxTree.Objects.Model[parent.ID];\n      }); // don't create geometry if it is not associated with any models\n\n      if (modelNodes.length === 0) return;\n      var skeleton = relationships.children.reduce(function (skeleton, child) {\n        if (skeletons[child.ID] !== undefined) skeleton = skeletons[child.ID];\n        return skeleton;\n      }, null);\n      relationships.children.forEach(function (child) {\n        if (deformers.morphTargets[child.ID] !== undefined) {\n          morphTargets.push(deformers.morphTargets[child.ID]);\n        }\n      }); // Assume one model and get the preRotation from that\n      // if there is more than one model associated with the geometry this may cause problems\n\n      var modelNode = modelNodes[0];\n      var transformData = {};\n      if ('RotationOrder' in modelNode) transformData.eulerOrder = getEulerOrder(modelNode.RotationOrder.value);\n      if ('InheritType' in modelNode) transformData.inheritType = parseInt(modelNode.InheritType.value);\n      if ('GeometricTranslation' in modelNode) transformData.translation = modelNode.GeometricTranslation.value;\n      if ('GeometricRotation' in modelNode) transformData.rotation = modelNode.GeometricRotation.value;\n      if ('GeometricScaling' in modelNode) transformData.scale = modelNode.GeometricScaling.value;\n      var transform = generateTransform(transformData);\n      return this.genGeometry(geoNode, skeleton, morphTargets, transform);\n    },\n    // Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\n    genGeometry: function (geoNode, skeleton, morphTargets, preTransform) {\n      var geo = new BufferGeometry();\n      if (geoNode.attrName) geo.name = geoNode.attrName;\n      var geoInfo = this.parseGeoNode(geoNode, skeleton);\n      var buffers = this.genBuffers(geoInfo);\n      var positionAttribute = new Float32BufferAttribute(buffers.vertex, 3);\n      positionAttribute.applyMatrix4(preTransform);\n      geo.setAttribute('position', positionAttribute);\n\n      if (buffers.colors.length > 0) {\n        geo.setAttribute('color', new Float32BufferAttribute(buffers.colors, 3));\n      }\n\n      if (skeleton) {\n        geo.setAttribute('skinIndex', new Uint16BufferAttribute(buffers.weightsIndices, 4));\n        geo.setAttribute('skinWeight', new Float32BufferAttribute(buffers.vertexWeights, 4)); // used later to bind the skeleton to the model\n\n        geo.FBX_Deformer = skeleton;\n      }\n\n      if (buffers.normal.length > 0) {\n        var normalMatrix = new Matrix3().getNormalMatrix(preTransform);\n        var normalAttribute = new Float32BufferAttribute(buffers.normal, 3);\n        normalAttribute.applyNormalMatrix(normalMatrix);\n        geo.setAttribute('normal', normalAttribute);\n      }\n\n      buffers.uvs.forEach(function (uvBuffer, i) {\n        // subsequent uv buffers are called 'uv1', 'uv2', ...\n        var name = 'uv' + (i + 1).toString(); // the first uv buffer is just called 'uv'\n\n        if (i === 0) {\n          name = 'uv';\n        }\n\n        geo.setAttribute(name, new Float32BufferAttribute(buffers.uvs[i], 2));\n      });\n\n      if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n        // Convert the material indices of each vertex into rendering groups on the geometry.\n        var prevMaterialIndex = buffers.materialIndex[0];\n        var startIndex = 0;\n        buffers.materialIndex.forEach(function (currentIndex, i) {\n          if (currentIndex !== prevMaterialIndex) {\n            geo.addGroup(startIndex, i - startIndex, prevMaterialIndex);\n            prevMaterialIndex = currentIndex;\n            startIndex = i;\n          }\n        }); // the loop above doesn't add the last group, do that here.\n\n        if (geo.groups.length > 0) {\n          var lastGroup = geo.groups[geo.groups.length - 1];\n          var lastIndex = lastGroup.start + lastGroup.count;\n\n          if (lastIndex !== buffers.materialIndex.length) {\n            geo.addGroup(lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex);\n          }\n        } // case where there are multiple materials but the whole geometry is only\n        // using one of them\n\n\n        if (geo.groups.length === 0) {\n          geo.addGroup(0, buffers.materialIndex.length, buffers.materialIndex[0]);\n        }\n      }\n\n      this.addMorphTargets(geo, geoNode, morphTargets, preTransform);\n      return geo;\n    },\n    parseGeoNode: function (geoNode, skeleton) {\n      var geoInfo = {};\n      geoInfo.vertexPositions = geoNode.Vertices !== undefined ? geoNode.Vertices.a : [];\n      geoInfo.vertexIndices = geoNode.PolygonVertexIndex !== undefined ? geoNode.PolygonVertexIndex.a : [];\n\n      if (geoNode.LayerElementColor) {\n        geoInfo.color = this.parseVertexColors(geoNode.LayerElementColor[0]);\n      }\n\n      if (geoNode.LayerElementMaterial) {\n        geoInfo.material = this.parseMaterialIndices(geoNode.LayerElementMaterial[0]);\n      }\n\n      if (geoNode.LayerElementNormal) {\n        geoInfo.normal = this.parseNormals(geoNode.LayerElementNormal[0]);\n      }\n\n      if (geoNode.LayerElementUV) {\n        geoInfo.uv = [];\n        var i = 0;\n\n        while (geoNode.LayerElementUV[i]) {\n          if (geoNode.LayerElementUV[i].UV) {\n            geoInfo.uv.push(this.parseUVs(geoNode.LayerElementUV[i]));\n          }\n\n          i++;\n        }\n      }\n\n      geoInfo.weightTable = {};\n\n      if (skeleton !== null) {\n        geoInfo.skeleton = skeleton;\n        skeleton.rawBones.forEach(function (rawBone, i) {\n          // loop over the bone's vertex indices and weights\n          rawBone.indices.forEach(function (index, j) {\n            if (geoInfo.weightTable[index] === undefined) geoInfo.weightTable[index] = [];\n            geoInfo.weightTable[index].push({\n              id: i,\n              weight: rawBone.weights[j]\n            });\n          });\n        });\n      }\n\n      return geoInfo;\n    },\n    genBuffers: function (geoInfo) {\n      var buffers = {\n        vertex: [],\n        normal: [],\n        colors: [],\n        uvs: [],\n        materialIndex: [],\n        vertexWeights: [],\n        weightsIndices: []\n      };\n      var polygonIndex = 0;\n      var faceLength = 0;\n      var displayedWeightsWarning = false; // these will hold data for a single face\n\n      var facePositionIndexes = [];\n      var faceNormals = [];\n      var faceColors = [];\n      var faceUVs = [];\n      var faceWeights = [];\n      var faceWeightIndices = [];\n      var scope = this;\n      geoInfo.vertexIndices.forEach(function (vertexIndex, polygonVertexIndex) {\n        var endOfFace = false; // Face index and vertex index arrays are combined in a single array\n        // A cube with quad faces looks like this:\n        // PolygonVertexIndex: *24 {\n        //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n        //  }\n        // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n        // to find index of last vertex bit shift the index: ^ - 1\n\n        if (vertexIndex < 0) {\n          vertexIndex = vertexIndex ^ -1; // equivalent to ( x * -1 ) - 1\n\n          endOfFace = true;\n        }\n\n        var weightIndices = [];\n        var weights = [];\n        facePositionIndexes.push(vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2);\n\n        if (geoInfo.color) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color);\n          faceColors.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.skeleton) {\n          if (geoInfo.weightTable[vertexIndex] !== undefined) {\n            geoInfo.weightTable[vertexIndex].forEach(function (wt) {\n              weights.push(wt.weight);\n              weightIndices.push(wt.id);\n            });\n          }\n\n          if (weights.length > 4) {\n            if (!displayedWeightsWarning) {\n              console.warn('THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.');\n              displayedWeightsWarning = true;\n            }\n\n            var wIndex = [0, 0, 0, 0];\n            var Weight = [0, 0, 0, 0];\n            weights.forEach(function (weight, weightIndex) {\n              var currentWeight = weight;\n              var currentIndex = weightIndices[weightIndex];\n              Weight.forEach(function (comparedWeight, comparedWeightIndex, comparedWeightArray) {\n                if (currentWeight > comparedWeight) {\n                  comparedWeightArray[comparedWeightIndex] = currentWeight;\n                  currentWeight = comparedWeight;\n                  var tmp = wIndex[comparedWeightIndex];\n                  wIndex[comparedWeightIndex] = currentIndex;\n                  currentIndex = tmp;\n                }\n              });\n            });\n            weightIndices = wIndex;\n            weights = Weight;\n          } // if the weight array is shorter than 4 pad with 0s\n\n\n          while (weights.length < 4) {\n            weights.push(0);\n            weightIndices.push(0);\n          }\n\n          for (let i = 0; i < 4; ++i) {\n            faceWeights.push(weights[i]);\n            faceWeightIndices.push(weightIndices[i]);\n          }\n        }\n\n        if (geoInfo.normal) {\n          var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal);\n          faceNormals.push(data[0], data[1], data[2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          var materialIndex = getData(polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material)[0];\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, i) {\n            var data = getData(polygonVertexIndex, polygonIndex, vertexIndex, uv);\n\n            if (faceUVs[i] === undefined) {\n              faceUVs[i] = [];\n            }\n\n            faceUVs[i].push(data[0]);\n            faceUVs[i].push(data[1]);\n          });\n        }\n\n        faceLength++;\n\n        if (endOfFace) {\n          scope.genFace(buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength);\n          polygonIndex++;\n          faceLength = 0; // reset arrays for the next face\n\n          facePositionIndexes = [];\n          faceNormals = [];\n          faceColors = [];\n          faceUVs = [];\n          faceWeights = [];\n          faceWeightIndices = [];\n        }\n      });\n      return buffers;\n    },\n    // Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n    genFace: function (buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength) {\n      for (let i = 2; i < faceLength; i++) {\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[0]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[(i - 1) * 3 + 2]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 1]]);\n        buffers.vertex.push(geoInfo.vertexPositions[facePositionIndexes[i * 3 + 2]]);\n\n        if (geoInfo.skeleton) {\n          buffers.vertexWeights.push(faceWeights[0]);\n          buffers.vertexWeights.push(faceWeights[1]);\n          buffers.vertexWeights.push(faceWeights[2]);\n          buffers.vertexWeights.push(faceWeights[3]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[(i - 1) * 4 + 3]);\n          buffers.vertexWeights.push(faceWeights[i * 4]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 1]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 2]);\n          buffers.vertexWeights.push(faceWeights[i * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[0]);\n          buffers.weightsIndices.push(faceWeightIndices[1]);\n          buffers.weightsIndices.push(faceWeightIndices[2]);\n          buffers.weightsIndices.push(faceWeightIndices[3]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[(i - 1) * 4 + 3]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 1]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 2]);\n          buffers.weightsIndices.push(faceWeightIndices[i * 4 + 3]);\n        }\n\n        if (geoInfo.color) {\n          buffers.colors.push(faceColors[0]);\n          buffers.colors.push(faceColors[1]);\n          buffers.colors.push(faceColors[2]);\n          buffers.colors.push(faceColors[(i - 1) * 3]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 1]);\n          buffers.colors.push(faceColors[(i - 1) * 3 + 2]);\n          buffers.colors.push(faceColors[i * 3]);\n          buffers.colors.push(faceColors[i * 3 + 1]);\n          buffers.colors.push(faceColors[i * 3 + 2]);\n        }\n\n        if (geoInfo.material && geoInfo.material.mappingType !== 'AllSame') {\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n          buffers.materialIndex.push(materialIndex);\n        }\n\n        if (geoInfo.normal) {\n          buffers.normal.push(faceNormals[0]);\n          buffers.normal.push(faceNormals[1]);\n          buffers.normal.push(faceNormals[2]);\n          buffers.normal.push(faceNormals[(i - 1) * 3]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 1]);\n          buffers.normal.push(faceNormals[(i - 1) * 3 + 2]);\n          buffers.normal.push(faceNormals[i * 3]);\n          buffers.normal.push(faceNormals[i * 3 + 1]);\n          buffers.normal.push(faceNormals[i * 3 + 2]);\n        }\n\n        if (geoInfo.uv) {\n          geoInfo.uv.forEach(function (uv, j) {\n            if (buffers.uvs[j] === undefined) buffers.uvs[j] = [];\n            buffers.uvs[j].push(faceUVs[j][0]);\n            buffers.uvs[j].push(faceUVs[j][1]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2]);\n            buffers.uvs[j].push(faceUVs[j][(i - 1) * 2 + 1]);\n            buffers.uvs[j].push(faceUVs[j][i * 2]);\n            buffers.uvs[j].push(faceUVs[j][i * 2 + 1]);\n          });\n        }\n      }\n    },\n    addMorphTargets: function (parentGeo, parentGeoNode, morphTargets, preTransform) {\n      if (morphTargets.length === 0) return;\n      parentGeo.morphTargetsRelative = true;\n      parentGeo.morphAttributes.position = []; // parentGeo.morphAttributes.normal = []; // not implemented\n\n      var scope = this;\n      morphTargets.forEach(function (morphTarget) {\n        morphTarget.rawTargets.forEach(function (rawTarget) {\n          var morphGeoNode = fbxTree.Objects.Geometry[rawTarget.geoID];\n\n          if (morphGeoNode !== undefined) {\n            scope.genMorphGeometry(parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name);\n          }\n        });\n      });\n    },\n    // a morph geometry node is similar to a standard  node, and the node is also contained\n    // in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n    // and a special attribute Index defining which vertices of the original geometry are affected\n    // Normal and position attributes only have data for the vertices that are affected by the morph\n    genMorphGeometry: function (parentGeo, parentGeoNode, morphGeoNode, preTransform, name) {\n      var vertexIndices = parentGeoNode.PolygonVertexIndex !== undefined ? parentGeoNode.PolygonVertexIndex.a : [];\n      var morphPositionsSparse = morphGeoNode.Vertices !== undefined ? morphGeoNode.Vertices.a : [];\n      var indices = morphGeoNode.Indexes !== undefined ? morphGeoNode.Indexes.a : [];\n      var length = parentGeo.attributes.position.count * 3;\n      var morphPositions = new Float32Array(length);\n\n      for (let i = 0; i < indices.length; i++) {\n        var morphIndex = indices[i] * 3;\n        morphPositions[morphIndex] = morphPositionsSparse[i * 3];\n        morphPositions[morphIndex + 1] = morphPositionsSparse[i * 3 + 1];\n        morphPositions[morphIndex + 2] = morphPositionsSparse[i * 3 + 2];\n      } // TODO: add morph normal support\n\n\n      var morphGeoInfo = {\n        vertexIndices: vertexIndices,\n        vertexPositions: morphPositions\n      };\n      var morphBuffers = this.genBuffers(morphGeoInfo);\n      var positionAttribute = new Float32BufferAttribute(morphBuffers.vertex, 3);\n      positionAttribute.name = name || morphGeoNode.attrName;\n      positionAttribute.applyMatrix4(preTransform);\n      parentGeo.morphAttributes.position.push(positionAttribute);\n    },\n    // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n    parseNormals: function (NormalNode) {\n      var mappingType = NormalNode.MappingInformationType;\n      var referenceType = NormalNode.ReferenceInformationType;\n      var buffer = NormalNode.Normals.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        if ('NormalIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalIndex.a;\n        } else if ('NormalsIndex' in NormalNode) {\n          indexBuffer = NormalNode.NormalsIndex.a;\n        }\n      }\n\n      return {\n        dataSize: 3,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n    parseUVs: function (UVNode) {\n      var mappingType = UVNode.MappingInformationType;\n      var referenceType = UVNode.ReferenceInformationType;\n      var buffer = UVNode.UV.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = UVNode.UVIndex.a;\n      }\n\n      return {\n        dataSize: 2,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n    parseVertexColors: function (ColorNode) {\n      var mappingType = ColorNode.MappingInformationType;\n      var referenceType = ColorNode.ReferenceInformationType;\n      var buffer = ColorNode.Colors.a;\n      var indexBuffer = [];\n\n      if (referenceType === 'IndexToDirect') {\n        indexBuffer = ColorNode.ColorIndex.a;\n      }\n\n      return {\n        dataSize: 4,\n        buffer: buffer,\n        indices: indexBuffer,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n    parseMaterialIndices: function (MaterialNode) {\n      var mappingType = MaterialNode.MappingInformationType;\n      var referenceType = MaterialNode.ReferenceInformationType;\n\n      if (mappingType === 'NoMappingInformation') {\n        return {\n          dataSize: 1,\n          buffer: [0],\n          indices: [0],\n          mappingType: 'AllSame',\n          referenceType: referenceType\n        };\n      }\n\n      var materialIndexBuffer = MaterialNode.Materials.a; // Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n      // we expect.So we create an intermediate buffer that points to the index in the buffer,\n      // for conforming with the other functions we've written for other data.\n\n      var materialIndices = [];\n\n      for (let i = 0; i < materialIndexBuffer.length; ++i) {\n        materialIndices.push(i);\n      }\n\n      return {\n        dataSize: 1,\n        buffer: materialIndexBuffer,\n        indices: materialIndices,\n        mappingType: mappingType,\n        referenceType: referenceType\n      };\n    },\n    // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n    parseNurbsGeometry: function (geoNode) {\n      if (NURBSCurve === undefined) {\n        console.error('THREE.FBXLoader: The loader relies on NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.');\n        return new BufferGeometry();\n      }\n\n      var order = parseInt(geoNode.Order);\n\n      if (isNaN(order)) {\n        console.error('THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id);\n        return new BufferGeometry();\n      }\n\n      var degree = order - 1;\n      var knots = geoNode.KnotVector.a;\n      var controlPoints = [];\n      var pointsValues = geoNode.Points.a;\n\n      for (let i = 0, l = pointsValues.length; i < l; i += 4) {\n        controlPoints.push(new Vector4().fromArray(pointsValues, i));\n      }\n\n      var startKnot, endKnot;\n\n      if (geoNode.Form === 'Closed') {\n        controlPoints.push(controlPoints[0]);\n      } else if (geoNode.Form === 'Periodic') {\n        startKnot = degree;\n        endKnot = knots.length - 1 - startKnot;\n\n        for (let i = 0; i < degree; ++i) {\n          controlPoints.push(controlPoints[i]);\n        }\n      }\n\n      var curve = new NURBSCurve(degree, knots, controlPoints, startKnot, endKnot);\n      var vertices = curve.getPoints(controlPoints.length * 7);\n      var positions = new Float32Array(vertices.length * 3);\n      vertices.forEach(function (vertex, i) {\n        vertex.toArray(positions, i * 3);\n      });\n      var geometry = new BufferGeometry();\n      geometry.setAttribute('position', new BufferAttribute(positions, 3));\n      return geometry;\n    }\n  }; // parse animation data from FBXTree\n\n  function AnimationParser() {}\n\n  AnimationParser.prototype = {\n    constructor: AnimationParser,\n    // take raw animation clips and turn them into three.js animation clips\n    parse: function () {\n      var animationClips = [];\n      var rawClips = this.parseClips();\n\n      if (rawClips !== undefined) {\n        for (let key in rawClips) {\n          var rawClip = rawClips[key];\n          var clip = this.addClip(rawClip);\n          animationClips.push(clip);\n        }\n      }\n\n      return animationClips;\n    },\n    parseClips: function () {\n      // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n      // if this is undefined we can safely assume there are no animations\n      if (fbxTree.Objects.AnimationCurve === undefined) return undefined;\n      var curveNodesMap = this.parseAnimationCurveNodes();\n      this.parseAnimationCurves(curveNodesMap);\n      var layersMap = this.parseAnimationLayers(curveNodesMap);\n      var rawClips = this.parseAnimStacks(layersMap);\n      return rawClips;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurveNode\n    // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n    // and is referenced by an AnimationLayer\n    parseAnimationCurveNodes: function () {\n      var rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n      var curveNodesMap = new Map();\n\n      for (let nodeID in rawCurveNodes) {\n        var rawCurveNode = rawCurveNodes[nodeID];\n\n        if (rawCurveNode.attrName.match(/S|R|T|DeformPercent/) !== null) {\n          var curveNode = {\n            id: rawCurveNode.id,\n            attr: rawCurveNode.attrName,\n            curves: {}\n          };\n          curveNodesMap.set(curveNode.id, curveNode);\n        }\n      }\n\n      return curveNodesMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n    // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n    // axis ( e.g. times and values of x rotation)\n    parseAnimationCurves: function (curveNodesMap) {\n      var rawCurves = fbxTree.Objects.AnimationCurve; // TODO: Many values are identical up to roundoff error, but won't be optimised\n      // e.g. position times: [0, 0.4, 0. 8]\n      // position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n      // clearly, this should be optimised to\n      // times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n      // this shows up in nearly every FBX file, and generally time array is length > 100\n\n      for (let nodeID in rawCurves) {\n        var animationCurve = {\n          id: rawCurves[nodeID].id,\n          times: rawCurves[nodeID].KeyTime.a.map(convertFBXTimeToSeconds),\n          values: rawCurves[nodeID].KeyValueFloat.a\n        };\n        var relationships = connections.get(animationCurve.id);\n\n        if (relationships !== undefined) {\n          var animationCurveID = relationships.parents[0].ID;\n          var animationCurveRelationship = relationships.parents[0].relationship;\n\n          if (animationCurveRelationship.match(/X/)) {\n            curveNodesMap.get(animationCurveID).curves['x'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Y/)) {\n            curveNodesMap.get(animationCurveID).curves['y'] = animationCurve;\n          } else if (animationCurveRelationship.match(/Z/)) {\n            curveNodesMap.get(animationCurveID).curves['z'] = animationCurve;\n          } else if (animationCurveRelationship.match(/d|DeformPercent/) && curveNodesMap.has(animationCurveID)) {\n            curveNodesMap.get(animationCurveID).curves['morph'] = animationCurve;\n          }\n        }\n      }\n    },\n    // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n    // to various AnimationCurveNodes and is referenced by an AnimationStack node\n    // note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n    parseAnimationLayers: function (curveNodesMap) {\n      var rawLayers = fbxTree.Objects.AnimationLayer;\n      var layersMap = new Map();\n\n      for (let nodeID in rawLayers) {\n        var layerCurveNodes = [];\n        var connection = connections.get(parseInt(nodeID));\n\n        if (connection !== undefined) {\n          // all the animationCurveNodes used in the layer\n          var children = connection.children;\n          children.forEach(function (child, i) {\n            if (curveNodesMap.has(child.ID)) {\n              var curveNode = curveNodesMap.get(child.ID); // check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\n              if (curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var modelID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n\n                  if (modelID !== undefined) {\n                    var rawModel = fbxTree.Objects.Model[modelID.toString()];\n\n                    if (rawModel === undefined) {\n                      console.warn('THREE.FBXLoader: Encountered a unused curve.', child);\n                      return;\n                    }\n\n                    var node = {\n                      modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                      ID: rawModel.id,\n                      initialPosition: [0, 0, 0],\n                      initialRotation: [0, 0, 0],\n                      initialScale: [1, 1, 1]\n                    };\n                    sceneGraph.traverse(function (child) {\n                      if (child.ID === rawModel.id) {\n                        node.transform = child.matrix;\n                        if (child.userData.transformData) node.eulerOrder = child.userData.transformData.eulerOrder;\n                      }\n                    });\n                    if (!node.transform) node.transform = new Matrix4(); // if the animated model is pre rotated, we'll have to apply the pre rotations to every\n                    // animation value as well\n\n                    if ('PreRotation' in rawModel) node.preRotation = rawModel.PreRotation.value;\n                    if ('PostRotation' in rawModel) node.postRotation = rawModel.PostRotation.value;\n                    layerCurveNodes[i] = node;\n                  }\n                }\n\n                if (layerCurveNodes[i]) layerCurveNodes[i][curveNode.attr] = curveNode;\n              } else if (curveNode.curves.morph !== undefined) {\n                if (layerCurveNodes[i] === undefined) {\n                  var deformerID = connections.get(child.ID).parents.filter(function (parent) {\n                    return parent.relationship !== undefined;\n                  })[0].ID;\n                  var morpherID = connections.get(deformerID).parents[0].ID;\n                  var geoID = connections.get(morpherID).parents[0].ID; // assuming geometry is not used in more than one model\n\n                  var modelID = connections.get(geoID).parents[0].ID;\n                  var rawModel = fbxTree.Objects.Model[modelID];\n                  var node = {\n                    modelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName(rawModel.attrName) : '',\n                    morphName: fbxTree.Objects.Deformer[deformerID].attrName\n                  };\n                  layerCurveNodes[i] = node;\n                }\n\n                layerCurveNodes[i][curveNode.attr] = curveNode;\n              }\n            }\n          });\n          layersMap.set(parseInt(nodeID), layerCurveNodes);\n        }\n      }\n\n      return layersMap;\n    },\n    // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n    // hierarchy. Each Stack node will be used to create a AnimationClip\n    parseAnimStacks: function (layersMap) {\n      var rawStacks = fbxTree.Objects.AnimationStack; // connect the stacks (clips) up to the layers\n\n      var rawClips = {};\n\n      for (let nodeID in rawStacks) {\n        var children = connections.get(parseInt(nodeID)).children;\n\n        if (children.length > 1) {\n          // it seems like stacks will always be associated with a single layer. But just in case there are files\n          // where there are multiple layers per stack, we'll display a warning\n          console.warn('THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.');\n        }\n\n        var layer = layersMap.get(children[0].ID);\n        rawClips[nodeID] = {\n          name: rawStacks[nodeID].attrName,\n          layer: layer\n        };\n      }\n\n      return rawClips;\n    },\n    addClip: function (rawClip) {\n      var tracks = [];\n      var scope = this;\n      rawClip.layer.forEach(function (rawTracks) {\n        tracks = tracks.concat(scope.generateTracks(rawTracks));\n      });\n      return new AnimationClip(rawClip.name, -1, tracks);\n    },\n    generateTracks: function (rawTracks) {\n      var tracks = [];\n      var initialPosition = new Vector3();\n      var initialRotation = new Quaternion();\n      var initialScale = new Vector3();\n      if (rawTracks.transform) rawTracks.transform.decompose(initialPosition, initialRotation, initialScale);\n      initialPosition = initialPosition.toArray();\n      initialRotation = new Euler().setFromQuaternion(initialRotation, rawTracks.eulerOrder).toArray();\n      initialScale = initialScale.toArray();\n\n      if (rawTracks.T !== undefined && Object.keys(rawTracks.T.curves).length > 0) {\n        var positionTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position');\n        if (positionTrack !== undefined) tracks.push(positionTrack);\n      }\n\n      if (rawTracks.R !== undefined && Object.keys(rawTracks.R.curves).length > 0) {\n        var rotationTrack = this.generateRotationTrack(rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder);\n        if (rotationTrack !== undefined) tracks.push(rotationTrack);\n      }\n\n      if (rawTracks.S !== undefined && Object.keys(rawTracks.S.curves).length > 0) {\n        var scaleTrack = this.generateVectorTrack(rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale');\n        if (scaleTrack !== undefined) tracks.push(scaleTrack);\n      }\n\n      if (rawTracks.DeformPercent !== undefined) {\n        var morphTrack = this.generateMorphTrack(rawTracks);\n        if (morphTrack !== undefined) tracks.push(morphTrack);\n      }\n\n      return tracks;\n    },\n    generateVectorTrack: function (modelName, curves, initialValue, type) {\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n      return new VectorKeyframeTrack(modelName + '.' + type, times, values);\n    },\n    generateRotationTrack: function (modelName, curves, initialValue, preRotation, postRotation, eulerOrder) {\n      if (curves.x !== undefined) {\n        this.interpolateRotations(curves.x);\n        curves.x.values = curves.x.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.y !== undefined) {\n        this.interpolateRotations(curves.y);\n        curves.y.values = curves.y.values.map(MathUtils.degToRad);\n      }\n\n      if (curves.z !== undefined) {\n        this.interpolateRotations(curves.z);\n        curves.z.values = curves.z.values.map(MathUtils.degToRad);\n      }\n\n      var times = this.getTimesForAllAxes(curves);\n      var values = this.getKeyframeTrackValues(times, curves, initialValue);\n\n      if (preRotation !== undefined) {\n        preRotation = preRotation.map(MathUtils.degToRad);\n        preRotation.push(eulerOrder);\n        preRotation = new Euler().fromArray(preRotation);\n        preRotation = new Quaternion().setFromEuler(preRotation);\n      }\n\n      if (postRotation !== undefined) {\n        postRotation = postRotation.map(MathUtils.degToRad);\n        postRotation.push(eulerOrder);\n        postRotation = new Euler().fromArray(postRotation);\n        postRotation = new Quaternion().setFromEuler(postRotation).invert();\n      }\n\n      var quaternion = new Quaternion();\n      var euler = new Euler();\n      var quaternionValues = [];\n\n      for (let i = 0; i < values.length; i += 3) {\n        euler.set(values[i], values[i + 1], values[i + 2], eulerOrder);\n        quaternion.setFromEuler(euler);\n        if (preRotation !== undefined) quaternion.premultiply(preRotation);\n        if (postRotation !== undefined) quaternion.multiply(postRotation);\n        quaternion.toArray(quaternionValues, i / 3 * 4);\n      }\n\n      return new QuaternionKeyframeTrack(modelName + '.quaternion', times, quaternionValues);\n    },\n    generateMorphTrack: function (rawTracks) {\n      var curves = rawTracks.DeformPercent.curves.morph;\n      var values = curves.values.map(function (val) {\n        return val / 100;\n      });\n      var morphNum = sceneGraph.getObjectByName(rawTracks.modelName).morphTargetDictionary[rawTracks.morphName];\n      return new NumberKeyframeTrack(rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values);\n    },\n    // For all animated objects, times are defined separately for each axis\n    // Here we'll combine the times into one sorted array without duplicates\n    getTimesForAllAxes: function (curves) {\n      var times = []; // first join together the times for each axis, if defined\n\n      if (curves.x !== undefined) times = times.concat(curves.x.times);\n      if (curves.y !== undefined) times = times.concat(curves.y.times);\n      if (curves.z !== undefined) times = times.concat(curves.z.times); // then sort them\n\n      times = times.sort(function (a, b) {\n        return a - b;\n      }); // and remove duplicates\n\n      if (times.length > 1) {\n        var targetIndex = 1;\n        var lastValue = times[0];\n\n        for (let i = 1; i < times.length; i++) {\n          var currentValue = times[i];\n\n          if (currentValue !== lastValue) {\n            times[targetIndex] = currentValue;\n            lastValue = currentValue;\n            targetIndex++;\n          }\n        }\n\n        times = times.slice(0, targetIndex);\n      }\n\n      return times;\n    },\n    getKeyframeTrackValues: function (times, curves, initialValue) {\n      var prevValue = initialValue;\n      var values = [];\n      var xIndex = -1;\n      var yIndex = -1;\n      var zIndex = -1;\n      times.forEach(function (time) {\n        if (curves.x) xIndex = curves.x.times.indexOf(time);\n        if (curves.y) yIndex = curves.y.times.indexOf(time);\n        if (curves.z) zIndex = curves.z.times.indexOf(time); // if there is an x value defined for this frame, use that\n\n        if (xIndex !== -1) {\n          var xValue = curves.x.values[xIndex];\n          values.push(xValue);\n          prevValue[0] = xValue;\n        } else {\n          // otherwise use the x value from the previous frame\n          values.push(prevValue[0]);\n        }\n\n        if (yIndex !== -1) {\n          var yValue = curves.y.values[yIndex];\n          values.push(yValue);\n          prevValue[1] = yValue;\n        } else {\n          values.push(prevValue[1]);\n        }\n\n        if (zIndex !== -1) {\n          var zValue = curves.z.values[zIndex];\n          values.push(zValue);\n          prevValue[2] = zValue;\n        } else {\n          values.push(prevValue[2]);\n        }\n      });\n      return values;\n    },\n    // Rotations are defined as Euler angles which can have values  of any size\n    // These will be converted to quaternions which don't support values greater than\n    // PI, so we'll interpolate large rotations\n    interpolateRotations: function (curve) {\n      for (let i = 1; i < curve.values.length; i++) {\n        var initialValue = curve.values[i - 1];\n        var valuesSpan = curve.values[i] - initialValue;\n        var absoluteSpan = Math.abs(valuesSpan);\n\n        if (absoluteSpan >= 180) {\n          var numSubIntervals = absoluteSpan / 180;\n          var step = valuesSpan / numSubIntervals;\n          var nextValue = initialValue + step;\n          var initialTime = curve.times[i - 1];\n          var timeSpan = curve.times[i] - initialTime;\n          var interval = timeSpan / numSubIntervals;\n          var nextTime = initialTime + interval;\n          var interpolatedTimes = [];\n          var interpolatedValues = [];\n\n          while (nextTime < curve.times[i]) {\n            interpolatedTimes.push(nextTime);\n            nextTime += interval;\n            interpolatedValues.push(nextValue);\n            nextValue += step;\n          }\n\n          curve.times = inject(curve.times, i, interpolatedTimes);\n          curve.values = inject(curve.values, i, interpolatedValues);\n        }\n      }\n    }\n  }; // parse an FBX file in ASCII format\n\n  function TextParser() {}\n\n  TextParser.prototype = {\n    constructor: TextParser,\n    getPrevNode: function () {\n      return this.nodeStack[this.currentIndent - 2];\n    },\n    getCurrentNode: function () {\n      return this.nodeStack[this.currentIndent - 1];\n    },\n    getCurrentProp: function () {\n      return this.currentProp;\n    },\n    pushStack: function (node) {\n      this.nodeStack.push(node);\n      this.currentIndent += 1;\n    },\n    popStack: function () {\n      this.nodeStack.pop();\n      this.currentIndent -= 1;\n    },\n    setCurrentProp: function (val, name) {\n      this.currentProp = val;\n      this.currentPropName = name;\n    },\n    parse: function (text) {\n      this.currentIndent = 0;\n      this.allNodes = new FBXTree();\n      this.nodeStack = [];\n      this.currentProp = [];\n      this.currentPropName = '';\n      var scope = this;\n      var split = text.split(/[\\r\\n]+/);\n      split.forEach(function (line, i) {\n        var matchComment = line.match(/^[\\s\\t]*;/);\n        var matchEmpty = line.match(/^[\\s\\t]*$/);\n        if (matchComment || matchEmpty) return;\n        var matchBeginning = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '');\n        var matchProperty = line.match('^\\\\t{' + scope.currentIndent + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)');\n        var matchEnd = line.match('^\\\\t{' + (scope.currentIndent - 1) + '}}');\n\n        if (matchBeginning) {\n          scope.parseNodeBegin(line, matchBeginning);\n        } else if (matchProperty) {\n          scope.parseNodeProperty(line, matchProperty, split[++i]);\n        } else if (matchEnd) {\n          scope.popStack();\n        } else if (line.match(/^[^\\s\\t}]/)) {\n          // large arrays are split over multiple lines terminated with a ',' character\n          // if this is encountered the line needs to be joined to the previous line\n          scope.parseNodePropertyContinued(line);\n        }\n      });\n      return this.allNodes;\n    },\n    parseNodeBegin: function (line, property) {\n      var nodeName = property[1].trim().replace(/^\"/, '').replace(/\"$/, '');\n      var nodeAttrs = property[2].split(',').map(function (attr) {\n        return attr.trim().replace(/^\"/, '').replace(/\"$/, '');\n      });\n      var node = {\n        name: nodeName\n      };\n      var attrs = this.parseNodeAttr(nodeAttrs);\n      var currentNode = this.getCurrentNode(); // a top node\n\n      if (this.currentIndent === 0) {\n        this.allNodes.add(nodeName, node);\n      } else {\n        // a subnode\n        // if the subnode already exists, append it\n        if (nodeName in currentNode) {\n          // special case Pose needs PoseNodes as an array\n          if (nodeName === 'PoseNode') {\n            currentNode.PoseNode.push(node);\n          } else if (currentNode[nodeName].id !== undefined) {\n            currentNode[nodeName] = {};\n            currentNode[nodeName][currentNode[nodeName].id] = currentNode[nodeName];\n          }\n\n          if (attrs.id !== '') currentNode[nodeName][attrs.id] = node;\n        } else if (typeof attrs.id === 'number') {\n          currentNode[nodeName] = {};\n          currentNode[nodeName][attrs.id] = node;\n        } else if (nodeName !== 'Properties70') {\n          if (nodeName === 'PoseNode') currentNode[nodeName] = [node];else currentNode[nodeName] = node;\n        }\n      }\n\n      if (typeof attrs.id === 'number') node.id = attrs.id;\n      if (attrs.name !== '') node.attrName = attrs.name;\n      if (attrs.type !== '') node.attrType = attrs.type;\n      this.pushStack(node);\n    },\n    parseNodeAttr: function (attrs) {\n      var id = attrs[0];\n\n      if (attrs[0] !== '') {\n        id = parseInt(attrs[0]);\n\n        if (isNaN(id)) {\n          id = attrs[0];\n        }\n      }\n\n      var name = '',\n          type = '';\n\n      if (attrs.length > 1) {\n        name = attrs[1].replace(/^(\\w+)::/, '');\n        type = attrs[2];\n      }\n\n      return {\n        id: id,\n        name: name,\n        type: type\n      };\n    },\n    parseNodeProperty: function (line, property, contentLine) {\n      var propName = property[1].replace(/^\"/, '').replace(/\"$/, '').trim();\n      var propValue = property[2].replace(/^\"/, '').replace(/\"$/, '').trim(); // for special case: base64 image data follows \"Content: ,\" line\n      //\tContent: ,\n      //\t \"/9j/4RDaRXhpZgAATU0A...\"\n\n      if (propName === 'Content' && propValue === ',') {\n        propValue = contentLine.replace(/\"/g, '').replace(/,$/, '').trim();\n      }\n\n      var currentNode = this.getCurrentNode();\n      var parentName = currentNode.name;\n\n      if (parentName === 'Properties70') {\n        this.parseNodeSpecialProperty(line, propName, propValue);\n        return;\n      } // Connections\n\n\n      if (propName === 'C') {\n        var connProps = propValue.split(',').slice(1);\n        var from = parseInt(connProps[0]);\n        var to = parseInt(connProps[1]);\n        var rest = propValue.split(',').slice(3);\n        rest = rest.map(function (elem) {\n          return elem.trim().replace(/^\"/, '');\n        });\n        propName = 'connections';\n        propValue = [from, to];\n        append(propValue, rest);\n\n        if (currentNode[propName] === undefined) {\n          currentNode[propName] = [];\n        }\n      } // Node\n\n\n      if (propName === 'Node') currentNode.id = propValue; // connections\n\n      if (propName in currentNode && Array.isArray(currentNode[propName])) {\n        currentNode[propName].push(propValue);\n      } else {\n        if (propName !== 'a') currentNode[propName] = propValue;else currentNode.a = propValue;\n      }\n\n      this.setCurrentProp(currentNode, propName); // convert string to array, unless it ends in ',' in which case more will be added to it\n\n      if (propName === 'a' && propValue.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(propValue);\n      }\n    },\n    parseNodePropertyContinued: function (line) {\n      var currentNode = this.getCurrentNode();\n      currentNode.a += line; // if the line doesn't end in ',' we have reached the end of the property value\n      // so convert the string to an array\n\n      if (line.slice(-1) !== ',') {\n        currentNode.a = parseNumberArray(currentNode.a);\n      }\n    },\n    // parse \"Property70\"\n    parseNodeSpecialProperty: function (line, propName, propValue) {\n      // split this\n      // P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n      // into array like below\n      // [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n      var props = propValue.split('\",').map(function (prop) {\n        return prop.trim().replace(/^\\\"/, '').replace(/\\s/, '_');\n      });\n      var innerPropName = props[0];\n      var innerPropType1 = props[1];\n      var innerPropType2 = props[2];\n      var innerPropFlag = props[3];\n      var innerPropValue = props[4]; // cast values where needed, otherwise leave as strings\n\n      switch (innerPropType1) {\n        case 'int':\n        case 'enum':\n        case 'bool':\n        case 'ULongLong':\n        case 'double':\n        case 'Number':\n        case 'FieldOfView':\n          innerPropValue = parseFloat(innerPropValue);\n          break;\n\n        case 'Color':\n        case 'ColorRGB':\n        case 'Vector3D':\n        case 'Lcl_Translation':\n        case 'Lcl_Rotation':\n        case 'Lcl_Scaling':\n          innerPropValue = parseNumberArray(innerPropValue);\n          break;\n      } // CAUTION: these props must append to parent's parent\n\n\n      this.getPrevNode()[innerPropName] = {\n        type: innerPropType1,\n        type2: innerPropType2,\n        flag: innerPropFlag,\n        value: innerPropValue\n      };\n      this.setCurrentProp(this.getPrevNode(), innerPropName);\n    }\n  }; // Parse an FBX file in Binary format\n\n  function BinaryParser() {}\n\n  BinaryParser.prototype = {\n    constructor: BinaryParser,\n    parse: function (buffer) {\n      var reader = new BinaryReader(buffer);\n      reader.skip(23); // skip magic 23 bytes\n\n      var version = reader.getUint32();\n\n      if (version < 6400) {\n        throw new Error('THREE.FBXLoader: FBX version not supported, FileVersion: ' + version);\n      }\n\n      var allNodes = new FBXTree();\n\n      while (!this.endOfContent(reader)) {\n        var node = this.parseNode(reader, version);\n        if (node !== null) allNodes.add(node.name, node);\n      }\n\n      return allNodes;\n    },\n    // Check if reader has reached the end of content.\n    endOfContent: function (reader) {\n      // footer size: 160bytes + 16-byte alignment padding\n      // - 16bytes: magic\n      // - padding til 16-byte alignment (at least 1byte?)\n      //\t(seems like some exporters embed fixed 15 or 16bytes?)\n      // - 4bytes: magic\n      // - 4bytes: version\n      // - 120bytes: zero\n      // - 16bytes: magic\n      if (reader.size() % 16 === 0) {\n        return (reader.getOffset() + 160 + 16 & ~0xf) >= reader.size();\n      } else {\n        return reader.getOffset() + 160 + 16 >= reader.size();\n      }\n    },\n    // recursively parse nodes until the end of the file is reached\n    parseNode: function (reader, version) {\n      var node = {}; // The first three data sizes depends on version.\n\n      var endOffset = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      var numProperties = version >= 7500 ? reader.getUint64() : reader.getUint32();\n      version >= 7500 ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\n\n      var nameLen = reader.getUint8();\n      var name = reader.getString(nameLen); // Regards this node as NULL-record if endOffset is zero\n\n      if (endOffset === 0) return null;\n      var propertyList = [];\n\n      for (let i = 0; i < numProperties; i++) {\n        propertyList.push(this.parseProperty(reader));\n      } // Regards the first three elements in propertyList as id, attrName, and attrType\n\n\n      var id = propertyList.length > 0 ? propertyList[0] : '';\n      var attrName = propertyList.length > 1 ? propertyList[1] : '';\n      var attrType = propertyList.length > 2 ? propertyList[2] : ''; // check if this node represents just a single property\n      // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\n      node.singleProperty = numProperties === 1 && reader.getOffset() === endOffset ? true : false;\n\n      while (endOffset > reader.getOffset()) {\n        var subNode = this.parseNode(reader, version);\n        if (subNode !== null) this.parseSubNode(name, node, subNode);\n      }\n\n      node.propertyList = propertyList; // raw property list used by parent\n\n      if (typeof id === 'number') node.id = id;\n      if (attrName !== '') node.attrName = attrName;\n      if (attrType !== '') node.attrType = attrType;\n      if (name !== '') node.name = name;\n      return node;\n    },\n    parseSubNode: function (name, node, subNode) {\n      // special case: child node is single property\n      if (subNode.singleProperty === true) {\n        var value = subNode.propertyList[0];\n\n        if (Array.isArray(value)) {\n          node[subNode.name] = subNode;\n          subNode.a = value;\n        } else {\n          node[subNode.name] = value;\n        }\n      } else if (name === 'Connections' && subNode.name === 'C') {\n        var array = [];\n        subNode.propertyList.forEach(function (property, i) {\n          // first Connection is FBX type (OO, OP, etc.). We'll discard these\n          if (i !== 0) array.push(property);\n        });\n\n        if (node.connections === undefined) {\n          node.connections = [];\n        }\n\n        node.connections.push(array);\n      } else if (subNode.name === 'Properties70') {\n        var keys = Object.keys(subNode);\n        keys.forEach(function (key) {\n          node[key] = subNode[key];\n        });\n      } else if (name === 'Properties70' && subNode.name === 'P') {\n        var innerPropName = subNode.propertyList[0];\n        var innerPropType1 = subNode.propertyList[1];\n        var innerPropType2 = subNode.propertyList[2];\n        var innerPropFlag = subNode.propertyList[3];\n        var innerPropValue;\n        if (innerPropName.indexOf('Lcl ') === 0) innerPropName = innerPropName.replace('Lcl ', 'Lcl_');\n        if (innerPropType1.indexOf('Lcl ') === 0) innerPropType1 = innerPropType1.replace('Lcl ', 'Lcl_');\n\n        if (innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf('Lcl_') === 0) {\n          innerPropValue = [subNode.propertyList[4], subNode.propertyList[5], subNode.propertyList[6]];\n        } else {\n          innerPropValue = subNode.propertyList[4];\n        } // this will be copied to parent, see above\n\n\n        node[innerPropName] = {\n          type: innerPropType1,\n          type2: innerPropType2,\n          flag: innerPropFlag,\n          value: innerPropValue\n        };\n      } else if (node[subNode.name] === undefined) {\n        if (typeof subNode.id === 'number') {\n          node[subNode.name] = {};\n          node[subNode.name][subNode.id] = subNode;\n        } else {\n          node[subNode.name] = subNode;\n        }\n      } else {\n        if (subNode.name === 'PoseNode') {\n          if (!Array.isArray(node[subNode.name])) {\n            node[subNode.name] = [node[subNode.name]];\n          }\n\n          node[subNode.name].push(subNode);\n        } else if (node[subNode.name][subNode.id] === undefined) {\n          node[subNode.name][subNode.id] = subNode;\n        }\n      }\n    },\n    parseProperty: function (reader) {\n      var type = reader.getString(1);\n\n      switch (type) {\n        case 'C':\n          return reader.getBoolean();\n\n        case 'D':\n          return reader.getFloat64();\n\n        case 'F':\n          return reader.getFloat32();\n\n        case 'I':\n          return reader.getInt32();\n\n        case 'L':\n          return reader.getInt64();\n\n        case 'R':\n          var length = reader.getUint32();\n          return reader.getArrayBuffer(length);\n\n        case 'S':\n          var length = reader.getUint32();\n          return reader.getString(length);\n\n        case 'Y':\n          return reader.getInt16();\n\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'f':\n        case 'i':\n        case 'l':\n          var arrayLength = reader.getUint32();\n          var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\n          var compressedLength = reader.getUint32();\n\n          if (encoding === 0) {\n            switch (type) {\n              case 'b':\n              case 'c':\n                return reader.getBooleanArray(arrayLength);\n\n              case 'd':\n                return reader.getFloat64Array(arrayLength);\n\n              case 'f':\n                return reader.getFloat32Array(arrayLength);\n\n              case 'i':\n                return reader.getInt32Array(arrayLength);\n\n              case 'l':\n                return reader.getInt64Array(arrayLength);\n            }\n          }\n\n          var data = unzlibSync(new Uint8Array(reader.getArrayBuffer(compressedLength))); // eslint-disable-line no-undef\n\n          var reader2 = new BinaryReader(data.buffer);\n\n          switch (type) {\n            case 'b':\n            case 'c':\n              return reader2.getBooleanArray(arrayLength);\n\n            case 'd':\n              return reader2.getFloat64Array(arrayLength);\n\n            case 'f':\n              return reader2.getFloat32Array(arrayLength);\n\n            case 'i':\n              return reader2.getInt32Array(arrayLength);\n\n            case 'l':\n              return reader2.getInt64Array(arrayLength);\n          }\n\n        default:\n          throw new Error('THREE.FBXLoader: Unknown property type ' + type);\n      }\n    }\n  };\n\n  function BinaryReader(buffer, littleEndian) {\n    this.dv = new DataView(buffer);\n    this.offset = 0;\n    this.littleEndian = littleEndian !== undefined ? littleEndian : true;\n  }\n\n  BinaryReader.prototype = {\n    constructor: BinaryReader,\n    getOffset: function () {\n      return this.offset;\n    },\n    size: function () {\n      return this.dv.buffer.byteLength;\n    },\n    skip: function (length) {\n      this.offset += length;\n    },\n    // seems like true/false representation depends on exporter.\n    // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n    // then sees LSB.\n    getBoolean: function () {\n      return (this.getUint8() & 1) === 1;\n    },\n    getBooleanArray: function (size) {\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a.push(this.getBoolean());\n      }\n\n      return a;\n    },\n    getUint8: function () {\n      var value = this.dv.getUint8(this.offset);\n      this.offset += 1;\n      return value;\n    },\n    getInt16: function () {\n      var value = this.dv.getInt16(this.offset, this.littleEndian);\n      this.offset += 2;\n      return value;\n    },\n    getInt32: function () {\n      var value = this.dv.getInt32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getInt32Array: function (size) {\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a.push(this.getInt32());\n      }\n\n      return a;\n    },\n    getUint32: function () {\n      var value = this.dv.getUint32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    // JavaScript doesn't support 64-bit integer so calculate this here\n    // 1 << 32 will return 1 so using multiply operation instead here.\n    // There's a possibility that this method returns wrong value if the value\n    // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n    // TODO: safely handle 64-bit integer\n    getInt64: function () {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      } // calculate negative value\n\n\n      if (high & 0x80000000) {\n        high = ~high & 0xffffffff;\n        low = ~low & 0xffffffff;\n        if (low === 0xffffffff) high = high + 1 & 0xffffffff;\n        low = low + 1 & 0xffffffff;\n        return -(high * 0x100000000 + low);\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getInt64Array: function (size) {\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a.push(this.getInt64());\n      }\n\n      return a;\n    },\n    // Note: see getInt64() comment\n    getUint64: function () {\n      var low, high;\n\n      if (this.littleEndian) {\n        low = this.getUint32();\n        high = this.getUint32();\n      } else {\n        high = this.getUint32();\n        low = this.getUint32();\n      }\n\n      return high * 0x100000000 + low;\n    },\n    getFloat32: function () {\n      var value = this.dv.getFloat32(this.offset, this.littleEndian);\n      this.offset += 4;\n      return value;\n    },\n    getFloat32Array: function (size) {\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a.push(this.getFloat32());\n      }\n\n      return a;\n    },\n    getFloat64: function () {\n      var value = this.dv.getFloat64(this.offset, this.littleEndian);\n      this.offset += 8;\n      return value;\n    },\n    getFloat64Array: function (size) {\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a.push(this.getFloat64());\n      }\n\n      return a;\n    },\n    getArrayBuffer: function (size) {\n      var value = this.dv.buffer.slice(this.offset, this.offset + size);\n      this.offset += size;\n      return value;\n    },\n    getString: function (size) {\n      // note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n      var a = [];\n\n      for (let i = 0; i < size; i++) {\n        a[i] = this.getUint8();\n      }\n\n      var nullByte = a.indexOf(0);\n      if (nullByte >= 0) a = a.slice(0, nullByte);\n      return LoaderUtils.decodeText(new Uint8Array(a));\n    }\n  }; // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n  // and BinaryParser( FBX Binary format)\n\n  function FBXTree() {}\n\n  FBXTree.prototype = {\n    constructor: FBXTree,\n    add: function (key, val) {\n      this[key] = val;\n    }\n  }; // ************** UTILITY FUNCTIONS **************\n\n  function isFbxFormatBinary(buffer) {\n    var CORRECT = 'Kaydara FBX Binary  \\0';\n    return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString(buffer, 0, CORRECT.length);\n  }\n\n  function isFbxFormatASCII(text) {\n    var CORRECT = ['K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\'];\n    var cursor = 0;\n\n    function read(offset) {\n      var result = text[offset - 1];\n      text = text.slice(cursor + offset);\n      cursor++;\n      return result;\n    }\n\n    for (let i = 0; i < CORRECT.length; ++i) {\n      var num = read(1);\n\n      if (num === CORRECT[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function getFbxVersion(text) {\n    var versionRegExp = /FBXVersion: (\\d+)/;\n    var match = text.match(versionRegExp);\n\n    if (match) {\n      var version = parseInt(match[1]);\n      return version;\n    }\n\n    throw new Error('THREE.FBXLoader: Cannot find the version number for the file given.');\n  } // Converts FBX ticks into real time seconds.\n\n\n  function convertFBXTimeToSeconds(time) {\n    return time / 46186158000;\n  }\n\n  var dataArray = []; // extracts the data from the correct position in the FBX array based on indexing type\n\n  function getData(polygonVertexIndex, polygonIndex, vertexIndex, infoObject) {\n    var index;\n\n    switch (infoObject.mappingType) {\n      case 'ByPolygonVertex':\n        index = polygonVertexIndex;\n        break;\n\n      case 'ByPolygon':\n        index = polygonIndex;\n        break;\n\n      case 'ByVertice':\n        index = vertexIndex;\n        break;\n\n      case 'AllSame':\n        index = infoObject.indices[0];\n        break;\n\n      default:\n        console.warn('THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType);\n    }\n\n    if (infoObject.referenceType === 'IndexToDirect') index = infoObject.indices[index];\n    var from = index * infoObject.dataSize;\n    var to = from + infoObject.dataSize;\n    return slice(dataArray, infoObject.buffer, from, to);\n  }\n\n  var tempEuler = new Euler();\n  var tempVec = new Vector3(); // generate transformation from FBX transform data\n  // ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n  // ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\n\n  function generateTransform(transformData) {\n    var lTranslationM = new Matrix4();\n    var lPreRotationM = new Matrix4();\n    var lRotationM = new Matrix4();\n    var lPostRotationM = new Matrix4();\n    var lScalingM = new Matrix4();\n    var lScalingPivotM = new Matrix4();\n    var lScalingOffsetM = new Matrix4();\n    var lRotationOffsetM = new Matrix4();\n    var lRotationPivotM = new Matrix4();\n    var lParentGX = new Matrix4();\n    var lParentLX = new Matrix4();\n    var lGlobalT = new Matrix4();\n    var inheritType = transformData.inheritType ? transformData.inheritType : 0;\n    if (transformData.translation) lTranslationM.setPosition(tempVec.fromArray(transformData.translation));\n\n    if (transformData.preRotation) {\n      var array = transformData.preRotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lPreRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n\n    if (transformData.rotation) {\n      var array = transformData.rotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n    }\n\n    if (transformData.postRotation) {\n      var array = transformData.postRotation.map(MathUtils.degToRad);\n      array.push(transformData.eulerOrder);\n      lPostRotationM.makeRotationFromEuler(tempEuler.fromArray(array));\n      lPostRotationM.invert();\n    }\n\n    if (transformData.scale) lScalingM.scale(tempVec.fromArray(transformData.scale)); // Pivots and offsets\n\n    if (transformData.scalingOffset) lScalingOffsetM.setPosition(tempVec.fromArray(transformData.scalingOffset));\n    if (transformData.scalingPivot) lScalingPivotM.setPosition(tempVec.fromArray(transformData.scalingPivot));\n    if (transformData.rotationOffset) lRotationOffsetM.setPosition(tempVec.fromArray(transformData.rotationOffset));\n    if (transformData.rotationPivot) lRotationPivotM.setPosition(tempVec.fromArray(transformData.rotationPivot)); // parent transform\n\n    if (transformData.parentMatrixWorld) {\n      lParentLX.copy(transformData.parentMatrix);\n      lParentGX.copy(transformData.parentMatrixWorld);\n    }\n\n    var lLRM = new Matrix4().copy(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM); // Global Rotation\n\n    var lParentGRM = new Matrix4();\n    lParentGRM.extractRotation(lParentGX); // Global Shear*Scaling\n\n    var lParentTM = new Matrix4();\n    lParentTM.copyPosition(lParentGX);\n    var lParentGSM = new Matrix4();\n    var lParentGRSM = new Matrix4().copy(lParentTM).invert().multiply(lParentGX);\n    lParentGSM.copy(lParentGRM).invert().multiply(lParentGRSM);\n    var lLSM = lScalingM;\n    var lGlobalRS = new Matrix4();\n\n    if (inheritType === 0) {\n      lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM).multiply(lLSM);\n    } else if (inheritType === 1) {\n      lGlobalRS.copy(lParentGRM).multiply(lParentGSM).multiply(lLRM).multiply(lLSM);\n    } else {\n      var lParentLSM = new Matrix4().scale(new Vector3().setFromMatrixScale(lParentLX));\n      var lParentLSM_inv = new Matrix4().copy(lParentLSM).invert();\n      var lParentGSM_noLocal = new Matrix4().copy(lParentGSM).multiply(lParentLSM_inv);\n      lGlobalRS.copy(lParentGRM).multiply(lLRM).multiply(lParentGSM_noLocal).multiply(lLSM);\n    }\n\n    var lRotationPivotM_inv = new Matrix4();\n    lRotationPivotM_inv.copy(lRotationPivotM).invert();\n    var lScalingPivotM_inv = new Matrix4();\n    lScalingPivotM_inv.copy(lScalingPivotM).invert(); // Calculate the local transform matrix\n\n    var lTransform = new Matrix4();\n    lTransform.copy(lTranslationM).multiply(lRotationOffsetM).multiply(lRotationPivotM).multiply(lPreRotationM).multiply(lRotationM).multiply(lPostRotationM).multiply(lRotationPivotM_inv).multiply(lScalingOffsetM).multiply(lScalingPivotM).multiply(lScalingM).multiply(lScalingPivotM_inv);\n    var lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition(lTransform);\n    var lGlobalTranslation = new Matrix4().copy(lParentGX).multiply(lLocalTWithAllPivotAndOffsetInfo);\n    lGlobalT.copyPosition(lGlobalTranslation);\n    lTransform = new Matrix4().copy(lGlobalT).multiply(lGlobalRS); // from global to local\n\n    lTransform.premultiply(lParentGX.invert());\n    return lTransform;\n  } // Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n  // ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\n\n  function getEulerOrder(order) {\n    order = order || 0;\n    var enums = ['ZYX', // -> XYZ extrinsic\n    'YZX', // -> XZY extrinsic\n    'XZY', // -> YZX extrinsic\n    'ZXY', // -> YXZ extrinsic\n    'YXZ', // -> ZXY extrinsic\n    'XYZ' // -> ZYX extrinsic\n    //'SphericXYZ', // not possible to support\n    ];\n\n    if (order === 6) {\n      console.warn('THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.');\n      return enums[0];\n    }\n\n    return enums[order];\n  } // Parses comma separated list of numbers and returns them an array.\n  // Used internally by the TextParser\n\n\n  function parseNumberArray(value) {\n    var array = value.split(',').map(function (val) {\n      return parseFloat(val);\n    });\n    return array;\n  }\n\n  function convertArrayBufferToString(buffer, from, to) {\n    if (from === undefined) from = 0;\n    if (to === undefined) to = buffer.byteLength;\n    return LoaderUtils.decodeText(new Uint8Array(buffer, from, to));\n  }\n\n  function append(a, b) {\n    for (let i = 0, j = a.length, l = b.length; i < l; i++, j++) {\n      a[j] = b[i];\n    }\n  }\n\n  function slice(a, b, from, to) {\n    for (let i = from, j = 0; i < to; i++, j++) {\n      a[j] = b[i];\n    }\n\n    return a;\n  } // inject array a2 into array a1 at index\n\n\n  function inject(a1, index, a2) {\n    return a1.slice(0, index).concat(a2).concat(a1.slice(index));\n  }\n\n  return FBXLoader;\n}();\n\nexport { FBXLoader };\n"]},"metadata":{},"sourceType":"module"}