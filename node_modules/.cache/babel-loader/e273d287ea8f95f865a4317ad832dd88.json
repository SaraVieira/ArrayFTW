{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Vector3, BoxGeometry } from 'three';\nvar tempNormal = new Vector3();\n\nfunction getUv(faceDirVector, normal, uvAxis, projectionAxis, radius, sideLength) {\n  var totArcLength = 2 * Math.PI * radius / 4; // length of the planes between the arcs on each axis\n\n  var centerLength = Math.max(sideLength - 2 * radius, 0);\n  var halfArc = Math.PI / 4; // Get the vector projected onto the Y plane\n\n  tempNormal.copy(normal);\n  tempNormal[projectionAxis] = 0;\n  tempNormal.normalize(); // total amount of UV space alloted to a single arc\n\n  var arcUvRatio = 0.5 * totArcLength / (totArcLength + centerLength); // the distance along one arc the point is at\n\n  var arcAngleRatio = 1.0 - tempNormal.angleTo(faceDirVector) / halfArc;\n\n  if (Math.sign(tempNormal[uvAxis]) === 1) {\n    return arcAngleRatio * arcUvRatio;\n  } else {\n    // total amount of UV space alloted to the plane between the arcs\n    var lenUv = centerLength / (totArcLength + centerLength);\n    return lenUv + arcUvRatio + arcUvRatio * (1.0 - arcAngleRatio);\n  }\n}\n\nvar RoundedBoxGeometry = /*#__PURE__*/function (_BoxGeometry) {\n  _inherits(RoundedBoxGeometry, _BoxGeometry);\n\n  var _super = _createSuper(RoundedBoxGeometry);\n\n  function RoundedBoxGeometry() {\n    var _this;\n\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var segments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n    var radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.1;\n\n    _classCallCheck(this, RoundedBoxGeometry);\n\n    // ensure segments is odd so we have a plane connecting the rounded corners\n    segments = segments * 2 + 1; // ensure radius isn't bigger than shortest side\n\n    radius = Math.min(width / 2, height / 2, depth / 2, radius);\n    _this = _super.call(this, 1, 1, 1, segments, segments, segments); // if we just have one segment we're the same as a regular box\n\n    if (segments === 1) return _possibleConstructorReturn(_this);\n\n    var geometry2 = _this.toNonIndexed();\n\n    _this.index = null;\n    _this.attributes.position = geometry2.attributes.position;\n    _this.attributes.normal = geometry2.attributes.normal;\n    _this.attributes.uv = geometry2.attributes.uv; //\n\n    var position = new Vector3();\n    var normal = new Vector3();\n    var box = new Vector3(width, height, depth).divideScalar(2).subScalar(radius);\n    var positions = _this.attributes.position.array;\n    var normals = _this.attributes.normal.array;\n    var uvs = _this.attributes.uv.array;\n    var faceTris = positions.length / 6;\n    var faceDirVector = new Vector3();\n    var halfSegmentSize = 0.5 / segments;\n\n    for (var i = 0, j = 0; i < positions.length; i += 3, j += 2) {\n      position.fromArray(positions, i);\n      normal.copy(position);\n      normal.x -= Math.sign(normal.x) * halfSegmentSize;\n      normal.y -= Math.sign(normal.y) * halfSegmentSize;\n      normal.z -= Math.sign(normal.z) * halfSegmentSize;\n      normal.normalize();\n      positions[i + 0] = box.x * Math.sign(position.x) + normal.x * radius;\n      positions[i + 1] = box.y * Math.sign(position.y) + normal.y * radius;\n      positions[i + 2] = box.z * Math.sign(position.z) + normal.z * radius;\n      normals[i + 0] = normal.x;\n      normals[i + 1] = normal.y;\n      normals[i + 2] = normal.z;\n      var side = Math.floor(i / faceTris);\n\n      switch (side) {\n        case 0:\n          // right\n          // generate UVs along Z then Y\n          faceDirVector.set(1, 0, 0);\n          uvs[j + 0] = getUv(faceDirVector, normal, 'z', 'y', radius, depth);\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'z', radius, height);\n          break;\n\n        case 1:\n          // left\n          // generate UVs along Z then Y\n          faceDirVector.set(-1, 0, 0);\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'z', 'y', radius, depth);\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'z', radius, height);\n          break;\n\n        case 2:\n          // top\n          // generate UVs along X then Z\n          faceDirVector.set(0, 1, 0);\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'x', 'z', radius, width);\n          uvs[j + 1] = getUv(faceDirVector, normal, 'z', 'x', radius, depth);\n          break;\n\n        case 3:\n          // bottom\n          // generate UVs along X then Z\n          faceDirVector.set(0, -1, 0);\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'x', 'z', radius, width);\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'z', 'x', radius, depth);\n          break;\n\n        case 4:\n          // front\n          // generate UVs along X then Y\n          faceDirVector.set(0, 0, 1);\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'x', 'y', radius, width);\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'x', radius, height);\n          break;\n\n        case 5:\n          // back\n          // generate UVs along X then Y\n          faceDirVector.set(0, 0, -1);\n          uvs[j + 0] = getUv(faceDirVector, normal, 'x', 'y', radius, width);\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'x', radius, height);\n          break;\n      }\n    }\n\n    return _this;\n  }\n\n  return RoundedBoxGeometry;\n}(BoxGeometry);\n\nexport { RoundedBoxGeometry };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/geometries/RoundedBoxGeometry.js"],"names":["Vector3","BoxGeometry","tempNormal","getUv","faceDirVector","normal","uvAxis","projectionAxis","radius","sideLength","totArcLength","Math","PI","centerLength","max","halfArc","copy","normalize","arcUvRatio","arcAngleRatio","angleTo","sign","lenUv","RoundedBoxGeometry","width","height","depth","segments","min","geometry2","toNonIndexed","index","attributes","position","uv","box","divideScalar","subScalar","positions","array","normals","uvs","faceTris","length","halfSegmentSize","i","j","fromArray","x","y","z","side","floor","set"],"mappings":";;;;AAAA,SAASA,OAAT,EAAkBC,WAAlB,QAAqC,OAArC;AAEA,IAAMC,UAAU,GAAG,IAAIF,OAAJ,EAAnB;;AAEA,SAASG,KAAT,CAAeC,aAAf,EAA8BC,MAA9B,EAAsCC,MAAtC,EAA8CC,cAA9C,EAA8DC,MAA9D,EAAsEC,UAAtE,EAAkF;AAChF,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAACC,EAAT,GAAcJ,MAAd,GAAuB,CAA5C,CADgF,CACjC;;AAE/C,MAAMK,YAAY,GAAGF,IAAI,CAACG,GAAL,CAASL,UAAU,GAAG,IAAID,MAA1B,EAAkC,CAAlC,CAArB;AACA,MAAMO,OAAO,GAAGJ,IAAI,CAACC,EAAL,GAAU,CAA1B,CAJgF,CAInD;;AAE7BV,EAAAA,UAAU,CAACc,IAAX,CAAgBX,MAAhB;AACAH,EAAAA,UAAU,CAACK,cAAD,CAAV,GAA6B,CAA7B;AACAL,EAAAA,UAAU,CAACe,SAAX,GARgF,CAQxD;;AAExB,MAAMC,UAAU,GAAG,MAAMR,YAAN,IAAsBA,YAAY,GAAGG,YAArC,CAAnB,CAVgF,CAUT;;AAEvE,MAAMM,aAAa,GAAG,MAAMjB,UAAU,CAACkB,OAAX,CAAmBhB,aAAnB,IAAoCW,OAAhE;;AAEA,MAAIJ,IAAI,CAACU,IAAL,CAAUnB,UAAU,CAACI,MAAD,CAApB,MAAkC,CAAtC,EAAyC;AACvC,WAAOa,aAAa,GAAGD,UAAvB;AACD,GAFD,MAEO;AACL;AACA,QAAMI,KAAK,GAAGT,YAAY,IAAIH,YAAY,GAAGG,YAAnB,CAA1B;AACA,WAAOS,KAAK,GAAGJ,UAAR,GAAqBA,UAAU,IAAI,MAAMC,aAAV,CAAtC;AACD;AACF;;IAEKI,kB;;;;;AACJ,gCAA0E;AAAA;;AAAA,QAA9DC,KAA8D,uEAAtD,CAAsD;AAAA,QAAnDC,MAAmD,uEAA1C,CAA0C;AAAA,QAAvCC,KAAuC,uEAA/B,CAA+B;AAAA,QAA5BC,QAA4B,uEAAjB,CAAiB;AAAA,QAAdnB,MAAc,uEAAL,GAAK;;AAAA;;AACxE;AACAmB,IAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAX,GAAe,CAA1B,CAFwE,CAE3C;;AAE7BnB,IAAAA,MAAM,GAAGG,IAAI,CAACiB,GAAL,CAASJ,KAAK,GAAG,CAAjB,EAAoBC,MAAM,GAAG,CAA7B,EAAgCC,KAAK,GAAG,CAAxC,EAA2ClB,MAA3C,CAAT;AACA,8BAAM,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAemB,QAAf,EAAyBA,QAAzB,EAAmCA,QAAnC,EALwE,CAK1B;;AAE9C,QAAIA,QAAQ,KAAK,CAAjB,EAAoB;;AACpB,QAAME,SAAS,GAAG,MAAKC,YAAL,EAAlB;;AACA,UAAKC,KAAL,GAAa,IAAb;AACA,UAAKC,UAAL,CAAgBC,QAAhB,GAA2BJ,SAAS,CAACG,UAAV,CAAqBC,QAAhD;AACA,UAAKD,UAAL,CAAgB3B,MAAhB,GAAyBwB,SAAS,CAACG,UAAV,CAAqB3B,MAA9C;AACA,UAAK2B,UAAL,CAAgBE,EAAhB,GAAqBL,SAAS,CAACG,UAAV,CAAqBE,EAA1C,CAZwE,CAY1B;;AAE9C,QAAMD,QAAQ,GAAG,IAAIjC,OAAJ,EAAjB;AACA,QAAMK,MAAM,GAAG,IAAIL,OAAJ,EAAf;AACA,QAAMmC,GAAG,GAAG,IAAInC,OAAJ,CAAYwB,KAAZ,EAAmBC,MAAnB,EAA2BC,KAA3B,EAAkCU,YAAlC,CAA+C,CAA/C,EAAkDC,SAAlD,CAA4D7B,MAA5D,CAAZ;AACA,QAAM8B,SAAS,GAAG,MAAKN,UAAL,CAAgBC,QAAhB,CAAyBM,KAA3C;AACA,QAAMC,OAAO,GAAG,MAAKR,UAAL,CAAgB3B,MAAhB,CAAuBkC,KAAvC;AACA,QAAME,GAAG,GAAG,MAAKT,UAAL,CAAgBE,EAAhB,CAAmBK,KAA/B;AACA,QAAMG,QAAQ,GAAGJ,SAAS,CAACK,MAAV,GAAmB,CAApC;AACA,QAAMvC,aAAa,GAAG,IAAIJ,OAAJ,EAAtB;AACA,QAAM4C,eAAe,GAAG,MAAMjB,QAA9B;;AAEA,SAAK,IAAIkB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAApB,EAAuBD,CAAC,GAAGP,SAAS,CAACK,MAArC,EAA6CE,CAAC,IAAI,CAAL,EAAQC,CAAC,IAAI,CAA1D,EAA6D;AAC3Db,MAAAA,QAAQ,CAACc,SAAT,CAAmBT,SAAnB,EAA8BO,CAA9B;AACAxC,MAAAA,MAAM,CAACW,IAAP,CAAYiB,QAAZ;AACA5B,MAAAA,MAAM,CAAC2C,CAAP,IAAYrC,IAAI,CAACU,IAAL,CAAUhB,MAAM,CAAC2C,CAAjB,IAAsBJ,eAAlC;AACAvC,MAAAA,MAAM,CAAC4C,CAAP,IAAYtC,IAAI,CAACU,IAAL,CAAUhB,MAAM,CAAC4C,CAAjB,IAAsBL,eAAlC;AACAvC,MAAAA,MAAM,CAAC6C,CAAP,IAAYvC,IAAI,CAACU,IAAL,CAAUhB,MAAM,CAAC6C,CAAjB,IAAsBN,eAAlC;AACAvC,MAAAA,MAAM,CAACY,SAAP;AACAqB,MAAAA,SAAS,CAACO,CAAC,GAAG,CAAL,CAAT,GAAmBV,GAAG,CAACa,CAAJ,GAAQrC,IAAI,CAACU,IAAL,CAAUY,QAAQ,CAACe,CAAnB,CAAR,GAAgC3C,MAAM,CAAC2C,CAAP,GAAWxC,MAA9D;AACA8B,MAAAA,SAAS,CAACO,CAAC,GAAG,CAAL,CAAT,GAAmBV,GAAG,CAACc,CAAJ,GAAQtC,IAAI,CAACU,IAAL,CAAUY,QAAQ,CAACgB,CAAnB,CAAR,GAAgC5C,MAAM,CAAC4C,CAAP,GAAWzC,MAA9D;AACA8B,MAAAA,SAAS,CAACO,CAAC,GAAG,CAAL,CAAT,GAAmBV,GAAG,CAACe,CAAJ,GAAQvC,IAAI,CAACU,IAAL,CAAUY,QAAQ,CAACiB,CAAnB,CAAR,GAAgC7C,MAAM,CAAC6C,CAAP,GAAW1C,MAA9D;AACAgC,MAAAA,OAAO,CAACK,CAAC,GAAG,CAAL,CAAP,GAAiBxC,MAAM,CAAC2C,CAAxB;AACAR,MAAAA,OAAO,CAACK,CAAC,GAAG,CAAL,CAAP,GAAiBxC,MAAM,CAAC4C,CAAxB;AACAT,MAAAA,OAAO,CAACK,CAAC,GAAG,CAAL,CAAP,GAAiBxC,MAAM,CAAC6C,CAAxB;AACA,UAAMC,IAAI,GAAGxC,IAAI,CAACyC,KAAL,CAAWP,CAAC,GAAGH,QAAf,CAAb;;AAEA,cAAQS,IAAR;AACE,aAAK,CAAL;AACE;AACA;AACA/C,UAAAA,aAAa,CAACiD,GAAd,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACAZ,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CkB,KAA1C,CAAlB;AACAe,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa,MAAM3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CiB,MAA1C,CAAxB;AACA;;AAEF,aAAK,CAAL;AACE;AACA;AACArB,UAAAA,aAAa,CAACiD,GAAd,CAAkB,CAAC,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB;AACAZ,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa,MAAM3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CkB,KAA1C,CAAxB;AACAe,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa,MAAM3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CiB,MAA1C,CAAxB;AACA;;AAEF,aAAK,CAAL;AACE;AACA;AACArB,UAAAA,aAAa,CAACiD,GAAd,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACAZ,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa,MAAM3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CgB,KAA1C,CAAxB;AACAiB,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CkB,KAA1C,CAAlB;AACA;;AAEF,aAAK,CAAL;AACE;AACA;AACAtB,UAAAA,aAAa,CAACiD,GAAd,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,EAAyB,CAAzB;AACAZ,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa,MAAM3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CgB,KAA1C,CAAxB;AACAiB,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa,MAAM3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CkB,KAA1C,CAAxB;AACA;;AAEF,aAAK,CAAL;AACE;AACA;AACAtB,UAAAA,aAAa,CAACiD,GAAd,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;AACAZ,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa,MAAM3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CgB,KAA1C,CAAxB;AACAiB,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa,MAAM3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CiB,MAA1C,CAAxB;AACA;;AAEF,aAAK,CAAL;AACE;AACA;AACArB,UAAAA,aAAa,CAACiD,GAAd,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAC,CAAzB;AACAZ,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CgB,KAA1C,CAAlB;AACAiB,UAAAA,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,GAAa,MAAM3C,KAAK,CAACC,aAAD,EAAgBC,MAAhB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkCG,MAAlC,EAA0CiB,MAA1C,CAAxB;AACA;AA/CJ;AAiDD;;AAxFuE;AAyFzE;;;EA1F8BxB,W;;AA8FjC,SAASsB,kBAAT","sourcesContent":["import { Vector3, BoxGeometry } from 'three';\n\nconst tempNormal = new Vector3();\n\nfunction getUv(faceDirVector, normal, uvAxis, projectionAxis, radius, sideLength) {\n  const totArcLength = 2 * Math.PI * radius / 4; // length of the planes between the arcs on each axis\n\n  const centerLength = Math.max(sideLength - 2 * radius, 0);\n  const halfArc = Math.PI / 4; // Get the vector projected onto the Y plane\n\n  tempNormal.copy(normal);\n  tempNormal[projectionAxis] = 0;\n  tempNormal.normalize(); // total amount of UV space alloted to a single arc\n\n  const arcUvRatio = 0.5 * totArcLength / (totArcLength + centerLength); // the distance along one arc the point is at\n\n  const arcAngleRatio = 1.0 - tempNormal.angleTo(faceDirVector) / halfArc;\n\n  if (Math.sign(tempNormal[uvAxis]) === 1) {\n    return arcAngleRatio * arcUvRatio;\n  } else {\n    // total amount of UV space alloted to the plane between the arcs\n    const lenUv = centerLength / (totArcLength + centerLength);\n    return lenUv + arcUvRatio + arcUvRatio * (1.0 - arcAngleRatio);\n  }\n}\n\nclass RoundedBoxGeometry extends BoxGeometry {\n  constructor(width = 1, height = 1, depth = 1, segments = 2, radius = 0.1) {\n    // ensure segments is odd so we have a plane connecting the rounded corners\n    segments = segments * 2 + 1; // ensure radius isn't bigger than shortest side\n\n    radius = Math.min(width / 2, height / 2, depth / 2, radius);\n    super(1, 1, 1, segments, segments, segments); // if we just have one segment we're the same as a regular box\n\n    if (segments === 1) return;\n    const geometry2 = this.toNonIndexed();\n    this.index = null;\n    this.attributes.position = geometry2.attributes.position;\n    this.attributes.normal = geometry2.attributes.normal;\n    this.attributes.uv = geometry2.attributes.uv; //\n\n    const position = new Vector3();\n    const normal = new Vector3();\n    const box = new Vector3(width, height, depth).divideScalar(2).subScalar(radius);\n    const positions = this.attributes.position.array;\n    const normals = this.attributes.normal.array;\n    const uvs = this.attributes.uv.array;\n    const faceTris = positions.length / 6;\n    const faceDirVector = new Vector3();\n    const halfSegmentSize = 0.5 / segments;\n\n    for (let i = 0, j = 0; i < positions.length; i += 3, j += 2) {\n      position.fromArray(positions, i);\n      normal.copy(position);\n      normal.x -= Math.sign(normal.x) * halfSegmentSize;\n      normal.y -= Math.sign(normal.y) * halfSegmentSize;\n      normal.z -= Math.sign(normal.z) * halfSegmentSize;\n      normal.normalize();\n      positions[i + 0] = box.x * Math.sign(position.x) + normal.x * radius;\n      positions[i + 1] = box.y * Math.sign(position.y) + normal.y * radius;\n      positions[i + 2] = box.z * Math.sign(position.z) + normal.z * radius;\n      normals[i + 0] = normal.x;\n      normals[i + 1] = normal.y;\n      normals[i + 2] = normal.z;\n      const side = Math.floor(i / faceTris);\n\n      switch (side) {\n        case 0:\n          // right\n          // generate UVs along Z then Y\n          faceDirVector.set(1, 0, 0);\n          uvs[j + 0] = getUv(faceDirVector, normal, 'z', 'y', radius, depth);\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'z', radius, height);\n          break;\n\n        case 1:\n          // left\n          // generate UVs along Z then Y\n          faceDirVector.set(-1, 0, 0);\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'z', 'y', radius, depth);\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'z', radius, height);\n          break;\n\n        case 2:\n          // top\n          // generate UVs along X then Z\n          faceDirVector.set(0, 1, 0);\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'x', 'z', radius, width);\n          uvs[j + 1] = getUv(faceDirVector, normal, 'z', 'x', radius, depth);\n          break;\n\n        case 3:\n          // bottom\n          // generate UVs along X then Z\n          faceDirVector.set(0, -1, 0);\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'x', 'z', radius, width);\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'z', 'x', radius, depth);\n          break;\n\n        case 4:\n          // front\n          // generate UVs along X then Y\n          faceDirVector.set(0, 0, 1);\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'x', 'y', radius, width);\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'x', radius, height);\n          break;\n\n        case 5:\n          // back\n          // generate UVs along X then Y\n          faceDirVector.set(0, 0, -1);\n          uvs[j + 0] = getUv(faceDirVector, normal, 'x', 'y', radius, width);\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'x', radius, height);\n          break;\n      }\n    }\n  }\n\n}\n\nexport { RoundedBoxGeometry };\n"]},"metadata":{},"sourceType":"module"}