{"ast":null,"code":"import { Vector2 } from 'three';\n/**\n * Dot screen shader\n * based on glfx.js sepia shader\n * https://github.com/evanw/glfx.js\n */\n\nvar DotScreenShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tSize: {\n      value: new Vector2(256, 256)\n    },\n    center: {\n      value: new Vector2(0.5, 0.5)\n    },\n    angle: {\n      value: 1.57\n    },\n    scale: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec2 center;', 'uniform float angle;', 'uniform float scale;', 'uniform vec2 tSize;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'float pattern() {', '\tfloat s = sin( angle ), c = cos( angle );', '\tvec2 tex = vUv * tSize - center;', '\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;', '\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;', '}', 'void main() {', '\tvec4 color = texture2D( tDiffuse, vUv );', '\tfloat average = ( color.r + color.g + color.b ) / 3.0;', '\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );', '}'].join('\\n')\n};\nexport { DotScreenShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/DotScreenShader.js"],"names":["Vector2","DotScreenShader","uniforms","tDiffuse","value","tSize","center","angle","scale","vertexShader","join","fragmentShader"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,eAAe,GAAG;AACpBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,KAAK,EAAE;AACLD,MAAAA,KAAK,EAAE,IAAIJ,OAAJ,CAAY,GAAZ,EAAiB,GAAjB;AADF,KAJC;AAORM,IAAAA,MAAM,EAAE;AACNF,MAAAA,KAAK,EAAE,IAAIJ,OAAJ,CAAY,GAAZ,EAAiB,GAAjB;AADD,KAPA;AAURO,IAAAA,KAAK,EAAE;AACLH,MAAAA,KAAK,EAAE;AADF,KAVC;AAaRI,IAAAA,KAAK,EAAE;AACLJ,MAAAA,KAAK,EAAE;AADF;AAbC,GADU;AAkBpBK,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CAlBM;AAmBpBC,EAAAA,cAAc,EAAE,CAAC,sBAAD,EAAyB,sBAAzB,EAAiD,sBAAjD,EAAyE,qBAAzE,EAAgG,6BAAhG,EAA+H,mBAA/H,EAAoJ,mBAApJ,EAAyK,4CAAzK,EAAuN,mCAAvN,EAA4P,6EAA5P,EAA2U,oDAA3U,EAAiY,GAAjY,EAAsY,eAAtY,EAAuZ,2CAAvZ,EAAoc,yDAApc,EAA+f,4EAA/f,EAA6kB,GAA7kB,EAAklBD,IAAllB,CAAulB,IAAvlB;AAnBI,CAAtB;AAsBA,SAAST,eAAT","sourcesContent":["import { Vector2 } from 'three';\n\n/**\n * Dot screen shader\n * based on glfx.js sepia shader\n * https://github.com/evanw/glfx.js\n */\n\nvar DotScreenShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tSize: {\n      value: new Vector2(256, 256)\n    },\n    center: {\n      value: new Vector2(0.5, 0.5)\n    },\n    angle: {\n      value: 1.57\n    },\n    scale: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec2 center;', 'uniform float angle;', 'uniform float scale;', 'uniform vec2 tSize;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'float pattern() {', '\tfloat s = sin( angle ), c = cos( angle );', '\tvec2 tex = vUv * tSize - center;', '\tvec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;', '\treturn ( sin( point.x ) * sin( point.y ) ) * 4.0;', '}', 'void main() {', '\tvec4 color = texture2D( tDiffuse, vUv );', '\tfloat average = ( color.r + color.g + color.b ) / 3.0;', '\tgl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );', '}'].join('\\n')\n};\n\nexport { DotScreenShader };\n"]},"metadata":{},"sourceType":"module"}