{"ast":null,"code":"import { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from 'three';\n/*\n *\t PVR v2 (legacy) parser\n *   TODO : Add Support for PVR v3 format\n *   TODO : implement loadMipmaps option\n */\n\nvar PVRLoader = function PVRLoader(manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nPVRLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: PVRLoader,\n  parse: function parse(buffer, loadMipmaps) {\n    var headerLengthInt = 13;\n    var header = new Uint32Array(buffer, 0, headerLengthInt);\n    var pvrDatas = {\n      buffer: buffer,\n      header: header,\n      loadMipmaps: loadMipmaps\n    };\n\n    if (header[0] === 0x03525650) {\n      // PVR v3\n      return PVRLoader._parseV3(pvrDatas);\n    } else if (header[11] === 0x21525650) {\n      // PVR v2\n      return PVRLoader._parseV2(pvrDatas);\n    } else {\n      console.error('THREE.PVRLoader: Unknown PVR format.');\n    }\n  }\n});\n\nPVRLoader._parseV3 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var bpp, format;\n  var metaLen = header[12],\n      pixelFormat = header[2],\n      height = header[6],\n      width = header[7],\n      // numSurfs = header[ 9 ],\n  numFaces = header[10],\n      numMipmaps = header[11];\n\n  switch (pixelFormat) {\n    case 0:\n      // PVRTC 2bpp RGB\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n\n    case 1:\n      // PVRTC 2bpp RGBA\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n\n    case 2:\n      // PVRTC 4bpp RGB\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n\n    case 3:\n      // PVRTC 4bpp RGBA\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n\n    default:\n      console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n  }\n\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return PVRLoader._extract(pvrDatas);\n};\n\nPVRLoader._parseV2 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var headerLength = header[0],\n      height = header[1],\n      width = header[2],\n      numMipmaps = header[3],\n      flags = header[4],\n      // dataLength = header[ 5 ],\n  // bpp =  header[ 6 ],\n  // bitmaskRed = header[ 7 ],\n  // bitmaskGreen = header[ 8 ],\n  // bitmaskBlue = header[ 9 ],\n  bitmaskAlpha = header[10],\n      // pvrTag = header[ 11 ],\n  numSurfs = header[12];\n  var TYPE_MASK = 0xff;\n  var PVRTC_2 = 24,\n      PVRTC_4 = 25;\n  var formatFlags = flags & TYPE_MASK;\n  var bpp, format;\n\n  var _hasAlpha = bitmaskAlpha > 0;\n\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n  }\n\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1; // guess cubemap type seems tricky in v2\n  // it juste a pvr containing 6 surface (no explicit cubemap type)\n\n  pvrDatas.isCubemap = numSurfs === 6;\n  return PVRLoader._extract(pvrDatas);\n};\n\nPVRLoader._extract = function (pvrDatas) {\n  var pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  var buffer = pvrDatas.buffer;\n  var dataOffset = pvrDatas.dataPtr,\n      bpp = pvrDatas.bpp,\n      numSurfs = pvrDatas.numSurfaces,\n      dataSize = 0,\n      blockSize = 0,\n      blockWidth = 0,\n      blockHeight = 0,\n      widthBlocks = 0,\n      heightBlocks = 0;\n\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  var mipLevel = 0;\n\n  while (mipLevel < pvrDatas.numMipmaps) {\n    var sWidth = pvrDatas.width >> mipLevel,\n        sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight; // Clamp to minimum number of blocks\n\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n\n    for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      var mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n\n    mipLevel++;\n  }\n\n  return pvr;\n};\n\nexport { PVRLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/PVRLoader.js"],"names":["CompressedTextureLoader","RGBA_PVRTC_4BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_PVRTC_2BPPV1_Format","PVRLoader","manager","call","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","headerLengthInt","header","Uint32Array","pvrDatas","_parseV3","_parseV2","console","error","bpp","format","metaLen","pixelFormat","height","width","numFaces","numMipmaps","dataPtr","numSurfaces","isCubemap","_extract","headerLength","flags","bitmaskAlpha","numSurfs","TYPE_MASK","PVRTC_2","PVRTC_4","formatFlags","_hasAlpha","pvr","mipmaps","mipmapCount","dataOffset","dataSize","blockSize","blockWidth","blockHeight","widthBlocks","heightBlocks","length","mipLevel","sWidth","sHeight","surfIndex","byteArray","Uint8Array","mipmap","data"],"mappings":"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","sourcesContent":["import { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from 'three';\n\n/*\n *\t PVR v2 (legacy) parser\n *   TODO : Add Support for PVR v3 format\n *   TODO : implement loadMipmaps option\n */\n\nvar PVRLoader = function (manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nPVRLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: PVRLoader,\n  parse: function (buffer, loadMipmaps) {\n    var headerLengthInt = 13;\n    var header = new Uint32Array(buffer, 0, headerLengthInt);\n    var pvrDatas = {\n      buffer: buffer,\n      header: header,\n      loadMipmaps: loadMipmaps\n    };\n\n    if (header[0] === 0x03525650) {\n      // PVR v3\n      return PVRLoader._parseV3(pvrDatas);\n    } else if (header[11] === 0x21525650) {\n      // PVR v2\n      return PVRLoader._parseV2(pvrDatas);\n    } else {\n      console.error('THREE.PVRLoader: Unknown PVR format.');\n    }\n  }\n});\n\nPVRLoader._parseV3 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var bpp, format;\n  var metaLen = header[12],\n      pixelFormat = header[2],\n      height = header[6],\n      width = header[7],\n      // numSurfs = header[ 9 ],\n  numFaces = header[10],\n      numMipmaps = header[11];\n\n  switch (pixelFormat) {\n    case 0:\n      // PVRTC 2bpp RGB\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n\n    case 1:\n      // PVRTC 2bpp RGBA\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n\n    case 2:\n      // PVRTC 4bpp RGB\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n\n    case 3:\n      // PVRTC 4bpp RGBA\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n\n    default:\n      console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n  }\n\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return PVRLoader._extract(pvrDatas);\n};\n\nPVRLoader._parseV2 = function (pvrDatas) {\n  var header = pvrDatas.header;\n  var headerLength = header[0],\n      height = header[1],\n      width = header[2],\n      numMipmaps = header[3],\n      flags = header[4],\n      // dataLength = header[ 5 ],\n  // bpp =  header[ 6 ],\n  // bitmaskRed = header[ 7 ],\n  // bitmaskGreen = header[ 8 ],\n  // bitmaskBlue = header[ 9 ],\n  bitmaskAlpha = header[10],\n      // pvrTag = header[ 11 ],\n  numSurfs = header[12];\n  var TYPE_MASK = 0xff;\n  var PVRTC_2 = 24,\n      PVRTC_4 = 25;\n  var formatFlags = flags & TYPE_MASK;\n  var bpp, format;\n\n  var _hasAlpha = bitmaskAlpha > 0;\n\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n  }\n\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1; // guess cubemap type seems tricky in v2\n  // it juste a pvr containing 6 surface (no explicit cubemap type)\n\n  pvrDatas.isCubemap = numSurfs === 6;\n  return PVRLoader._extract(pvrDatas);\n};\n\nPVRLoader._extract = function (pvrDatas) {\n  var pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  var buffer = pvrDatas.buffer;\n  var dataOffset = pvrDatas.dataPtr,\n      bpp = pvrDatas.bpp,\n      numSurfs = pvrDatas.numSurfaces,\n      dataSize = 0,\n      blockSize = 0,\n      blockWidth = 0,\n      blockHeight = 0,\n      widthBlocks = 0,\n      heightBlocks = 0;\n\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  var mipLevel = 0;\n\n  while (mipLevel < pvrDatas.numMipmaps) {\n    var sWidth = pvrDatas.width >> mipLevel,\n        sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight; // Clamp to minimum number of blocks\n\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n\n    for (let surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      var mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n\n    mipLevel++;\n  }\n\n  return pvr;\n};\n\nexport { PVRLoader };\n"]},"metadata":{},"sourceType":"module"}