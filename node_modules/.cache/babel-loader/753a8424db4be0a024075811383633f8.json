{"ast":null,"code":"import { WebGLRenderTarget, OrthographicCamera, Scene, Mesh, PlaneGeometry } from 'three';\nimport { NodeBuilder } from '../core/NodeBuilder.js';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { TextureNode } from './TextureNode.js';\n\nfunction RTTNode(width, height, input, options) {\n  options = options || {};\n  this.input = input;\n  this.clear = options.clear !== undefined ? options.clear : true;\n  this.renderTarget = new WebGLRenderTarget(width, height, options);\n  this.material = new NodeMaterial();\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneGeometry(2, 2), this.material);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.render = true;\n  TextureNode.call(this, this.renderTarget.texture);\n}\n\nRTTNode.prototype = Object.create(TextureNode.prototype);\nRTTNode.prototype.constructor = RTTNode;\nRTTNode.prototype.nodeType = 'RTT';\n\nRTTNode.prototype.build = function (builder, output, uuid) {\n  var rttBuilder = new NodeBuilder();\n  rttBuilder.nodes = builder.nodes;\n  rttBuilder.updaters = builder.updaters;\n  this.material.fragment.value = this.input;\n  this.material.build({\n    builder: rttBuilder\n  });\n  return TextureNode.prototype.build.call(this, builder, output, uuid);\n};\n\nRTTNode.prototype.updateFramesaveTo = function (frame) {\n  this.saveTo.render = false;\n\n  if (this.saveTo !== this.saveToCurrent) {\n    if (this.saveToMaterial) this.saveToMaterial.dispose();\n    var material = new NodeMaterial();\n    material.fragment.value = this;\n    material.build();\n    var scene = new Scene();\n    var quad = new Mesh(new PlaneGeometry(2, 2), material);\n    quad.frustumCulled = false; // Avoid getting clipped\n\n    scene.add(quad);\n    this.saveToScene = scene;\n    this.saveToMaterial = material;\n  }\n\n  this.saveToCurrent = this.saveTo;\n  frame.renderer.setRenderTarget(this.saveTo.renderTarget);\n  if (this.saveTo.clear) frame.renderer.clear();\n  frame.renderer.render(this.saveToScene, this.camera);\n};\n\nRTTNode.prototype.updateFrame = function (frame) {\n  if (frame.renderer) {\n    // from the second frame\n    if (this.saveTo && this.saveTo.render === false) {\n      this.updateFramesaveTo(frame);\n    }\n\n    if (this.render) {\n      if (this.material.uniforms.renderTexture) {\n        this.material.uniforms.renderTexture.value = frame.renderTexture;\n      }\n\n      frame.renderer.setRenderTarget(this.renderTarget);\n      if (this.clear) frame.renderer.clear();\n      frame.renderer.render(this.scene, this.camera);\n    } // first frame\n\n\n    if (this.saveTo && this.saveTo.render === true) {\n      this.updateFramesaveTo(frame);\n    }\n  } else {\n    console.warn('RTTNode need a renderer in NodeFrame');\n  }\n};\n\nRTTNode.prototype.copy = function (source) {\n  TextureNode.prototype.copy.call(this, source);\n  this.saveTo = source.saveTo;\n  return this;\n};\n\nRTTNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = TextureNode.prototype.toJSON.call(this, meta);\n    if (this.saveTo) data.saveTo = this.saveTo.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { RTTNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/inputs/RTTNode.js"],"names":["WebGLRenderTarget","OrthographicCamera","Scene","Mesh","PlaneGeometry","NodeBuilder","NodeMaterial","TextureNode","RTTNode","width","height","input","options","clear","undefined","renderTarget","material","camera","scene","quad","frustumCulled","add","render","call","texture","prototype","Object","create","constructor","nodeType","build","builder","output","uuid","rttBuilder","nodes","updaters","fragment","value","updateFramesaveTo","frame","saveTo","saveToCurrent","saveToMaterial","dispose","saveToScene","renderer","setRenderTarget","updateFrame","uniforms","renderTexture","console","warn","copy","source","toJSON","meta","data","getJSONNode"],"mappings":"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","sourcesContent":["import { WebGLRenderTarget, OrthographicCamera, Scene, Mesh, PlaneGeometry } from 'three';\nimport { NodeBuilder } from '../core/NodeBuilder.js';\nimport { NodeMaterial } from '../materials/NodeMaterial.js';\nimport { TextureNode } from './TextureNode.js';\n\nfunction RTTNode(width, height, input, options) {\n  options = options || {};\n  this.input = input;\n  this.clear = options.clear !== undefined ? options.clear : true;\n  this.renderTarget = new WebGLRenderTarget(width, height, options);\n  this.material = new NodeMaterial();\n  this.camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new Scene();\n  this.quad = new Mesh(new PlaneGeometry(2, 2), this.material);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n\n  this.scene.add(this.quad);\n  this.render = true;\n  TextureNode.call(this, this.renderTarget.texture);\n}\n\nRTTNode.prototype = Object.create(TextureNode.prototype);\nRTTNode.prototype.constructor = RTTNode;\nRTTNode.prototype.nodeType = 'RTT';\n\nRTTNode.prototype.build = function (builder, output, uuid) {\n  var rttBuilder = new NodeBuilder();\n  rttBuilder.nodes = builder.nodes;\n  rttBuilder.updaters = builder.updaters;\n  this.material.fragment.value = this.input;\n  this.material.build({\n    builder: rttBuilder\n  });\n  return TextureNode.prototype.build.call(this, builder, output, uuid);\n};\n\nRTTNode.prototype.updateFramesaveTo = function (frame) {\n  this.saveTo.render = false;\n\n  if (this.saveTo !== this.saveToCurrent) {\n    if (this.saveToMaterial) this.saveToMaterial.dispose();\n    var material = new NodeMaterial();\n    material.fragment.value = this;\n    material.build();\n    var scene = new Scene();\n    var quad = new Mesh(new PlaneGeometry(2, 2), material);\n    quad.frustumCulled = false; // Avoid getting clipped\n\n    scene.add(quad);\n    this.saveToScene = scene;\n    this.saveToMaterial = material;\n  }\n\n  this.saveToCurrent = this.saveTo;\n  frame.renderer.setRenderTarget(this.saveTo.renderTarget);\n  if (this.saveTo.clear) frame.renderer.clear();\n  frame.renderer.render(this.saveToScene, this.camera);\n};\n\nRTTNode.prototype.updateFrame = function (frame) {\n  if (frame.renderer) {\n    // from the second frame\n    if (this.saveTo && this.saveTo.render === false) {\n      this.updateFramesaveTo(frame);\n    }\n\n    if (this.render) {\n      if (this.material.uniforms.renderTexture) {\n        this.material.uniforms.renderTexture.value = frame.renderTexture;\n      }\n\n      frame.renderer.setRenderTarget(this.renderTarget);\n      if (this.clear) frame.renderer.clear();\n      frame.renderer.render(this.scene, this.camera);\n    } // first frame\n\n\n    if (this.saveTo && this.saveTo.render === true) {\n      this.updateFramesaveTo(frame);\n    }\n  } else {\n    console.warn('RTTNode need a renderer in NodeFrame');\n  }\n};\n\nRTTNode.prototype.copy = function (source) {\n  TextureNode.prototype.copy.call(this, source);\n  this.saveTo = source.saveTo;\n  return this;\n};\n\nRTTNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = TextureNode.prototype.toJSON.call(this, meta);\n    if (this.saveTo) data.saveTo = this.saveTo.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { RTTNode };\n"]},"metadata":{},"sourceType":"module"}