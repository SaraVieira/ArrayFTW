{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Curve, Vector4, Vector3 } from 'three';\nimport { calcBSplinePoint, calcNURBSDerivatives } from './NURBSUtils.js';\n/**\n * NURBS curve object\n *\n * Derives from Curve, overriding getPoint and getTangent.\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n *\n **/\n\nvar NURBSCurve = /*#__PURE__*/function (_Curve) {\n  _inherits(NURBSCurve, _Curve);\n\n  var _super = _createSuper(NURBSCurve);\n\n  function NURBSCurve(degree, knots\n  /* array of reals */\n  , controlPoints\n  /* array of Vector(2|3|4) */\n  , startKnot\n  /* index in knots */\n  , endKnot\n  /* index in knots */\n  ) {\n    var _this;\n\n    _classCallCheck(this, NURBSCurve);\n\n    _this = _super.call(this);\n    _this.degree = degree;\n    _this.knots = knots;\n    _this.controlPoints = []; // Used by periodic NURBS to remove hidden spans\n\n    _this.startKnot = startKnot || 0;\n    _this.endKnot = endKnot || _this.knots.length - 1;\n\n    for (var i = 0; i < controlPoints.length; ++i) {\n      // ensure Vector4 for control points\n      var point = controlPoints[i];\n      _this.controlPoints[i] = new Vector4(point.x, point.y, point.z, point.w);\n    }\n\n    return _this;\n  }\n\n  _createClass(NURBSCurve, [{\n    key: \"getPoint\",\n    value: function getPoint(t, optionalTarget) {\n      var point = optionalTarget || new Vector3();\n      var u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]); // linear mapping t->u\n      // following results in (wx, wy, wz, w) homogeneous point\n\n      var hpoint = calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);\n\n      if (hpoint.w != 1.0) {\n        // project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n        hpoint.divideScalar(hpoint.w);\n      }\n\n      return point.set(hpoint.x, hpoint.y, hpoint.z);\n    }\n  }, {\n    key: \"getTangent\",\n    value: function getTangent(t, optionalTarget) {\n      var tangent = optionalTarget || new Vector3();\n      var u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);\n      var ders = calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);\n      tangent.copy(ders[1]).normalize();\n      return tangent;\n    }\n  }]);\n\n  return NURBSCurve;\n}(Curve);\n\nexport { NURBSCurve };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/curves/NURBSCurve.js"],"names":["Curve","Vector4","Vector3","calcBSplinePoint","calcNURBSDerivatives","NURBSCurve","degree","knots","controlPoints","startKnot","endKnot","length","i","point","x","y","z","w","t","optionalTarget","u","hpoint","divideScalar","set","tangent","ders","copy","normalize"],"mappings":";;;;AAAA,SAASA,KAAT,EAAgBC,OAAhB,EAAyBC,OAAzB,QAAwC,OAAxC;AACA,SAASC,gBAAT,EAA2BC,oBAA3B,QAAuD,iBAAvD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,U;;;;;AACJ,sBAAYC,MAAZ,EAAoBC;AACpB;AADA,IAEEC;AACF;AAHA,IAIEC;AACF;AALA,IAMEC;AACF;AAPA,IAQE;AAAA;;AAAA;;AACA;AACA,UAAKJ,MAAL,GAAcA,MAAd;AACA,UAAKC,KAAL,GAAaA,KAAb;AACA,UAAKC,aAAL,GAAqB,EAArB,CAJA,CAIyB;;AAEzB,UAAKC,SAAL,GAAiBA,SAAS,IAAI,CAA9B;AACA,UAAKC,OAAL,GAAeA,OAAO,IAAI,MAAKH,KAAL,CAAWI,MAAX,GAAoB,CAA9C;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,aAAa,CAACG,MAAlC,EAA0C,EAAEC,CAA5C,EAA+C;AAC7C;AACA,UAAMC,KAAK,GAAGL,aAAa,CAACI,CAAD,CAA3B;AACA,YAAKJ,aAAL,CAAmBI,CAAnB,IAAwB,IAAIX,OAAJ,CAAYY,KAAK,CAACC,CAAlB,EAAqBD,KAAK,CAACE,CAA3B,EAA8BF,KAAK,CAACG,CAApC,EAAuCH,KAAK,CAACI,CAA7C,CAAxB;AACD;;AAbD;AAcD;;;;WAED,kBAASC,CAAT,EAAYC,cAAZ,EAA4B;AAC1B,UAAMN,KAAK,GAAGM,cAAc,IAAI,IAAIjB,OAAJ,EAAhC;AACA,UAAMkB,CAAC,GAAG,KAAKb,KAAL,CAAW,KAAKE,SAAhB,IAA6BS,CAAC,IAAI,KAAKX,KAAL,CAAW,KAAKG,OAAhB,IAA2B,KAAKH,KAAL,CAAW,KAAKE,SAAhB,CAA/B,CAAxC,CAF0B,CAE0E;AACpG;;AAEA,UAAMY,MAAM,GAAGlB,gBAAgB,CAAC,KAAKG,MAAN,EAAc,KAAKC,KAAnB,EAA0B,KAAKC,aAA/B,EAA8CY,CAA9C,CAA/B;;AAEA,UAAIC,MAAM,CAACJ,CAAP,IAAY,GAAhB,EAAqB;AACnB;AACAI,QAAAA,MAAM,CAACC,YAAP,CAAoBD,MAAM,CAACJ,CAA3B;AACD;;AAED,aAAOJ,KAAK,CAACU,GAAN,CAAUF,MAAM,CAACP,CAAjB,EAAoBO,MAAM,CAACN,CAA3B,EAA8BM,MAAM,CAACL,CAArC,CAAP;AACD;;;WAED,oBAAWE,CAAX,EAAcC,cAAd,EAA8B;AAC5B,UAAMK,OAAO,GAAGL,cAAc,IAAI,IAAIjB,OAAJ,EAAlC;AACA,UAAMkB,CAAC,GAAG,KAAKb,KAAL,CAAW,CAAX,IAAgBW,CAAC,IAAI,KAAKX,KAAL,CAAW,KAAKA,KAAL,CAAWI,MAAX,GAAoB,CAA/B,IAAoC,KAAKJ,KAAL,CAAW,CAAX,CAAxC,CAA3B;AACA,UAAMkB,IAAI,GAAGrB,oBAAoB,CAAC,KAAKE,MAAN,EAAc,KAAKC,KAAnB,EAA0B,KAAKC,aAA/B,EAA8CY,CAA9C,EAAiD,CAAjD,CAAjC;AACAI,MAAAA,OAAO,CAACE,IAAR,CAAaD,IAAI,CAAC,CAAD,CAAjB,EAAsBE,SAAtB;AACA,aAAOH,OAAP;AACD;;;;EA9CsBxB,K;;AAkDzB,SAASK,UAAT","sourcesContent":["import { Curve, Vector4, Vector3 } from 'three';\nimport { calcBSplinePoint, calcNURBSDerivatives } from './NURBSUtils.js';\n\n/**\n * NURBS curve object\n *\n * Derives from Curve, overriding getPoint and getTangent.\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n *\n **/\n\nclass NURBSCurve extends Curve {\n  constructor(degree, knots\n  /* array of reals */\n  , controlPoints\n  /* array of Vector(2|3|4) */\n  , startKnot\n  /* index in knots */\n  , endKnot\n  /* index in knots */\n  ) {\n    super();\n    this.degree = degree;\n    this.knots = knots;\n    this.controlPoints = []; // Used by periodic NURBS to remove hidden spans\n\n    this.startKnot = startKnot || 0;\n    this.endKnot = endKnot || this.knots.length - 1;\n\n    for (let i = 0; i < controlPoints.length; ++i) {\n      // ensure Vector4 for control points\n      const point = controlPoints[i];\n      this.controlPoints[i] = new Vector4(point.x, point.y, point.z, point.w);\n    }\n  }\n\n  getPoint(t, optionalTarget) {\n    const point = optionalTarget || new Vector3();\n    const u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]); // linear mapping t->u\n    // following results in (wx, wy, wz, w) homogeneous point\n\n    const hpoint = calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);\n\n    if (hpoint.w != 1.0) {\n      // project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n      hpoint.divideScalar(hpoint.w);\n    }\n\n    return point.set(hpoint.x, hpoint.y, hpoint.z);\n  }\n\n  getTangent(t, optionalTarget) {\n    const tangent = optionalTarget || new Vector3();\n    const u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);\n    const ders = calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);\n    tangent.copy(ders[1]).normalize();\n    return tangent;\n  }\n\n}\n\nexport { NURBSCurve };\n"]},"metadata":{},"sourceType":"module"}