{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Vector3, Matrix4 } from 'three';\nvar inverseProjectionMatrix = new Matrix4();\n\nvar Frustum = /*#__PURE__*/function () {\n  function Frustum(data) {\n    _classCallCheck(this, Frustum);\n\n    data = data || {};\n    this.vertices = {\n      near: [new Vector3(), new Vector3(), new Vector3(), new Vector3()],\n      far: [new Vector3(), new Vector3(), new Vector3(), new Vector3()]\n    };\n\n    if (data.projectionMatrix !== undefined) {\n      this.setFromProjectionMatrix(data.projectionMatrix, data.maxFar || 10000);\n    }\n  }\n\n  _createClass(Frustum, [{\n    key: \"setFromProjectionMatrix\",\n    value: function setFromProjectionMatrix(projectionMatrix, maxFar) {\n      var isOrthographic = projectionMatrix.elements[2 * 4 + 3] === 0;\n      inverseProjectionMatrix.copy(projectionMatrix).invert(); // 3 --- 0  vertices.near/far order\n      // |     |\n      // 2 --- 1\n      // clip space spans from [-1, 1]\n\n      this.vertices.near[0].set(1, 1, -1);\n      this.vertices.near[1].set(1, -1, -1);\n      this.vertices.near[2].set(-1, -1, -1);\n      this.vertices.near[3].set(-1, 1, -1);\n      this.vertices.near.forEach(function (v) {\n        v.applyMatrix4(inverseProjectionMatrix);\n      });\n      this.vertices.far[0].set(1, 1, 1);\n      this.vertices.far[1].set(1, -1, 1);\n      this.vertices.far[2].set(-1, -1, 1);\n      this.vertices.far[3].set(-1, 1, 1);\n      this.vertices.far.forEach(function (v) {\n        v.applyMatrix4(inverseProjectionMatrix);\n        var absZ = Math.abs(v.z);\n\n        if (isOrthographic) {\n          v.z *= Math.min(maxFar / absZ, 1.0);\n        } else {\n          v.multiplyScalar(Math.min(maxFar / absZ, 1.0));\n        }\n      });\n      return this.vertices;\n    }\n  }, {\n    key: \"split\",\n    value: function split(breaks, target) {\n      while (breaks.length > target.length) {\n        target.push(new Frustum());\n      }\n\n      target.length = breaks.length;\n\n      for (var i = 0; i < breaks.length; i++) {\n        var cascade = target[i];\n\n        if (i === 0) {\n          for (var j = 0; j < 4; j++) {\n            cascade.vertices.near[j].copy(this.vertices.near[j]);\n          }\n        } else {\n          for (var _j = 0; _j < 4; _j++) {\n            cascade.vertices.near[_j].lerpVectors(this.vertices.near[_j], this.vertices.far[_j], breaks[i - 1]);\n          }\n        }\n\n        if (i === breaks - 1) {\n          for (var _j2 = 0; _j2 < 4; _j2++) {\n            cascade.vertices.far[_j2].copy(this.vertices.far[_j2]);\n          }\n        } else {\n          for (var _j3 = 0; _j3 < 4; _j3++) {\n            cascade.vertices.far[_j3].lerpVectors(this.vertices.near[_j3], this.vertices.far[_j3], breaks[i]);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"toSpace\",\n    value: function toSpace(cameraMatrix, target) {\n      for (var i = 0; i < 4; i++) {\n        target.vertices.near[i].copy(this.vertices.near[i]).applyMatrix4(cameraMatrix);\n        target.vertices.far[i].copy(this.vertices.far[i]).applyMatrix4(cameraMatrix);\n      }\n    }\n  }]);\n\n  return Frustum;\n}();\n\nexport default Frustum;","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/csm/Frustum.js"],"names":["Vector3","Matrix4","inverseProjectionMatrix","Frustum","data","vertices","near","far","projectionMatrix","undefined","setFromProjectionMatrix","maxFar","isOrthographic","elements","copy","invert","set","forEach","v","applyMatrix4","absZ","Math","abs","z","min","multiplyScalar","breaks","target","length","push","i","cascade","j","lerpVectors","cameraMatrix"],"mappings":"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","sourcesContent":["import { Vector3, Matrix4 } from 'three';\n\nconst inverseProjectionMatrix = new Matrix4();\nclass Frustum {\n  constructor(data) {\n    data = data || {};\n    this.vertices = {\n      near: [new Vector3(), new Vector3(), new Vector3(), new Vector3()],\n      far: [new Vector3(), new Vector3(), new Vector3(), new Vector3()]\n    };\n\n    if (data.projectionMatrix !== undefined) {\n      this.setFromProjectionMatrix(data.projectionMatrix, data.maxFar || 10000);\n    }\n  }\n\n  setFromProjectionMatrix(projectionMatrix, maxFar) {\n    const isOrthographic = projectionMatrix.elements[2 * 4 + 3] === 0;\n    inverseProjectionMatrix.copy(projectionMatrix).invert(); // 3 --- 0  vertices.near/far order\n    // |     |\n    // 2 --- 1\n    // clip space spans from [-1, 1]\n\n    this.vertices.near[0].set(1, 1, -1);\n    this.vertices.near[1].set(1, -1, -1);\n    this.vertices.near[2].set(-1, -1, -1);\n    this.vertices.near[3].set(-1, 1, -1);\n    this.vertices.near.forEach(v => {\n      v.applyMatrix4(inverseProjectionMatrix);\n    });\n    this.vertices.far[0].set(1, 1, 1);\n    this.vertices.far[1].set(1, -1, 1);\n    this.vertices.far[2].set(-1, -1, 1);\n    this.vertices.far[3].set(-1, 1, 1);\n    this.vertices.far.forEach(v => {\n      v.applyMatrix4(inverseProjectionMatrix);\n      const absZ = Math.abs(v.z);\n\n      if (isOrthographic) {\n        v.z *= Math.min(maxFar / absZ, 1.0);\n      } else {\n        v.multiplyScalar(Math.min(maxFar / absZ, 1.0));\n      }\n    });\n    return this.vertices;\n  }\n\n  split(breaks, target) {\n    while (breaks.length > target.length) {\n      target.push(new Frustum());\n    }\n\n    target.length = breaks.length;\n\n    for (let i = 0; i < breaks.length; i++) {\n      const cascade = target[i];\n\n      if (i === 0) {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.near[j].copy(this.vertices.near[j]);\n        }\n      } else {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.near[j].lerpVectors(this.vertices.near[j], this.vertices.far[j], breaks[i - 1]);\n        }\n      }\n\n      if (i === breaks - 1) {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.far[j].copy(this.vertices.far[j]);\n        }\n      } else {\n        for (let j = 0; j < 4; j++) {\n          cascade.vertices.far[j].lerpVectors(this.vertices.near[j], this.vertices.far[j], breaks[i]);\n        }\n      }\n    }\n  }\n\n  toSpace(cameraMatrix, target) {\n    for (let i = 0; i < 4; i++) {\n      target.vertices.near[i].copy(this.vertices.near[i]).applyMatrix4(cameraMatrix);\n      target.vertices.far[i].copy(this.vertices.far[i]).applyMatrix4(cameraMatrix);\n    }\n  }\n\n}\n\nexport default Frustum;\n"]},"metadata":{},"sourceType":"module"}