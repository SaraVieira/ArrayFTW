{"ast":null,"code":"/**\n * Full-screen tone-mapping shader based on http://www.cis.rit.edu/people/faculty/ferwerda/publications/sig02_paper.pdf\n */\nvar ToneMapShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    averageLuminance: {\n      value: 1.0\n    },\n    luminanceMap: {\n      value: null\n    },\n    maxLuminance: {\n      value: 16.0\n    },\n    minLuminance: {\n      value: 0.01\n    },\n    middleGrey: {\n      value: 0.6\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#include <common>', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform float middleGrey;', 'uniform float minLuminance;', 'uniform float maxLuminance;', '#ifdef ADAPTED_LUMINANCE', '\tuniform sampler2D luminanceMap;', '#else', '\tuniform float averageLuminance;', '#endif', 'vec3 ToneMap( vec3 vColor ) {', '\t#ifdef ADAPTED_LUMINANCE', // Get the calculated average luminance\n  '\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;', '\t#else', '\t\tfloat fLumAvg = averageLuminance;', '\t#endif', // Calculate the luminance of the current pixel\n  '\tfloat fLumPixel = linearToRelativeLuminance( vColor );', // Apply the modified operator (Eq. 4)\n  '\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );', '\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);', '\treturn fLumCompressed * vColor;', '}', 'void main() {', '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );', '}'].join('\\n')\n};\nexport { ToneMapShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/ToneMapShader.js"],"names":["ToneMapShader","uniforms","tDiffuse","value","averageLuminance","luminanceMap","maxLuminance","minLuminance","middleGrey","vertexShader","join","fragmentShader"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,aAAa,GAAG;AAClBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,gBAAgB,EAAE;AAChBD,MAAAA,KAAK,EAAE;AADS,KAJV;AAORE,IAAAA,YAAY,EAAE;AACZF,MAAAA,KAAK,EAAE;AADK,KAPN;AAURG,IAAAA,YAAY,EAAE;AACZH,MAAAA,KAAK,EAAE;AADK,KAVN;AAaRI,IAAAA,YAAY,EAAE;AACZJ,MAAAA,KAAK,EAAE;AADK,KAbN;AAgBRK,IAAAA,UAAU,EAAE;AACVL,MAAAA,KAAK,EAAE;AADG;AAhBJ,GADQ;AAqBlBM,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CArBI;AAsBlBC,EAAAA,cAAc,EAAE,CAAC,mBAAD,EAAsB,6BAAtB,EAAqD,mBAArD,EAA0E,2BAA1E,EAAuG,6BAAvG,EAAsI,6BAAtI,EAAqK,0BAArK,EAAiM,kCAAjM,EAAqO,OAArO,EAA8O,kCAA9O,EAAkR,QAAlR,EAA4R,+BAA5R,EAA6T,2BAA7T,EAA0V;AAC1W,gEADgB,EACgD,QADhD,EAC0D,qCAD1D,EACiG,SADjG,EAC4G;AAC5H,2DAFgB,EAE2C;AAC3D,gFAHgB,EAGgE,mHAHhE,EAGqL,kCAHrL,EAGyN,GAHzN,EAG8N,eAH9N,EAG+O,2CAH/O,EAG4R,wDAH5R,EAGsV,GAHtV,EAG2VD,IAH3V,CAGgW,IAHhW;AAtBE,CAApB;AA4BA,SAASV,aAAT","sourcesContent":["/**\n * Full-screen tone-mapping shader based on http://www.cis.rit.edu/people/faculty/ferwerda/publications/sig02_paper.pdf\n */\nvar ToneMapShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    averageLuminance: {\n      value: 1.0\n    },\n    luminanceMap: {\n      value: null\n    },\n    maxLuminance: {\n      value: 16.0\n    },\n    minLuminance: {\n      value: 0.01\n    },\n    middleGrey: {\n      value: 0.6\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#include <common>', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform float middleGrey;', 'uniform float minLuminance;', 'uniform float maxLuminance;', '#ifdef ADAPTED_LUMINANCE', '\tuniform sampler2D luminanceMap;', '#else', '\tuniform float averageLuminance;', '#endif', 'vec3 ToneMap( vec3 vColor ) {', '\t#ifdef ADAPTED_LUMINANCE', // Get the calculated average luminance\n  '\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;', '\t#else', '\t\tfloat fLumAvg = averageLuminance;', '\t#endif', // Calculate the luminance of the current pixel\n  '\tfloat fLumPixel = linearToRelativeLuminance( vColor );', // Apply the modified operator (Eq. 4)\n  '\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );', '\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);', '\treturn fLumCompressed * vColor;', '}', 'void main() {', '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );', '}'].join('\\n')\n};\n\nexport { ToneMapShader };\n"]},"metadata":{},"sourceType":"module"}