{"ast":null,"code":"/**\n * Hue and saturation adjustment\n * https://github.com/evanw/glfx.js\n * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.\n * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n */\nvar HueSaturationShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    hue: {\n      value: 0\n    },\n    saturation: {\n      value: 0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float hue;', 'uniform float saturation;', 'varying vec2 vUv;', 'void main() {', '\tgl_FragColor = texture2D( tDiffuse, vUv );', // hue\n  '\tfloat angle = hue * 3.14159265;', '\tfloat s = sin(angle), c = cos(angle);', '\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;', '\tfloat len = length(gl_FragColor.rgb);', '\tgl_FragColor.rgb = vec3(', '\t\tdot(gl_FragColor.rgb, weights.xyz),', '\t\tdot(gl_FragColor.rgb, weights.zxy),', '\t\tdot(gl_FragColor.rgb, weights.yzx)', '\t);', // saturation\n  '\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;', '\tif (saturation > 0.0) {', '\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));', '\t} else {', '\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);', '\t}', '}'].join('\\n')\n};\nexport { HueSaturationShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/HueSaturationShader.js"],"names":["HueSaturationShader","uniforms","tDiffuse","value","hue","saturation","vertexShader","join","fragmentShader"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,mBAAmB,GAAG;AACxBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,GAAG,EAAE;AACHD,MAAAA,KAAK,EAAE;AADJ,KAJG;AAORE,IAAAA,UAAU,EAAE;AACVF,MAAAA,KAAK,EAAE;AADG;AAPJ,GADc;AAYxBG,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CAZU;AAaxBC,EAAAA,cAAc,EAAE,CAAC,6BAAD,EAAgC,oBAAhC,EAAsD,2BAAtD,EAAmF,mBAAnF,EAAwG,eAAxG,EAAyH,6CAAzH,EAAwK;AACxL,oCADgB,EACoB,wCADpB,EAC8D,qFAD9D,EACqJ,wCADrJ,EAC+L,2BAD/L,EAC4N,uCAD5N,EACqQ,uCADrQ,EAC8S,sCAD9S,EACsV,KADtV,EAC6V;AAC7W,8EAFgB,EAE8D,0BAF9D,EAE0F,0FAF1F,EAEsL,WAFtL,EAEmM,qEAFnM,EAE0Q,IAF1Q,EAEgR,GAFhR,EAEqRD,IAFrR,CAE0R,IAF1R;AAbQ,CAA1B;AAkBA,SAASP,mBAAT","sourcesContent":["/**\n * Hue and saturation adjustment\n * https://github.com/evanw/glfx.js\n * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.\n * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n */\nvar HueSaturationShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    hue: {\n      value: 0\n    },\n    saturation: {\n      value: 0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float hue;', 'uniform float saturation;', 'varying vec2 vUv;', 'void main() {', '\tgl_FragColor = texture2D( tDiffuse, vUv );', // hue\n  '\tfloat angle = hue * 3.14159265;', '\tfloat s = sin(angle), c = cos(angle);', '\tvec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;', '\tfloat len = length(gl_FragColor.rgb);', '\tgl_FragColor.rgb = vec3(', '\t\tdot(gl_FragColor.rgb, weights.xyz),', '\t\tdot(gl_FragColor.rgb, weights.zxy),', '\t\tdot(gl_FragColor.rgb, weights.yzx)', '\t);', // saturation\n  '\tfloat average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;', '\tif (saturation > 0.0) {', '\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));', '\t} else {', '\t\tgl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);', '\t}', '}'].join('\\n')\n};\n\nexport { HueSaturationShader };\n"]},"metadata":{},"sourceType":"module"}