{"ast":null,"code":"import _toConsumableArray from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { useState, useRef, useEffect, useMemo } from 'react';\nimport { debounce } from 'debounce';\n\nfunction useMeasure() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    debounce: 0,\n    scroll: false\n  },\n      debounce$1 = _ref.debounce,\n      scroll = _ref.scroll,\n      polyfill = _ref.polyfill;\n\n  var ResizeObserver = polyfill || (typeof window === 'undefined' ? function ResizeObserver() {\n    _classCallCheck(this, ResizeObserver);\n  } : window.ResizeObserver);\n\n  if (!ResizeObserver) {\n    throw new Error('This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills');\n  }\n\n  var _useState = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    bottom: 0,\n    right: 0,\n    x: 0,\n    y: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      bounds = _useState2[0],\n      set = _useState2[1]; // keep all state in a ref\n\n\n  var state = useRef({\n    element: null,\n    scrollContainers: null,\n    resizeObserver: null,\n    lastBounds: bounds\n  }); // set actual debounce values early, so effects know if they should react accordingly\n\n  var scrollDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.scroll : null;\n  var resizeDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.resize : null; // make sure to update state only as long as the component is truly mounted\n\n  var mounted = useRef(false);\n  useEffect(function () {\n    mounted.current = true;\n    return function () {\n      return void (mounted.current = false);\n    };\n  }); // memoize handlers, so event-listeners know when they should update\n\n  var _useMemo = useMemo(function () {\n    var callback = function callback() {\n      if (!state.current.element) return;\n\n      var _state$current$elemen = state.current.element.getBoundingClientRect(),\n          left = _state$current$elemen.left,\n          top = _state$current$elemen.top,\n          width = _state$current$elemen.width,\n          height = _state$current$elemen.height,\n          bottom = _state$current$elemen.bottom,\n          right = _state$current$elemen.right,\n          x = _state$current$elemen.x,\n          y = _state$current$elemen.y;\n\n      var size = {\n        left: left,\n        top: top,\n        width: width,\n        height: height,\n        bottom: bottom,\n        right: right,\n        x: x,\n        y: y\n      };\n      Object.freeze(size);\n      if (mounted.current && !areBoundsEqual(state.current.lastBounds, size)) set(state.current.lastBounds = size);\n    };\n\n    return [callback, resizeDebounce ? debounce(callback, resizeDebounce) : callback, scrollDebounce ? debounce(callback, scrollDebounce) : callback];\n  }, [set, scrollDebounce, resizeDebounce]),\n      _useMemo2 = _slicedToArray(_useMemo, 3),\n      forceRefresh = _useMemo2[0],\n      resizeChange = _useMemo2[1],\n      scrollChange = _useMemo2[2]; // cleanup current scroll-listeners / observers\n\n\n  function removeListeners() {\n    if (state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(function (element) {\n        return element.removeEventListener('scroll', scrollChange, true);\n      });\n      state.current.scrollContainers = null;\n    }\n\n    if (state.current.resizeObserver) {\n      state.current.resizeObserver.disconnect();\n      state.current.resizeObserver = null;\n    }\n  } // add scroll-listeners / observers\n\n\n  function addListeners() {\n    if (!state.current.element) return;\n    state.current.resizeObserver = new ResizeObserver(scrollChange);\n    state.current.resizeObserver.observe(state.current.element);\n\n    if (scroll && state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(function (scrollContainer) {\n        return scrollContainer.addEventListener('scroll', scrollChange, {\n          capture: true,\n          passive: true\n        });\n      });\n    }\n  } // the ref we expose to the user\n\n\n  var ref = function ref(node) {\n    if (!node || node === state.current.element) return;\n    removeListeners();\n    state.current.element = node;\n    state.current.scrollContainers = findScrollContainers(node);\n    addListeners();\n  }; // add general event listeners\n\n\n  useOnWindowScroll(scrollChange, Boolean(scroll));\n  useOnWindowResize(resizeChange); // respond to changes that are relevant for the listeners\n\n  useEffect(function () {\n    removeListeners();\n    addListeners();\n  }, [scroll, scrollChange, resizeChange]); // remove all listeners when the components unmounts\n\n  useEffect(function () {\n    return removeListeners;\n  }, []);\n  return [ref, bounds, forceRefresh];\n} // Adds native resize listener to window\n\n\nfunction useOnWindowResize(onWindowResize) {\n  useEffect(function () {\n    var cb = onWindowResize;\n    window.addEventListener('resize', cb);\n    return function () {\n      return void window.removeEventListener('resize', cb);\n    };\n  }, [onWindowResize]);\n}\n\nfunction useOnWindowScroll(onScroll, enabled) {\n  useEffect(function () {\n    if (enabled) {\n      var cb = onScroll;\n      window.addEventListener('scroll', cb, {\n        capture: true,\n        passive: true\n      });\n      return function () {\n        return void window.removeEventListener('scroll', cb, true);\n      };\n    }\n  }, [onScroll, enabled]);\n} // Returns a list of scroll offsets\n\n\nfunction findScrollContainers(element) {\n  var result = [];\n  if (!element || element === document.body) return result;\n\n  var _window$getComputedSt = window.getComputedStyle(element),\n      overflow = _window$getComputedSt.overflow,\n      overflowX = _window$getComputedSt.overflowX,\n      overflowY = _window$getComputedSt.overflowY;\n\n  if ([overflow, overflowX, overflowY].some(function (prop) {\n    return prop === 'auto' || prop === 'scroll';\n  })) result.push(element);\n  return [].concat(result, _toConsumableArray(findScrollContainers(element.parentElement)));\n} // Checks if element boundaries are equal\n\n\nvar keys = ['x', 'y', 'top', 'bottom', 'left', 'right', 'width', 'height'];\n\nvar areBoundsEqual = function areBoundsEqual(a, b) {\n  return keys.every(function (key) {\n    return a[key] === b[key];\n  });\n};\n\nexport default useMeasure;","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/react-use-measure/dist/web.js"],"names":["useState","useRef","useEffect","useMemo","debounce","useMeasure","scroll","debounce$1","polyfill","ResizeObserver","window","Error","left","top","width","height","bottom","right","x","y","bounds","set","state","element","scrollContainers","resizeObserver","lastBounds","scrollDebounce","resizeDebounce","resize","mounted","current","callback","getBoundingClientRect","size","Object","freeze","areBoundsEqual","forceRefresh","resizeChange","scrollChange","removeListeners","forEach","removeEventListener","disconnect","addListeners","observe","scrollContainer","addEventListener","capture","passive","ref","node","findScrollContainers","useOnWindowScroll","Boolean","useOnWindowResize","onWindowResize","cb","onScroll","enabled","result","document","body","getComputedStyle","overflow","overflowX","overflowY","some","prop","push","parentElement","keys","a","b","every","key"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect, useMemo } from 'react';\nimport { debounce } from 'debounce';\n\nfunction useMeasure({\n  debounce: debounce$1,\n  scroll,\n  polyfill\n} = {\n  debounce: 0,\n  scroll: false\n}) {\n  const ResizeObserver = polyfill || (typeof window === 'undefined' ? class ResizeObserver {} : window.ResizeObserver);\n\n  if (!ResizeObserver) {\n    throw new Error('This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills');\n  }\n\n  const [bounds, set] = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    bottom: 0,\n    right: 0,\n    x: 0,\n    y: 0\n  }); // keep all state in a ref\n\n  const state = useRef({\n    element: null,\n    scrollContainers: null,\n    resizeObserver: null,\n    lastBounds: bounds\n  }); // set actual debounce values early, so effects know if they should react accordingly\n\n  const scrollDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.scroll : null;\n  const resizeDebounce = debounce$1 ? typeof debounce$1 === 'number' ? debounce$1 : debounce$1.resize : null; // make sure to update state only as long as the component is truly mounted\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => void (mounted.current = false);\n  }); // memoize handlers, so event-listeners know when they should update\n\n  const [forceRefresh, resizeChange, scrollChange] = useMemo(() => {\n    const callback = () => {\n      if (!state.current.element) return;\n      const {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      } = state.current.element.getBoundingClientRect();\n      const size = {\n        left,\n        top,\n        width,\n        height,\n        bottom,\n        right,\n        x,\n        y\n      };\n      Object.freeze(size);\n      if (mounted.current && !areBoundsEqual(state.current.lastBounds, size)) set(state.current.lastBounds = size);\n    };\n\n    return [callback, resizeDebounce ? debounce(callback, resizeDebounce) : callback, scrollDebounce ? debounce(callback, scrollDebounce) : callback];\n  }, [set, scrollDebounce, resizeDebounce]); // cleanup current scroll-listeners / observers\n\n  function removeListeners() {\n    if (state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(element => element.removeEventListener('scroll', scrollChange, true));\n      state.current.scrollContainers = null;\n    }\n\n    if (state.current.resizeObserver) {\n      state.current.resizeObserver.disconnect();\n      state.current.resizeObserver = null;\n    }\n  } // add scroll-listeners / observers\n\n\n  function addListeners() {\n    if (!state.current.element) return;\n    state.current.resizeObserver = new ResizeObserver(scrollChange);\n    state.current.resizeObserver.observe(state.current.element);\n\n    if (scroll && state.current.scrollContainers) {\n      state.current.scrollContainers.forEach(scrollContainer => scrollContainer.addEventListener('scroll', scrollChange, {\n        capture: true,\n        passive: true\n      }));\n    }\n  } // the ref we expose to the user\n\n\n  const ref = node => {\n    if (!node || node === state.current.element) return;\n    removeListeners();\n    state.current.element = node;\n    state.current.scrollContainers = findScrollContainers(node);\n    addListeners();\n  }; // add general event listeners\n\n\n  useOnWindowScroll(scrollChange, Boolean(scroll));\n  useOnWindowResize(resizeChange); // respond to changes that are relevant for the listeners\n\n  useEffect(() => {\n    removeListeners();\n    addListeners();\n  }, [scroll, scrollChange, resizeChange]); // remove all listeners when the components unmounts\n\n  useEffect(() => removeListeners, []);\n  return [ref, bounds, forceRefresh];\n} // Adds native resize listener to window\n\n\nfunction useOnWindowResize(onWindowResize) {\n  useEffect(() => {\n    const cb = onWindowResize;\n    window.addEventListener('resize', cb);\n    return () => void window.removeEventListener('resize', cb);\n  }, [onWindowResize]);\n}\n\nfunction useOnWindowScroll(onScroll, enabled) {\n  useEffect(() => {\n    if (enabled) {\n      const cb = onScroll;\n      window.addEventListener('scroll', cb, {\n        capture: true,\n        passive: true\n      });\n      return () => void window.removeEventListener('scroll', cb, true);\n    }\n  }, [onScroll, enabled]);\n} // Returns a list of scroll offsets\n\n\nfunction findScrollContainers(element) {\n  const result = [];\n  if (!element || element === document.body) return result;\n  const {\n    overflow,\n    overflowX,\n    overflowY\n  } = window.getComputedStyle(element);\n  if ([overflow, overflowX, overflowY].some(prop => prop === 'auto' || prop === 'scroll')) result.push(element);\n  return [...result, ...findScrollContainers(element.parentElement)];\n} // Checks if element boundaries are equal\n\n\nconst keys = ['x', 'y', 'top', 'bottom', 'left', 'right', 'width', 'height'];\n\nconst areBoundsEqual = (a, b) => keys.every(key => a[key] === b[key]);\n\nexport default useMeasure;\n"]},"metadata":{},"sourceType":"module"}