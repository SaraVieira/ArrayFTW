{"ast":null,"code":"import { Loader, FileLoader, Vector3, Matrix4 } from 'three';\nimport { gunzipSync } from 'fflate';\nimport { Volume } from '../misc/Volume.js';\n\nvar NRRDLoader = function NRRDLoader(manager) {\n  Loader.call(this, manager);\n};\n\nNRRDLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: NRRDLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function parse(data) {\n    // this parser is largely inspired from the XTK NRRD parser : https://github.com/xtk/X\n    var _data = data;\n    var _dataPointer = 0;\n\n    var _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n\n    var _littleEndian = true;\n    var headerObject = {};\n\n    function scan(type, chunks) {\n      if (chunks === undefined || chunks === null) {\n        chunks = 1;\n      }\n\n      var _chunkSize = 1;\n      var _array_type = Uint8Array;\n\n      switch (type) {\n        // 1 byte data types\n        case 'uchar':\n          break;\n\n        case 'schar':\n          _array_type = Int8Array;\n          break;\n        // 2 byte data types\n\n        case 'ushort':\n          _array_type = Uint16Array;\n          _chunkSize = 2;\n          break;\n\n        case 'sshort':\n          _array_type = Int16Array;\n          _chunkSize = 2;\n          break;\n        // 4 byte data types\n\n        case 'uint':\n          _array_type = Uint32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'sint':\n          _array_type = Int32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'float':\n          _array_type = Float32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'complex':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n\n        case 'double':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n      } // increase the data pointer in-place\n\n\n      var _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize)); // if required, flip the endianness of the bytes\n\n\n      if (_nativeLittleEndian != _littleEndian) {\n        // we need to flip here since the format doesn't match the native endianness\n        _bytes = flipEndianness(_bytes, _chunkSize);\n      }\n\n      if (chunks == 1) {\n        // if only one chunk was requested, just return one value\n        return _bytes[0];\n      } // return the byte array\n\n\n      return _bytes;\n    } //Flips typed array endianness in-place. Based on https://github.com/kig/DataStream.js/blob/master/DataStream.js.\n\n\n    function flipEndianness(array, chunkSize) {\n      var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n\n      for (var _i2 = 0; _i2 < array.byteLength; _i2 += chunkSize) {\n        for (var j = _i2 + chunkSize - 1, k = _i2; j > k; j--, k++) {\n          var tmp = u8[k];\n          u8[k] = u8[j];\n          u8[j] = tmp;\n        }\n      }\n\n      return array;\n    } //parse the header\n\n\n    function parseHeader(header) {\n      var data, field, fn, i, l, lines, m, _i, _len;\n\n      lines = header.split(/\\r?\\n/);\n\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        l = lines[_i];\n\n        if (l.match(/NRRD\\d+/)) {\n          headerObject.isNrrd = true;\n        } else if (l.match(/^#/)) ;else if (m = l.match(/(.*):(.*)/)) {\n          field = m[1].trim();\n          data = m[2].trim();\n          fn = NRRDLoader.prototype.fieldFunctions[field];\n\n          if (fn) {\n            fn.call(headerObject, data);\n          } else {\n            headerObject[field] = data;\n          }\n        }\n      }\n\n      if (!headerObject.isNrrd) {\n        throw new Error('Not an NRRD file');\n      }\n\n      if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n        throw new Error('Bzip is not supported');\n      }\n\n      if (!headerObject.vectors) {\n        //if no space direction is set, let's use the identity\n        headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)]; //apply spacing if defined\n\n        if (headerObject.spacings) {\n          for (i = 0; i <= 2; i++) {\n            if (!isNaN(headerObject.spacings[i])) {\n              headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n            }\n          }\n        }\n      }\n    } //parse the data when registred as one of this type : 'text', 'ascii', 'txt'\n\n\n    function parseDataAsText(data, start, end) {\n      var number = '';\n      start = start || 0;\n      end = end || data.length;\n      var value; //length of the result is the product of the sizes\n\n      var lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n        return previous * current;\n      }, 1);\n      var base = 10;\n\n      if (headerObject.encoding === 'hex') {\n        base = 16;\n      }\n\n      var result = new headerObject.__array(lengthOfTheResult);\n      var resultIndex = 0;\n      var parsingFunction = parseInt;\n\n      if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n        parsingFunction = parseFloat;\n      }\n\n      for (var _i3 = start; _i3 < end; _i3++) {\n        value = data[_i3]; //if value is not a space\n\n        if ((value < 9 || value > 13) && value !== 32) {\n          number += String.fromCharCode(value);\n        } else {\n          if (number !== '') {\n            result[resultIndex] = parsingFunction(number, base);\n            resultIndex++;\n          }\n\n          number = '';\n        }\n      }\n\n      if (number !== '') {\n        result[resultIndex] = parsingFunction(number, base);\n        resultIndex++;\n      }\n\n      return result;\n    }\n\n    var _bytes = scan('uchar', data.byteLength);\n\n    var _length = _bytes.length;\n    var _header = null;\n    var _data_start = 0;\n    var i;\n\n    for (i = 1; i < _length; i++) {\n      if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n        // we found two line breaks in a row\n        // now we know what the header is\n        _header = this.parseChars(_bytes, 0, i - 2); // this is were the data starts\n\n        _data_start = i + 1;\n        break;\n      }\n    } // parse the header\n\n\n    parseHeader(_header);\n\n    var _data = _bytes.subarray(_data_start); // the data without header\n\n\n    if (headerObject.encoding.substring(0, 2) === 'gz') {\n      // we need to decompress the datastream\n      // here we start the unzipping and get a typed Uint8Array back\n      _data = gunzipSync(new Uint8Array(_data)); // eslint-disable-line no-undef\n    } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n      _data = parseDataAsText(_data);\n    } else if (headerObject.encoding === 'raw') {\n      //we need to copy the array to create a new array buffer, else we retrieve the original arraybuffer with the header\n      var _copy = new Uint8Array(_data.length);\n\n      for (var _i4 = 0; _i4 < _data.length; _i4++) {\n        _copy[_i4] = _data[_i4];\n      }\n\n      _data = _copy;\n    } // .. let's use the underlying array buffer\n\n\n    _data = _data.buffer;\n    var volume = new Volume();\n    volume.header = headerObject; //\n    // parse the (unzipped) data to a datastream of the correct type\n    //\n\n    volume.data = new headerObject.__array(_data); // get the min and max intensities\n\n    var min_max = volume.computeMinMax();\n    var min = min_max[0];\n    var max = min_max[1]; // attach the scalar range to the volume\n\n    volume.windowLow = min;\n    volume.windowHigh = max; // get the image dimensions\n\n    volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n    volume.xLength = volume.dimensions[0];\n    volume.yLength = volume.dimensions[1];\n    volume.zLength = volume.dimensions[2]; // spacing\n\n    var spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n    var spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n    var spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n    volume.spacing = [spacingX, spacingY, spacingZ]; // Create IJKtoRAS matrix\n\n    volume.matrix = new Matrix4();\n    var _spaceX = 1;\n    var _spaceY = 1;\n    var _spaceZ = 1;\n\n    if (headerObject.space == 'left-posterior-superior') {\n      _spaceX = -1;\n      _spaceY = -1;\n    } else if (headerObject.space === 'left-anterior-superior') {\n      _spaceX = -1;\n    }\n\n    if (!headerObject.vectors) {\n      volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n    } else {\n      var v = headerObject.vectors;\n      volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n    }\n\n    volume.inverseMatrix = new Matrix4();\n    volume.inverseMatrix.copy(volume.matrix).invert();\n    volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs); // .. and set the default threshold\n    // only if the threshold was not already set\n\n    if (volume.lowerThreshold === -Infinity) {\n      volume.lowerThreshold = min;\n    }\n\n    if (volume.upperThreshold === Infinity) {\n      volume.upperThreshold = max;\n    }\n\n    return volume;\n  },\n  parseChars: function parseChars(array, start, end) {\n    // without borders, use the whole array\n    if (start === undefined) {\n      start = 0;\n    }\n\n    if (end === undefined) {\n      end = array.length;\n    }\n\n    var output = ''; // create and append the chars\n\n    var i = 0;\n\n    for (i = start; i < end; ++i) {\n      output += String.fromCharCode(array[i]);\n    }\n\n    return output;\n  },\n  fieldFunctions: {\n    type: function type(data) {\n      switch (data) {\n        case 'uchar':\n        case 'unsigned char':\n        case 'uint8':\n        case 'uint8_t':\n          this.__array = Uint8Array;\n          break;\n\n        case 'signed char':\n        case 'int8':\n        case 'int8_t':\n          this.__array = Int8Array;\n          break;\n\n        case 'short':\n        case 'short int':\n        case 'signed short':\n        case 'signed short int':\n        case 'int16':\n        case 'int16_t':\n          this.__array = Int16Array;\n          break;\n\n        case 'ushort':\n        case 'unsigned short':\n        case 'unsigned short int':\n        case 'uint16':\n        case 'uint16_t':\n          this.__array = Uint16Array;\n          break;\n\n        case 'int':\n        case 'signed int':\n        case 'int32':\n        case 'int32_t':\n          this.__array = Int32Array;\n          break;\n\n        case 'uint':\n        case 'unsigned int':\n        case 'uint32':\n        case 'uint32_t':\n          this.__array = Uint32Array;\n          break;\n\n        case 'float':\n          this.__array = Float32Array;\n          break;\n\n        case 'double':\n          this.__array = Float64Array;\n          break;\n\n        default:\n          throw new Error('Unsupported NRRD data type: ' + data);\n      }\n\n      return this.type = data;\n    },\n    endian: function endian(data) {\n      return this.endian = data;\n    },\n    encoding: function encoding(data) {\n      return this.encoding = data;\n    },\n    dimension: function dimension(data) {\n      return this.dim = parseInt(data, 10);\n    },\n    sizes: function sizes(data) {\n      var i;\n      return this.sizes = function () {\n        var _i, _len, _ref, _results;\n\n        _ref = data.split(/\\s+/);\n        _results = [];\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          i = _ref[_i];\n\n          _results.push(parseInt(i, 10));\n        }\n\n        return _results;\n      }();\n    },\n    space: function space(data) {\n      return this.space = data;\n    },\n    'space origin': function spaceOrigin(data) {\n      return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n    },\n    'space directions': function spaceDirections(data) {\n      var f, parts, v;\n      parts = data.match(/\\(.*?\\)/g);\n      return this.vectors = function () {\n        var _i, _len, _results;\n\n        _results = [];\n\n        for (_i = 0, _len = parts.length; _i < _len; _i++) {\n          v = parts[_i];\n\n          _results.push(function () {\n            var _j, _len2, _ref, _results2;\n\n            _ref = v.slice(1, -1).split(/,/);\n            _results2 = [];\n\n            for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n              f = _ref[_j];\n\n              _results2.push(parseFloat(f));\n            }\n\n            return _results2;\n          }());\n        }\n\n        return _results;\n      }();\n    },\n    spacings: function spacings(data) {\n      var f, parts;\n      parts = data.split(/\\s+/);\n      return this.spacings = function () {\n        var _i,\n            _len,\n            _results = [];\n\n        for (_i = 0, _len = parts.length; _i < _len; _i++) {\n          f = parts[_i];\n\n          _results.push(parseFloat(f));\n        }\n\n        return _results;\n      }();\n    }\n  }\n});\nexport { NRRDLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/NRRDLoader.js"],"names":["Loader","FileLoader","Vector3","Matrix4","gunzipSync","Volume","NRRDLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","_data","_dataPointer","_nativeLittleEndian","Int8Array","Int16Array","buffer","_littleEndian","headerObject","scan","type","chunks","undefined","_chunkSize","_array_type","Uint8Array","Uint16Array","Uint32Array","Int32Array","Float32Array","Float64Array","_bytes","slice","flipEndianness","array","chunkSize","u8","byteOffset","byteLength","i","j","k","tmp","parseHeader","header","field","fn","l","lines","m","_i","_len","split","length","match","isNrrd","trim","fieldFunctions","Error","encoding","vectors","spacings","isNaN","multiplyScalar","parseDataAsText","start","end","number","value","lengthOfTheResult","sizes","reduce","previous","current","base","result","__array","resultIndex","parsingFunction","parseInt","parseFloat","String","fromCharCode","_length","_header","_data_start","parseChars","subarray","substring","_copy","volume","min_max","computeMinMax","min","max","windowLow","windowHigh","dimensions","xLength","yLength","zLength","spacingX","spacingY","spacingZ","spacing","matrix","_spaceX","_spaceY","_spaceZ","space","set","v","inverseMatrix","copy","invert","RASDimensions","applyMatrix4","round","toArray","map","Math","abs","lowerThreshold","Infinity","upperThreshold","output","endian","dimension","dim","_ref","_results","push","space_origin","f","parts","_j","_len2","_results2"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, Vector3, Matrix4 } from 'three';\nimport { gunzipSync } from 'fflate';\nimport { Volume } from '../misc/Volume.js';\n\nvar NRRDLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nNRRDLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: NRRDLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    // this parser is largely inspired from the XTK NRRD parser : https://github.com/xtk/X\n    var _data = data;\n    var _dataPointer = 0;\n\n    var _nativeLittleEndian = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\n\n    var _littleEndian = true;\n    var headerObject = {};\n\n    function scan(type, chunks) {\n      if (chunks === undefined || chunks === null) {\n        chunks = 1;\n      }\n\n      var _chunkSize = 1;\n      var _array_type = Uint8Array;\n\n      switch (type) {\n        // 1 byte data types\n        case 'uchar':\n          break;\n\n        case 'schar':\n          _array_type = Int8Array;\n          break;\n        // 2 byte data types\n\n        case 'ushort':\n          _array_type = Uint16Array;\n          _chunkSize = 2;\n          break;\n\n        case 'sshort':\n          _array_type = Int16Array;\n          _chunkSize = 2;\n          break;\n        // 4 byte data types\n\n        case 'uint':\n          _array_type = Uint32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'sint':\n          _array_type = Int32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'float':\n          _array_type = Float32Array;\n          _chunkSize = 4;\n          break;\n\n        case 'complex':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n\n        case 'double':\n          _array_type = Float64Array;\n          _chunkSize = 8;\n          break;\n      } // increase the data pointer in-place\n\n\n      var _bytes = new _array_type(_data.slice(_dataPointer, _dataPointer += chunks * _chunkSize)); // if required, flip the endianness of the bytes\n\n\n      if (_nativeLittleEndian != _littleEndian) {\n        // we need to flip here since the format doesn't match the native endianness\n        _bytes = flipEndianness(_bytes, _chunkSize);\n      }\n\n      if (chunks == 1) {\n        // if only one chunk was requested, just return one value\n        return _bytes[0];\n      } // return the byte array\n\n\n      return _bytes;\n    } //Flips typed array endianness in-place. Based on https://github.com/kig/DataStream.js/blob/master/DataStream.js.\n\n\n    function flipEndianness(array, chunkSize) {\n      var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n\n      for (let i = 0; i < array.byteLength; i += chunkSize) {\n        for (let j = i + chunkSize - 1, k = i; j > k; j--, k++) {\n          var tmp = u8[k];\n          u8[k] = u8[j];\n          u8[j] = tmp;\n        }\n      }\n\n      return array;\n    } //parse the header\n\n\n    function parseHeader(header) {\n      var data, field, fn, i, l, lines, m, _i, _len;\n\n      lines = header.split(/\\r?\\n/);\n\n      for (_i = 0, _len = lines.length; _i < _len; _i++) {\n        l = lines[_i];\n\n        if (l.match(/NRRD\\d+/)) {\n          headerObject.isNrrd = true;\n        } else if (l.match(/^#/)) ; else if (m = l.match(/(.*):(.*)/)) {\n          field = m[1].trim();\n          data = m[2].trim();\n          fn = NRRDLoader.prototype.fieldFunctions[field];\n\n          if (fn) {\n            fn.call(headerObject, data);\n          } else {\n            headerObject[field] = data;\n          }\n        }\n      }\n\n      if (!headerObject.isNrrd) {\n        throw new Error('Not an NRRD file');\n      }\n\n      if (headerObject.encoding === 'bz2' || headerObject.encoding === 'bzip2') {\n        throw new Error('Bzip is not supported');\n      }\n\n      if (!headerObject.vectors) {\n        //if no space direction is set, let's use the identity\n        headerObject.vectors = [new Vector3(1, 0, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1)]; //apply spacing if defined\n\n        if (headerObject.spacings) {\n          for (i = 0; i <= 2; i++) {\n            if (!isNaN(headerObject.spacings[i])) {\n              headerObject.vectors[i].multiplyScalar(headerObject.spacings[i]);\n            }\n          }\n        }\n      }\n    } //parse the data when registred as one of this type : 'text', 'ascii', 'txt'\n\n\n    function parseDataAsText(data, start, end) {\n      var number = '';\n      start = start || 0;\n      end = end || data.length;\n      var value; //length of the result is the product of the sizes\n\n      var lengthOfTheResult = headerObject.sizes.reduce(function (previous, current) {\n        return previous * current;\n      }, 1);\n      var base = 10;\n\n      if (headerObject.encoding === 'hex') {\n        base = 16;\n      }\n\n      var result = new headerObject.__array(lengthOfTheResult);\n      var resultIndex = 0;\n      var parsingFunction = parseInt;\n\n      if (headerObject.__array === Float32Array || headerObject.__array === Float64Array) {\n        parsingFunction = parseFloat;\n      }\n\n      for (let i = start; i < end; i++) {\n        value = data[i]; //if value is not a space\n\n        if ((value < 9 || value > 13) && value !== 32) {\n          number += String.fromCharCode(value);\n        } else {\n          if (number !== '') {\n            result[resultIndex] = parsingFunction(number, base);\n            resultIndex++;\n          }\n\n          number = '';\n        }\n      }\n\n      if (number !== '') {\n        result[resultIndex] = parsingFunction(number, base);\n        resultIndex++;\n      }\n\n      return result;\n    }\n\n    var _bytes = scan('uchar', data.byteLength);\n\n    var _length = _bytes.length;\n    var _header = null;\n    var _data_start = 0;\n    var i;\n\n    for (i = 1; i < _length; i++) {\n      if (_bytes[i - 1] == 10 && _bytes[i] == 10) {\n        // we found two line breaks in a row\n        // now we know what the header is\n        _header = this.parseChars(_bytes, 0, i - 2); // this is were the data starts\n\n        _data_start = i + 1;\n        break;\n      }\n    } // parse the header\n\n\n    parseHeader(_header);\n\n    var _data = _bytes.subarray(_data_start); // the data without header\n\n\n    if (headerObject.encoding.substring(0, 2) === 'gz') {\n      // we need to decompress the datastream\n      // here we start the unzipping and get a typed Uint8Array back\n      _data = gunzipSync(new Uint8Array(_data)); // eslint-disable-line no-undef\n    } else if (headerObject.encoding === 'ascii' || headerObject.encoding === 'text' || headerObject.encoding === 'txt' || headerObject.encoding === 'hex') {\n      _data = parseDataAsText(_data);\n    } else if (headerObject.encoding === 'raw') {\n      //we need to copy the array to create a new array buffer, else we retrieve the original arraybuffer with the header\n      var _copy = new Uint8Array(_data.length);\n\n      for (let i = 0; i < _data.length; i++) {\n        _copy[i] = _data[i];\n      }\n\n      _data = _copy;\n    } // .. let's use the underlying array buffer\n\n\n    _data = _data.buffer;\n    var volume = new Volume();\n    volume.header = headerObject; //\n    // parse the (unzipped) data to a datastream of the correct type\n    //\n\n    volume.data = new headerObject.__array(_data); // get the min and max intensities\n\n    var min_max = volume.computeMinMax();\n    var min = min_max[0];\n    var max = min_max[1]; // attach the scalar range to the volume\n\n    volume.windowLow = min;\n    volume.windowHigh = max; // get the image dimensions\n\n    volume.dimensions = [headerObject.sizes[0], headerObject.sizes[1], headerObject.sizes[2]];\n    volume.xLength = volume.dimensions[0];\n    volume.yLength = volume.dimensions[1];\n    volume.zLength = volume.dimensions[2]; // spacing\n\n    var spacingX = new Vector3(headerObject.vectors[0][0], headerObject.vectors[0][1], headerObject.vectors[0][2]).length();\n    var spacingY = new Vector3(headerObject.vectors[1][0], headerObject.vectors[1][1], headerObject.vectors[1][2]).length();\n    var spacingZ = new Vector3(headerObject.vectors[2][0], headerObject.vectors[2][1], headerObject.vectors[2][2]).length();\n    volume.spacing = [spacingX, spacingY, spacingZ]; // Create IJKtoRAS matrix\n\n    volume.matrix = new Matrix4();\n    var _spaceX = 1;\n    var _spaceY = 1;\n    var _spaceZ = 1;\n\n    if (headerObject.space == 'left-posterior-superior') {\n      _spaceX = -1;\n      _spaceY = -1;\n    } else if (headerObject.space === 'left-anterior-superior') {\n      _spaceX = -1;\n    }\n\n    if (!headerObject.vectors) {\n      volume.matrix.set(_spaceX, 0, 0, 0, 0, _spaceY, 0, 0, 0, 0, _spaceZ, 0, 0, 0, 0, 1);\n    } else {\n      var v = headerObject.vectors;\n      volume.matrix.set(_spaceX * v[0][0], _spaceX * v[1][0], _spaceX * v[2][0], 0, _spaceY * v[0][1], _spaceY * v[1][1], _spaceY * v[2][1], 0, _spaceZ * v[0][2], _spaceZ * v[1][2], _spaceZ * v[2][2], 0, 0, 0, 0, 1);\n    }\n\n    volume.inverseMatrix = new Matrix4();\n    volume.inverseMatrix.copy(volume.matrix).invert();\n    volume.RASDimensions = new Vector3(volume.xLength, volume.yLength, volume.zLength).applyMatrix4(volume.matrix).round().toArray().map(Math.abs); // .. and set the default threshold\n    // only if the threshold was not already set\n\n    if (volume.lowerThreshold === -Infinity) {\n      volume.lowerThreshold = min;\n    }\n\n    if (volume.upperThreshold === Infinity) {\n      volume.upperThreshold = max;\n    }\n\n    return volume;\n  },\n  parseChars: function (array, start, end) {\n    // without borders, use the whole array\n    if (start === undefined) {\n      start = 0;\n    }\n\n    if (end === undefined) {\n      end = array.length;\n    }\n\n    var output = ''; // create and append the chars\n\n    var i = 0;\n\n    for (i = start; i < end; ++i) {\n      output += String.fromCharCode(array[i]);\n    }\n\n    return output;\n  },\n  fieldFunctions: {\n    type: function (data) {\n      switch (data) {\n        case 'uchar':\n        case 'unsigned char':\n        case 'uint8':\n        case 'uint8_t':\n          this.__array = Uint8Array;\n          break;\n\n        case 'signed char':\n        case 'int8':\n        case 'int8_t':\n          this.__array = Int8Array;\n          break;\n\n        case 'short':\n        case 'short int':\n        case 'signed short':\n        case 'signed short int':\n        case 'int16':\n        case 'int16_t':\n          this.__array = Int16Array;\n          break;\n\n        case 'ushort':\n        case 'unsigned short':\n        case 'unsigned short int':\n        case 'uint16':\n        case 'uint16_t':\n          this.__array = Uint16Array;\n          break;\n\n        case 'int':\n        case 'signed int':\n        case 'int32':\n        case 'int32_t':\n          this.__array = Int32Array;\n          break;\n\n        case 'uint':\n        case 'unsigned int':\n        case 'uint32':\n        case 'uint32_t':\n          this.__array = Uint32Array;\n          break;\n\n        case 'float':\n          this.__array = Float32Array;\n          break;\n\n        case 'double':\n          this.__array = Float64Array;\n          break;\n\n        default:\n          throw new Error('Unsupported NRRD data type: ' + data);\n      }\n\n      return this.type = data;\n    },\n    endian: function (data) {\n      return this.endian = data;\n    },\n    encoding: function (data) {\n      return this.encoding = data;\n    },\n    dimension: function (data) {\n      return this.dim = parseInt(data, 10);\n    },\n    sizes: function (data) {\n      var i;\n      return this.sizes = function () {\n        var _i, _len, _ref, _results;\n\n        _ref = data.split(/\\s+/);\n        _results = [];\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          i = _ref[_i];\n\n          _results.push(parseInt(i, 10));\n        }\n\n        return _results;\n      }();\n    },\n    space: function (data) {\n      return this.space = data;\n    },\n    'space origin': function (data) {\n      return this.space_origin = data.split('(')[1].split(')')[0].split(',');\n    },\n    'space directions': function (data) {\n      var f, parts, v;\n      parts = data.match(/\\(.*?\\)/g);\n      return this.vectors = function () {\n        var _i, _len, _results;\n\n        _results = [];\n\n        for (_i = 0, _len = parts.length; _i < _len; _i++) {\n          v = parts[_i];\n\n          _results.push(function () {\n            var _j, _len2, _ref, _results2;\n\n            _ref = v.slice(1, -1).split(/,/);\n            _results2 = [];\n\n            for (_j = 0, _len2 = _ref.length; _j < _len2; _j++) {\n              f = _ref[_j];\n\n              _results2.push(parseFloat(f));\n            }\n\n            return _results2;\n          }());\n        }\n\n        return _results;\n      }();\n    },\n    spacings: function (data) {\n      var f, parts;\n      parts = data.split(/\\s+/);\n      return this.spacings = function () {\n        var _i,\n            _len,\n            _results = [];\n\n        for (_i = 0, _len = parts.length; _i < _len; _i++) {\n          f = parts[_i];\n\n          _results.push(parseFloat(f));\n        }\n\n        return _results;\n      }();\n    }\n  }\n});\n\nexport { NRRDLoader };\n"]},"metadata":{},"sourceType":"module"}