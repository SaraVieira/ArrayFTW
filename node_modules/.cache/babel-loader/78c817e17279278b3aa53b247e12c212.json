{"ast":null,"code":"import { Color, ShaderMaterial, UniformsUtils, UniformsLib, BackSide } from 'three';\n/**\n * Reference: https://en.wikipedia.org/wiki/Cel_shading\n *\n * API\n *\n * 1. Traditional\n *\n * var effect = new OutlineEffect( renderer );\n *\n * function render() {\n *\n * \teffect.render( scene, camera );\n *\n * }\n *\n * 2. VR compatible\n *\n * var effect = new OutlineEffect( renderer );\n * var renderingOutline = false;\n *\n * scene.onAfterRender = function () {\n *\n * \tif ( renderingOutline ) return;\n *\n * \trenderingOutline = true;\n *\n * \teffect.renderOutline( scene, camera );\n *\n * \trenderingOutline = false;\n *\n * };\n *\n * function render() {\n *\n * \trenderer.render( scene, camera );\n *\n * }\n *\n * // How to set default outline parameters\n * new OutlineEffect( renderer, {\n * \tdefaultThickness: 0.01,\n * \tdefaultColor: [ 0, 0, 0 ],\n * \tdefaultAlpha: 0.8,\n * \tdefaultKeepAlive: true // keeps outline material in cache even if material is removed from scene\n * } );\n *\n * // How to set outline parameters for each material\n * material.userData.outlineParameters = {\n * \tthickness: 0.01,\n * \tcolor: [ 0, 0, 0 ]\n * \talpha: 0.8,\n * \tvisible: true,\n * \tkeepAlive: true\n * };\n */\n\nvar OutlineEffect = function OutlineEffect(renderer, parameters) {\n  parameters = parameters || {};\n  this.enabled = true;\n  var defaultThickness = parameters.defaultThickness !== undefined ? parameters.defaultThickness : 0.003;\n  var defaultColor = new Color().fromArray(parameters.defaultColor !== undefined ? parameters.defaultColor : [0, 0, 0]);\n  var defaultAlpha = parameters.defaultAlpha !== undefined ? parameters.defaultAlpha : 1.0;\n  var defaultKeepAlive = parameters.defaultKeepAlive !== undefined ? parameters.defaultKeepAlive : false; // object.material.uuid -> outlineMaterial or\n  // object.material[ n ].uuid -> outlineMaterial\n  // save at the outline material creation and release\n  // if it's unused removeThresholdCount frames\n  // unless keepAlive is true.\n\n  var cache = {};\n  var removeThresholdCount = 60; // outlineMaterial.uuid -> object.material or\n  // outlineMaterial.uuid -> object.material[ n ]\n  // save before render and release after render.\n\n  var originalMaterials = {}; // object.uuid -> originalOnBeforeRender\n  // save before render and release after render.\n\n  var originalOnBeforeRenders = {}; //this.cache = cache;  // for debug\n\n  var uniformsOutline = {\n    outlineThickness: {\n      value: defaultThickness\n    },\n    outlineColor: {\n      value: defaultColor\n    },\n    outlineAlpha: {\n      value: defaultAlpha\n    }\n  };\n  var vertexShader = ['#include <common>', '#include <uv_pars_vertex>', '#include <displacementmap_pars_vertex>', '#include <fog_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>', 'uniform float outlineThickness;', 'vec4 calculateOutline( vec4 pos, vec3 normal, vec4 skinned ) {', '\tfloat thickness = outlineThickness;', '\tconst float ratio = 1.0;', // TODO: support outline thickness ratio for each vertex\n  '\tvec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + normal, 1.0 );', // NOTE: subtract pos2 from pos because BackSide objectNormal is negative\n  '\tvec4 norm = normalize( pos - pos2 );', '\treturn pos + norm * thickness * pos.w * ratio;', '}', 'void main() {', '\t#include <uv_vertex>', '\t#include <beginnormal_vertex>', '\t#include <morphnormal_vertex>', '\t#include <skinbase_vertex>', '\t#include <skinnormal_vertex>', '\t#include <begin_vertex>', '\t#include <morphtarget_vertex>', '\t#include <skinning_vertex>', '\t#include <displacementmap_vertex>', '\t#include <project_vertex>', '\tvec3 outlineNormal = - objectNormal;', // the outline material is always rendered with BackSide\n  '\tgl_Position = calculateOutline( gl_Position, outlineNormal, vec4( transformed, 1.0 ) );', '\t#include <logdepthbuf_vertex>', '\t#include <clipping_planes_vertex>', '\t#include <fog_vertex>', '}'].join('\\n');\n  var fragmentShader = ['#include <common>', '#include <fog_pars_fragment>', '#include <logdepthbuf_pars_fragment>', '#include <clipping_planes_pars_fragment>', 'uniform vec3 outlineColor;', 'uniform float outlineAlpha;', 'void main() {', '\t#include <clipping_planes_fragment>', '\t#include <logdepthbuf_fragment>', '\tgl_FragColor = vec4( outlineColor, outlineAlpha );', '\t#include <tonemapping_fragment>', '\t#include <encodings_fragment>', '\t#include <fog_fragment>', '\t#include <premultiplied_alpha_fragment>', '}'].join('\\n');\n\n  function createMaterial() {\n    return new ShaderMaterial({\n      type: 'OutlineEffect',\n      uniforms: UniformsUtils.merge([UniformsLib['fog'], UniformsLib['displacementmap'], uniformsOutline]),\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      side: BackSide\n    });\n  }\n\n  function getOutlineMaterialFromCache(originalMaterial) {\n    var data = cache[originalMaterial.uuid];\n\n    if (data === undefined) {\n      data = {\n        material: createMaterial(),\n        used: true,\n        keepAlive: defaultKeepAlive,\n        count: 0\n      };\n      cache[originalMaterial.uuid] = data;\n    }\n\n    data.used = true;\n    return data.material;\n  }\n\n  function getOutlineMaterial(originalMaterial) {\n    var outlineMaterial = getOutlineMaterialFromCache(originalMaterial);\n    originalMaterials[outlineMaterial.uuid] = originalMaterial;\n    updateOutlineMaterial(outlineMaterial, originalMaterial);\n    return outlineMaterial;\n  }\n\n  function isCompatible(object) {\n    var geometry = object.geometry;\n    var hasNormals = false;\n\n    if (object.geometry !== undefined) {\n      if (geometry.isBufferGeometry) {\n        hasNormals = geometry.attributes.normal !== undefined;\n      } else {\n        hasNormals = true; // the renderer always produces a normal attribute for Geometry\n      }\n    }\n\n    return object.isMesh === true && object.material !== undefined && hasNormals === true;\n  }\n\n  function setOutlineMaterial(object) {\n    if (isCompatible(object) === false) return;\n\n    if (Array.isArray(object.material)) {\n      for (var i = 0, il = object.material.length; i < il; i++) {\n        object.material[i] = getOutlineMaterial(object.material[i]);\n      }\n    } else {\n      object.material = getOutlineMaterial(object.material);\n    }\n\n    originalOnBeforeRenders[object.uuid] = object.onBeforeRender;\n    object.onBeforeRender = onBeforeRender;\n  }\n\n  function restoreOriginalMaterial(object) {\n    if (isCompatible(object) === false) return;\n\n    if (Array.isArray(object.material)) {\n      for (var i = 0, il = object.material.length; i < il; i++) {\n        object.material[i] = originalMaterials[object.material[i].uuid];\n      }\n    } else {\n      object.material = originalMaterials[object.material.uuid];\n    }\n\n    object.onBeforeRender = originalOnBeforeRenders[object.uuid];\n  }\n\n  function onBeforeRender(renderer, scene, camera, geometry, material) {\n    var originalMaterial = originalMaterials[material.uuid]; // just in case\n\n    if (originalMaterial === undefined) return;\n    updateUniforms(material, originalMaterial);\n  }\n\n  function updateUniforms(material, originalMaterial) {\n    var outlineParameters = originalMaterial.userData.outlineParameters;\n    material.uniforms.outlineAlpha.value = originalMaterial.opacity;\n\n    if (outlineParameters !== undefined) {\n      if (outlineParameters.thickness !== undefined) material.uniforms.outlineThickness.value = outlineParameters.thickness;\n      if (outlineParameters.color !== undefined) material.uniforms.outlineColor.value.fromArray(outlineParameters.color);\n      if (outlineParameters.alpha !== undefined) material.uniforms.outlineAlpha.value = outlineParameters.alpha;\n    }\n\n    if (originalMaterial.displacementMap) {\n      material.uniforms.displacementMap.value = originalMaterial.displacementMap;\n      material.uniforms.displacementScale.value = originalMaterial.displacementScale;\n      material.uniforms.displacementBias.value = originalMaterial.displacementBias;\n    }\n  }\n\n  function updateOutlineMaterial(material, originalMaterial) {\n    if (material.name === 'invisible') return;\n    var outlineParameters = originalMaterial.userData.outlineParameters;\n    material.skinning = originalMaterial.skinning;\n    material.morphTargets = originalMaterial.morphTargets;\n    material.morphNormals = originalMaterial.morphNormals;\n    material.fog = originalMaterial.fog;\n    material.toneMapped = originalMaterial.toneMapped;\n    material.premultipliedAlpha = originalMaterial.premultipliedAlpha;\n    material.displacementMap = originalMaterial.displacementMap;\n\n    if (outlineParameters !== undefined) {\n      if (originalMaterial.visible === false) {\n        material.visible = false;\n      } else {\n        material.visible = outlineParameters.visible !== undefined ? outlineParameters.visible : true;\n      }\n\n      material.transparent = outlineParameters.alpha !== undefined && outlineParameters.alpha < 1.0 ? true : originalMaterial.transparent;\n      if (outlineParameters.keepAlive !== undefined) cache[originalMaterial.uuid].keepAlive = outlineParameters.keepAlive;\n    } else {\n      material.transparent = originalMaterial.transparent;\n      material.visible = originalMaterial.visible;\n    }\n\n    if (originalMaterial.wireframe === true || originalMaterial.depthTest === false) material.visible = false;\n\n    if (originalMaterial.clippingPlanes) {\n      material.clipping = true;\n      material.clippingPlanes = originalMaterial.clippingPlanes;\n      material.clipIntersection = originalMaterial.clipIntersection;\n      material.clipShadows = originalMaterial.clipShadows;\n    }\n\n    material.version = originalMaterial.version; // update outline material if necessary\n  }\n\n  function cleanupCache() {\n    var keys; // clear originialMaterials\n\n    keys = Object.keys(originalMaterials);\n\n    for (var i = 0, il = keys.length; i < il; i++) {\n      originalMaterials[keys[i]] = undefined;\n    } // clear originalOnBeforeRenders\n\n\n    keys = Object.keys(originalOnBeforeRenders);\n\n    for (var _i = 0, _il = keys.length; _i < _il; _i++) {\n      originalOnBeforeRenders[keys[_i]] = undefined;\n    } // remove unused outlineMaterial from cache\n\n\n    keys = Object.keys(cache);\n\n    for (var _i2 = 0, _il2 = keys.length; _i2 < _il2; _i2++) {\n      var key = keys[_i2];\n\n      if (cache[key].used === false) {\n        cache[key].count++;\n\n        if (cache[key].keepAlive === false && cache[key].count > removeThresholdCount) {\n          delete cache[key];\n        }\n      } else {\n        cache[key].used = false;\n        cache[key].count = 0;\n      }\n    }\n  }\n\n  this.render = function (scene, camera) {\n    var renderTarget;\n    var forceClear = false;\n\n    if (arguments[2] !== undefined) {\n      console.warn('THREE.OutlineEffect.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n      renderTarget = arguments[2];\n    }\n\n    if (arguments[3] !== undefined) {\n      console.warn('THREE.OutlineEffect.render(): the forceClear argument has been removed. Use .clear() instead.');\n      forceClear = arguments[3];\n    }\n\n    if (renderTarget !== undefined) renderer.setRenderTarget(renderTarget);\n    if (forceClear) renderer.clear();\n\n    if (this.enabled === false) {\n      renderer.render(scene, camera);\n      return;\n    }\n\n    var currentAutoClear = renderer.autoClear;\n    renderer.autoClear = this.autoClear;\n    renderer.render(scene, camera);\n    renderer.autoClear = currentAutoClear;\n    this.renderOutline(scene, camera);\n  };\n\n  this.renderOutline = function (scene, camera) {\n    var currentAutoClear = renderer.autoClear;\n    var currentSceneAutoUpdate = scene.autoUpdate;\n    var currentSceneBackground = scene.background;\n    var currentShadowMapEnabled = renderer.shadowMap.enabled;\n    scene.autoUpdate = false;\n    scene.background = null;\n    renderer.autoClear = false;\n    renderer.shadowMap.enabled = false;\n    scene.traverse(setOutlineMaterial);\n    renderer.render(scene, camera);\n    scene.traverse(restoreOriginalMaterial);\n    cleanupCache();\n    scene.autoUpdate = currentSceneAutoUpdate;\n    scene.background = currentSceneBackground;\n    renderer.autoClear = currentAutoClear;\n    renderer.shadowMap.enabled = currentShadowMapEnabled;\n  };\n  /*\n   * See #9918\n   *\n   * The following property copies and wrapper methods enable\n   * OutlineEffect to be called from other *Effect, like\n   *\n   * effect = new StereoEffect( new OutlineEffect( renderer ) );\n   *\n   * function render () {\n   *\n   * \teffect.render( scene, camera );\n   *\n   * }\n   */\n\n\n  this.autoClear = renderer.autoClear;\n  this.domElement = renderer.domElement;\n  this.shadowMap = renderer.shadowMap;\n\n  this.clear = function (color, depth, stencil) {\n    renderer.clear(color, depth, stencil);\n  };\n\n  this.getPixelRatio = function () {\n    return renderer.getPixelRatio();\n  };\n\n  this.setPixelRatio = function (value) {\n    renderer.setPixelRatio(value);\n  };\n\n  this.getSize = function (target) {\n    return renderer.getSize(target);\n  };\n\n  this.setSize = function (width, height, updateStyle) {\n    renderer.setSize(width, height, updateStyle);\n  };\n\n  this.setViewport = function (x, y, width, height) {\n    renderer.setViewport(x, y, width, height);\n  };\n\n  this.setScissor = function (x, y, width, height) {\n    renderer.setScissor(x, y, width, height);\n  };\n\n  this.setScissorTest = function (boolean) {\n    renderer.setScissorTest(boolean);\n  };\n\n  this.setRenderTarget = function (renderTarget) {\n    renderer.setRenderTarget(renderTarget);\n  };\n};\n\nexport { OutlineEffect };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/effects/OutlineEffect.js"],"names":["Color","ShaderMaterial","UniformsUtils","UniformsLib","BackSide","OutlineEffect","renderer","parameters","enabled","defaultThickness","undefined","defaultColor","fromArray","defaultAlpha","defaultKeepAlive","cache","removeThresholdCount","originalMaterials","originalOnBeforeRenders","uniformsOutline","outlineThickness","value","outlineColor","outlineAlpha","vertexShader","join","fragmentShader","createMaterial","type","uniforms","merge","side","getOutlineMaterialFromCache","originalMaterial","data","uuid","material","used","keepAlive","count","getOutlineMaterial","outlineMaterial","updateOutlineMaterial","isCompatible","object","geometry","hasNormals","isBufferGeometry","attributes","normal","isMesh","setOutlineMaterial","Array","isArray","i","il","length","onBeforeRender","restoreOriginalMaterial","scene","camera","updateUniforms","outlineParameters","userData","opacity","thickness","color","alpha","displacementMap","displacementScale","displacementBias","name","skinning","morphTargets","morphNormals","fog","toneMapped","premultipliedAlpha","visible","transparent","wireframe","depthTest","clippingPlanes","clipping","clipIntersection","clipShadows","version","cleanupCache","keys","Object","key","render","renderTarget","forceClear","arguments","console","warn","setRenderTarget","clear","currentAutoClear","autoClear","renderOutline","currentSceneAutoUpdate","autoUpdate","currentSceneBackground","background","currentShadowMapEnabled","shadowMap","traverse","domElement","depth","stencil","getPixelRatio","setPixelRatio","getSize","target","setSize","width","height","updateStyle","setViewport","x","y","setScissor","setScissorTest","boolean"],"mappings":"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","sourcesContent":["import { Color, ShaderMaterial, UniformsUtils, UniformsLib, BackSide } from 'three';\n\n/**\n * Reference: https://en.wikipedia.org/wiki/Cel_shading\n *\n * API\n *\n * 1. Traditional\n *\n * var effect = new OutlineEffect( renderer );\n *\n * function render() {\n *\n * \teffect.render( scene, camera );\n *\n * }\n *\n * 2. VR compatible\n *\n * var effect = new OutlineEffect( renderer );\n * var renderingOutline = false;\n *\n * scene.onAfterRender = function () {\n *\n * \tif ( renderingOutline ) return;\n *\n * \trenderingOutline = true;\n *\n * \teffect.renderOutline( scene, camera );\n *\n * \trenderingOutline = false;\n *\n * };\n *\n * function render() {\n *\n * \trenderer.render( scene, camera );\n *\n * }\n *\n * // How to set default outline parameters\n * new OutlineEffect( renderer, {\n * \tdefaultThickness: 0.01,\n * \tdefaultColor: [ 0, 0, 0 ],\n * \tdefaultAlpha: 0.8,\n * \tdefaultKeepAlive: true // keeps outline material in cache even if material is removed from scene\n * } );\n *\n * // How to set outline parameters for each material\n * material.userData.outlineParameters = {\n * \tthickness: 0.01,\n * \tcolor: [ 0, 0, 0 ]\n * \talpha: 0.8,\n * \tvisible: true,\n * \tkeepAlive: true\n * };\n */\n\nconst OutlineEffect = function (renderer, parameters) {\n  parameters = parameters || {};\n  this.enabled = true;\n  const defaultThickness = parameters.defaultThickness !== undefined ? parameters.defaultThickness : 0.003;\n  const defaultColor = new Color().fromArray(parameters.defaultColor !== undefined ? parameters.defaultColor : [0, 0, 0]);\n  const defaultAlpha = parameters.defaultAlpha !== undefined ? parameters.defaultAlpha : 1.0;\n  const defaultKeepAlive = parameters.defaultKeepAlive !== undefined ? parameters.defaultKeepAlive : false; // object.material.uuid -> outlineMaterial or\n  // object.material[ n ].uuid -> outlineMaterial\n  // save at the outline material creation and release\n  // if it's unused removeThresholdCount frames\n  // unless keepAlive is true.\n\n  const cache = {};\n  const removeThresholdCount = 60; // outlineMaterial.uuid -> object.material or\n  // outlineMaterial.uuid -> object.material[ n ]\n  // save before render and release after render.\n\n  const originalMaterials = {}; // object.uuid -> originalOnBeforeRender\n  // save before render and release after render.\n\n  const originalOnBeforeRenders = {}; //this.cache = cache;  // for debug\n\n  const uniformsOutline = {\n    outlineThickness: {\n      value: defaultThickness\n    },\n    outlineColor: {\n      value: defaultColor\n    },\n    outlineAlpha: {\n      value: defaultAlpha\n    }\n  };\n  const vertexShader = ['#include <common>', '#include <uv_pars_vertex>', '#include <displacementmap_pars_vertex>', '#include <fog_pars_vertex>', '#include <morphtarget_pars_vertex>', '#include <skinning_pars_vertex>', '#include <logdepthbuf_pars_vertex>', '#include <clipping_planes_pars_vertex>', 'uniform float outlineThickness;', 'vec4 calculateOutline( vec4 pos, vec3 normal, vec4 skinned ) {', '\tfloat thickness = outlineThickness;', '\tconst float ratio = 1.0;', // TODO: support outline thickness ratio for each vertex\n  '\tvec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + normal, 1.0 );', // NOTE: subtract pos2 from pos because BackSide objectNormal is negative\n  '\tvec4 norm = normalize( pos - pos2 );', '\treturn pos + norm * thickness * pos.w * ratio;', '}', 'void main() {', '\t#include <uv_vertex>', '\t#include <beginnormal_vertex>', '\t#include <morphnormal_vertex>', '\t#include <skinbase_vertex>', '\t#include <skinnormal_vertex>', '\t#include <begin_vertex>', '\t#include <morphtarget_vertex>', '\t#include <skinning_vertex>', '\t#include <displacementmap_vertex>', '\t#include <project_vertex>', '\tvec3 outlineNormal = - objectNormal;', // the outline material is always rendered with BackSide\n  '\tgl_Position = calculateOutline( gl_Position, outlineNormal, vec4( transformed, 1.0 ) );', '\t#include <logdepthbuf_vertex>', '\t#include <clipping_planes_vertex>', '\t#include <fog_vertex>', '}'].join('\\n');\n  const fragmentShader = ['#include <common>', '#include <fog_pars_fragment>', '#include <logdepthbuf_pars_fragment>', '#include <clipping_planes_pars_fragment>', 'uniform vec3 outlineColor;', 'uniform float outlineAlpha;', 'void main() {', '\t#include <clipping_planes_fragment>', '\t#include <logdepthbuf_fragment>', '\tgl_FragColor = vec4( outlineColor, outlineAlpha );', '\t#include <tonemapping_fragment>', '\t#include <encodings_fragment>', '\t#include <fog_fragment>', '\t#include <premultiplied_alpha_fragment>', '}'].join('\\n');\n\n  function createMaterial() {\n    return new ShaderMaterial({\n      type: 'OutlineEffect',\n      uniforms: UniformsUtils.merge([UniformsLib['fog'], UniformsLib['displacementmap'], uniformsOutline]),\n      vertexShader,\n      fragmentShader,\n      side: BackSide\n    });\n  }\n\n  function getOutlineMaterialFromCache(originalMaterial) {\n    let data = cache[originalMaterial.uuid];\n\n    if (data === undefined) {\n      data = {\n        material: createMaterial(),\n        used: true,\n        keepAlive: defaultKeepAlive,\n        count: 0\n      };\n      cache[originalMaterial.uuid] = data;\n    }\n\n    data.used = true;\n    return data.material;\n  }\n\n  function getOutlineMaterial(originalMaterial) {\n    const outlineMaterial = getOutlineMaterialFromCache(originalMaterial);\n    originalMaterials[outlineMaterial.uuid] = originalMaterial;\n    updateOutlineMaterial(outlineMaterial, originalMaterial);\n    return outlineMaterial;\n  }\n\n  function isCompatible(object) {\n    const geometry = object.geometry;\n    let hasNormals = false;\n\n    if (object.geometry !== undefined) {\n      if (geometry.isBufferGeometry) {\n        hasNormals = geometry.attributes.normal !== undefined;\n      } else {\n        hasNormals = true; // the renderer always produces a normal attribute for Geometry\n      }\n    }\n\n    return object.isMesh === true && object.material !== undefined && hasNormals === true;\n  }\n\n  function setOutlineMaterial(object) {\n    if (isCompatible(object) === false) return;\n\n    if (Array.isArray(object.material)) {\n      for (let i = 0, il = object.material.length; i < il; i++) {\n        object.material[i] = getOutlineMaterial(object.material[i]);\n      }\n    } else {\n      object.material = getOutlineMaterial(object.material);\n    }\n\n    originalOnBeforeRenders[object.uuid] = object.onBeforeRender;\n    object.onBeforeRender = onBeforeRender;\n  }\n\n  function restoreOriginalMaterial(object) {\n    if (isCompatible(object) === false) return;\n\n    if (Array.isArray(object.material)) {\n      for (let i = 0, il = object.material.length; i < il; i++) {\n        object.material[i] = originalMaterials[object.material[i].uuid];\n      }\n    } else {\n      object.material = originalMaterials[object.material.uuid];\n    }\n\n    object.onBeforeRender = originalOnBeforeRenders[object.uuid];\n  }\n\n  function onBeforeRender(renderer, scene, camera, geometry, material) {\n    const originalMaterial = originalMaterials[material.uuid]; // just in case\n\n    if (originalMaterial === undefined) return;\n    updateUniforms(material, originalMaterial);\n  }\n\n  function updateUniforms(material, originalMaterial) {\n    const outlineParameters = originalMaterial.userData.outlineParameters;\n    material.uniforms.outlineAlpha.value = originalMaterial.opacity;\n\n    if (outlineParameters !== undefined) {\n      if (outlineParameters.thickness !== undefined) material.uniforms.outlineThickness.value = outlineParameters.thickness;\n      if (outlineParameters.color !== undefined) material.uniforms.outlineColor.value.fromArray(outlineParameters.color);\n      if (outlineParameters.alpha !== undefined) material.uniforms.outlineAlpha.value = outlineParameters.alpha;\n    }\n\n    if (originalMaterial.displacementMap) {\n      material.uniforms.displacementMap.value = originalMaterial.displacementMap;\n      material.uniforms.displacementScale.value = originalMaterial.displacementScale;\n      material.uniforms.displacementBias.value = originalMaterial.displacementBias;\n    }\n  }\n\n  function updateOutlineMaterial(material, originalMaterial) {\n    if (material.name === 'invisible') return;\n    const outlineParameters = originalMaterial.userData.outlineParameters;\n    material.skinning = originalMaterial.skinning;\n    material.morphTargets = originalMaterial.morphTargets;\n    material.morphNormals = originalMaterial.morphNormals;\n    material.fog = originalMaterial.fog;\n    material.toneMapped = originalMaterial.toneMapped;\n    material.premultipliedAlpha = originalMaterial.premultipliedAlpha;\n    material.displacementMap = originalMaterial.displacementMap;\n\n    if (outlineParameters !== undefined) {\n      if (originalMaterial.visible === false) {\n        material.visible = false;\n      } else {\n        material.visible = outlineParameters.visible !== undefined ? outlineParameters.visible : true;\n      }\n\n      material.transparent = outlineParameters.alpha !== undefined && outlineParameters.alpha < 1.0 ? true : originalMaterial.transparent;\n      if (outlineParameters.keepAlive !== undefined) cache[originalMaterial.uuid].keepAlive = outlineParameters.keepAlive;\n    } else {\n      material.transparent = originalMaterial.transparent;\n      material.visible = originalMaterial.visible;\n    }\n\n    if (originalMaterial.wireframe === true || originalMaterial.depthTest === false) material.visible = false;\n\n    if (originalMaterial.clippingPlanes) {\n      material.clipping = true;\n      material.clippingPlanes = originalMaterial.clippingPlanes;\n      material.clipIntersection = originalMaterial.clipIntersection;\n      material.clipShadows = originalMaterial.clipShadows;\n    }\n\n    material.version = originalMaterial.version; // update outline material if necessary\n  }\n\n  function cleanupCache() {\n    let keys; // clear originialMaterials\n\n    keys = Object.keys(originalMaterials);\n\n    for (let i = 0, il = keys.length; i < il; i++) {\n      originalMaterials[keys[i]] = undefined;\n    } // clear originalOnBeforeRenders\n\n\n    keys = Object.keys(originalOnBeforeRenders);\n\n    for (let i = 0, il = keys.length; i < il; i++) {\n      originalOnBeforeRenders[keys[i]] = undefined;\n    } // remove unused outlineMaterial from cache\n\n\n    keys = Object.keys(cache);\n\n    for (let i = 0, il = keys.length; i < il; i++) {\n      const key = keys[i];\n\n      if (cache[key].used === false) {\n        cache[key].count++;\n\n        if (cache[key].keepAlive === false && cache[key].count > removeThresholdCount) {\n          delete cache[key];\n        }\n      } else {\n        cache[key].used = false;\n        cache[key].count = 0;\n      }\n    }\n  }\n\n  this.render = function (scene, camera) {\n    let renderTarget;\n    let forceClear = false;\n\n    if (arguments[2] !== undefined) {\n      console.warn('THREE.OutlineEffect.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n      renderTarget = arguments[2];\n    }\n\n    if (arguments[3] !== undefined) {\n      console.warn('THREE.OutlineEffect.render(): the forceClear argument has been removed. Use .clear() instead.');\n      forceClear = arguments[3];\n    }\n\n    if (renderTarget !== undefined) renderer.setRenderTarget(renderTarget);\n    if (forceClear) renderer.clear();\n\n    if (this.enabled === false) {\n      renderer.render(scene, camera);\n      return;\n    }\n\n    const currentAutoClear = renderer.autoClear;\n    renderer.autoClear = this.autoClear;\n    renderer.render(scene, camera);\n    renderer.autoClear = currentAutoClear;\n    this.renderOutline(scene, camera);\n  };\n\n  this.renderOutline = (scene, camera) => {\n    const currentAutoClear = renderer.autoClear;\n    const currentSceneAutoUpdate = scene.autoUpdate;\n    const currentSceneBackground = scene.background;\n    const currentShadowMapEnabled = renderer.shadowMap.enabled;\n    scene.autoUpdate = false;\n    scene.background = null;\n    renderer.autoClear = false;\n    renderer.shadowMap.enabled = false;\n    scene.traverse(setOutlineMaterial);\n    renderer.render(scene, camera);\n    scene.traverse(restoreOriginalMaterial);\n    cleanupCache();\n    scene.autoUpdate = currentSceneAutoUpdate;\n    scene.background = currentSceneBackground;\n    renderer.autoClear = currentAutoClear;\n    renderer.shadowMap.enabled = currentShadowMapEnabled;\n  };\n  /*\n   * See #9918\n   *\n   * The following property copies and wrapper methods enable\n   * OutlineEffect to be called from other *Effect, like\n   *\n   * effect = new StereoEffect( new OutlineEffect( renderer ) );\n   *\n   * function render () {\n   *\n   * \teffect.render( scene, camera );\n   *\n   * }\n   */\n\n\n  this.autoClear = renderer.autoClear;\n  this.domElement = renderer.domElement;\n  this.shadowMap = renderer.shadowMap;\n\n  this.clear = (color, depth, stencil) => {\n    renderer.clear(color, depth, stencil);\n  };\n\n  this.getPixelRatio = () => renderer.getPixelRatio();\n\n  this.setPixelRatio = value => {\n    renderer.setPixelRatio(value);\n  };\n\n  this.getSize = target => renderer.getSize(target);\n\n  this.setSize = (width, height, updateStyle) => {\n    renderer.setSize(width, height, updateStyle);\n  };\n\n  this.setViewport = (x, y, width, height) => {\n    renderer.setViewport(x, y, width, height);\n  };\n\n  this.setScissor = (x, y, width, height) => {\n    renderer.setScissor(x, y, width, height);\n  };\n\n  this.setScissorTest = boolean => {\n    renderer.setScissorTest(boolean);\n  };\n\n  this.setRenderTarget = renderTarget => {\n    renderer.setRenderTarget(renderTarget);\n  };\n};\n\nexport { OutlineEffect };\n"]},"metadata":{},"sourceType":"module"}