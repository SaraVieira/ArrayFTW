{"ast":null,"code":"import _regeneratorRuntime from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction AmmoPhysics() {\n  return _AmmoPhysics.apply(this, arguments);\n}\n\nfunction _AmmoPhysics() {\n  _AmmoPhysics = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var AmmoLib, frameRate, collisionConfiguration, dispatcher, broadphase, solver, world, worldTransform, getShape, meshes, meshMap, addMesh, handleMesh, handleInstancedMesh, setMeshPosition, lastTime, step;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            step = function _step() {\n              var time = performance.now();\n\n              if (lastTime > 0) {\n                var delta = (time - lastTime) / 1000; // console.time( 'world.step' );\n\n                world.stepSimulation(delta, 10); // console.timeEnd( 'world.step' );\n              }\n\n              lastTime = time; //\n\n              for (var i = 0, l = meshes.length; i < l; i++) {\n                var mesh = meshes[i];\n\n                if (mesh.isInstancedMesh) {\n                  var array = mesh.instanceMatrix.array;\n                  var bodies = meshMap.get(mesh);\n\n                  for (var j = 0; j < bodies.length; j++) {\n                    var body = bodies[j];\n                    var motionState = body.getMotionState();\n                    motionState.getWorldTransform(worldTransform);\n                    var position = worldTransform.getOrigin();\n                    var quaternion = worldTransform.getRotation();\n                    compose(position, quaternion, array, j * 16);\n                  }\n\n                  mesh.instanceMatrix.needsUpdate = true;\n                } else if (mesh.isMesh) {\n                  var _body2 = meshMap.get(mesh);\n\n                  var _motionState = _body2.getMotionState();\n\n                  _motionState.getWorldTransform(worldTransform);\n\n                  var _position = worldTransform.getOrigin();\n\n                  var _quaternion = worldTransform.getRotation();\n\n                  mesh.position.set(_position.x(), _position.y(), _position.z());\n                  mesh.quaternion.set(_quaternion.x(), _quaternion.y(), _quaternion.z(), _quaternion.w());\n                }\n              }\n            };\n\n            setMeshPosition = function _setMeshPosition(mesh, position) {\n              var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n              if (mesh.isInstancedMesh) {\n                var bodies = meshMap.get(mesh);\n                var body = bodies[index];\n                body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n                body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n                worldTransform.setIdentity();\n                worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n                body.setWorldTransform(worldTransform);\n              } else if (mesh.isMesh) {\n                var _body = meshMap.get(mesh);\n\n                _body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n\n                _body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n\n                worldTransform.setIdentity();\n                worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n\n                _body.setWorldTransform(worldTransform);\n              }\n            };\n\n            handleInstancedMesh = function _handleInstancedMesh(mesh, mass, shape) {\n              var array = mesh.instanceMatrix.array;\n              var bodies = [];\n\n              for (var i = 0; i < mesh.count; i++) {\n                var index = i * 16;\n                var transform = new AmmoLib.btTransform();\n                transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n                var motionState = new AmmoLib.btDefaultMotionState(transform);\n                var localInertia = new AmmoLib.btVector3(0, 0, 0);\n                shape.calculateLocalInertia(mass, localInertia);\n                var rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n                var body = new AmmoLib.btRigidBody(rbInfo);\n                world.addRigidBody(body);\n                bodies.push(body);\n              }\n\n              if (mass > 0) {\n                mesh.instanceMatrix.setUsage(35048); // THREE.DynamicDrawUsage = 35048\n\n                meshes.push(mesh);\n                meshMap.set(mesh, bodies);\n              }\n            };\n\n            handleMesh = function _handleMesh(mesh, mass, shape) {\n              var position = mesh.position;\n              var quaternion = mesh.quaternion;\n              var transform = new AmmoLib.btTransform();\n              transform.setIdentity();\n              transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n              transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n              var motionState = new AmmoLib.btDefaultMotionState(transform);\n              var localInertia = new AmmoLib.btVector3(0, 0, 0);\n              shape.calculateLocalInertia(mass, localInertia);\n              var rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n              var body = new AmmoLib.btRigidBody(rbInfo); // body.setFriction( 4 );\n\n              world.addRigidBody(body);\n\n              if (mass > 0) {\n                meshes.push(mesh);\n                meshMap.set(mesh, body);\n              }\n            };\n\n            addMesh = function _addMesh(mesh) {\n              var mass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n              var shape = getShape(mesh.geometry);\n\n              if (shape !== null) {\n                if (mesh.isInstancedMesh) {\n                  handleInstancedMesh(mesh, mass, shape);\n                } else if (mesh.isMesh) {\n                  handleMesh(mesh, mass, shape);\n                }\n              }\n            };\n\n            getShape = function _getShape(geometry) {\n              var parameters = geometry.parameters; // TODO change type to is*\n\n              if (geometry.type === 'BoxGeometry') {\n                var sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n                var sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n                var sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n                var shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n                shape.setMargin(0.05);\n                return shape;\n              } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\n                var radius = parameters.radius !== undefined ? parameters.radius : 1;\n\n                var _shape = new AmmoLib.btSphereShape(radius);\n\n                _shape.setMargin(0.05);\n\n                return _shape;\n              }\n\n              return null;\n            };\n\n            if (!('Ammo' in window === false)) {\n              _context.next = 9;\n              break;\n            }\n\n            console.error(\"AmmoPhysics: Couldn't find Ammo.js\");\n            return _context.abrupt(\"return\");\n\n          case 9:\n            _context.next = 11;\n            return Ammo();\n\n          case 11:\n            AmmoLib = _context.sent;\n            // eslint-disable-line no-undef\n            frameRate = 60;\n            collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n            dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n            broadphase = new AmmoLib.btDbvtBroadphase();\n            solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n            world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n            world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n            worldTransform = new AmmoLib.btTransform(); //\n\n            meshes = [];\n            meshMap = new WeakMap();\n            //\n            lastTime = 0;\n            // animate\n            setInterval(step, 1000 / frameRate);\n            return _context.abrupt(\"return\", {\n              addMesh: addMesh,\n              setMeshPosition: setMeshPosition // addCompoundMesh\n\n            });\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _AmmoPhysics.apply(this, arguments);\n}\n\nfunction compose(position, quaternion, array, index) {\n  var x = quaternion.x(),\n      y = quaternion.y(),\n      z = quaternion.z(),\n      w = quaternion.w();\n  var x2 = x + x,\n      y2 = y + y,\n      z2 = z + z;\n  var xx = x * x2,\n      xy = x * y2,\n      xz = x * z2;\n  var yy = y * y2,\n      yz = y * z2,\n      zz = z * z2;\n  var wx = w * x2,\n      wy = w * y2,\n      wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\n\nexport { AmmoPhysics };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/physics/AmmoPhysics.js"],"names":["AmmoPhysics","getShape","addMesh","handleMesh","handleInstancedMesh","setMeshPosition","step","time","performance","now","lastTime","delta","world","stepSimulation","i","l","meshes","length","mesh","isInstancedMesh","array","instanceMatrix","bodies","meshMap","get","j","body","motionState","getMotionState","getWorldTransform","worldTransform","position","getOrigin","quaternion","getRotation","compose","needsUpdate","isMesh","set","x","y","z","w","index","setAngularVelocity","AmmoLib","btVector3","setLinearVelocity","setIdentity","setOrigin","setWorldTransform","mass","shape","count","transform","btTransform","setFromOpenGLMatrix","slice","btDefaultMotionState","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","btRigidBody","addRigidBody","push","setUsage","setRotation","btQuaternion","geometry","parameters","type","sx","width","undefined","sy","height","sz","depth","btBoxShape","setMargin","radius","btSphereShape","window","console","error","Ammo","frameRate","collisionConfiguration","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","broadphase","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","setGravity","WeakMap","setInterval","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz"],"mappings":"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","sourcesContent":["async function AmmoPhysics() {\n  if ('Ammo' in window === false) {\n    console.error(\"AmmoPhysics: Couldn't find Ammo.js\");\n    return;\n  }\n\n  const AmmoLib = await Ammo(); // eslint-disable-line no-undef\n\n  const frameRate = 60;\n  const collisionConfiguration = new AmmoLib.btDefaultCollisionConfiguration();\n  const dispatcher = new AmmoLib.btCollisionDispatcher(collisionConfiguration);\n  const broadphase = new AmmoLib.btDbvtBroadphase();\n  const solver = new AmmoLib.btSequentialImpulseConstraintSolver();\n  const world = new AmmoLib.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n  world.setGravity(new AmmoLib.btVector3(0, -9.8, 0));\n  const worldTransform = new AmmoLib.btTransform(); //\n\n  function getShape(geometry) {\n    const parameters = geometry.parameters; // TODO change type to is*\n\n    if (geometry.type === 'BoxGeometry') {\n      const sx = parameters.width !== undefined ? parameters.width / 2 : 0.5;\n      const sy = parameters.height !== undefined ? parameters.height / 2 : 0.5;\n      const sz = parameters.depth !== undefined ? parameters.depth / 2 : 0.5;\n      const shape = new AmmoLib.btBoxShape(new AmmoLib.btVector3(sx, sy, sz));\n      shape.setMargin(0.05);\n      return shape;\n    } else if (geometry.type === 'SphereGeometry' || geometry.type === 'IcosahedronGeometry') {\n      const radius = parameters.radius !== undefined ? parameters.radius : 1;\n      const shape = new AmmoLib.btSphereShape(radius);\n      shape.setMargin(0.05);\n      return shape;\n    }\n\n    return null;\n  }\n\n  const meshes = [];\n  const meshMap = new WeakMap();\n\n  function addMesh(mesh, mass = 0) {\n    const shape = getShape(mesh.geometry);\n\n    if (shape !== null) {\n      if (mesh.isInstancedMesh) {\n        handleInstancedMesh(mesh, mass, shape);\n      } else if (mesh.isMesh) {\n        handleMesh(mesh, mass, shape);\n      }\n    }\n  }\n\n  function handleMesh(mesh, mass, shape) {\n    const position = mesh.position;\n    const quaternion = mesh.quaternion;\n    const transform = new AmmoLib.btTransform();\n    transform.setIdentity();\n    transform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n    transform.setRotation(new AmmoLib.btQuaternion(quaternion.x, quaternion.y, quaternion.z, quaternion.w));\n    const motionState = new AmmoLib.btDefaultMotionState(transform);\n    const localInertia = new AmmoLib.btVector3(0, 0, 0);\n    shape.calculateLocalInertia(mass, localInertia);\n    const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n    const body = new AmmoLib.btRigidBody(rbInfo); // body.setFriction( 4 );\n\n    world.addRigidBody(body);\n\n    if (mass > 0) {\n      meshes.push(mesh);\n      meshMap.set(mesh, body);\n    }\n  }\n\n  function handleInstancedMesh(mesh, mass, shape) {\n    const array = mesh.instanceMatrix.array;\n    const bodies = [];\n\n    for (let i = 0; i < mesh.count; i++) {\n      const index = i * 16;\n      const transform = new AmmoLib.btTransform();\n      transform.setFromOpenGLMatrix(array.slice(index, index + 16));\n      const motionState = new AmmoLib.btDefaultMotionState(transform);\n      const localInertia = new AmmoLib.btVector3(0, 0, 0);\n      shape.calculateLocalInertia(mass, localInertia);\n      const rbInfo = new AmmoLib.btRigidBodyConstructionInfo(mass, motionState, shape, localInertia);\n      const body = new AmmoLib.btRigidBody(rbInfo);\n      world.addRigidBody(body);\n      bodies.push(body);\n    }\n\n    if (mass > 0) {\n      mesh.instanceMatrix.setUsage(35048); // THREE.DynamicDrawUsage = 35048\n\n      meshes.push(mesh);\n      meshMap.set(mesh, bodies);\n    }\n  } //\n\n\n  function setMeshPosition(mesh, position, index = 0) {\n    if (mesh.isInstancedMesh) {\n      const bodies = meshMap.get(mesh);\n      const body = bodies[index];\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    } else if (mesh.isMesh) {\n      const body = meshMap.get(mesh);\n      body.setAngularVelocity(new AmmoLib.btVector3(0, 0, 0));\n      body.setLinearVelocity(new AmmoLib.btVector3(0, 0, 0));\n      worldTransform.setIdentity();\n      worldTransform.setOrigin(new AmmoLib.btVector3(position.x, position.y, position.z));\n      body.setWorldTransform(worldTransform);\n    }\n  } //\n\n\n  let lastTime = 0;\n\n  function step() {\n    const time = performance.now();\n\n    if (lastTime > 0) {\n      const delta = (time - lastTime) / 1000; // console.time( 'world.step' );\n\n      world.stepSimulation(delta, 10); // console.timeEnd( 'world.step' );\n    }\n\n    lastTime = time; //\n\n    for (let i = 0, l = meshes.length; i < l; i++) {\n      const mesh = meshes[i];\n\n      if (mesh.isInstancedMesh) {\n        const array = mesh.instanceMatrix.array;\n        const bodies = meshMap.get(mesh);\n\n        for (let j = 0; j < bodies.length; j++) {\n          const body = bodies[j];\n          const motionState = body.getMotionState();\n          motionState.getWorldTransform(worldTransform);\n          const position = worldTransform.getOrigin();\n          const quaternion = worldTransform.getRotation();\n          compose(position, quaternion, array, j * 16);\n        }\n\n        mesh.instanceMatrix.needsUpdate = true;\n      } else if (mesh.isMesh) {\n        const body = meshMap.get(mesh);\n        const motionState = body.getMotionState();\n        motionState.getWorldTransform(worldTransform);\n        const position = worldTransform.getOrigin();\n        const quaternion = worldTransform.getRotation();\n        mesh.position.set(position.x(), position.y(), position.z());\n        mesh.quaternion.set(quaternion.x(), quaternion.y(), quaternion.z(), quaternion.w());\n      }\n    }\n  } // animate\n\n\n  setInterval(step, 1000 / frameRate);\n  return {\n    addMesh: addMesh,\n    setMeshPosition: setMeshPosition // addCompoundMesh\n\n  };\n}\n\nfunction compose(position, quaternion, array, index) {\n  const x = quaternion.x(),\n        y = quaternion.y(),\n        z = quaternion.z(),\n        w = quaternion.w();\n  const x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n  const xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n  const yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n  const wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n  array[index + 0] = 1 - (yy + zz);\n  array[index + 1] = xy + wz;\n  array[index + 2] = xz - wy;\n  array[index + 3] = 0;\n  array[index + 4] = xy - wz;\n  array[index + 5] = 1 - (xx + zz);\n  array[index + 6] = yz + wx;\n  array[index + 7] = 0;\n  array[index + 8] = xz + wy;\n  array[index + 9] = yz - wx;\n  array[index + 10] = 1 - (xx + yy);\n  array[index + 11] = 0;\n  array[index + 12] = position.x();\n  array[index + 13] = position.y();\n  array[index + 14] = position.z();\n  array[index + 15] = 1;\n}\n\nexport { AmmoPhysics };\n"]},"metadata":{},"sourceType":"module"}