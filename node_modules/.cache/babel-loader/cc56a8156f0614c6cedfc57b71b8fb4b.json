{"ast":null,"code":"import { MathUtils } from 'three';\nvar ColorConverter = {\n  setHSV: function setHSV(color, h, s, v) {\n    // https://gist.github.com/xpansive/1337890#file-index-js\n    h = MathUtils.euclideanModulo(h, 1);\n    s = MathUtils.clamp(s, 0, 1);\n    v = MathUtils.clamp(v, 0, 1);\n    return color.setHSL(h, s * v / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5);\n  },\n  getHSV: function () {\n    var hsl = {};\n    return function getHSV(color, target) {\n      if (target === undefined) {\n        console.warn('THREE.ColorConverter: .getHSV() target is now required');\n        target = {\n          h: 0,\n          s: 0,\n          l: 0\n        };\n      }\n\n      color.getHSL(hsl); // based on https://gist.github.com/xpansive/1337890#file-index-js\n\n      hsl.s *= hsl.l < 0.5 ? hsl.l : 1 - hsl.l;\n      target.h = hsl.h;\n      target.s = 2 * hsl.s / (hsl.l + hsl.s);\n      target.v = hsl.l + hsl.s;\n      return target;\n    };\n  }(),\n  // where c, m, y, k is between 0 and 1\n  setCMYK: function setCMYK(color, c, m, y, k) {\n    var r = (1 - c) * (1 - k);\n    var g = (1 - m) * (1 - k);\n    var b = (1 - y) * (1 - k);\n    return color.setRGB(r, g, b);\n  },\n  getCMYK: function getCMYK(color, target) {\n    if (target === undefined) {\n      console.warn('THREE.ColorConverter: .getCMYK() target is now required');\n      target = {\n        c: 0,\n        m: 0,\n        y: 0,\n        k: 0\n      };\n    }\n\n    var r = color.r;\n    var g = color.g;\n    var b = color.b;\n    var k = 1 - Math.max(r, g, b);\n    var c = (1 - r - k) / (1 - k);\n    var m = (1 - g - k) / (1 - k);\n    var y = (1 - b - k) / (1 - k);\n    target.c = c;\n    target.m = m;\n    target.y = y;\n    target.k = k;\n    return target;\n  }\n};\nexport { ColorConverter };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/math/ColorConverter.js"],"names":["MathUtils","ColorConverter","setHSV","color","h","s","v","euclideanModulo","clamp","setHSL","getHSV","hsl","target","undefined","console","warn","l","getHSL","setCMYK","c","m","y","k","r","g","b","setRGB","getCMYK","Math","max"],"mappings":"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","sourcesContent":["import { MathUtils } from 'three';\n\nvar ColorConverter = {\n  setHSV: function (color, h, s, v) {\n    // https://gist.github.com/xpansive/1337890#file-index-js\n    h = MathUtils.euclideanModulo(h, 1);\n    s = MathUtils.clamp(s, 0, 1);\n    v = MathUtils.clamp(v, 0, 1);\n    return color.setHSL(h, s * v / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5);\n  },\n  getHSV: function () {\n    var hsl = {};\n    return function getHSV(color, target) {\n      if (target === undefined) {\n        console.warn('THREE.ColorConverter: .getHSV() target is now required');\n        target = {\n          h: 0,\n          s: 0,\n          l: 0\n        };\n      }\n\n      color.getHSL(hsl); // based on https://gist.github.com/xpansive/1337890#file-index-js\n\n      hsl.s *= hsl.l < 0.5 ? hsl.l : 1 - hsl.l;\n      target.h = hsl.h;\n      target.s = 2 * hsl.s / (hsl.l + hsl.s);\n      target.v = hsl.l + hsl.s;\n      return target;\n    };\n  }(),\n  // where c, m, y, k is between 0 and 1\n  setCMYK: function (color, c, m, y, k) {\n    var r = (1 - c) * (1 - k);\n    var g = (1 - m) * (1 - k);\n    var b = (1 - y) * (1 - k);\n    return color.setRGB(r, g, b);\n  },\n  getCMYK: function (color, target) {\n    if (target === undefined) {\n      console.warn('THREE.ColorConverter: .getCMYK() target is now required');\n      target = {\n        c: 0,\n        m: 0,\n        y: 0,\n        k: 0\n      };\n    }\n\n    var r = color.r;\n    var g = color.g;\n    var b = color.b;\n    var k = 1 - Math.max(r, g, b);\n    var c = (1 - r - k) / (1 - k);\n    var m = (1 - g - k) / (1 - k);\n    var y = (1 - b - k) / (1 - k);\n    target.c = c;\n    target.m = m;\n    target.y = y;\n    target.k = k;\n    return target;\n  }\n};\n\nexport { ColorConverter };\n"]},"metadata":{},"sourceType":"module"}