{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass } from './Pass.js';\n\nvar MaskPass = /*#__PURE__*/function (_Pass) {\n  _inherits(MaskPass, _Pass);\n\n  var _super = _createSuper(MaskPass);\n\n  function MaskPass(scene, camera) {\n    var _this;\n\n    _classCallCheck(this, MaskPass);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"scene\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"camera\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"inverse\", void 0);\n\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.clear = true;\n    _this.needsSwap = false;\n    _this.inverse = false;\n    return _this;\n  }\n\n  _createClass(MaskPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer) {\n      var context = renderer.getContext();\n      var state = renderer.state; // don't update color or depth\n\n      state.buffers.color.setMask(false);\n      state.buffers.depth.setMask(false); // lock buffers\n\n      state.buffers.color.setLocked(true);\n      state.buffers.depth.setLocked(true); // set up stencil\n\n      var writeValue, clearValue;\n\n      if (this.inverse) {\n        writeValue = 0;\n        clearValue = 1;\n      } else {\n        writeValue = 1;\n        clearValue = 0;\n      }\n\n      state.buffers.stencil.setTest(true);\n      state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n      state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n      state.buffers.stencil.setClear(clearValue);\n      state.buffers.stencil.setLocked(true); // draw into the stencil buffer\n\n      renderer.setRenderTarget(readBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera);\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      renderer.render(this.scene, this.camera); // unlock color and depth buffer for subsequent rendering\n\n      state.buffers.color.setLocked(false);\n      state.buffers.depth.setLocked(false); // only render where stencil is set to 1\n\n      state.buffers.stencil.setLocked(false);\n      state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n      state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n      state.buffers.stencil.setLocked(true);\n    }\n  }]);\n\n  return MaskPass;\n}(Pass);\n\nvar ClearMaskPass = /*#__PURE__*/function (_Pass2) {\n  _inherits(ClearMaskPass, _Pass2);\n\n  var _super2 = _createSuper(ClearMaskPass);\n\n  function ClearMaskPass() {\n    var _this2;\n\n    _classCallCheck(this, ClearMaskPass);\n\n    _this2 = _super2.call(this);\n    _this2.needsSwap = false;\n    return _this2;\n  }\n\n  _createClass(ClearMaskPass, [{\n    key: \"render\",\n    value: function render(renderer) {\n      renderer.state.buffers.stencil.setLocked(false);\n      renderer.state.buffers.stencil.setTest(false);\n    }\n  }]);\n\n  return ClearMaskPass;\n}(Pass);\n\nexport { ClearMaskPass, MaskPass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/MaskPass.js"],"names":["_defineProperty","Pass","MaskPass","scene","camera","clear","needsSwap","inverse","renderer","writeBuffer","readBuffer","context","getContext","state","buffers","color","setMask","depth","setLocked","writeValue","clearValue","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","setRenderTarget","render","EQUAL","KEEP","ClearMaskPass"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n  constructor(scene, camera) {\n    super();\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"inverse\", void 0);\n\n    this.scene = scene;\n    this.camera = camera;\n    this.clear = true;\n    this.needsSwap = false;\n    this.inverse = false;\n  }\n\n  render(renderer, writeBuffer, readBuffer) {\n    const context = renderer.getContext();\n    const state = renderer.state; // don't update color or depth\n\n    state.buffers.color.setMask(false);\n    state.buffers.depth.setMask(false); // lock buffers\n\n    state.buffers.color.setLocked(true);\n    state.buffers.depth.setLocked(true); // set up stencil\n\n    let writeValue, clearValue;\n\n    if (this.inverse) {\n      writeValue = 0;\n      clearValue = 1;\n    } else {\n      writeValue = 1;\n      clearValue = 0;\n    }\n\n    state.buffers.stencil.setTest(true);\n    state.buffers.stencil.setOp(context.REPLACE, context.REPLACE, context.REPLACE);\n    state.buffers.stencil.setFunc(context.ALWAYS, writeValue, 0xffffffff);\n    state.buffers.stencil.setClear(clearValue);\n    state.buffers.stencil.setLocked(true); // draw into the stencil buffer\n\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera);\n    renderer.setRenderTarget(writeBuffer);\n    if (this.clear) renderer.clear();\n    renderer.render(this.scene, this.camera); // unlock color and depth buffer for subsequent rendering\n\n    state.buffers.color.setLocked(false);\n    state.buffers.depth.setLocked(false); // only render where stencil is set to 1\n\n    state.buffers.stencil.setLocked(false);\n    state.buffers.stencil.setFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n    state.buffers.stencil.setOp(context.KEEP, context.KEEP, context.KEEP);\n    state.buffers.stencil.setLocked(true);\n  }\n\n}\n\nclass ClearMaskPass extends Pass {\n  constructor() {\n    super();\n    this.needsSwap = false;\n  }\n\n  render(renderer) {\n    renderer.state.buffers.stencil.setLocked(false);\n    renderer.state.buffers.stencil.setTest(false);\n  }\n\n}\n\nexport { ClearMaskPass, MaskPass };\n"]},"metadata":{},"sourceType":"module"}