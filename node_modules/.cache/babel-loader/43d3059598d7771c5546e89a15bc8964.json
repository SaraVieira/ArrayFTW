{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Scene, WebGLRenderTarget, FloatType, MeshPhongMaterial, MeshBasicMaterial, DoubleSide, PlaneGeometry, Mesh, PlaneBufferGeometry } from 'three';\nimport potpack from 'potpack';\n/**\n * Progressive Light Map Accumulator, by [zalo](https://github.com/zalo/)\n *\n * To use, simply construct a `ProgressiveLightMap` object,\n * `plmap.addObjectsToLightMap(object)` an array of semi-static\n * objects and lights to the class once, and then call\n * `plmap.update(camera)` every frame to begin accumulating\n * lighting samples.\n *\n * This should begin accumulating lightmaps which apply to\n * your objects, so you can start jittering lighting to achieve\n * the texture-space effect you're looking for.\n *\n * @param {WebGLRenderer} renderer A WebGL Rendering Context\n * @param {number} res The side-long dimension of you total lightmap\n */\n\nvar ProgressiveLightMap = /*#__PURE__*/function () {\n  function ProgressiveLightMap(renderer) {\n    var _this = this;\n\n    var res = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1024;\n\n    _classCallCheck(this, ProgressiveLightMap);\n\n    this.renderer = renderer;\n    this.res = res;\n    this.lightMapContainers = [];\n    this.compiled = false;\n    this.scene = new Scene();\n    this.scene.background = null;\n    this.tinyTarget = new WebGLRenderTarget(1, 1);\n    this.buffer1Active = false;\n    this.firstUpdate = true;\n    this.warned = false; // Create the Progressive LightMap Texture\n\n    var format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? alfFloatType : FloatType;\n    this.progressiveLightMap1 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    });\n    this.progressiveLightMap2 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    }); // Inject some spicy new logic into a standard phong material\n\n    this.uvMat = new MeshPhongMaterial();\n    this.uvMat.uniforms = {};\n\n    this.uvMat.onBeforeCompile = function (shader) {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = '#define USE_LIGHTMAP\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv2 - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n\n      var bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = 'varying vec2 vUv2;\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + \"\\nvec3 texelOld = texture2D(previousShadowMap, vUv2).rgb;\\n\\t\\t\\t\\tgl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\\n\\t\\t\\t}\"; // Set the Previous Frame's Texture Buffer and Averaging Window\n\n      shader.uniforms.previousShadowMap = {\n        value: _this.progressiveLightMap1.texture\n      };\n      shader.uniforms.averagingWindow = {\n        value: 100\n      };\n      _this.uvMat.uniforms = shader.uniforms; // Set the new Shader to this\n\n      _this.uvMat.userData.shader = shader;\n      _this.compiled = true;\n    };\n  }\n  /**\n   * Sets these objects' materials' lightmaps and modifies their uv2's.\n   * @param {Object3D} objects An array of objects and lights to set up your lightmap.\n   */\n\n\n  _createClass(ProgressiveLightMap, [{\n    key: \"addObjectsToLightMap\",\n    value: function addObjectsToLightMap(objects) {\n      // Prepare list of UV bounding boxes for packing later...\n      this.uv_boxes = [];\n      var padding = 3 / this.res;\n\n      for (var ob = 0; ob < objects.length; ob++) {\n        var object = objects[ob]; // If this object is a light, simply add it to the internal scene\n\n        if (object.isLight) {\n          this.scene.attach(object);\n          continue;\n        }\n\n        if (!object.geometry.hasAttribute('uv')) {\n          console.warn('All lightmap objects need UVs!');\n          continue;\n        }\n\n        if (this.blurringPlane == null) {\n          this._initializeBlurPlane(this.res, this.progressiveLightMap1);\n        } // Apply the lightmap to the object\n\n\n        object.material.lightMap = this.progressiveLightMap2.texture;\n        object.material.dithering = true;\n        object.castShadow = true;\n        object.receiveShadow = true;\n        object.renderOrder = 1000 + ob; // Prepare UV boxes for potpack\n        // TODO: Size these by object surface area\n\n        this.uv_boxes.push({\n          w: 1 + padding * 2,\n          h: 1 + padding * 2,\n          index: ob\n        });\n        this.lightMapContainers.push({\n          basicMat: object.material,\n          object: object\n        });\n        this.compiled = false;\n      } // Pack the objects' lightmap UVs into the same global space\n\n\n      var dimensions = potpack(this.uv_boxes);\n      this.uv_boxes.forEach(function (box) {\n        var uv2 = objects[box.index].geometry.getAttribute('uv').clone();\n\n        for (var i = 0; i < uv2.array.length; i += uv2.itemSize) {\n          uv2.array[i] = (uv2.array[i] + box.x + padding) / dimensions.w;\n          uv2.array[i + 1] = (uv2.array[i + 1] + box.y + padding) / dimensions.h;\n        }\n\n        objects[box.index].geometry.setAttribute('uv2', uv2);\n        objects[box.index].geometry.getAttribute('uv2').needsUpdate = true;\n      });\n    }\n    /**\n     * This function renders each mesh one at a time into their respective surface maps\n     * @param {Camera} camera Standard Rendering Camera\n     * @param {number} blendWindow When >1, samples will accumulate over time.\n     * @param {boolean} blurEdges  Whether to fix UV Edges via blurring\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(camera) {\n      var blendWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n      var blurEdges = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      if (this.blurringPlane == null) {\n        return;\n      } // Store the original Render Target\n\n\n      var oldTarget = this.renderer.getRenderTarget(); // The blurring plane applies blur to the seams of the lightmap\n\n      this.blurringPlane.visible = blurEdges; // Steal the Object3D from the real world to our special dimension\n\n      for (var l = 0; l < this.lightMapContainers.length; l++) {\n        this.lightMapContainers[l].object.oldScene = this.lightMapContainers[l].object.parent;\n        this.scene.attach(this.lightMapContainers[l].object);\n      } // Render once normally to initialize everything\n\n\n      if (this.firstUpdate) {\n        this.renderer.setRenderTarget(this.tinyTarget); // Tiny for Speed\n\n        this.renderer.render(this.scene, camera);\n        this.firstUpdate = false;\n      } // Set each object's material to the UV Unwrapped Surface Mapping Version\n\n\n      for (var _l = 0; _l < this.lightMapContainers.length; _l++) {\n        this.uvMat.uniforms.averagingWindow = {\n          value: blendWindow\n        };\n        this.lightMapContainers[_l].object.material = this.uvMat;\n        this.lightMapContainers[_l].object.oldFrustumCulled = this.lightMapContainers[_l].object.frustumCulled;\n        this.lightMapContainers[_l].object.frustumCulled = false;\n      } // Ping-pong two surface buffers for reading/writing\n\n\n      var activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n      var inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1; // Render the object's surface maps\n\n      this.renderer.setRenderTarget(activeMap);\n      this.uvMat.uniforms.previousShadowMap = {\n        value: inactiveMap.texture\n      };\n      this.blurringPlane.material.uniforms.previousShadowMap = {\n        value: inactiveMap.texture\n      };\n      this.buffer1Active = !this.buffer1Active;\n      this.renderer.render(this.scene, camera); // Restore the object's Real-time Material and add it back to the original world\n\n      for (var _l2 = 0; _l2 < this.lightMapContainers.length; _l2++) {\n        this.lightMapContainers[_l2].object.frustumCulled = this.lightMapContainers[_l2].object.oldFrustumCulled;\n        this.lightMapContainers[_l2].object.material = this.lightMapContainers[_l2].basicMat;\n\n        this.lightMapContainers[_l2].object.oldScene.attach(this.lightMapContainers[_l2].object);\n      } // Restore the original Render Target\n\n\n      this.renderer.setRenderTarget(oldTarget);\n    }\n    /** DEBUG\n     * Draw the lightmap in the main scene.  Call this after adding the objects to it.\n     * @param {boolean} visible Whether the debug plane should be visible\n     * @param {Vector3} position Where the debug plane should be drawn\n     */\n\n  }, {\n    key: \"showDebugLightmap\",\n    value: function showDebugLightmap(visible) {\n      var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n      if (this.lightMapContainers.length == 0) {\n        if (!this.warned) {\n          console.warn('Call this after adding the objects!');\n          this.warned = true;\n        }\n\n        return;\n      }\n\n      if (this.labelMesh == null) {\n        this.labelMaterial = new MeshBasicMaterial({\n          map: this.progressiveLightMap1.texture,\n          side: DoubleSide\n        });\n        this.labelPlane = new PlaneGeometry(100, 100);\n        this.labelMesh = new Mesh(this.labelPlane, this.labelMaterial);\n        this.labelMesh.position.y = 250;\n        this.lightMapContainers[0].object.parent.add(this.labelMesh);\n      }\n\n      if (position != undefined) {\n        this.labelMesh.position.copy(position);\n      }\n\n      this.labelMesh.visible = visible;\n    }\n    /**\n     * INTERNAL Creates the Blurring Plane\n     * @param {number} res The square resolution of this object's lightMap.\n     * @param {WebGLRenderTexture} lightMap The lightmap to initialize the plane with.\n     */\n\n  }, {\n    key: \"_initializeBlurPlane\",\n    value: function _initializeBlurPlane(res) {\n      var _this2 = this;\n\n      var lightMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var blurMaterial = new MeshBasicMaterial();\n      blurMaterial.uniforms = {\n        previousShadowMap: {\n          value: null\n        },\n        pixelOffset: {\n          value: 1.0 / res\n        },\n        polygonOffset: true,\n        polygonOffsetFactor: -1,\n        polygonOffsetUnits: 3.0\n      };\n\n      blurMaterial.onBeforeCompile = function (shader) {\n        // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n        shader.vertexShader = '#define USE_UV\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to 9-tap box blur the current frame's Shadows\n\n        var bodyStart = shader.fragmentShader.indexOf('void main() {');\n        shader.fragmentShader = '#define USE_UV\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float pixelOffset;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + \"\\tgl_FragColor.rgb = (\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  0.0        )).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2( 0.0        ,  pixelOffset)).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2( 0.0        , -pixelOffset)).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  0.0        )).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  pixelOffset)).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  pixelOffset)).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset, -pixelOffset)).rgb +\\n\\t\\t\\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset, -pixelOffset)).rgb)/8.0;\\n\\t\\t}\"; // Set the LightMap Accumulation Buffer\n\n        shader.uniforms.previousShadowMap = {\n          value: lightMap.texture\n        };\n        shader.uniforms.pixelOffset = {\n          value: 0.5 / res\n        };\n        blurMaterial.uniforms = shader.uniforms; // Set the new Shader to this\n\n        blurMaterial.userData.shader = shader;\n        _this2.compiled = true;\n      };\n\n      this.blurringPlane = new Mesh(new PlaneBufferGeometry(1, 1), blurMaterial);\n      this.blurringPlane.name = 'Blurring Plane';\n      this.blurringPlane.frustumCulled = false;\n      this.blurringPlane.renderOrder = 0;\n      this.blurringPlane.material.depthWrite = false;\n      this.scene.add(this.blurringPlane);\n    }\n  }]);\n\n  return ProgressiveLightMap;\n}();\n\nexport { ProgressiveLightMap };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/misc/ProgressiveLightmap.js"],"names":["Scene","WebGLRenderTarget","FloatType","MeshPhongMaterial","MeshBasicMaterial","DoubleSide","PlaneGeometry","Mesh","PlaneBufferGeometry","potpack","ProgressiveLightMap","renderer","res","lightMapContainers","compiled","scene","background","tinyTarget","buffer1Active","firstUpdate","warned","format","test","navigator","userAgent","alfFloatType","progressiveLightMap1","type","progressiveLightMap2","uvMat","uniforms","onBeforeCompile","shader","vertexShader","slice","bodyStart","fragmentShader","indexOf","previousShadowMap","value","texture","averagingWindow","userData","objects","uv_boxes","padding","ob","length","object","isLight","attach","geometry","hasAttribute","console","warn","blurringPlane","_initializeBlurPlane","material","lightMap","dithering","castShadow","receiveShadow","renderOrder","push","w","h","index","basicMat","dimensions","forEach","box","uv2","getAttribute","clone","i","array","itemSize","x","y","setAttribute","needsUpdate","camera","blendWindow","blurEdges","oldTarget","getRenderTarget","visible","l","oldScene","parent","setRenderTarget","render","oldFrustumCulled","frustumCulled","activeMap","inactiveMap","position","undefined","labelMesh","labelMaterial","map","side","labelPlane","add","copy","blurMaterial","pixelOffset","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","name","depthWrite"],"mappings":"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","sourcesContent":["import { Scene, WebGLRenderTarget, FloatType, MeshPhongMaterial, MeshBasicMaterial, DoubleSide, PlaneGeometry, Mesh, PlaneBufferGeometry } from 'three';\nimport potpack from 'potpack';\n\n/**\n * Progressive Light Map Accumulator, by [zalo](https://github.com/zalo/)\n *\n * To use, simply construct a `ProgressiveLightMap` object,\n * `plmap.addObjectsToLightMap(object)` an array of semi-static\n * objects and lights to the class once, and then call\n * `plmap.update(camera)` every frame to begin accumulating\n * lighting samples.\n *\n * This should begin accumulating lightmaps which apply to\n * your objects, so you can start jittering lighting to achieve\n * the texture-space effect you're looking for.\n *\n * @param {WebGLRenderer} renderer A WebGL Rendering Context\n * @param {number} res The side-long dimension of you total lightmap\n */\n\nclass ProgressiveLightMap {\n  constructor(renderer, res = 1024) {\n    this.renderer = renderer;\n    this.res = res;\n    this.lightMapContainers = [];\n    this.compiled = false;\n    this.scene = new Scene();\n    this.scene.background = null;\n    this.tinyTarget = new WebGLRenderTarget(1, 1);\n    this.buffer1Active = false;\n    this.firstUpdate = true;\n    this.warned = false; // Create the Progressive LightMap Texture\n\n    const format = /(Android|iPad|iPhone|iPod)/g.test(navigator.userAgent) ? alfFloatType : FloatType;\n    this.progressiveLightMap1 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    });\n    this.progressiveLightMap2 = new WebGLRenderTarget(this.res, this.res, {\n      type: format\n    }); // Inject some spicy new logic into a standard phong material\n\n    this.uvMat = new MeshPhongMaterial();\n    this.uvMat.uniforms = {};\n\n    this.uvMat.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = '#define USE_LIGHTMAP\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv2 - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to average in the Previous frame's Shadows\n\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = 'varying vec2 vUv2;\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float averagingWindow;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\\nvec3 texelOld = texture2D(previousShadowMap, vUv2).rgb;\n\t\t\t\tgl_FragColor.rgb = mix(texelOld, gl_FragColor.rgb, 1.0/averagingWindow);\n\t\t\t}`; // Set the Previous Frame's Texture Buffer and Averaging Window\n\n      shader.uniforms.previousShadowMap = {\n        value: this.progressiveLightMap1.texture\n      };\n      shader.uniforms.averagingWindow = {\n        value: 100\n      };\n      this.uvMat.uniforms = shader.uniforms; // Set the new Shader to this\n\n      this.uvMat.userData.shader = shader;\n      this.compiled = true;\n    };\n  }\n  /**\n   * Sets these objects' materials' lightmaps and modifies their uv2's.\n   * @param {Object3D} objects An array of objects and lights to set up your lightmap.\n   */\n\n\n  addObjectsToLightMap(objects) {\n    // Prepare list of UV bounding boxes for packing later...\n    this.uv_boxes = [];\n    const padding = 3 / this.res;\n\n    for (let ob = 0; ob < objects.length; ob++) {\n      const object = objects[ob]; // If this object is a light, simply add it to the internal scene\n\n      if (object.isLight) {\n        this.scene.attach(object);\n        continue;\n      }\n\n      if (!object.geometry.hasAttribute('uv')) {\n        console.warn('All lightmap objects need UVs!');\n        continue;\n      }\n\n      if (this.blurringPlane == null) {\n        this._initializeBlurPlane(this.res, this.progressiveLightMap1);\n      } // Apply the lightmap to the object\n\n\n      object.material.lightMap = this.progressiveLightMap2.texture;\n      object.material.dithering = true;\n      object.castShadow = true;\n      object.receiveShadow = true;\n      object.renderOrder = 1000 + ob; // Prepare UV boxes for potpack\n      // TODO: Size these by object surface area\n\n      this.uv_boxes.push({\n        w: 1 + padding * 2,\n        h: 1 + padding * 2,\n        index: ob\n      });\n      this.lightMapContainers.push({\n        basicMat: object.material,\n        object: object\n      });\n      this.compiled = false;\n    } // Pack the objects' lightmap UVs into the same global space\n\n\n    const dimensions = potpack(this.uv_boxes);\n    this.uv_boxes.forEach(box => {\n      const uv2 = objects[box.index].geometry.getAttribute('uv').clone();\n\n      for (let i = 0; i < uv2.array.length; i += uv2.itemSize) {\n        uv2.array[i] = (uv2.array[i] + box.x + padding) / dimensions.w;\n        uv2.array[i + 1] = (uv2.array[i + 1] + box.y + padding) / dimensions.h;\n      }\n\n      objects[box.index].geometry.setAttribute('uv2', uv2);\n      objects[box.index].geometry.getAttribute('uv2').needsUpdate = true;\n    });\n  }\n  /**\n   * This function renders each mesh one at a time into their respective surface maps\n   * @param {Camera} camera Standard Rendering Camera\n   * @param {number} blendWindow When >1, samples will accumulate over time.\n   * @param {boolean} blurEdges  Whether to fix UV Edges via blurring\n   */\n\n\n  update(camera, blendWindow = 100, blurEdges = true) {\n    if (this.blurringPlane == null) {\n      return;\n    } // Store the original Render Target\n\n\n    const oldTarget = this.renderer.getRenderTarget(); // The blurring plane applies blur to the seams of the lightmap\n\n    this.blurringPlane.visible = blurEdges; // Steal the Object3D from the real world to our special dimension\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.oldScene = this.lightMapContainers[l].object.parent;\n      this.scene.attach(this.lightMapContainers[l].object);\n    } // Render once normally to initialize everything\n\n\n    if (this.firstUpdate) {\n      this.renderer.setRenderTarget(this.tinyTarget); // Tiny for Speed\n\n      this.renderer.render(this.scene, camera);\n      this.firstUpdate = false;\n    } // Set each object's material to the UV Unwrapped Surface Mapping Version\n\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.uvMat.uniforms.averagingWindow = {\n        value: blendWindow\n      };\n      this.lightMapContainers[l].object.material = this.uvMat;\n      this.lightMapContainers[l].object.oldFrustumCulled = this.lightMapContainers[l].object.frustumCulled;\n      this.lightMapContainers[l].object.frustumCulled = false;\n    } // Ping-pong two surface buffers for reading/writing\n\n\n    const activeMap = this.buffer1Active ? this.progressiveLightMap1 : this.progressiveLightMap2;\n    const inactiveMap = this.buffer1Active ? this.progressiveLightMap2 : this.progressiveLightMap1; // Render the object's surface maps\n\n    this.renderer.setRenderTarget(activeMap);\n    this.uvMat.uniforms.previousShadowMap = {\n      value: inactiveMap.texture\n    };\n    this.blurringPlane.material.uniforms.previousShadowMap = {\n      value: inactiveMap.texture\n    };\n    this.buffer1Active = !this.buffer1Active;\n    this.renderer.render(this.scene, camera); // Restore the object's Real-time Material and add it back to the original world\n\n    for (let l = 0; l < this.lightMapContainers.length; l++) {\n      this.lightMapContainers[l].object.frustumCulled = this.lightMapContainers[l].object.oldFrustumCulled;\n      this.lightMapContainers[l].object.material = this.lightMapContainers[l].basicMat;\n      this.lightMapContainers[l].object.oldScene.attach(this.lightMapContainers[l].object);\n    } // Restore the original Render Target\n\n\n    this.renderer.setRenderTarget(oldTarget);\n  }\n  /** DEBUG\n   * Draw the lightmap in the main scene.  Call this after adding the objects to it.\n   * @param {boolean} visible Whether the debug plane should be visible\n   * @param {Vector3} position Where the debug plane should be drawn\n   */\n\n\n  showDebugLightmap(visible, position = undefined) {\n    if (this.lightMapContainers.length == 0) {\n      if (!this.warned) {\n        console.warn('Call this after adding the objects!');\n        this.warned = true;\n      }\n\n      return;\n    }\n\n    if (this.labelMesh == null) {\n      this.labelMaterial = new MeshBasicMaterial({\n        map: this.progressiveLightMap1.texture,\n        side: DoubleSide\n      });\n      this.labelPlane = new PlaneGeometry(100, 100);\n      this.labelMesh = new Mesh(this.labelPlane, this.labelMaterial);\n      this.labelMesh.position.y = 250;\n      this.lightMapContainers[0].object.parent.add(this.labelMesh);\n    }\n\n    if (position != undefined) {\n      this.labelMesh.position.copy(position);\n    }\n\n    this.labelMesh.visible = visible;\n  }\n  /**\n   * INTERNAL Creates the Blurring Plane\n   * @param {number} res The square resolution of this object's lightMap.\n   * @param {WebGLRenderTexture} lightMap The lightmap to initialize the plane with.\n   */\n\n\n  _initializeBlurPlane(res, lightMap = null) {\n    const blurMaterial = new MeshBasicMaterial();\n    blurMaterial.uniforms = {\n      previousShadowMap: {\n        value: null\n      },\n      pixelOffset: {\n        value: 1.0 / res\n      },\n      polygonOffset: true,\n      polygonOffsetFactor: -1,\n      polygonOffsetUnits: 3.0\n    };\n\n    blurMaterial.onBeforeCompile = shader => {\n      // Vertex Shader: Set Vertex Positions to the Unwrapped UV Positions\n      shader.vertexShader = '#define USE_UV\\n' + shader.vertexShader.slice(0, -1) + '\tgl_Position = vec4((uv - 0.5) * 2.0, 1.0, 1.0); }'; // Fragment Shader: Set Pixels to 9-tap box blur the current frame's Shadows\n\n      const bodyStart = shader.fragmentShader.indexOf('void main() {');\n      shader.fragmentShader = '#define USE_UV\\n' + shader.fragmentShader.slice(0, bodyStart) + '\tuniform sampler2D previousShadowMap;\\n\tuniform float pixelOffset;\\n' + shader.fragmentShader.slice(bodyStart - 1, -1) + `\tgl_FragColor.rgb = (\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        ,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( 0.0        , -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  0.0        )).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset,  pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2( pixelOffset, -pixelOffset)).rgb +\n\t\t\t  texture2D(previousShadowMap, vUv + vec2(-pixelOffset, -pixelOffset)).rgb)/8.0;\n\t\t}`; // Set the LightMap Accumulation Buffer\n\n      shader.uniforms.previousShadowMap = {\n        value: lightMap.texture\n      };\n      shader.uniforms.pixelOffset = {\n        value: 0.5 / res\n      };\n      blurMaterial.uniforms = shader.uniforms; // Set the new Shader to this\n\n      blurMaterial.userData.shader = shader;\n      this.compiled = true;\n    };\n\n    this.blurringPlane = new Mesh(new PlaneBufferGeometry(1, 1), blurMaterial);\n    this.blurringPlane.name = 'Blurring Plane';\n    this.blurringPlane.frustumCulled = false;\n    this.blurringPlane.renderOrder = 0;\n    this.blurringPlane.material.depthWrite = false;\n    this.scene.add(this.blurringPlane);\n  }\n\n}\n\nexport { ProgressiveLightMap };\n"]},"metadata":{},"sourceType":"module"}