{"ast":null,"code":"import _createForOfIteratorHelper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferAttribute, BufferGeometry } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\n\nvar EdgeSplitModifier = function EdgeSplitModifier() {\n  var _this = this;\n\n  _classCallCheck(this, EdgeSplitModifier);\n\n  _defineProperty(this, \"A\", new Vector3());\n\n  _defineProperty(this, \"B\", new Vector3());\n\n  _defineProperty(this, \"C\", new Vector3());\n\n  _defineProperty(this, \"positions\", []);\n\n  _defineProperty(this, \"normals\", new Float32Array());\n\n  _defineProperty(this, \"indexes\", []);\n\n  _defineProperty(this, \"pointToIndexMap\", []);\n\n  _defineProperty(this, \"splitIndexes\", []);\n\n  _defineProperty(this, \"oldNormals\", []);\n\n  _defineProperty(this, \"computeNormals\", function () {\n    _this.normals = new Float32Array(_this.indexes.length * 3);\n\n    for (var i = 0; i < _this.indexes.length; i += 3) {\n      var index = _this.indexes[i];\n\n      _this.A.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n\n      index = _this.indexes[i + 1];\n\n      _this.B.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n\n      index = _this.indexes[i + 2];\n\n      _this.C.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n\n      _this.C.sub(_this.B);\n\n      _this.A.sub(_this.B);\n\n      var normal = _this.C.cross(_this.A).normalize();\n\n      for (var j = 0; j < 3; j++) {\n        _this.normals[3 * (i + j)] = normal.x;\n        _this.normals[3 * (i + j) + 1] = normal.y;\n        _this.normals[3 * (i + j) + 2] = normal.z;\n      }\n    }\n  });\n\n  _defineProperty(this, \"mapPositionsToIndexes\", function () {\n    _this.pointToIndexMap = Array(_this.positions.length / 3);\n\n    for (var i = 0; i < _this.indexes.length; i++) {\n      var index = _this.indexes[i];\n\n      if (_this.pointToIndexMap[index] == null) {\n        _this.pointToIndexMap[index] = [];\n      }\n\n      _this.pointToIndexMap[index].push(i);\n    }\n  });\n\n  _defineProperty(this, \"edgeSplitToGroups\", function (indexes, cutOff, firstIndex) {\n    _this.A.set(_this.normals[3 * firstIndex], _this.normals[3 * firstIndex + 1], _this.normals[3 * firstIndex + 2]).normalize();\n\n    var result = {\n      splitGroup: [],\n      currentGroup: [firstIndex]\n    };\n\n    var _iterator = _createForOfIteratorHelper(indexes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var j = _step.value;\n\n        if (j !== firstIndex) {\n          _this.B.set(_this.normals[3 * j], _this.normals[3 * j + 1], _this.normals[3 * j + 2]).normalize();\n\n          if (_this.B.dot(_this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return result;\n  });\n\n  _defineProperty(this, \"edgeSplit\", function (indexes, cutOff) {\n    var original = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (indexes.length === 0) return;\n    var groupResults = [];\n\n    var _iterator2 = _createForOfIteratorHelper(indexes),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var index = _step2.value;\n        groupResults.push(_this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var result = groupResults[0];\n\n    for (var _i = 0, _groupResults = groupResults; _i < _groupResults.length; _i++) {\n      var groupResult = _groupResults[_i];\n\n      if (groupResult.currentGroup.length > result.currentGroup.length) {\n        result = groupResult;\n      }\n    }\n\n    if (original != null) {\n      _this.splitIndexes.push({\n        original: original,\n        indexes: result.currentGroup\n      });\n    }\n\n    if (result.splitGroup.length) {\n      _this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n    }\n  });\n\n  _defineProperty(this, \"modify\", function (geometry, cutOffAngle) {\n    var tryKeepNormals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var hadNormals = false;\n\n    if (geometry.attributes.normal) {\n      hadNormals = true;\n      geometry = geometry.clone();\n\n      if (tryKeepNormals === true && geometry.index !== null) {\n        _this.oldNormals = geometry.attributes.normal.array;\n      }\n\n      geometry.deleteAttribute('normal');\n    }\n\n    if (geometry.index == null) {\n      if (BufferGeometryUtils === undefined) {\n        throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n      }\n\n      geometry = mergeVertices(geometry);\n    }\n\n    _this.indexes = geometry.index.array;\n    _this.positions = geometry.getAttribute('position').array;\n\n    _this.computeNormals();\n\n    _this.mapPositionsToIndexes();\n\n    _this.splitIndexes = [];\n\n    var _iterator3 = _createForOfIteratorHelper(_this.pointToIndexMap),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var vertexIndexes = _step3.value;\n\n        _this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    var newAttributes = {};\n\n    for (var _i2 = 0, _Object$keys = Object.keys(geometry.attributes); _i2 < _Object$keys.length; _i2++) {\n      var name = _Object$keys[_i2];\n      var oldAttribute = geometry.attributes[name]; // @ts-ignore\n\n      var newArray = new oldAttribute.array.constructor((_this.indexes.length + _this.splitIndexes.length) * oldAttribute.itemSize);\n      newArray.set(oldAttribute.array);\n      newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n    }\n\n    var newIndexes = new Uint32Array(_this.indexes.length);\n    newIndexes.set(_this.indexes);\n\n    for (var i = 0; i < _this.splitIndexes.length; i++) {\n      var split = _this.splitIndexes[i];\n      var index = _this.indexes[split.original];\n\n      for (var _i3 = 0, _Object$values = Object.values(newAttributes); _i3 < _Object$values.length; _i3++) {\n        var attribute = _Object$values[_i3];\n\n        for (var j = 0; j < attribute.itemSize; j++) {\n          // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n          attribute.array[(_this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n        }\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(split.indexes),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _j = _step4.value;\n          newIndexes[_j] = _this.indexes.length + i;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n\n    geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(newIndexes, 1));\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(newAttributes); _i4 < _Object$keys2.length; _i4++) {\n      var _name = _Object$keys2[_i4];\n      geometry.setAttribute(_name, newAttributes[_name]);\n    }\n\n    if (hadNormals) {\n      geometry.computeVertexNormals();\n\n      if (_this.oldNormals !== null) {\n        var changedNormals = new Array(_this.oldNormals.length / 3).fill(false);\n\n        var _iterator5 = _createForOfIteratorHelper(_this.splitIndexes),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var splitData = _step5.value;\n            changedNormals[splitData.original] = true;\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        for (var _i5 = 0; _i5 < changedNormals.length; _i5++) {\n          if (changedNormals[_i5] === false) {\n            for (var _j2 = 0; _j2 < 3; _j2++) {\n              // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n              geometry.attributes.normal.array[3 * _i5 + _j2] = _this.oldNormals[3 * _i5 + _j2];\n            }\n          }\n        }\n      }\n    }\n\n    return geometry;\n  });\n};\n\nexport { EdgeSplitModifier };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/modifiers/EdgeSplitModifier.js"],"names":["_defineProperty","Vector3","BufferAttribute","BufferGeometry","BufferGeometryUtils","mergeVertices","EdgeSplitModifier","Float32Array","normals","indexes","length","i","index","A","set","positions","B","C","sub","normal","cross","normalize","j","x","y","z","pointToIndexMap","Array","push","cutOff","firstIndex","result","splitGroup","currentGroup","dot","original","groupResults","edgeSplitToGroups","groupResult","splitIndexes","edgeSplit","geometry","cutOffAngle","tryKeepNormals","hadNormals","attributes","clone","oldNormals","array","deleteAttribute","undefined","getAttribute","computeNormals","mapPositionsToIndexes","vertexIndexes","Math","cos","newAttributes","Object","keys","name","oldAttribute","newArray","constructor","itemSize","normalized","newIndexes","Uint32Array","split","values","attribute","setIndex","setAttribute","computeVertexNormals","changedNormals","fill","splitData"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferAttribute, BufferGeometry } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\n\nclass EdgeSplitModifier {\n  constructor() {\n    _defineProperty(this, \"A\", new Vector3());\n\n    _defineProperty(this, \"B\", new Vector3());\n\n    _defineProperty(this, \"C\", new Vector3());\n\n    _defineProperty(this, \"positions\", []);\n\n    _defineProperty(this, \"normals\", new Float32Array());\n\n    _defineProperty(this, \"indexes\", []);\n\n    _defineProperty(this, \"pointToIndexMap\", []);\n\n    _defineProperty(this, \"splitIndexes\", []);\n\n    _defineProperty(this, \"oldNormals\", []);\n\n    _defineProperty(this, \"computeNormals\", () => {\n      this.normals = new Float32Array(this.indexes.length * 3);\n\n      for (let i = 0; i < this.indexes.length; i += 3) {\n        let index = this.indexes[i];\n        this.A.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 1];\n        this.B.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 2];\n        this.C.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        this.C.sub(this.B);\n        this.A.sub(this.B);\n        const normal = this.C.cross(this.A).normalize();\n\n        for (let j = 0; j < 3; j++) {\n          this.normals[3 * (i + j)] = normal.x;\n          this.normals[3 * (i + j) + 1] = normal.y;\n          this.normals[3 * (i + j) + 2] = normal.z;\n        }\n      }\n    });\n\n    _defineProperty(this, \"mapPositionsToIndexes\", () => {\n      this.pointToIndexMap = Array(this.positions.length / 3);\n\n      for (let i = 0; i < this.indexes.length; i++) {\n        const index = this.indexes[i];\n\n        if (this.pointToIndexMap[index] == null) {\n          this.pointToIndexMap[index] = [];\n        }\n\n        this.pointToIndexMap[index].push(i);\n      }\n    });\n\n    _defineProperty(this, \"edgeSplitToGroups\", (indexes, cutOff, firstIndex) => {\n      this.A.set(this.normals[3 * firstIndex], this.normals[3 * firstIndex + 1], this.normals[3 * firstIndex + 2]).normalize();\n      const result = {\n        splitGroup: [],\n        currentGroup: [firstIndex]\n      };\n\n      for (let j of indexes) {\n        if (j !== firstIndex) {\n          this.B.set(this.normals[3 * j], this.normals[3 * j + 1], this.normals[3 * j + 2]).normalize();\n\n          if (this.B.dot(this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n\n      return result;\n    });\n\n    _defineProperty(this, \"edgeSplit\", (indexes, cutOff, original = null) => {\n      if (indexes.length === 0) return;\n      const groupResults = [];\n\n      for (let index of indexes) {\n        groupResults.push(this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n\n      let result = groupResults[0];\n\n      for (let groupResult of groupResults) {\n        if (groupResult.currentGroup.length > result.currentGroup.length) {\n          result = groupResult;\n        }\n      }\n\n      if (original != null) {\n        this.splitIndexes.push({\n          original,\n          indexes: result.currentGroup\n        });\n      }\n\n      if (result.splitGroup.length) {\n        this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n      }\n    });\n\n    _defineProperty(this, \"modify\", (geometry, cutOffAngle, tryKeepNormals = true) => {\n      let hadNormals = false;\n\n      if (geometry.attributes.normal) {\n        hadNormals = true;\n        geometry = geometry.clone();\n\n        if (tryKeepNormals === true && geometry.index !== null) {\n          this.oldNormals = geometry.attributes.normal.array;\n        }\n\n        geometry.deleteAttribute('normal');\n      }\n\n      if (geometry.index == null) {\n        if (BufferGeometryUtils === undefined) {\n          throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n        }\n\n        geometry = mergeVertices(geometry);\n      }\n\n      this.indexes = geometry.index.array;\n      this.positions = geometry.getAttribute('position').array;\n      this.computeNormals();\n      this.mapPositionsToIndexes();\n      this.splitIndexes = [];\n\n      for (let vertexIndexes of this.pointToIndexMap) {\n        this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n\n      const newAttributes = {};\n\n      for (let name of Object.keys(geometry.attributes)) {\n        const oldAttribute = geometry.attributes[name]; // @ts-ignore\n\n        const newArray = new oldAttribute.array.constructor((this.indexes.length + this.splitIndexes.length) * oldAttribute.itemSize);\n        newArray.set(oldAttribute.array);\n        newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n      }\n\n      const newIndexes = new Uint32Array(this.indexes.length);\n      newIndexes.set(this.indexes);\n\n      for (let i = 0; i < this.splitIndexes.length; i++) {\n        const split = this.splitIndexes[i];\n        const index = this.indexes[split.original];\n\n        for (let attribute of Object.values(newAttributes)) {\n          for (let j = 0; j < attribute.itemSize; j++) {\n            // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n            attribute.array[(this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n          }\n        }\n\n        for (let j of split.indexes) {\n          newIndexes[j] = this.indexes.length + i;\n        }\n      }\n\n      geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(newIndexes, 1));\n\n      for (let name of Object.keys(newAttributes)) {\n        geometry.setAttribute(name, newAttributes[name]);\n      }\n\n      if (hadNormals) {\n        geometry.computeVertexNormals();\n\n        if (this.oldNormals !== null) {\n          const changedNormals = new Array(this.oldNormals.length / 3).fill(false);\n\n          for (let splitData of this.splitIndexes) changedNormals[splitData.original] = true;\n\n          for (let i = 0; i < changedNormals.length; i++) {\n            if (changedNormals[i] === false) {\n              for (let j = 0; j < 3; j++) {\n                // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n                geometry.attributes.normal.array[3 * i + j] = this.oldNormals[3 * i + j];\n              }\n            }\n          }\n        }\n      }\n\n      return geometry;\n    });\n  }\n\n}\n\nexport { EdgeSplitModifier };\n"]},"metadata":{},"sourceType":"module"}