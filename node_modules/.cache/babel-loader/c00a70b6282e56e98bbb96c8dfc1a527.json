{"ast":null,"code":"import { WebGLRenderTarget, NearestFilter, MeshDepthMaterial, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Color } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { BokehShader } from '../shaders/BokehShader.js';\n/**\n * Depth-of-field post-process with bokeh shader\n */\n\nvar BokehPass = function BokehPass(scene, camera, params) {\n  this.scene = scene;\n  this.camera = camera;\n  var focus = params.focus !== undefined ? params.focus : 1.0;\n  var aspect = params.aspect !== undefined ? params.aspect : camera.aspect;\n  var aperture = params.aperture !== undefined ? params.aperture : 0.025;\n  var maxblur = params.maxblur !== undefined ? params.maxblur : 1.0; // render targets\n\n  var width = params.width || window.innerWidth || 1;\n  var height = params.height || window.innerHeight || 1;\n  this.renderTargetDepth = new WebGLRenderTarget(width, height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter\n  });\n  this.renderTargetDepth.texture.name = 'BokehPass.depth'; // depth material\n\n  this.materialDepth = new MeshDepthMaterial();\n  this.materialDepth.depthPacking = RGBADepthPacking;\n  this.materialDepth.blending = NoBlending; // bokeh material\n\n  if (BokehShader === undefined) {\n    console.error('THREE.BokehPass relies on BokehShader');\n  }\n\n  var bokehShader = BokehShader;\n  var bokehUniforms = UniformsUtils.clone(bokehShader.uniforms);\n  bokehUniforms['tDepth'].value = this.renderTargetDepth.texture;\n  bokehUniforms['focus'].value = focus;\n  bokehUniforms['aspect'].value = aspect;\n  bokehUniforms['aperture'].value = aperture;\n  bokehUniforms['maxblur'].value = maxblur;\n  bokehUniforms['nearClip'].value = camera.near;\n  bokehUniforms['farClip'].value = camera.far;\n  this.materialBokeh = new ShaderMaterial({\n    defines: Object.assign({}, bokehShader.defines),\n    uniforms: bokehUniforms,\n    vertexShader: bokehShader.vertexShader,\n    fragmentShader: bokehShader.fragmentShader\n  });\n  this.uniforms = bokehUniforms;\n  this.needsSwap = false;\n  this.fsQuad = new FullScreenQuad(this.materialBokeh);\n  this._oldClearColor = new Color();\n};\n\nBokehPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: BokehPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/\n  ) {\n    // Render depth into texture\n    this.scene.overrideMaterial = this.materialDepth;\n    renderer.getClearColor(this._oldClearColor);\n    var oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(0xffffff);\n    renderer.setClearAlpha(1.0);\n    renderer.setRenderTarget(this.renderTargetDepth);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // Render bokeh composite\n\n    this.uniforms['tColor'].value = readBuffer.texture;\n    this.uniforms['nearClip'].value = this.camera.near;\n    this.uniforms['farClip'].value = this.camera.far;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n\n    this.scene.overrideMaterial = null;\n    renderer.setClearColor(this._oldClearColor);\n    renderer.setClearAlpha(oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n});\nexport { BokehPass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/BokehPass.js"],"names":["WebGLRenderTarget","NearestFilter","MeshDepthMaterial","RGBADepthPacking","NoBlending","UniformsUtils","ShaderMaterial","Color","FullScreenQuad","Pass","BokehShader","BokehPass","scene","camera","params","focus","undefined","aspect","aperture","maxblur","width","window","innerWidth","height","innerHeight","renderTargetDepth","minFilter","magFilter","texture","name","materialDepth","depthPacking","blending","console","error","bokehShader","bokehUniforms","clone","uniforms","value","near","far","materialBokeh","defines","Object","assign","vertexShader","fragmentShader","needsSwap","fsQuad","_oldClearColor","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","overrideMaterial","getClearColor","oldClearAlpha","getClearAlpha","oldAutoClear","autoClear","setClearColor","setClearAlpha","setRenderTarget","clear","renderToScreen"],"mappings":"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","sourcesContent":["import { WebGLRenderTarget, NearestFilter, MeshDepthMaterial, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Color } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { BokehShader } from '../shaders/BokehShader.js';\n\n/**\n * Depth-of-field post-process with bokeh shader\n */\n\nvar BokehPass = function (scene, camera, params) {\n  this.scene = scene;\n  this.camera = camera;\n  var focus = params.focus !== undefined ? params.focus : 1.0;\n  var aspect = params.aspect !== undefined ? params.aspect : camera.aspect;\n  var aperture = params.aperture !== undefined ? params.aperture : 0.025;\n  var maxblur = params.maxblur !== undefined ? params.maxblur : 1.0; // render targets\n\n  var width = params.width || window.innerWidth || 1;\n  var height = params.height || window.innerHeight || 1;\n  this.renderTargetDepth = new WebGLRenderTarget(width, height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter\n  });\n  this.renderTargetDepth.texture.name = 'BokehPass.depth'; // depth material\n\n  this.materialDepth = new MeshDepthMaterial();\n  this.materialDepth.depthPacking = RGBADepthPacking;\n  this.materialDepth.blending = NoBlending; // bokeh material\n\n  if (BokehShader === undefined) {\n    console.error('THREE.BokehPass relies on BokehShader');\n  }\n\n  var bokehShader = BokehShader;\n  var bokehUniforms = UniformsUtils.clone(bokehShader.uniforms);\n  bokehUniforms['tDepth'].value = this.renderTargetDepth.texture;\n  bokehUniforms['focus'].value = focus;\n  bokehUniforms['aspect'].value = aspect;\n  bokehUniforms['aperture'].value = aperture;\n  bokehUniforms['maxblur'].value = maxblur;\n  bokehUniforms['nearClip'].value = camera.near;\n  bokehUniforms['farClip'].value = camera.far;\n  this.materialBokeh = new ShaderMaterial({\n    defines: Object.assign({}, bokehShader.defines),\n    uniforms: bokehUniforms,\n    vertexShader: bokehShader.vertexShader,\n    fragmentShader: bokehShader.fragmentShader\n  });\n  this.uniforms = bokehUniforms;\n  this.needsSwap = false;\n  this.fsQuad = new FullScreenQuad(this.materialBokeh);\n  this._oldClearColor = new Color();\n};\n\nBokehPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: BokehPass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/\n  ) {\n    // Render depth into texture\n    this.scene.overrideMaterial = this.materialDepth;\n    renderer.getClearColor(this._oldClearColor);\n    var oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setClearColor(0xffffff);\n    renderer.setClearAlpha(1.0);\n    renderer.setRenderTarget(this.renderTargetDepth);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // Render bokeh composite\n\n    this.uniforms['tColor'].value = readBuffer.texture;\n    this.uniforms['nearClip'].value = this.camera.near;\n    this.uniforms['farClip'].value = this.camera.far;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n\n    this.scene.overrideMaterial = null;\n    renderer.setClearColor(this._oldClearColor);\n    renderer.setClearAlpha(oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  }\n});\n\nexport { BokehPass };\n"]},"metadata":{},"sourceType":"module"}