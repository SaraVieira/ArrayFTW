{"ast":null,"code":"var WaterRefractionShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDudv: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: ['uniform mat4 textureMatrix;', 'varying vec2 vUv;', 'varying vec4 vUvRefraction;', 'void main() {', '\tvUv = uv;', '\tvUvRefraction = textureMatrix * vec4( position, 1.0 );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 color;', 'uniform float time;', 'uniform sampler2D tDiffuse;', 'uniform sampler2D tDudv;', 'varying vec2 vUv;', 'varying vec4 vUvRefraction;', 'float blendOverlay( float base, float blend ) {', '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );', '}', 'vec3 blendOverlay( vec3 base, vec3 blend ) {', '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );', '}', 'void main() {', ' float waveStrength = 0.1;', ' float waveSpeed = 0.03;', // simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n  '\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;', '\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );', '\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;', // new uv coords\n  ' vec4 uv = vec4( vUvRefraction );', ' uv.xy += distortion;', '\tvec4 base = texture2DProj( tDiffuse, uv );', '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );', '}'].join('\\n')\n};\nexport { WaterRefractionShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/WaterRefractionShader.js"],"names":["WaterRefractionShader","uniforms","color","value","time","tDiffuse","tDudv","textureMatrix","vertexShader","join","fragmentShader"],"mappings":"AAAA,IAAIA,qBAAqB,GAAG;AAC1BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF,KADC;AAIRC,IAAAA,IAAI,EAAE;AACJD,MAAAA,KAAK,EAAE;AADH,KAJE;AAORE,IAAAA,QAAQ,EAAE;AACRF,MAAAA,KAAK,EAAE;AADC,KAPF;AAURG,IAAAA,KAAK,EAAE;AACLH,MAAAA,KAAK,EAAE;AADF,KAVC;AAaRI,IAAAA,aAAa,EAAE;AACbJ,MAAAA,KAAK,EAAE;AADM;AAbP,GADgB;AAkB1BK,EAAAA,YAAY,EAAE,CAAC,6BAAD,EAAgC,mBAAhC,EAAqD,6BAArD,EAAoF,eAApF,EAAqG,YAArG,EAAmH,yDAAnH,EAA8K,4EAA9K,EAA4P,GAA5P,EAAiQC,IAAjQ,CAAsQ,IAAtQ,CAlBY;AAmB1BC,EAAAA,cAAc,EAAE,CAAC,qBAAD,EAAwB,qBAAxB,EAA+C,6BAA/C,EAA8E,0BAA9E,EAA0G,mBAA1G,EAA+H,6BAA/H,EAA8J,iDAA9J,EAAiN,oGAAjN,EAAuT,GAAvT,EAA4T,8CAA5T,EAA4W,mHAA5W,EAAie,GAAje,EAAse,eAAte,EAAuf,4BAAvf,EAAqhB,0BAArhB,EAAijB;AACjkB,sGADgB,EACsF,kFADtF,EAC0K,uFAD1K,EACmQ;AACnR,qCAFgB,EAEqB,uBAFrB,EAE8C,6CAF9C,EAE6F,+DAF7F,EAE8J,GAF9J,EAEmKD,IAFnK,CAEwK,IAFxK;AAnBU,CAA5B;AAwBA,SAAST,qBAAT","sourcesContent":["var WaterRefractionShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    time: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDudv: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader: ['uniform mat4 textureMatrix;', 'varying vec2 vUv;', 'varying vec4 vUvRefraction;', 'void main() {', '\tvUv = uv;', '\tvUvRefraction = textureMatrix * vec4( position, 1.0 );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 color;', 'uniform float time;', 'uniform sampler2D tDiffuse;', 'uniform sampler2D tDudv;', 'varying vec2 vUv;', 'varying vec4 vUvRefraction;', 'float blendOverlay( float base, float blend ) {', '\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );', '}', 'vec3 blendOverlay( vec3 base, vec3 blend ) {', '\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ),blendOverlay( base.b, blend.b ) );', '}', 'void main() {', ' float waveStrength = 0.1;', ' float waveSpeed = 0.03;', // simple distortion (ripple) via dudv map (see https://www.youtube.com/watch?v=6B7IF6GOu7s)\n  '\tvec2 distortedUv = texture2D( tDudv, vec2( vUv.x + time * waveSpeed, vUv.y ) ).rg * waveStrength;', '\tdistortedUv = vUv.xy + vec2( distortedUv.x, distortedUv.y + time * waveSpeed );', '\tvec2 distortion = ( texture2D( tDudv, distortedUv ).rg * 2.0 - 1.0 ) * waveStrength;', // new uv coords\n  ' vec4 uv = vec4( vUvRefraction );', ' uv.xy += distortion;', '\tvec4 base = texture2DProj( tDiffuse, uv );', '\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );', '}'].join('\\n')\n};\n\nexport { WaterRefractionShader };\n"]},"metadata":{},"sourceType":"module"}