{"ast":null,"code":"import { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh, LoaderUtils } from 'three';\nimport { unzipSync } from 'fflate';\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * More information about the AMF format: http://amf.wikispaces.com\n *\n * Usage:\n *\tvar loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nvar AMFLoader = function AMFLoader(manager) {\n  Loader.call(this, manager);\n};\n\nAMFLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: AMFLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function parse(data) {\n    function loadDocument(data) {\n      var view = new DataView(data);\n      var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n      if (magic === 'PK') {\n        var zip = null;\n        var file = null;\n        console.log('THREE.AMFLoader: Loading Zip');\n\n        try {\n          zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n\n        for (var _file in zip) {\n          if (_file.toLowerCase().substr(-4) === '.amf') {\n            break;\n          }\n        }\n\n        console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n        view = new DataView(zip[file].buffer);\n      }\n\n      var fileText = LoaderUtils.decodeText(view);\n      var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n      if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n        console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n        return null;\n      }\n\n      return xmlData;\n    }\n\n    function loadDocumentScale(node) {\n      var scale = 1.0;\n      var unit = 'millimeter';\n\n      if (node.documentElement.attributes.unit !== undefined) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n\n      var scaleUnits = {\n        millimeter: 1.0,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1000.0,\n        micron: 0.001\n      };\n\n      if (scaleUnits[unit] !== undefined) {\n        scale = scaleUnits[unit];\n      }\n\n      console.log('THREE.AMFLoader: Unit scale: ' + scale);\n      return scale;\n    }\n\n    function loadMaterials(node) {\n      var matName = 'AMF Material';\n      var matId = node.attributes.id.textContent;\n      var color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      var loadedMaterial = null;\n\n      for (var _i = 0; _i < node.childNodes.length; _i++) {\n        var matChildEl = node.childNodes[_i];\n\n        if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n          if (matChildEl.attributes.type.value === 'name') {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === 'color') {\n          color = loadColor(matChildEl);\n        }\n      }\n\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n\n      if (color.a !== 1.0) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n\n    function loadColor(node) {\n      var color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n\n      for (var _i2 = 0; _i2 < node.childNodes.length; _i2++) {\n        var matColor = node.childNodes[_i2];\n\n        if (matColor.nodeName === 'r') {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === 'g') {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === 'b') {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === 'a') {\n          color.a = matColor.textContent;\n        }\n      }\n\n      return color;\n    }\n\n    function loadMeshVolume(node) {\n      var volume = {\n        name: '',\n        triangles: [],\n        materialid: null\n      };\n      var currVolumeNode = node.firstElementChild;\n\n      if (node.attributes.materialid !== undefined) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === 'metadata') {\n          if (currVolumeNode.attributes.type !== undefined) {\n            if (currVolumeNode.attributes.type.value === 'name') {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === 'triangle') {\n          var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n          var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n          var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n\n      return volume;\n    }\n\n    function loadMeshVertices(node) {\n      var vertArray = [];\n      var normalArray = [];\n      var currVerticesNode = node.firstElementChild;\n\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === 'vertex') {\n          var vNode = currVerticesNode.firstElementChild;\n\n          while (vNode) {\n            if (vNode.nodeName === 'coordinates') {\n              var x = vNode.getElementsByTagName('x')[0].textContent;\n              var y = vNode.getElementsByTagName('y')[0].textContent;\n              var z = vNode.getElementsByTagName('z')[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === 'normal') {\n              var nx = vNode.getElementsByTagName('nx')[0].textContent;\n              var ny = vNode.getElementsByTagName('ny')[0].textContent;\n              var nz = vNode.getElementsByTagName('nz')[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n\n            vNode = vNode.nextElementSibling;\n          }\n        }\n\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n\n      return {\n        vertices: vertArray,\n        normals: normalArray\n      };\n    }\n\n    function loadObject(node) {\n      var objId = node.attributes.id.textContent;\n      var loadedObject = {\n        name: 'amfobject',\n        meshes: []\n      };\n      var currColor = null;\n      var currObjNode = node.firstElementChild;\n\n      while (currObjNode) {\n        if (currObjNode.nodeName === 'metadata') {\n          if (currObjNode.attributes.type !== undefined) {\n            if (currObjNode.attributes.type.value === 'name') {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === 'color') {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === 'mesh') {\n          var currMeshNode = currObjNode.firstElementChild;\n          var mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === 'vertices') {\n              var loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === 'volume') {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n\n          loadedObject.meshes.push(mesh);\n        }\n\n        currObjNode = currObjNode.nextElementSibling;\n      }\n\n      return {\n        id: objId,\n        obj: loadedObject\n      };\n    }\n\n    var xmlData = loadDocument(data);\n    var amfName = '';\n    var amfAuthor = '';\n    var amfScale = loadDocumentScale(xmlData);\n    var amfMaterials = {};\n    var amfObjects = {};\n    var childNodes = xmlData.documentElement.childNodes;\n    var i, j;\n\n    for (i = 0; i < childNodes.length; i++) {\n      var child = childNodes[i];\n\n      if (child.nodeName === 'metadata') {\n        if (child.attributes.type !== undefined) {\n          if (child.attributes.type.value === 'name') {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === 'author') {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === 'material') {\n        var loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === 'object') {\n        var loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n\n    var sceneObject = new Group();\n    var defaultMaterial = new MeshPhongMaterial({\n      color: 0xaaaaff,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = 'AMF';\n\n    for (var id in amfObjects) {\n      var part = amfObjects[id];\n      var meshes = part.meshes;\n      var newObject = new Group();\n      newObject.name = part.name || '';\n\n      for (i = 0; i < meshes.length; i++) {\n        var objDefaultMaterial = defaultMaterial;\n        var mesh = meshes[i];\n        var vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        var normals = null;\n\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n\n        if (mesh.color) {\n          var color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n\n          if (color.a !== 1.0) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n\n        var volumes = mesh.volumes;\n\n        for (j = 0; j < volumes.length; j++) {\n          var volume = volumes[j];\n          var newGeometry = new BufferGeometry();\n          var material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute('position', vertices.clone());\n\n          if (normals) {\n            newGeometry.setAttribute('normal', normals.clone());\n          }\n\n          if (amfMaterials[volume.materialId] !== undefined) {\n            material = amfMaterials[volume.materialId];\n          }\n\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n\n      sceneObject.add(newObject);\n    }\n\n    return sceneObject;\n  }\n});\nexport { AMFLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/AMFLoader.js"],"names":["Loader","FileLoader","Group","MeshPhongMaterial","Float32BufferAttribute","Color","BufferGeometry","Mesh","LoaderUtils","unzipSync","AMFLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","loadDocument","view","DataView","magic","String","fromCharCode","getUint8","zip","file","log","Uint8Array","ReferenceError","toLowerCase","substr","buffer","fileText","decodeText","xmlData","DOMParser","parseFromString","documentElement","nodeName","loadDocumentScale","node","scale","unit","attributes","undefined","value","scaleUnits","millimeter","inch","feet","meter","micron","loadMaterials","matName","matId","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","type","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","amfName","amfAuthor","amfScale","amfMaterials","amfObjects","j","child","sceneObject","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoCC,iBAApC,EAAuDC,sBAAvD,EAA+EC,KAA/E,EAAsFC,cAAtF,EAAsGC,IAAtG,EAA4GC,WAA5G,QAA+H,OAA/H;AACA,SAASC,SAAT,QAA0B,QAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GAAG,SAAZA,SAAY,CAAUC,OAAV,EAAmB;AACjCX,EAAAA,MAAM,CAACY,IAAP,CAAY,IAAZ,EAAkBD,OAAlB;AACD,CAFD;;AAIAD,SAAS,CAACG,SAAV,GAAsBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAchB,MAAM,CAACa,SAArB,CAAd,EAA+C;AACnEI,EAAAA,WAAW,EAAEP,SADsD;AAEnEQ,EAAAA,IAAI,EAAE,cAAUC,GAAV,EAAeC,MAAf,EAAuBC,UAAvB,EAAmCC,OAAnC,EAA4C;AAChD,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,MAAM,GAAG,IAAIvB,UAAJ,CAAesB,KAAK,CAACZ,OAArB,CAAb;AACAa,IAAAA,MAAM,CAACC,OAAP,CAAeF,KAAK,CAACG,IAArB;AACAF,IAAAA,MAAM,CAACG,eAAP,CAAuB,aAAvB;AACAH,IAAAA,MAAM,CAACI,gBAAP,CAAwBL,KAAK,CAACM,aAA9B;AACAL,IAAAA,MAAM,CAACM,kBAAP,CAA0BP,KAAK,CAACQ,eAAhC;AACAP,IAAAA,MAAM,CAACN,IAAP,CAAYC,GAAZ,EAAiB,UAAUa,IAAV,EAAgB;AAC/B,UAAI;AACFZ,QAAAA,MAAM,CAACG,KAAK,CAACU,KAAN,CAAYD,IAAZ,CAAD,CAAN;AACD,OAFD,CAEE,OAAOE,CAAP,EAAU;AACV,YAAIZ,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACY,CAAD,CAAP;AACD,SAFD,MAEO;AACLC,UAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;;AAEDX,QAAAA,KAAK,CAACZ,OAAN,CAAc0B,SAAd,CAAwBlB,GAAxB;AACD;AACF,KAZD,EAYGE,UAZH,EAYeC,OAZf;AAaD,GAtBkE;AAuBnEW,EAAAA,KAAK,EAAE,eAAUK,IAAV,EAAgB;AACrB,aAASC,YAAT,CAAsBD,IAAtB,EAA4B;AAC1B,UAAIE,IAAI,GAAG,IAAIC,QAAJ,CAAaH,IAAb,CAAX;AACA,UAAII,KAAK,GAAGC,MAAM,CAACC,YAAP,CAAoBJ,IAAI,CAACK,QAAL,CAAc,CAAd,CAApB,EAAsCL,IAAI,CAACK,QAAL,CAAc,CAAd,CAAtC,CAAZ;;AAEA,UAAIH,KAAK,KAAK,IAAd,EAAoB;AAClB,YAAII,GAAG,GAAG,IAAV;AACA,YAAIC,IAAI,GAAG,IAAX;AACAZ,QAAAA,OAAO,CAACa,GAAR,CAAY,8BAAZ;;AAEA,YAAI;AACFF,UAAAA,GAAG,GAAGrC,SAAS,CAAC,IAAIwC,UAAJ,CAAeX,IAAf,CAAD,CAAf,CADE,CACqC;AACxC,SAFD,CAEE,OAAOJ,CAAP,EAAU;AACV,cAAIA,CAAC,YAAYgB,cAAjB,EAAiC;AAC/Bf,YAAAA,OAAO,CAACa,GAAR,CAAY,yDAAZ;AACA,mBAAO,IAAP;AACD;AACF;;AAED,aAAK,IAAID,KAAT,IAAiBD,GAAjB,EAAsB;AACpB,cAAIC,KAAI,CAACI,WAAL,GAAmBC,MAAnB,CAA0B,CAAC,CAA3B,MAAkC,MAAtC,EAA8C;AAC5C;AACD;AACF;;AAEDjB,QAAAA,OAAO,CAACa,GAAR,CAAY,iDAAiDD,IAA7D;AACAP,QAAAA,IAAI,GAAG,IAAIC,QAAJ,CAAaK,GAAG,CAACC,IAAD,CAAH,CAAUM,MAAvB,CAAP;AACD;;AAED,UAAIC,QAAQ,GAAG9C,WAAW,CAAC+C,UAAZ,CAAuBf,IAAvB,CAAf;AACA,UAAIgB,OAAO,GAAG,IAAIC,SAAJ,GAAgBC,eAAhB,CAAgCJ,QAAhC,EAA0C,iBAA1C,CAAd;;AAEA,UAAIE,OAAO,CAACG,eAAR,CAAwBC,QAAxB,CAAiCT,WAAjC,OAAmD,KAAvD,EAA8D;AAC5DhB,QAAAA,OAAO,CAACa,GAAR,CAAY,6DAAZ;AACA,eAAO,IAAP;AACD;;AAED,aAAOQ,OAAP;AACD;;AAED,aAASK,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,UAAIC,KAAK,GAAG,GAAZ;AACA,UAAIC,IAAI,GAAG,YAAX;;AAEA,UAAIF,IAAI,CAACH,eAAL,CAAqBM,UAArB,CAAgCD,IAAhC,KAAyCE,SAA7C,EAAwD;AACtDF,QAAAA,IAAI,GAAGF,IAAI,CAACH,eAAL,CAAqBM,UAArB,CAAgCD,IAAhC,CAAqCG,KAArC,CAA2ChB,WAA3C,EAAP;AACD;;AAED,UAAIiB,UAAU,GAAG;AACfC,QAAAA,UAAU,EAAE,GADG;AAEfC,QAAAA,IAAI,EAAE,IAFS;AAGfC,QAAAA,IAAI,EAAE,KAHS;AAIfC,QAAAA,KAAK,EAAE,MAJQ;AAKfC,QAAAA,MAAM,EAAE;AALO,OAAjB;;AAQA,UAAIL,UAAU,CAACJ,IAAD,CAAV,KAAqBE,SAAzB,EAAoC;AAClCH,QAAAA,KAAK,GAAGK,UAAU,CAACJ,IAAD,CAAlB;AACD;;AAED7B,MAAAA,OAAO,CAACa,GAAR,CAAY,kCAAkCe,KAA9C;AACA,aAAOA,KAAP;AACD;;AAED,aAASW,aAAT,CAAuBZ,IAAvB,EAA6B;AAC3B,UAAIa,OAAO,GAAG,cAAd;AACA,UAAIC,KAAK,GAAGd,IAAI,CAACG,UAAL,CAAgBY,EAAhB,CAAmBC,WAA/B;AACA,UAAIC,KAAK,GAAG;AACVC,QAAAA,CAAC,EAAE,GADO;AAEVC,QAAAA,CAAC,EAAE,GAFO;AAGVC,QAAAA,CAAC,EAAE,GAHO;AAIVC,QAAAA,CAAC,EAAE;AAJO,OAAZ;AAMA,UAAIC,cAAc,GAAG,IAArB;;AAEA,WAAK,IAAIC,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGvB,IAAI,CAACwB,UAAL,CAAgBC,MAApC,EAA4CF,EAAC,EAA7C,EAAiD;AAC/C,YAAIG,UAAU,GAAG1B,IAAI,CAACwB,UAAL,CAAgBD,EAAhB,CAAjB;;AAEA,YAAIG,UAAU,CAAC5B,QAAX,KAAwB,UAAxB,IAAsC4B,UAAU,CAACvB,UAAX,CAAsBwB,IAAtB,KAA+BvB,SAAzE,EAAoF;AAClF,cAAIsB,UAAU,CAACvB,UAAX,CAAsBwB,IAAtB,CAA2BtB,KAA3B,KAAqC,MAAzC,EAAiD;AAC/CQ,YAAAA,OAAO,GAAGa,UAAU,CAACV,WAArB;AACD;AACF,SAJD,MAIO,IAAIU,UAAU,CAAC5B,QAAX,KAAwB,OAA5B,EAAqC;AAC1CmB,UAAAA,KAAK,GAAGW,SAAS,CAACF,UAAD,CAAjB;AACD;AACF;;AAEDJ,MAAAA,cAAc,GAAG,IAAIjF,iBAAJ,CAAsB;AACrCwF,QAAAA,WAAW,EAAE,IADwB;AAErCZ,QAAAA,KAAK,EAAE,IAAI1E,KAAJ,CAAU0E,KAAK,CAACC,CAAhB,EAAmBD,KAAK,CAACE,CAAzB,EAA4BF,KAAK,CAACG,CAAlC,CAF8B;AAGrCU,QAAAA,IAAI,EAAEjB;AAH+B,OAAtB,CAAjB;;AAMA,UAAII,KAAK,CAACI,CAAN,KAAY,GAAhB,EAAqB;AACnBC,QAAAA,cAAc,CAACS,WAAf,GAA6B,IAA7B;AACAT,QAAAA,cAAc,CAACU,OAAf,GAAyBf,KAAK,CAACI,CAA/B;AACD;;AAED,aAAO;AACLN,QAAAA,EAAE,EAAED,KADC;AAELmB,QAAAA,QAAQ,EAAEX;AAFL,OAAP;AAID;;AAED,aAASM,SAAT,CAAmB5B,IAAnB,EAAyB;AACvB,UAAIiB,KAAK,GAAG;AACVC,QAAAA,CAAC,EAAE,GADO;AAEVC,QAAAA,CAAC,EAAE,GAFO;AAGVC,QAAAA,CAAC,EAAE,GAHO;AAIVC,QAAAA,CAAC,EAAE;AAJO,OAAZ;;AAOA,WAAK,IAAIE,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGvB,IAAI,CAACwB,UAAL,CAAgBC,MAApC,EAA4CF,GAAC,EAA7C,EAAiD;AAC/C,YAAIW,QAAQ,GAAGlC,IAAI,CAACwB,UAAL,CAAgBD,GAAhB,CAAf;;AAEA,YAAIW,QAAQ,CAACpC,QAAT,KAAsB,GAA1B,EAA+B;AAC7BmB,UAAAA,KAAK,CAACC,CAAN,GAAUgB,QAAQ,CAAClB,WAAnB;AACD,SAFD,MAEO,IAAIkB,QAAQ,CAACpC,QAAT,KAAsB,GAA1B,EAA+B;AACpCmB,UAAAA,KAAK,CAACE,CAAN,GAAUe,QAAQ,CAAClB,WAAnB;AACD,SAFM,MAEA,IAAIkB,QAAQ,CAACpC,QAAT,KAAsB,GAA1B,EAA+B;AACpCmB,UAAAA,KAAK,CAACG,CAAN,GAAUc,QAAQ,CAAClB,WAAnB;AACD,SAFM,MAEA,IAAIkB,QAAQ,CAACpC,QAAT,KAAsB,GAA1B,EAA+B;AACpCmB,UAAAA,KAAK,CAACI,CAAN,GAAUa,QAAQ,CAAClB,WAAnB;AACD;AACF;;AAED,aAAOC,KAAP;AACD;;AAED,aAASkB,cAAT,CAAwBnC,IAAxB,EAA8B;AAC5B,UAAIoC,MAAM,GAAG;AACXN,QAAAA,IAAI,EAAE,EADK;AAEXO,QAAAA,SAAS,EAAE,EAFA;AAGXC,QAAAA,UAAU,EAAE;AAHD,OAAb;AAKA,UAAIC,cAAc,GAAGvC,IAAI,CAACwC,iBAA1B;;AAEA,UAAIxC,IAAI,CAACG,UAAL,CAAgBmC,UAAhB,KAA+BlC,SAAnC,EAA8C;AAC5CgC,QAAAA,MAAM,CAACK,UAAP,GAAoBzC,IAAI,CAACG,UAAL,CAAgBmC,UAAhB,CAA2BI,SAA/C;AACD;;AAED,aAAOH,cAAP,EAAuB;AACrB,YAAIA,cAAc,CAACzC,QAAf,KAA4B,UAAhC,EAA4C;AAC1C,cAAIyC,cAAc,CAACpC,UAAf,CAA0BwB,IAA1B,KAAmCvB,SAAvC,EAAkD;AAChD,gBAAImC,cAAc,CAACpC,UAAf,CAA0BwB,IAA1B,CAA+BtB,KAA/B,KAAyC,MAA7C,EAAqD;AACnD+B,cAAAA,MAAM,CAACN,IAAP,GAAcS,cAAc,CAACvB,WAA7B;AACD;AACF;AACF,SAND,MAMO,IAAIuB,cAAc,CAACzC,QAAf,KAA4B,UAAhC,EAA4C;AACjD,cAAI6C,EAAE,GAAGJ,cAAc,CAACK,oBAAf,CAAoC,IAApC,EAA0C,CAA1C,EAA6C5B,WAAtD;AACA,cAAI6B,EAAE,GAAGN,cAAc,CAACK,oBAAf,CAAoC,IAApC,EAA0C,CAA1C,EAA6C5B,WAAtD;AACA,cAAI8B,EAAE,GAAGP,cAAc,CAACK,oBAAf,CAAoC,IAApC,EAA0C,CAA1C,EAA6C5B,WAAtD;AACAoB,UAAAA,MAAM,CAACC,SAAP,CAAiBU,IAAjB,CAAsBJ,EAAtB,EAA0BE,EAA1B,EAA8BC,EAA9B;AACD;;AAEDP,QAAAA,cAAc,GAAGA,cAAc,CAACS,kBAAhC;AACD;;AAED,aAAOZ,MAAP;AACD;;AAED,aAASa,gBAAT,CAA0BjD,IAA1B,EAAgC;AAC9B,UAAIkD,SAAS,GAAG,EAAhB;AACA,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIC,gBAAgB,GAAGpD,IAAI,CAACwC,iBAA5B;;AAEA,aAAOY,gBAAP,EAAyB;AACvB,YAAIA,gBAAgB,CAACtD,QAAjB,KAA8B,QAAlC,EAA4C;AAC1C,cAAIuD,KAAK,GAAGD,gBAAgB,CAACZ,iBAA7B;;AAEA,iBAAOa,KAAP,EAAc;AACZ,gBAAIA,KAAK,CAACvD,QAAN,KAAmB,aAAvB,EAAsC;AACpC,kBAAIwD,CAAC,GAAGD,KAAK,CAACT,oBAAN,CAA2B,GAA3B,EAAgC,CAAhC,EAAmC5B,WAA3C;AACA,kBAAIuC,CAAC,GAAGF,KAAK,CAACT,oBAAN,CAA2B,GAA3B,EAAgC,CAAhC,EAAmC5B,WAA3C;AACA,kBAAIwC,CAAC,GAAGH,KAAK,CAACT,oBAAN,CAA2B,GAA3B,EAAgC,CAAhC,EAAmC5B,WAA3C;AACAkC,cAAAA,SAAS,CAACH,IAAV,CAAeO,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB;AACD,aALD,MAKO,IAAIH,KAAK,CAACvD,QAAN,KAAmB,QAAvB,EAAiC;AACtC,kBAAI2D,EAAE,GAAGJ,KAAK,CAACT,oBAAN,CAA2B,IAA3B,EAAiC,CAAjC,EAAoC5B,WAA7C;AACA,kBAAI0C,EAAE,GAAGL,KAAK,CAACT,oBAAN,CAA2B,IAA3B,EAAiC,CAAjC,EAAoC5B,WAA7C;AACA,kBAAI2C,EAAE,GAAGN,KAAK,CAACT,oBAAN,CAA2B,IAA3B,EAAiC,CAAjC,EAAoC5B,WAA7C;AACAmC,cAAAA,WAAW,CAACJ,IAAZ,CAAiBU,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB;AACD;;AAEDN,YAAAA,KAAK,GAAGA,KAAK,CAACL,kBAAd;AACD;AACF;;AAEDI,QAAAA,gBAAgB,GAAGA,gBAAgB,CAACJ,kBAApC;AACD;;AAED,aAAO;AACLY,QAAAA,QAAQ,EAAEV,SADL;AAELW,QAAAA,OAAO,EAAEV;AAFJ,OAAP;AAID;;AAED,aAASW,UAAT,CAAoB9D,IAApB,EAA0B;AACxB,UAAI+D,KAAK,GAAG/D,IAAI,CAACG,UAAL,CAAgBY,EAAhB,CAAmBC,WAA/B;AACA,UAAIgD,YAAY,GAAG;AACjBlC,QAAAA,IAAI,EAAE,WADW;AAEjBmC,QAAAA,MAAM,EAAE;AAFS,OAAnB;AAIA,UAAIC,SAAS,GAAG,IAAhB;AACA,UAAIC,WAAW,GAAGnE,IAAI,CAACwC,iBAAvB;;AAEA,aAAO2B,WAAP,EAAoB;AAClB,YAAIA,WAAW,CAACrE,QAAZ,KAAyB,UAA7B,EAAyC;AACvC,cAAIqE,WAAW,CAAChE,UAAZ,CAAuBwB,IAAvB,KAAgCvB,SAApC,EAA+C;AAC7C,gBAAI+D,WAAW,CAAChE,UAAZ,CAAuBwB,IAAvB,CAA4BtB,KAA5B,KAAsC,MAA1C,EAAkD;AAChD2D,cAAAA,YAAY,CAAClC,IAAb,GAAoBqC,WAAW,CAACnD,WAAhC;AACD;AACF;AACF,SAND,MAMO,IAAImD,WAAW,CAACrE,QAAZ,KAAyB,OAA7B,EAAsC;AAC3CoE,UAAAA,SAAS,GAAGtC,SAAS,CAACuC,WAAD,CAArB;AACD,SAFM,MAEA,IAAIA,WAAW,CAACrE,QAAZ,KAAyB,MAA7B,EAAqC;AAC1C,cAAIsE,YAAY,GAAGD,WAAW,CAAC3B,iBAA/B;AACA,cAAI6B,IAAI,GAAG;AACTT,YAAAA,QAAQ,EAAE,EADD;AAETC,YAAAA,OAAO,EAAE,EAFA;AAGTS,YAAAA,OAAO,EAAE,EAHA;AAITrD,YAAAA,KAAK,EAAEiD;AAJE,WAAX;;AAOA,iBAAOE,YAAP,EAAqB;AACnB,gBAAIA,YAAY,CAACtE,QAAb,KAA0B,UAA9B,EAA0C;AACxC,kBAAIyE,cAAc,GAAGtB,gBAAgB,CAACmB,YAAD,CAArC;AACAC,cAAAA,IAAI,CAACR,OAAL,GAAeQ,IAAI,CAACR,OAAL,CAAaW,MAAb,CAAoBD,cAAc,CAACV,OAAnC,CAAf;AACAQ,cAAAA,IAAI,CAACT,QAAL,GAAgBS,IAAI,CAACT,QAAL,CAAcY,MAAd,CAAqBD,cAAc,CAACX,QAApC,CAAhB;AACD,aAJD,MAIO,IAAIQ,YAAY,CAACtE,QAAb,KAA0B,QAA9B,EAAwC;AAC7CuE,cAAAA,IAAI,CAACC,OAAL,CAAavB,IAAb,CAAkBZ,cAAc,CAACiC,YAAD,CAAhC;AACD;;AAEDA,YAAAA,YAAY,GAAGA,YAAY,CAACpB,kBAA5B;AACD;;AAEDgB,UAAAA,YAAY,CAACC,MAAb,CAAoBlB,IAApB,CAAyBsB,IAAzB;AACD;;AAEDF,QAAAA,WAAW,GAAGA,WAAW,CAACnB,kBAA1B;AACD;;AAED,aAAO;AACLjC,QAAAA,EAAE,EAAEgD,KADC;AAELU,QAAAA,GAAG,EAAET;AAFA,OAAP;AAID;;AAED,QAAItE,OAAO,GAAGjB,YAAY,CAACD,IAAD,CAA1B;AACA,QAAIkG,OAAO,GAAG,EAAd;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,QAAQ,GAAG7E,iBAAiB,CAACL,OAAD,CAAhC;AACA,QAAImF,YAAY,GAAG,EAAnB;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAItD,UAAU,GAAG9B,OAAO,CAACG,eAAR,CAAwB2B,UAAzC;AACA,QAAID,CAAJ,EAAOwD,CAAP;;AAEA,SAAKxD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,UAAU,CAACC,MAA3B,EAAmCF,CAAC,EAApC,EAAwC;AACtC,UAAIyD,KAAK,GAAGxD,UAAU,CAACD,CAAD,CAAtB;;AAEA,UAAIyD,KAAK,CAAClF,QAAN,KAAmB,UAAvB,EAAmC;AACjC,YAAIkF,KAAK,CAAC7E,UAAN,CAAiBwB,IAAjB,KAA0BvB,SAA9B,EAAyC;AACvC,cAAI4E,KAAK,CAAC7E,UAAN,CAAiBwB,IAAjB,CAAsBtB,KAAtB,KAAgC,MAApC,EAA4C;AAC1CqE,YAAAA,OAAO,GAAGM,KAAK,CAAChE,WAAhB;AACD,WAFD,MAEO,IAAIgE,KAAK,CAAC7E,UAAN,CAAiBwB,IAAjB,CAAsBtB,KAAtB,KAAgC,QAApC,EAA8C;AACnDsE,YAAAA,SAAS,GAAGK,KAAK,CAAChE,WAAlB;AACD;AACF;AACF,OARD,MAQO,IAAIgE,KAAK,CAAClF,QAAN,KAAmB,UAAvB,EAAmC;AACxC,YAAIwB,cAAc,GAAGV,aAAa,CAACoE,KAAD,CAAlC;AACAH,QAAAA,YAAY,CAACvD,cAAc,CAACP,EAAhB,CAAZ,GAAkCO,cAAc,CAACW,QAAjD;AACD,OAHM,MAGA,IAAI+C,KAAK,CAAClF,QAAN,KAAmB,QAAvB,EAAiC;AACtC,YAAIkE,YAAY,GAAGF,UAAU,CAACkB,KAAD,CAA7B;AACAF,QAAAA,UAAU,CAACd,YAAY,CAACjD,EAAd,CAAV,GAA8BiD,YAAY,CAACS,GAA3C;AACD;AACF;;AAED,QAAIQ,WAAW,GAAG,IAAI7I,KAAJ,EAAlB;AACA,QAAI8I,eAAe,GAAG,IAAI7I,iBAAJ,CAAsB;AAC1C4E,MAAAA,KAAK,EAAE,QADmC;AAE1CY,MAAAA,WAAW,EAAE;AAF6B,KAAtB,CAAtB;AAIAoD,IAAAA,WAAW,CAACnD,IAAZ,GAAmB4C,OAAnB;AACAO,IAAAA,WAAW,CAACE,QAAZ,CAAqBC,MAArB,GAA8BT,SAA9B;AACAM,IAAAA,WAAW,CAACE,QAAZ,CAAqBzH,MAArB,GAA8B,KAA9B;;AAEA,SAAK,IAAIqD,EAAT,IAAe+D,UAAf,EAA2B;AACzB,UAAIO,IAAI,GAAGP,UAAU,CAAC/D,EAAD,CAArB;AACA,UAAIkD,MAAM,GAAGoB,IAAI,CAACpB,MAAlB;AACA,UAAIqB,SAAS,GAAG,IAAIlJ,KAAJ,EAAhB;AACAkJ,MAAAA,SAAS,CAACxD,IAAV,GAAiBuD,IAAI,CAACvD,IAAL,IAAa,EAA9B;;AAEA,WAAKP,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG0C,MAAM,CAACxC,MAAvB,EAA+BF,CAAC,EAAhC,EAAoC;AAClC,YAAIgE,kBAAkB,GAAGL,eAAzB;AACA,YAAIb,IAAI,GAAGJ,MAAM,CAAC1C,CAAD,CAAjB;AACA,YAAIqC,QAAQ,GAAG,IAAItH,sBAAJ,CAA2B+H,IAAI,CAACT,QAAhC,EAA0C,CAA1C,CAAf;AACA,YAAIC,OAAO,GAAG,IAAd;;AAEA,YAAIQ,IAAI,CAACR,OAAL,CAAapC,MAAjB,EAAyB;AACvBoC,UAAAA,OAAO,GAAG,IAAIvH,sBAAJ,CAA2B+H,IAAI,CAACR,OAAhC,EAAyC,CAAzC,CAAV;AACD;;AAED,YAAIQ,IAAI,CAACpD,KAAT,EAAgB;AACd,cAAIA,KAAK,GAAGoD,IAAI,CAACpD,KAAjB;AACAsE,UAAAA,kBAAkB,GAAGL,eAAe,CAACM,KAAhB,EAArB;AACAD,UAAAA,kBAAkB,CAACtE,KAAnB,GAA2B,IAAI1E,KAAJ,CAAU0E,KAAK,CAACC,CAAhB,EAAmBD,KAAK,CAACE,CAAzB,EAA4BF,KAAK,CAACG,CAAlC,CAA3B;;AAEA,cAAIH,KAAK,CAACI,CAAN,KAAY,GAAhB,EAAqB;AACnBkE,YAAAA,kBAAkB,CAACxD,WAAnB,GAAiC,IAAjC;AACAwD,YAAAA,kBAAkB,CAACvD,OAAnB,GAA6Bf,KAAK,CAACI,CAAnC;AACD;AACF;;AAED,YAAIiD,OAAO,GAAGD,IAAI,CAACC,OAAnB;;AAEA,aAAKS,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGT,OAAO,CAAC7C,MAAxB,EAAgCsD,CAAC,EAAjC,EAAqC;AACnC,cAAI3C,MAAM,GAAGkC,OAAO,CAACS,CAAD,CAApB;AACA,cAAIU,WAAW,GAAG,IAAIjJ,cAAJ,EAAlB;AACA,cAAIyF,QAAQ,GAAGsD,kBAAf;AACAE,UAAAA,WAAW,CAACC,QAAZ,CAAqBtD,MAAM,CAACC,SAA5B;AACAoD,UAAAA,WAAW,CAACE,YAAZ,CAAyB,UAAzB,EAAqC/B,QAAQ,CAAC4B,KAAT,EAArC;;AAEA,cAAI3B,OAAJ,EAAa;AACX4B,YAAAA,WAAW,CAACE,YAAZ,CAAyB,QAAzB,EAAmC9B,OAAO,CAAC2B,KAAR,EAAnC;AACD;;AAED,cAAIX,YAAY,CAACzC,MAAM,CAACK,UAAR,CAAZ,KAAoCrC,SAAxC,EAAmD;AACjD6B,YAAAA,QAAQ,GAAG4C,YAAY,CAACzC,MAAM,CAACK,UAAR,CAAvB;AACD;;AAEDgD,UAAAA,WAAW,CAACxF,KAAZ,CAAkB2E,QAAlB,EAA4BA,QAA5B,EAAsCA,QAAtC;AACAU,UAAAA,SAAS,CAACM,GAAV,CAAc,IAAInJ,IAAJ,CAASgJ,WAAT,EAAsBxD,QAAQ,CAACuD,KAAT,EAAtB,CAAd;AACD;AACF;;AAEDP,MAAAA,WAAW,CAACW,GAAZ,CAAgBN,SAAhB;AACD;;AAED,WAAOL,WAAP;AACD;AAzWkE,CAA/C,CAAtB;AA4WA,SAASrI,SAAT","sourcesContent":["import { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh, LoaderUtils } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * More information about the AMF format: http://amf.wikispaces.com\n *\n * Usage:\n *\tvar loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nvar AMFLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nAMFLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: AMFLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (data) {\n    function loadDocument(data) {\n      var view = new DataView(data);\n      var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n      if (magic === 'PK') {\n        var zip = null;\n        var file = null;\n        console.log('THREE.AMFLoader: Loading Zip');\n\n        try {\n          zip = unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n\n        for (let file in zip) {\n          if (file.toLowerCase().substr(-4) === '.amf') {\n            break;\n          }\n        }\n\n        console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n        view = new DataView(zip[file].buffer);\n      }\n\n      var fileText = LoaderUtils.decodeText(view);\n      var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n      if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n        console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n        return null;\n      }\n\n      return xmlData;\n    }\n\n    function loadDocumentScale(node) {\n      var scale = 1.0;\n      var unit = 'millimeter';\n\n      if (node.documentElement.attributes.unit !== undefined) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n\n      var scaleUnits = {\n        millimeter: 1.0,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1000.0,\n        micron: 0.001\n      };\n\n      if (scaleUnits[unit] !== undefined) {\n        scale = scaleUnits[unit];\n      }\n\n      console.log('THREE.AMFLoader: Unit scale: ' + scale);\n      return scale;\n    }\n\n    function loadMaterials(node) {\n      var matName = 'AMF Material';\n      var matId = node.attributes.id.textContent;\n      var color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      var loadedMaterial = null;\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        var matChildEl = node.childNodes[i];\n\n        if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n          if (matChildEl.attributes.type.value === 'name') {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === 'color') {\n          color = loadColor(matChildEl);\n        }\n      }\n\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n\n      if (color.a !== 1.0) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n\n    function loadColor(node) {\n      var color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        var matColor = node.childNodes[i];\n\n        if (matColor.nodeName === 'r') {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === 'g') {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === 'b') {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === 'a') {\n          color.a = matColor.textContent;\n        }\n      }\n\n      return color;\n    }\n\n    function loadMeshVolume(node) {\n      var volume = {\n        name: '',\n        triangles: [],\n        materialid: null\n      };\n      var currVolumeNode = node.firstElementChild;\n\n      if (node.attributes.materialid !== undefined) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === 'metadata') {\n          if (currVolumeNode.attributes.type !== undefined) {\n            if (currVolumeNode.attributes.type.value === 'name') {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === 'triangle') {\n          var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n          var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n          var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n\n      return volume;\n    }\n\n    function loadMeshVertices(node) {\n      var vertArray = [];\n      var normalArray = [];\n      var currVerticesNode = node.firstElementChild;\n\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === 'vertex') {\n          var vNode = currVerticesNode.firstElementChild;\n\n          while (vNode) {\n            if (vNode.nodeName === 'coordinates') {\n              var x = vNode.getElementsByTagName('x')[0].textContent;\n              var y = vNode.getElementsByTagName('y')[0].textContent;\n              var z = vNode.getElementsByTagName('z')[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === 'normal') {\n              var nx = vNode.getElementsByTagName('nx')[0].textContent;\n              var ny = vNode.getElementsByTagName('ny')[0].textContent;\n              var nz = vNode.getElementsByTagName('nz')[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n\n            vNode = vNode.nextElementSibling;\n          }\n        }\n\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n\n      return {\n        vertices: vertArray,\n        normals: normalArray\n      };\n    }\n\n    function loadObject(node) {\n      var objId = node.attributes.id.textContent;\n      var loadedObject = {\n        name: 'amfobject',\n        meshes: []\n      };\n      var currColor = null;\n      var currObjNode = node.firstElementChild;\n\n      while (currObjNode) {\n        if (currObjNode.nodeName === 'metadata') {\n          if (currObjNode.attributes.type !== undefined) {\n            if (currObjNode.attributes.type.value === 'name') {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === 'color') {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === 'mesh') {\n          var currMeshNode = currObjNode.firstElementChild;\n          var mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === 'vertices') {\n              var loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === 'volume') {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n\n          loadedObject.meshes.push(mesh);\n        }\n\n        currObjNode = currObjNode.nextElementSibling;\n      }\n\n      return {\n        id: objId,\n        obj: loadedObject\n      };\n    }\n\n    var xmlData = loadDocument(data);\n    var amfName = '';\n    var amfAuthor = '';\n    var amfScale = loadDocumentScale(xmlData);\n    var amfMaterials = {};\n    var amfObjects = {};\n    var childNodes = xmlData.documentElement.childNodes;\n    var i, j;\n\n    for (i = 0; i < childNodes.length; i++) {\n      var child = childNodes[i];\n\n      if (child.nodeName === 'metadata') {\n        if (child.attributes.type !== undefined) {\n          if (child.attributes.type.value === 'name') {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === 'author') {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === 'material') {\n        var loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === 'object') {\n        var loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n\n    var sceneObject = new Group();\n    var defaultMaterial = new MeshPhongMaterial({\n      color: 0xaaaaff,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = 'AMF';\n\n    for (let id in amfObjects) {\n      var part = amfObjects[id];\n      var meshes = part.meshes;\n      var newObject = new Group();\n      newObject.name = part.name || '';\n\n      for (i = 0; i < meshes.length; i++) {\n        var objDefaultMaterial = defaultMaterial;\n        var mesh = meshes[i];\n        var vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        var normals = null;\n\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n\n        if (mesh.color) {\n          var color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n\n          if (color.a !== 1.0) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n\n        var volumes = mesh.volumes;\n\n        for (j = 0; j < volumes.length; j++) {\n          var volume = volumes[j];\n          var newGeometry = new BufferGeometry();\n          var material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute('position', vertices.clone());\n\n          if (normals) {\n            newGeometry.setAttribute('normal', normals.clone());\n          }\n\n          if (amfMaterials[volume.materialId] !== undefined) {\n            material = amfMaterials[volume.materialId];\n          }\n\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n\n      sceneObject.add(newObject);\n    }\n\n    return sceneObject;\n  }\n});\n\nexport { AMFLoader };\n"]},"metadata":{},"sourceType":"module"}