{"ast":null,"code":"import { Color, Vector2, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SAOShader } from '../shaders/SAOShader.js';\nimport { DepthLimitedBlurShader, BlurShaderUtils } from '../shaders/DepthLimitedBlurShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader.js';\n/**\n * SAO implementation inspired from bhouston previous SAO work\n */\n\nvar SAOPass = function SAOPass(scene, camera, depthTexture, useNormals, resolution) {\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.supportsDepthTextureExtension = depthTexture !== undefined ? depthTexture : false;\n  this.supportsNormalTexture = useNormals !== undefined ? useNormals : false;\n  this.originalClearColor = new Color();\n  this._oldClearColor = new Color();\n  this.oldClearAlpha = 1;\n  this.params = {\n    output: 0,\n    saoBias: 0.5,\n    saoIntensity: 0.18,\n    saoScale: 1,\n    saoKernelRadius: 100,\n    saoMinResolution: 0,\n    saoBlur: true,\n    saoBlurRadius: 8,\n    saoBlurStdDev: 4,\n    saoBlurDepthCutoff: 0.01\n  };\n  this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n  this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n  this.beautyRenderTarget = this.saoRenderTarget.clone();\n  this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.depthRenderTarget = this.normalRenderTarget.clone();\n\n  if (this.supportsDepthTextureExtension) {\n    var depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    this.beautyRenderTarget.depthTexture = depthTexture;\n    this.beautyRenderTarget.depthBuffer = true;\n  }\n\n  this.depthMaterial = new MeshDepthMaterial();\n  this.depthMaterial.depthPacking = RGBADepthPacking;\n  this.depthMaterial.blending = NoBlending;\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending;\n\n  if (SAOShader === undefined) {\n    console.error('THREE.SAOPass relies on SAOShader');\n  }\n\n  this.saoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SAOShader.defines),\n    fragmentShader: SAOShader.fragmentShader,\n    vertexShader: SAOShader.vertexShader,\n    uniforms: UniformsUtils.clone(SAOShader.uniforms)\n  });\n  this.saoMaterial.extensions.derivatives = true;\n  this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\n  this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n  this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n  this.saoMaterial.blending = NoBlending;\n\n  if (DepthLimitedBlurShader === undefined) {\n    console.error('THREE.SAOPass relies on DepthLimitedBlurShader');\n  }\n\n  this.vBlurMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\n    vertexShader: DepthLimitedBlurShader.vertexShader,\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\n  });\n  this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n  this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.vBlurMaterial.blending = NoBlending;\n  this.hBlurMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\n    vertexShader: DepthLimitedBlurShader.vertexShader,\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\n  });\n  this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\n  this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.hBlurMaterial.blending = NoBlending;\n\n  if (CopyShader === undefined) {\n    console.error('THREE.SAOPass relies on CopyShader');\n  }\n\n  this.materialCopy = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.materialCopy.transparent = true;\n  this.materialCopy.depthTest = false;\n  this.materialCopy.depthWrite = false;\n  this.materialCopy.blending = CustomBlending;\n  this.materialCopy.blendSrc = DstColorFactor;\n  this.materialCopy.blendDst = ZeroFactor;\n  this.materialCopy.blendEquation = AddEquation;\n  this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n  this.materialCopy.blendDstAlpha = ZeroFactor;\n  this.materialCopy.blendEquationAlpha = AddEquation;\n\n  if (UnpackDepthRGBAShader === undefined) {\n    console.error('THREE.SAOPass relies on UnpackDepthRGBAShader');\n  }\n\n  this.depthCopy = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n    vertexShader: UnpackDepthRGBAShader.vertexShader,\n    fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.fsQuad = new FullScreenQuad(null);\n};\n\nSAOPass.OUTPUT = {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n};\nSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SAOPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/\n  ) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n\n    if (this.params.output === 1) {\n      return;\n    }\n\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far; // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    } // Rendering scene to depth texture\n\n\n    renderer.setClearColor(0x000000);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // Re-render scene if depth texture extension is not supported\n\n    if (!this.supportsDepthTextureExtension) {\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0);\n    }\n\n    if (this.supportsNormalTexture) {\n      // Clear rule : default normal is facing the camera\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    } // Rendering SAO texture\n\n\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0); // Blurring SAO texture\n\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\n    }\n\n    var outputMaterial = this.materialCopy; // Setting up SAO rendering\n\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } // Blending depends on output, only want a CustomBlending when showing SAO\n\n\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    } // Rendering SAOPass result on top of previous pass\n\n\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms['size'].value.set(width, height);\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms['size'].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms['size'].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n});\nexport { SAOPass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/SAOPass.js"],"names":["Color","Vector2","WebGLRenderTarget","LinearFilter","RGBAFormat","NearestFilter","DepthTexture","UnsignedShortType","MeshDepthMaterial","RGBADepthPacking","NoBlending","MeshNormalMaterial","ShaderMaterial","UniformsUtils","CustomBlending","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","FullScreenQuad","Pass","SAOShader","DepthLimitedBlurShader","BlurShaderUtils","CopyShader","UnpackDepthRGBAShader","SAOPass","scene","camera","depthTexture","useNormals","resolution","clear","needsSwap","supportsDepthTextureExtension","undefined","supportsNormalTexture","originalClearColor","_oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","minFilter","magFilter","format","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","depthRenderTarget","type","depthBuffer","depthMaterial","depthPacking","blending","normalMaterial","console","error","saoMaterial","defines","Object","assign","fragmentShader","vertexShader","uniforms","extensions","derivatives","isPerspectiveCamera","value","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","OUTPUT","Beauty","Default","SAO","Depth","Normal","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","setSize","width","height"],"mappings":"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","sourcesContent":["import { Color, Vector2, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SAOShader } from '../shaders/SAOShader.js';\nimport { DepthLimitedBlurShader, BlurShaderUtils } from '../shaders/DepthLimitedBlurShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader.js';\n\n/**\n * SAO implementation inspired from bhouston previous SAO work\n */\n\nvar SAOPass = function (scene, camera, depthTexture, useNormals, resolution) {\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.supportsDepthTextureExtension = depthTexture !== undefined ? depthTexture : false;\n  this.supportsNormalTexture = useNormals !== undefined ? useNormals : false;\n  this.originalClearColor = new Color();\n  this._oldClearColor = new Color();\n  this.oldClearAlpha = 1;\n  this.params = {\n    output: 0,\n    saoBias: 0.5,\n    saoIntensity: 0.18,\n    saoScale: 1,\n    saoKernelRadius: 100,\n    saoMinResolution: 0,\n    saoBlur: true,\n    saoBlurRadius: 8,\n    saoBlurStdDev: 4,\n    saoBlurDepthCutoff: 0.01\n  };\n  this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n  this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n  this.beautyRenderTarget = this.saoRenderTarget.clone();\n  this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.depthRenderTarget = this.normalRenderTarget.clone();\n\n  if (this.supportsDepthTextureExtension) {\n    var depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    this.beautyRenderTarget.depthTexture = depthTexture;\n    this.beautyRenderTarget.depthBuffer = true;\n  }\n\n  this.depthMaterial = new MeshDepthMaterial();\n  this.depthMaterial.depthPacking = RGBADepthPacking;\n  this.depthMaterial.blending = NoBlending;\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending;\n\n  if (SAOShader === undefined) {\n    console.error('THREE.SAOPass relies on SAOShader');\n  }\n\n  this.saoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SAOShader.defines),\n    fragmentShader: SAOShader.fragmentShader,\n    vertexShader: SAOShader.vertexShader,\n    uniforms: UniformsUtils.clone(SAOShader.uniforms)\n  });\n  this.saoMaterial.extensions.derivatives = true;\n  this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\n  this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n  this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n  this.saoMaterial.blending = NoBlending;\n\n  if (DepthLimitedBlurShader === undefined) {\n    console.error('THREE.SAOPass relies on DepthLimitedBlurShader');\n  }\n\n  this.vBlurMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\n    vertexShader: DepthLimitedBlurShader.vertexShader,\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\n  });\n  this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n  this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.vBlurMaterial.blending = NoBlending;\n  this.hBlurMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\n    vertexShader: DepthLimitedBlurShader.vertexShader,\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\n  });\n  this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\n  this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.hBlurMaterial.blending = NoBlending;\n\n  if (CopyShader === undefined) {\n    console.error('THREE.SAOPass relies on CopyShader');\n  }\n\n  this.materialCopy = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.materialCopy.transparent = true;\n  this.materialCopy.depthTest = false;\n  this.materialCopy.depthWrite = false;\n  this.materialCopy.blending = CustomBlending;\n  this.materialCopy.blendSrc = DstColorFactor;\n  this.materialCopy.blendDst = ZeroFactor;\n  this.materialCopy.blendEquation = AddEquation;\n  this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n  this.materialCopy.blendDstAlpha = ZeroFactor;\n  this.materialCopy.blendEquationAlpha = AddEquation;\n\n  if (UnpackDepthRGBAShader === undefined) {\n    console.error('THREE.SAOPass relies on UnpackDepthRGBAShader');\n  }\n\n  this.depthCopy = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n    vertexShader: UnpackDepthRGBAShader.vertexShader,\n    fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.fsQuad = new FullScreenQuad(null);\n};\n\nSAOPass.OUTPUT = {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n};\nSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SAOPass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/\n  ) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n\n    if (this.params.output === 1) {\n      return;\n    }\n\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far; // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    } // Rendering scene to depth texture\n\n\n    renderer.setClearColor(0x000000);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // Re-render scene if depth texture extension is not supported\n\n    if (!this.supportsDepthTextureExtension) {\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0);\n    }\n\n    if (this.supportsNormalTexture) {\n      // Clear rule : default normal is facing the camera\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    } // Rendering SAO texture\n\n\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0); // Blurring SAO texture\n\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\n    }\n\n    var outputMaterial = this.materialCopy; // Setting up SAO rendering\n\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } // Blending depends on output, only want a CustomBlending when showing SAO\n\n\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    } // Rendering SAOPass result on top of previous pass\n\n\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  },\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function (width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms['size'].value.set(width, height);\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms['size'].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms['size'].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n});\n\nexport { SAOPass };\n"]},"metadata":{},"sourceType":"module"}