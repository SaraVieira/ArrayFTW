{"ast":null,"code":"/**\n * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n * - based on Nvidia example\n * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n */\nvar BleachBypassShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    opacity: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float opacity;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 base = texture2D( tDiffuse, vUv );', '\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );', '\tfloat lum = dot( lumCoeff, base.rgb );', '\tvec3 blend = vec3( lum );', '\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );', '\tvec3 result1 = 2.0 * base.rgb * blend;', '\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );', '\tvec3 newColor = mix( result1, result2, L );', '\tfloat A2 = opacity * base.a;', '\tvec3 mixRGB = A2 * newColor.rgb;', '\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );', '\tgl_FragColor = vec4( mixRGB, base.a );', '}'].join('\\n')\n};\nexport { BleachBypassShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/BleachBypassShader.js"],"names":["BleachBypassShader","uniforms","tDiffuse","value","opacity","vertexShader","join","fragmentShader"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,IAAIA,kBAAkB,GAAG;AACvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,OAAO,EAAE;AACPD,MAAAA,KAAK,EAAE;AADA;AAJD,GADa;AASvBE,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CATS;AAUvBC,EAAAA,cAAc,EAAE,CAAC,wBAAD,EAA2B,6BAA3B,EAA0D,mBAA1D,EAA+E,eAA/E,EAAgG,0CAAhG,EAA4I,2CAA5I,EAAyL,yCAAzL,EAAoO,4BAApO,EAAkQ,2DAAlQ,EAA+T,yCAA/T,EAA0W,mEAA1W,EAA+a,8CAA/a,EAA+d,+BAA/d,EAAggB,mCAAhgB,EAAqiB,yCAAriB,EAAglB,yCAAhlB,EAA2nB,GAA3nB,EAAgoBD,IAAhoB,CAAqoB,IAAroB;AAVO,CAAzB;AAaA,SAASN,kBAAT","sourcesContent":["/**\n * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n * - based on Nvidia example\n * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n */\nvar BleachBypassShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    opacity: {\n      value: 1.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float opacity;', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 base = texture2D( tDiffuse, vUv );', '\tvec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );', '\tfloat lum = dot( lumCoeff, base.rgb );', '\tvec3 blend = vec3( lum );', '\tfloat L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );', '\tvec3 result1 = 2.0 * base.rgb * blend;', '\tvec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );', '\tvec3 newColor = mix( result1, result2, L );', '\tfloat A2 = opacity * base.a;', '\tvec3 mixRGB = A2 * newColor.rgb;', '\tmixRGB += ( ( 1.0 - A2 ) * base.rgb );', '\tgl_FragColor = vec4( mixRGB, base.a );', '}'].join('\\n')\n};\n\nexport { BleachBypassShader };\n"]},"metadata":{},"sourceType":"module"}