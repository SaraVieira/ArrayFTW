{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Line, BufferGeometry, BufferAttribute, LineBasicMaterial, MathUtils } from 'three';\n\nvar PositionalAudioHelper = /*#__PURE__*/function (_Line) {\n  _inherits(PositionalAudioHelper, _Line);\n\n  var _super = _createSuper(PositionalAudioHelper);\n\n  function PositionalAudioHelper(audio, range, divisionsInnerAngle, divisionsOuterAngle) {\n    var _this;\n\n    _classCallCheck(this, PositionalAudioHelper);\n\n    _this.audio = audio;\n    _this.range = range || 1;\n    _this.divisionsInnerAngle = divisionsInnerAngle || 16;\n    _this.divisionsOuterAngle = divisionsOuterAngle || 2;\n    var geometry = new BufferGeometry();\n    var divisions = _this.divisionsInnerAngle + _this.divisionsOuterAngle * 2;\n    var positions = new Float32Array((divisions * 3 + 3) * 3);\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    var materialInnerAngle = new LineBasicMaterial({\n      color: 0x00ff00\n    });\n    var materialOuterAngle = new LineBasicMaterial({\n      color: 0xffff00\n    });\n    _this = _super.call(this, geometry, [materialOuterAngle, materialInnerAngle]);\n    _this.type = 'PositionalAudioHelper';\n\n    _this.update();\n\n    return _this;\n  }\n\n  _createClass(PositionalAudioHelper, [{\n    key: \"update\",\n    value: function update() {\n      var audio = this.audio;\n      var range = this.range;\n      var divisionsInnerAngle = this.divisionsInnerAngle;\n      var divisionsOuterAngle = this.divisionsOuterAngle;\n      var coneInnerAngle = MathUtils.degToRad(audio.panner.coneInnerAngle);\n      var coneOuterAngle = MathUtils.degToRad(audio.panner.coneOuterAngle);\n      var halfConeInnerAngle = coneInnerAngle / 2;\n      var halfConeOuterAngle = coneOuterAngle / 2;\n      var start = 0;\n      var count = 0;\n      var i, stride;\n      var geometry = this.geometry;\n      var positionAttribute = geometry.attributes.position;\n      geometry.clearGroups(); //\n\n      function generateSegment(from, to, divisions, materialIndex) {\n        var step = (to - from) / divisions;\n        positionAttribute.setXYZ(start, 0, 0, 0);\n        count++;\n\n        for (i = from; i < to; i += step) {\n          stride = start + count;\n          positionAttribute.setXYZ(stride, Math.sin(i) * range, 0, Math.cos(i) * range);\n          positionAttribute.setXYZ(stride + 1, Math.sin(Math.min(i + step, to)) * range, 0, Math.cos(Math.min(i + step, to)) * range);\n          positionAttribute.setXYZ(stride + 2, 0, 0, 0);\n          count += 3;\n        }\n\n        geometry.addGroup(start, count, materialIndex);\n        start += count;\n        count = 0;\n      } //\n\n\n      generateSegment(-halfConeOuterAngle, -halfConeInnerAngle, divisionsOuterAngle, 0);\n      generateSegment(-halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1);\n      generateSegment(halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0); //\n\n      positionAttribute.needsUpdate = true;\n      if (coneInnerAngle === coneOuterAngle) this.material[0].visible = false;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.geometry.dispose();\n      this.material[0].dispose();\n      this.material[1].dispose();\n    }\n  }]);\n\n  return PositionalAudioHelper;\n}(Line);\n\nexport { PositionalAudioHelper };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/helpers/PositionalAudioHelper.js"],"names":["Line","BufferGeometry","BufferAttribute","LineBasicMaterial","MathUtils","PositionalAudioHelper","audio","range","divisionsInnerAngle","divisionsOuterAngle","geometry","divisions","positions","Float32Array","setAttribute","materialInnerAngle","color","materialOuterAngle","type","update","coneInnerAngle","degToRad","panner","coneOuterAngle","halfConeInnerAngle","halfConeOuterAngle","start","count","i","stride","positionAttribute","attributes","position","clearGroups","generateSegment","from","to","materialIndex","step","setXYZ","Math","sin","cos","min","addGroup","needsUpdate","material","visible","dispose"],"mappings":"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","sourcesContent":["import { Line, BufferGeometry, BufferAttribute, LineBasicMaterial, MathUtils } from 'three';\n\nclass PositionalAudioHelper extends Line {\n  constructor(audio, range, divisionsInnerAngle, divisionsOuterAngle) {\n    this.audio = audio;\n    this.range = range || 1;\n    this.divisionsInnerAngle = divisionsInnerAngle || 16;\n    this.divisionsOuterAngle = divisionsOuterAngle || 2;\n    const geometry = new BufferGeometry();\n    const divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;\n    const positions = new Float32Array((divisions * 3 + 3) * 3);\n    geometry.setAttribute('position', new BufferAttribute(positions, 3));\n    const materialInnerAngle = new LineBasicMaterial({\n      color: 0x00ff00\n    });\n    const materialOuterAngle = new LineBasicMaterial({\n      color: 0xffff00\n    });\n    super(geometry, [materialOuterAngle, materialInnerAngle]);\n    this.type = 'PositionalAudioHelper';\n    this.update();\n  }\n\n  update() {\n    const audio = this.audio;\n    const range = this.range;\n    const divisionsInnerAngle = this.divisionsInnerAngle;\n    const divisionsOuterAngle = this.divisionsOuterAngle;\n    const coneInnerAngle = MathUtils.degToRad(audio.panner.coneInnerAngle);\n    const coneOuterAngle = MathUtils.degToRad(audio.panner.coneOuterAngle);\n    const halfConeInnerAngle = coneInnerAngle / 2;\n    const halfConeOuterAngle = coneOuterAngle / 2;\n    let start = 0;\n    let count = 0;\n    let i, stride;\n    const geometry = this.geometry;\n    const positionAttribute = geometry.attributes.position;\n    geometry.clearGroups(); //\n\n    function generateSegment(from, to, divisions, materialIndex) {\n      const step = (to - from) / divisions;\n      positionAttribute.setXYZ(start, 0, 0, 0);\n      count++;\n\n      for (i = from; i < to; i += step) {\n        stride = start + count;\n        positionAttribute.setXYZ(stride, Math.sin(i) * range, 0, Math.cos(i) * range);\n        positionAttribute.setXYZ(stride + 1, Math.sin(Math.min(i + step, to)) * range, 0, Math.cos(Math.min(i + step, to)) * range);\n        positionAttribute.setXYZ(stride + 2, 0, 0, 0);\n        count += 3;\n      }\n\n      geometry.addGroup(start, count, materialIndex);\n      start += count;\n      count = 0;\n    } //\n\n\n    generateSegment(-halfConeOuterAngle, -halfConeInnerAngle, divisionsOuterAngle, 0);\n    generateSegment(-halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1);\n    generateSegment(halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0); //\n\n    positionAttribute.needsUpdate = true;\n    if (coneInnerAngle === coneOuterAngle) this.material[0].visible = false;\n  }\n\n  dispose() {\n    this.geometry.dispose();\n    this.material[0].dispose();\n    this.material[1].dispose();\n  }\n\n}\n\nexport { PositionalAudioHelper };\n"]},"metadata":{},"sourceType":"module"}