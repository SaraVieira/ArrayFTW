{"ast":null,"code":"import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { useMemo, useEffect } from 'react';\nimport { WebGLMultisampleRenderTarget, WebGLRenderTarget } from 'three';\nimport { useThree } from '@react-three/fiber'; // ðŸ‘‡ uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\n\nfunction useFBO(width, height, settings) {\n  var gl = useThree(function (_ref) {\n    var gl = _ref.gl;\n    return gl;\n  });\n  var size = useThree(function (_ref2) {\n    var size = _ref2.size;\n    return size;\n  });\n  var dpr = useMemo(function () {\n    return gl.getPixelRatio();\n  }, [gl]);\n\n  var _width = typeof width === 'number' ? width : size.width * dpr;\n\n  var _height = typeof height === 'number' ? height : size.height * dpr;\n\n  var _settings = (typeof width === 'number' ? settings : width) || {};\n\n  var target = useMemo(function () {\n    var multisample = _settings.multisample,\n        samples = _settings.samples,\n        targetSettings = _objectWithoutPropertiesLoose(_settings, [\"multisample\", \"samples\"]);\n\n    var target;\n\n    if (multisample && gl.capabilities.isWebGL2) {\n      target = new WebGLMultisampleRenderTarget(_width, _height, targetSettings);\n      if (samples) target.samples = samples;\n    } else {\n      target = new WebGLRenderTarget(_width, _height, targetSettings);\n    }\n\n    return target; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    target.setSize(_width, _height);\n  }, [target, _width, _height]);\n  useEffect(function () {\n    return function () {\n      return target.dispose();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return target;\n}\n\nexport { useFBO };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/@react-three/drei/core/useFBO.js"],"names":["_objectWithoutPropertiesLoose","useMemo","useEffect","WebGLMultisampleRenderTarget","WebGLRenderTarget","useThree","useFBO","width","height","settings","gl","size","dpr","getPixelRatio","_width","_height","_settings","target","multisample","samples","targetSettings","capabilities","isWebGL2","setSize","dispose"],"mappings":"AAAA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,OAAnC;AACA,SAASC,4BAAT,EAAuCC,iBAAvC,QAAgE,OAAhE;AACA,SAASC,QAAT,QAAyB,oBAAzB,C,CAEA;AACA;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,QAA/B,EAAyC;AACvC,MAAMC,EAAE,GAAGL,QAAQ,CAAC;AAAA,QAClBK,EADkB,QAClBA,EADkB;AAAA,WAEdA,EAFc;AAAA,GAAD,CAAnB;AAGA,MAAMC,IAAI,GAAGN,QAAQ,CAAC;AAAA,QACpBM,IADoB,SACpBA,IADoB;AAAA,WAEhBA,IAFgB;AAAA,GAAD,CAArB;AAGA,MAAMC,GAAG,GAAGX,OAAO,CAAC;AAAA,WAAMS,EAAE,CAACG,aAAH,EAAN;AAAA,GAAD,EAA2B,CAACH,EAAD,CAA3B,CAAnB;;AAEA,MAAMI,MAAM,GAAG,OAAOP,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCI,IAAI,CAACJ,KAAL,GAAaK,GAAhE;;AAEA,MAAMG,OAAO,GAAG,OAAOP,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCG,IAAI,CAACH,MAAL,GAAcI,GAApE;;AAEA,MAAMI,SAAS,GAAG,CAAC,OAAOT,KAAP,KAAiB,QAAjB,GAA4BE,QAA5B,GAAuCF,KAAxC,KAAkD,EAApE;;AAEA,MAAMU,MAAM,GAAGhB,OAAO,CAAC,YAAM;AAC3B,QACEiB,WADF,GAGIF,SAHJ,CACEE,WADF;AAAA,QAEEC,OAFF,GAGIH,SAHJ,CAEEG,OAFF;AAAA,QAIMC,cAJN,GAIuBpB,6BAA6B,CAACgB,SAAD,EAAY,CAAC,aAAD,EAAgB,SAAhB,CAAZ,CAJpD;;AAMA,QAAIC,MAAJ;;AAEA,QAAIC,WAAW,IAAIR,EAAE,CAACW,YAAH,CAAgBC,QAAnC,EAA6C;AAC3CL,MAAAA,MAAM,GAAG,IAAId,4BAAJ,CAAiCW,MAAjC,EAAyCC,OAAzC,EAAkDK,cAAlD,CAAT;AACA,UAAID,OAAJ,EAAaF,MAAM,CAACE,OAAP,GAAiBA,OAAjB;AACd,KAHD,MAGO;AACLF,MAAAA,MAAM,GAAG,IAAIb,iBAAJ,CAAsBU,MAAtB,EAA8BC,OAA9B,EAAuCK,cAAvC,CAAT;AACD;;AAED,WAAOH,MAAP,CAhB2B,CAgBZ;AAChB,GAjBqB,EAiBnB,EAjBmB,CAAtB;AAkBAf,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,MAAM,CAACM,OAAP,CAAeT,MAAf,EAAuBC,OAAvB;AACD,GAFQ,EAEN,CAACE,MAAD,EAASH,MAAT,EAAiBC,OAAjB,CAFM,CAAT;AAGAb,EAAAA,SAAS,CAAC,YAAM;AACd,WAAO;AAAA,aAAMe,MAAM,CAACO,OAAP,EAAN;AAAA,KAAP,CADc,CACiB;AAChC,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAOP,MAAP;AACD;;AAED,SAASX,MAAT","sourcesContent":["import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { useMemo, useEffect } from 'react';\nimport { WebGLMultisampleRenderTarget, WebGLRenderTarget } from 'three';\nimport { useThree } from '@react-three/fiber';\n\n// ðŸ‘‡ uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\nfunction useFBO(width, height, settings) {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const size = useThree(({\n    size\n  }) => size);\n  const dpr = useMemo(() => gl.getPixelRatio(), [gl]);\n\n  const _width = typeof width === 'number' ? width : size.width * dpr;\n\n  const _height = typeof height === 'number' ? height : size.height * dpr;\n\n  const _settings = (typeof width === 'number' ? settings : width) || {};\n\n  const target = useMemo(() => {\n    const {\n      multisample,\n      samples\n    } = _settings,\n          targetSettings = _objectWithoutPropertiesLoose(_settings, [\"multisample\", \"samples\"]);\n\n    let target;\n\n    if (multisample && gl.capabilities.isWebGL2) {\n      target = new WebGLMultisampleRenderTarget(_width, _height, targetSettings);\n      if (samples) target.samples = samples;\n    } else {\n      target = new WebGLRenderTarget(_width, _height, targetSettings);\n    }\n\n    return target; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    target.setSize(_width, _height);\n  }, [target, _width, _height]);\n  useEffect(() => {\n    return () => target.dispose(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return target;\n}\n\nexport { useFBO };\n"]},"metadata":{},"sourceType":"module"}