{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferGeometry, Float32BufferAttribute } from 'three';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\nvar cb = new Vector3(),\n    ab = new Vector3();\n\nfunction pushIfUnique(array, object) {\n  if (array.indexOf(object) === -1) array.push(object);\n}\n\nfunction removeFromArray(array, object) {\n  var k = array.indexOf(object);\n  if (k > -1) array.splice(k, 1);\n}\n\nvar Vertex = /*#__PURE__*/function () {\n  function Vertex(v, id) {\n    _classCallCheck(this, Vertex);\n\n    _defineProperty(this, \"position\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"faces\", void 0);\n\n    _defineProperty(this, \"neighbors\", void 0);\n\n    _defineProperty(this, \"collapseCost\", void 0);\n\n    _defineProperty(this, \"collapseNeighbor\", void 0);\n\n    _defineProperty(this, \"minCost\", 0);\n\n    _defineProperty(this, \"totalCost\", 0);\n\n    _defineProperty(this, \"costCount\", 0);\n\n    this.position = v;\n    this.id = id; // old index id\n\n    this.faces = []; // faces vertex is connected\n\n    this.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n    // these will be computed in computeEdgeCostAtVertex()\n\n    this.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n\n    this.collapseNeighbor = null; // best candinate for collapsing\n  }\n\n  _createClass(Vertex, [{\n    key: \"addUniqueNeighbor\",\n    value: function addUniqueNeighbor(vertex) {\n      pushIfUnique(this.neighbors, vertex);\n    }\n  }, {\n    key: \"removeIfNonNeighbor\",\n    value: function removeIfNonNeighbor(n) {\n      var neighbors = this.neighbors;\n      var faces = this.faces;\n      var offset = neighbors.indexOf(n);\n      if (offset === -1) return;\n\n      for (var i = 0; i < faces.length; i++) {\n        if (faces[i].hasVertex(n)) return;\n      }\n\n      neighbors.splice(offset, 1);\n    }\n  }]);\n\n  return Vertex;\n}(); // we use a triangle class to represent structure of face slightly differently\n\n\nvar Triangle = /*#__PURE__*/function () {\n  function Triangle(v1, v2, v3, a, b, c) {\n    _classCallCheck(this, Triangle);\n\n    _defineProperty(this, \"a\", void 0);\n\n    _defineProperty(this, \"b\", void 0);\n\n    _defineProperty(this, \"c\", void 0);\n\n    _defineProperty(this, \"v1\", void 0);\n\n    _defineProperty(this, \"v2\", void 0);\n\n    _defineProperty(this, \"v3\", void 0);\n\n    _defineProperty(this, \"normal\", new Vector3());\n\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.v1 = v1;\n    this.v2 = v2;\n    this.v3 = v3;\n    this.computeNormal();\n    v1.faces.push(this);\n    v1.addUniqueNeighbor(v2);\n    v1.addUniqueNeighbor(v3);\n    v2.faces.push(this);\n    v2.addUniqueNeighbor(v1);\n    v2.addUniqueNeighbor(v3);\n    v3.faces.push(this);\n    v3.addUniqueNeighbor(v1);\n    v3.addUniqueNeighbor(v2);\n  }\n\n  _createClass(Triangle, [{\n    key: \"computeNormal\",\n    value: function computeNormal() {\n      var vA = this.v1.position;\n      var vB = this.v2.position;\n      var vC = this.v3.position;\n      cb.subVectors(vC, vB);\n      ab.subVectors(vA, vB);\n      cb.cross(ab).normalize();\n      this.normal.copy(cb);\n    }\n  }, {\n    key: \"hasVertex\",\n    value: function hasVertex(v) {\n      return v === this.v1 || v === this.v2 || v === this.v3;\n    }\n  }, {\n    key: \"replaceVertex\",\n    value: function replaceVertex(oldv, newv) {\n      if (oldv === this.v1) this.v1 = newv;else if (oldv === this.v2) this.v2 = newv;else if (oldv === this.v3) this.v3 = newv;\n      removeFromArray(oldv.faces, this);\n      newv.faces.push(this);\n      oldv.removeIfNonNeighbor(this.v1);\n      this.v1.removeIfNonNeighbor(oldv);\n      oldv.removeIfNonNeighbor(this.v2);\n      this.v2.removeIfNonNeighbor(oldv);\n      oldv.removeIfNonNeighbor(this.v3);\n      this.v3.removeIfNonNeighbor(oldv);\n      this.v1.addUniqueNeighbor(this.v2);\n      this.v1.addUniqueNeighbor(this.v3);\n      this.v2.addUniqueNeighbor(this.v1);\n      this.v2.addUniqueNeighbor(this.v3);\n      this.v3.addUniqueNeighbor(this.v1);\n      this.v3.addUniqueNeighbor(this.v2);\n      this.computeNormal();\n    }\n  }]);\n\n  return Triangle;\n}();\n/**\n *\tSimplification Geometry Modifier\n *    - based on code and technique\n *\t  - by Stan Melax in 1998\n *\t  - Progressive Mesh type Polygon Reduction Algorithm\n *    - http://www.melax.com/polychop/\n */\n\n\nvar SimplifyModifier = /*#__PURE__*/function () {\n  function SimplifyModifier() {\n    var _this = this;\n\n    _classCallCheck(this, SimplifyModifier);\n\n    _defineProperty(this, \"computeEdgeCollapseCost\", function (u, v) {\n      // if we collapse edge uv by moving u to v then how\n      // much different will the model change, i.e. the \"error\".\n      var edgelength = v.position.distanceTo(u.position);\n      var curvature = 0;\n      var sideFaces = [];\n      var i,\n          il = u.faces.length,\n          face,\n          sideFace; // find the \"sides\" triangles that are on the edge uv\n\n      for (i = 0; i < il; i++) {\n        face = u.faces[i];\n\n        if (face.hasVertex(v)) {\n          sideFaces.push(face);\n        }\n      } // use the triangle facing most away from the sides\n      // to determine our curvature term\n\n\n      for (i = 0; i < il; i++) {\n        var minCurvature = 1;\n        face = u.faces[i];\n\n        for (var j = 0; j < sideFaces.length; j++) {\n          sideFace = sideFaces[j]; // use dot product of face normals.\n\n          var dotProd = face.normal.dot(sideFace.normal);\n          minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n        }\n\n        curvature = Math.max(curvature, minCurvature);\n      } // crude approach in attempt to preserve borders\n      // though it seems not to be totally correct\n\n\n      var borders = 0;\n\n      if (sideFaces.length < 2) {\n        // we add some arbitrary cost for borders,\n        // borders += 10;\n        curvature = 1;\n      }\n\n      var amt = edgelength * curvature + borders;\n      return amt;\n    });\n\n    _defineProperty(this, \"computeEdgeCostAtVertex\", function (v) {\n      // compute the edge collapse cost for all edges that start\n      // from vertex v.  Since we are only interested in reducing\n      // the object by selecting the min cost edge at each step, we\n      // only cache the cost of the least cost edge at this vertex\n      // (in member variable collapse) as well as the value of the\n      // cost (in member variable collapseCost).\n      if (v.neighbors.length === 0) {\n        // collapse if no neighbors.\n        v.collapseNeighbor = null;\n        v.collapseCost = -0.01;\n        return;\n      }\n\n      v.collapseCost = 100000;\n      v.collapseNeighbor = null; // search all neighboring edges for \"least cost\" edge\n\n      for (var i = 0; i < v.neighbors.length; i++) {\n        var collapseCost = _this.computeEdgeCollapseCost(v, v.neighbors[i]);\n\n        if (!v.collapseNeighbor) {\n          v.collapseNeighbor = v.neighbors[i];\n          v.collapseCost = collapseCost;\n          v.minCost = collapseCost;\n          v.totalCost = 0;\n          v.costCount = 0;\n        }\n\n        v.costCount++;\n        v.totalCost += collapseCost;\n\n        if (collapseCost < v.minCost) {\n          v.collapseNeighbor = v.neighbors[i];\n          v.minCost = collapseCost;\n        }\n      } // we average the cost of collapsing at this vertex\n\n\n      v.collapseCost = v.totalCost / v.costCount; // v.collapseCost = v.minCost;\n    });\n\n    _defineProperty(this, \"removeFace\", function (f, faces) {\n      removeFromArray(faces, f);\n      if (f.v1) removeFromArray(f.v1.faces, f);\n      if (f.v2) removeFromArray(f.v2.faces, f);\n      if (f.v3) removeFromArray(f.v3.faces, f); // TODO optimize this!\n\n      var vs = [f.v1, f.v2, f.v3];\n      var v1, v2;\n\n      for (var i = 0; i < 3; i++) {\n        v1 = vs[i];\n        v2 = vs[(i + 1) % 3];\n        if (!v1 || !v2) continue;\n        v1.removeIfNonNeighbor(v2);\n        v2.removeIfNonNeighbor(v1);\n      }\n    });\n\n    _defineProperty(this, \"collapse\", function (vertices, faces, u, v) {\n      // u and v are pointers to vertices of an edge\n      // Collapse the edge uv by moving vertex u onto v\n      if (!v) {\n        // u is a vertex all by itself so just delete it..\n        _this.removeVertex(u, vertices);\n\n        return;\n      }\n\n      var i;\n      var tmpVertices = [];\n\n      for (i = 0; i < u.neighbors.length; i++) {\n        tmpVertices.push(u.neighbors[i]);\n      } // delete triangles on edge uv:\n\n\n      for (i = u.faces.length - 1; i >= 0; i--) {\n        if (u.faces[i].hasVertex(v)) {\n          _this.removeFace(u.faces[i], faces);\n        }\n      } // update remaining triangles to have v instead of u\n\n\n      for (i = u.faces.length - 1; i >= 0; i--) {\n        u.faces[i].replaceVertex(u, v);\n      }\n\n      _this.removeVertex(u, vertices); // recompute the edge collapse costs in neighborhood\n\n\n      for (i = 0; i < tmpVertices.length; i++) {\n        _this.computeEdgeCostAtVertex(tmpVertices[i]);\n      }\n    });\n\n    _defineProperty(this, \"minimumCostEdge\", function (vertices) {\n      // O(n * n) approach. TODO optimize this\n      var least = vertices[0];\n\n      for (var i = 0; i < vertices.length; i++) {\n        if (vertices[i].collapseCost < least.collapseCost) {\n          least = vertices[i];\n        }\n      }\n\n      return least;\n    });\n\n    _defineProperty(this, \"modify\", function (geometry, count) {\n      geometry = geometry.clone();\n      var attributes = geometry.attributes; // this modifier can only process indexed and non-indexed geomtries with a position attribute\n\n      for (var name in attributes) {\n        if (name !== 'position') geometry.deleteAttribute(name);\n      }\n\n      geometry = mergeVertices(geometry); //\n      // put data of original geometry in different data structures\n      //\n\n      var vertices = [];\n      var faces = []; // add vertices\n\n      var positionAttribute = geometry.getAttribute('position');\n\n      for (var i = 0; i < positionAttribute.count; i++) {\n        var v = new Vector3().fromBufferAttribute(positionAttribute, i);\n        var vertex = new Vertex(v, i);\n        vertices.push(vertex);\n      } // add faces\n\n\n      var geomIndex = geometry.getIndex();\n\n      if (geomIndex !== null) {\n        for (var _i = 0; _i < geomIndex.count; _i += 3) {\n          var a = geomIndex.getX(_i);\n          var b = geomIndex.getX(_i + 1);\n          var c = geomIndex.getX(_i + 2);\n          var triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n          faces.push(triangle);\n        }\n      } else {\n        for (var _i2 = 0; _i2 < positionAttribute.count; _i2 += 3) {\n          var _a = _i2;\n\n          var _b = _i2 + 1;\n\n          var _c = _i2 + 2;\n\n          var _triangle = new Triangle(vertices[_a], vertices[_b], vertices[_c], _a, _b, _c);\n\n          faces.push(_triangle);\n        }\n      } // compute all edge collapse costs\n\n\n      for (var _i3 = 0, il = vertices.length; _i3 < il; _i3++) {\n        _this.computeEdgeCostAtVertex(vertices[_i3]);\n      }\n\n      var nextVertex;\n      var z = count;\n\n      while (z--) {\n        nextVertex = _this.minimumCostEdge(vertices);\n\n        if (!nextVertex) {\n          console.log('THREE.SimplifyModifier: No next vertex');\n          break;\n        } else {\n          _this.collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n        }\n      } //\n\n\n      var simplifiedGeometry = new BufferGeometry();\n      var position = [];\n      var index = []; //\n\n      for (var _i4 = 0; _i4 < vertices.length; _i4++) {\n        var _vertex = vertices[_i4].position;\n        position.push(_vertex.x, _vertex.y, _vertex.z);\n      } //\n\n\n      for (var _i5 = 0; _i5 < faces.length; _i5++) {\n        var face = faces[_i5];\n\n        var _a2 = vertices.indexOf(face.v1);\n\n        var _b2 = vertices.indexOf(face.v2);\n\n        var _c2 = vertices.indexOf(face.v3);\n\n        index.push(_a2, _b2, _c2);\n      } //\n\n\n      simplifiedGeometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n      simplifiedGeometry.setIndex(index);\n      return simplifiedGeometry;\n    });\n  }\n\n  _createClass(SimplifyModifier, [{\n    key: \"removeVertex\",\n    value: function removeVertex(v, vertices) {\n      console.assert(v.faces.length === 0);\n\n      while (v.neighbors.length) {\n        var n = v.neighbors.pop();\n        removeFromArray(n.neighbors, v);\n      }\n\n      removeFromArray(vertices, v);\n    }\n  }]);\n\n  return SimplifyModifier;\n}();\n\nexport { SimplifyModifier };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/modifiers/SimplifyModifier.js"],"names":["_defineProperty","Vector3","BufferGeometry","Float32BufferAttribute","mergeVertices","cb","ab","pushIfUnique","array","object","indexOf","push","removeFromArray","k","splice","Vertex","v","id","position","faces","neighbors","collapseCost","collapseNeighbor","vertex","n","offset","i","length","hasVertex","Triangle","v1","v2","v3","a","b","c","computeNormal","addUniqueNeighbor","vA","vB","vC","subVectors","cross","normalize","normal","copy","oldv","newv","removeIfNonNeighbor","SimplifyModifier","u","edgelength","distanceTo","curvature","sideFaces","il","face","sideFace","minCurvature","j","dotProd","dot","Math","min","max","borders","amt","computeEdgeCollapseCost","minCost","totalCost","costCount","f","vs","vertices","removeVertex","tmpVertices","removeFace","replaceVertex","computeEdgeCostAtVertex","least","geometry","count","clone","attributes","name","deleteAttribute","positionAttribute","getAttribute","fromBufferAttribute","geomIndex","getIndex","getX","triangle","nextVertex","z","minimumCostEdge","console","log","collapse","simplifiedGeometry","index","x","y","setAttribute","setIndex","assert","pop"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferGeometry, Float32BufferAttribute } from 'three';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\n\nconst cb = new Vector3(),\n      ab = new Vector3();\n\nfunction pushIfUnique(array, object) {\n  if (array.indexOf(object) === -1) array.push(object);\n}\n\nfunction removeFromArray(array, object) {\n  const k = array.indexOf(object);\n  if (k > -1) array.splice(k, 1);\n}\n\nclass Vertex {\n  constructor(v, id) {\n    _defineProperty(this, \"position\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"faces\", void 0);\n\n    _defineProperty(this, \"neighbors\", void 0);\n\n    _defineProperty(this, \"collapseCost\", void 0);\n\n    _defineProperty(this, \"collapseNeighbor\", void 0);\n\n    _defineProperty(this, \"minCost\", 0);\n\n    _defineProperty(this, \"totalCost\", 0);\n\n    _defineProperty(this, \"costCount\", 0);\n\n    this.position = v;\n    this.id = id; // old index id\n\n    this.faces = []; // faces vertex is connected\n\n    this.neighbors = []; // neighbouring vertices aka \"adjacentVertices\"\n    // these will be computed in computeEdgeCostAtVertex()\n\n    this.collapseCost = 0; // cost of collapsing this vertex, the less the better. aka objdist\n\n    this.collapseNeighbor = null; // best candinate for collapsing\n  }\n\n  addUniqueNeighbor(vertex) {\n    pushIfUnique(this.neighbors, vertex);\n  }\n\n  removeIfNonNeighbor(n) {\n    const neighbors = this.neighbors;\n    const faces = this.faces;\n    const offset = neighbors.indexOf(n);\n    if (offset === -1) return;\n\n    for (let i = 0; i < faces.length; i++) {\n      if (faces[i].hasVertex(n)) return;\n    }\n\n    neighbors.splice(offset, 1);\n  }\n\n} // we use a triangle class to represent structure of face slightly differently\n\n\nclass Triangle {\n  constructor(v1, v2, v3, a, b, c) {\n    _defineProperty(this, \"a\", void 0);\n\n    _defineProperty(this, \"b\", void 0);\n\n    _defineProperty(this, \"c\", void 0);\n\n    _defineProperty(this, \"v1\", void 0);\n\n    _defineProperty(this, \"v2\", void 0);\n\n    _defineProperty(this, \"v3\", void 0);\n\n    _defineProperty(this, \"normal\", new Vector3());\n\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.v1 = v1;\n    this.v2 = v2;\n    this.v3 = v3;\n    this.computeNormal();\n    v1.faces.push(this);\n    v1.addUniqueNeighbor(v2);\n    v1.addUniqueNeighbor(v3);\n    v2.faces.push(this);\n    v2.addUniqueNeighbor(v1);\n    v2.addUniqueNeighbor(v3);\n    v3.faces.push(this);\n    v3.addUniqueNeighbor(v1);\n    v3.addUniqueNeighbor(v2);\n  }\n\n  computeNormal() {\n    const vA = this.v1.position;\n    const vB = this.v2.position;\n    const vC = this.v3.position;\n    cb.subVectors(vC, vB);\n    ab.subVectors(vA, vB);\n    cb.cross(ab).normalize();\n    this.normal.copy(cb);\n  }\n\n  hasVertex(v) {\n    return v === this.v1 || v === this.v2 || v === this.v3;\n  }\n\n  replaceVertex(oldv, newv) {\n    if (oldv === this.v1) this.v1 = newv;else if (oldv === this.v2) this.v2 = newv;else if (oldv === this.v3) this.v3 = newv;\n    removeFromArray(oldv.faces, this);\n    newv.faces.push(this);\n    oldv.removeIfNonNeighbor(this.v1);\n    this.v1.removeIfNonNeighbor(oldv);\n    oldv.removeIfNonNeighbor(this.v2);\n    this.v2.removeIfNonNeighbor(oldv);\n    oldv.removeIfNonNeighbor(this.v3);\n    this.v3.removeIfNonNeighbor(oldv);\n    this.v1.addUniqueNeighbor(this.v2);\n    this.v1.addUniqueNeighbor(this.v3);\n    this.v2.addUniqueNeighbor(this.v1);\n    this.v2.addUniqueNeighbor(this.v3);\n    this.v3.addUniqueNeighbor(this.v1);\n    this.v3.addUniqueNeighbor(this.v2);\n    this.computeNormal();\n  }\n\n}\n/**\n *\tSimplification Geometry Modifier\n *    - based on code and technique\n *\t  - by Stan Melax in 1998\n *\t  - Progressive Mesh type Polygon Reduction Algorithm\n *    - http://www.melax.com/polychop/\n */\n\n\nclass SimplifyModifier {\n  constructor() {\n    _defineProperty(this, \"computeEdgeCollapseCost\", (u, v) => {\n      // if we collapse edge uv by moving u to v then how\n      // much different will the model change, i.e. the \"error\".\n      const edgelength = v.position.distanceTo(u.position);\n      let curvature = 0;\n      const sideFaces = [];\n      let i,\n          il = u.faces.length,\n          face,\n          sideFace; // find the \"sides\" triangles that are on the edge uv\n\n      for (i = 0; i < il; i++) {\n        face = u.faces[i];\n\n        if (face.hasVertex(v)) {\n          sideFaces.push(face);\n        }\n      } // use the triangle facing most away from the sides\n      // to determine our curvature term\n\n\n      for (i = 0; i < il; i++) {\n        let minCurvature = 1;\n        face = u.faces[i];\n\n        for (let j = 0; j < sideFaces.length; j++) {\n          sideFace = sideFaces[j]; // use dot product of face normals.\n\n          const dotProd = face.normal.dot(sideFace.normal);\n          minCurvature = Math.min(minCurvature, (1.001 - dotProd) / 2);\n        }\n\n        curvature = Math.max(curvature, minCurvature);\n      } // crude approach in attempt to preserve borders\n      // though it seems not to be totally correct\n\n\n      const borders = 0;\n\n      if (sideFaces.length < 2) {\n        // we add some arbitrary cost for borders,\n        // borders += 10;\n        curvature = 1;\n      }\n\n      const amt = edgelength * curvature + borders;\n      return amt;\n    });\n\n    _defineProperty(this, \"computeEdgeCostAtVertex\", v => {\n      // compute the edge collapse cost for all edges that start\n      // from vertex v.  Since we are only interested in reducing\n      // the object by selecting the min cost edge at each step, we\n      // only cache the cost of the least cost edge at this vertex\n      // (in member variable collapse) as well as the value of the\n      // cost (in member variable collapseCost).\n      if (v.neighbors.length === 0) {\n        // collapse if no neighbors.\n        v.collapseNeighbor = null;\n        v.collapseCost = -0.01;\n        return;\n      }\n\n      v.collapseCost = 100000;\n      v.collapseNeighbor = null; // search all neighboring edges for \"least cost\" edge\n\n      for (let i = 0; i < v.neighbors.length; i++) {\n        const collapseCost = this.computeEdgeCollapseCost(v, v.neighbors[i]);\n\n        if (!v.collapseNeighbor) {\n          v.collapseNeighbor = v.neighbors[i];\n          v.collapseCost = collapseCost;\n          v.minCost = collapseCost;\n          v.totalCost = 0;\n          v.costCount = 0;\n        }\n\n        v.costCount++;\n        v.totalCost += collapseCost;\n\n        if (collapseCost < v.minCost) {\n          v.collapseNeighbor = v.neighbors[i];\n          v.minCost = collapseCost;\n        }\n      } // we average the cost of collapsing at this vertex\n\n\n      v.collapseCost = v.totalCost / v.costCount; // v.collapseCost = v.minCost;\n    });\n\n    _defineProperty(this, \"removeFace\", (f, faces) => {\n      removeFromArray(faces, f);\n      if (f.v1) removeFromArray(f.v1.faces, f);\n      if (f.v2) removeFromArray(f.v2.faces, f);\n      if (f.v3) removeFromArray(f.v3.faces, f); // TODO optimize this!\n\n      const vs = [f.v1, f.v2, f.v3];\n      let v1, v2;\n\n      for (let i = 0; i < 3; i++) {\n        v1 = vs[i];\n        v2 = vs[(i + 1) % 3];\n        if (!v1 || !v2) continue;\n        v1.removeIfNonNeighbor(v2);\n        v2.removeIfNonNeighbor(v1);\n      }\n    });\n\n    _defineProperty(this, \"collapse\", (vertices, faces, u, v) => {\n      // u and v are pointers to vertices of an edge\n      // Collapse the edge uv by moving vertex u onto v\n      if (!v) {\n        // u is a vertex all by itself so just delete it..\n        this.removeVertex(u, vertices);\n        return;\n      }\n\n      let i;\n      const tmpVertices = [];\n\n      for (i = 0; i < u.neighbors.length; i++) {\n        tmpVertices.push(u.neighbors[i]);\n      } // delete triangles on edge uv:\n\n\n      for (i = u.faces.length - 1; i >= 0; i--) {\n        if (u.faces[i].hasVertex(v)) {\n          this.removeFace(u.faces[i], faces);\n        }\n      } // update remaining triangles to have v instead of u\n\n\n      for (i = u.faces.length - 1; i >= 0; i--) {\n        u.faces[i].replaceVertex(u, v);\n      }\n\n      this.removeVertex(u, vertices); // recompute the edge collapse costs in neighborhood\n\n      for (i = 0; i < tmpVertices.length; i++) {\n        this.computeEdgeCostAtVertex(tmpVertices[i]);\n      }\n    });\n\n    _defineProperty(this, \"minimumCostEdge\", vertices => {\n      // O(n * n) approach. TODO optimize this\n      let least = vertices[0];\n\n      for (let i = 0; i < vertices.length; i++) {\n        if (vertices[i].collapseCost < least.collapseCost) {\n          least = vertices[i];\n        }\n      }\n\n      return least;\n    });\n\n    _defineProperty(this, \"modify\", (geometry, count) => {\n      geometry = geometry.clone();\n      const attributes = geometry.attributes; // this modifier can only process indexed and non-indexed geomtries with a position attribute\n\n      for (let name in attributes) {\n        if (name !== 'position') geometry.deleteAttribute(name);\n      }\n\n      geometry = mergeVertices(geometry); //\n      // put data of original geometry in different data structures\n      //\n\n      const vertices = [];\n      const faces = []; // add vertices\n\n      const positionAttribute = geometry.getAttribute('position');\n\n      for (let i = 0; i < positionAttribute.count; i++) {\n        const v = new Vector3().fromBufferAttribute(positionAttribute, i);\n        const vertex = new Vertex(v, i);\n        vertices.push(vertex);\n      } // add faces\n\n\n      const geomIndex = geometry.getIndex();\n\n      if (geomIndex !== null) {\n        for (let i = 0; i < geomIndex.count; i += 3) {\n          const a = geomIndex.getX(i);\n          const b = geomIndex.getX(i + 1);\n          const c = geomIndex.getX(i + 2);\n          const triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n          faces.push(triangle);\n        }\n      } else {\n        for (let i = 0; i < positionAttribute.count; i += 3) {\n          const a = i;\n          const b = i + 1;\n          const c = i + 2;\n          const triangle = new Triangle(vertices[a], vertices[b], vertices[c], a, b, c);\n          faces.push(triangle);\n        }\n      } // compute all edge collapse costs\n\n\n      for (let i = 0, il = vertices.length; i < il; i++) {\n        this.computeEdgeCostAtVertex(vertices[i]);\n      }\n\n      let nextVertex;\n      let z = count;\n\n      while (z--) {\n        nextVertex = this.minimumCostEdge(vertices);\n\n        if (!nextVertex) {\n          console.log('THREE.SimplifyModifier: No next vertex');\n          break;\n        } else {\n          this.collapse(vertices, faces, nextVertex, nextVertex.collapseNeighbor);\n        }\n      } //\n\n\n      const simplifiedGeometry = new BufferGeometry();\n      const position = [];\n      let index = []; //\n\n      for (let i = 0; i < vertices.length; i++) {\n        const vertex = vertices[i].position;\n        position.push(vertex.x, vertex.y, vertex.z);\n      } //\n\n\n      for (let i = 0; i < faces.length; i++) {\n        const face = faces[i];\n        const a = vertices.indexOf(face.v1);\n        const b = vertices.indexOf(face.v2);\n        const c = vertices.indexOf(face.v3);\n        index.push(a, b, c);\n      } //\n\n\n      simplifiedGeometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n      simplifiedGeometry.setIndex(index);\n      return simplifiedGeometry;\n    });\n  }\n\n  removeVertex(v, vertices) {\n    console.assert(v.faces.length === 0);\n\n    while (v.neighbors.length) {\n      const n = v.neighbors.pop();\n      removeFromArray(n.neighbors, v);\n    }\n\n    removeFromArray(vertices, v);\n  }\n\n}\n\nexport { SimplifyModifier };\n"]},"metadata":{},"sourceType":"module"}