{"ast":null,"code":"import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { HalftoneShader } from '../shaders/HalftoneShader.js';\n/**\n * RGB Halftone pass for three.js effects composer. Requires HalftoneShader.\n */\n\nvar HalftonePass = function HalftonePass(width, height, params) {\n  if (HalftoneShader === undefined) {\n    console.error('THREE.HalftonePass requires HalftoneShader');\n  }\n\n  this.uniforms = UniformsUtils.clone(HalftoneShader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    fragmentShader: HalftoneShader.fragmentShader,\n    vertexShader: HalftoneShader.vertexShader\n  }); // set params\n\n  this.uniforms.width.value = width;\n  this.uniforms.height.value = height;\n\n  for (var key in params) {\n    if (params.hasOwnProperty(key) && this.uniforms.hasOwnProperty(key)) {\n      this.uniforms[key].value = params[key];\n    }\n  }\n\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nHalftonePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: HalftonePass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/\n  ) {\n    this.material.uniforms['tDiffuse'].value = readBuffer.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  },\n  setSize: function setSize(width, height) {\n    this.uniforms.width.value = width;\n    this.uniforms.height.value = height;\n  }\n});\nexport { HalftonePass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/HalftonePass.js"],"names":["UniformsUtils","ShaderMaterial","FullScreenQuad","Pass","HalftoneShader","HalftonePass","width","height","params","undefined","console","error","uniforms","clone","material","fragmentShader","vertexShader","value","key","hasOwnProperty","fsQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear","setSize"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,QAA8C,OAA9C;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,WAArC;AACA,SAASC,cAAT,QAA+B,8BAA/B;AAEA;AACA;AACA;;AAEA,IAAIC,YAAY,GAAG,SAAfA,YAAe,CAAUC,KAAV,EAAiBC,MAAjB,EAAyBC,MAAzB,EAAiC;AAClD,MAAIJ,cAAc,KAAKK,SAAvB,EAAkC;AAChCC,IAAAA,OAAO,CAACC,KAAR,CAAc,4CAAd;AACD;;AAED,OAAKC,QAAL,GAAgBZ,aAAa,CAACa,KAAd,CAAoBT,cAAc,CAACQ,QAAnC,CAAhB;AACA,OAAKE,QAAL,GAAgB,IAAIb,cAAJ,CAAmB;AACjCW,IAAAA,QAAQ,EAAE,KAAKA,QADkB;AAEjCG,IAAAA,cAAc,EAAEX,cAAc,CAACW,cAFE;AAGjCC,IAAAA,YAAY,EAAEZ,cAAc,CAACY;AAHI,GAAnB,CAAhB,CANkD,CAU9C;;AAEJ,OAAKJ,QAAL,CAAcN,KAAd,CAAoBW,KAApB,GAA4BX,KAA5B;AACA,OAAKM,QAAL,CAAcL,MAAd,CAAqBU,KAArB,GAA6BV,MAA7B;;AAEA,OAAK,IAAIW,GAAT,IAAgBV,MAAhB,EAAwB;AACtB,QAAIA,MAAM,CAACW,cAAP,CAAsBD,GAAtB,KAA8B,KAAKN,QAAL,CAAcO,cAAd,CAA6BD,GAA7B,CAAlC,EAAqE;AACnE,WAAKN,QAAL,CAAcM,GAAd,EAAmBD,KAAnB,GAA2BT,MAAM,CAACU,GAAD,CAAjC;AACD;AACF;;AAED,OAAKE,MAAL,GAAc,IAAIlB,cAAJ,CAAmB,KAAKY,QAAxB,CAAd;AACD,CAtBD;;AAwBAT,YAAY,CAACgB,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcrB,IAAI,CAACkB,SAAnB,CAAd,EAA6C;AACpEI,EAAAA,WAAW,EAAEpB,YADuD;AAEpEqB,EAAAA,MAAM,EAAE,gBAAUC,QAAV,EAAoBC,WAApB,EAAiCC;AACzC;AADQ,IAEN;AACA,SAAKf,QAAL,CAAcF,QAAd,CAAuB,UAAvB,EAAmCK,KAAnC,GAA2CY,UAAU,CAACC,OAAtD;;AAEA,QAAI,KAAKC,cAAT,EAAyB;AACvBJ,MAAAA,QAAQ,CAACK,eAAT,CAAyB,IAAzB;AACA,WAAKZ,MAAL,CAAYM,MAAZ,CAAmBC,QAAnB;AACD,KAHD,MAGO;AACLA,MAAAA,QAAQ,CAACK,eAAT,CAAyBJ,WAAzB;AACA,UAAI,KAAKK,KAAT,EAAgBN,QAAQ,CAACM,KAAT;AAChB,WAAKb,MAAL,CAAYM,MAAZ,CAAmBC,QAAnB;AACD;AACF,GAfmE;AAgBpEO,EAAAA,OAAO,EAAE,iBAAU5B,KAAV,EAAiBC,MAAjB,EAAyB;AAChC,SAAKK,QAAL,CAAcN,KAAd,CAAoBW,KAApB,GAA4BX,KAA5B;AACA,SAAKM,QAAL,CAAcL,MAAd,CAAqBU,KAArB,GAA6BV,MAA7B;AACD;AAnBmE,CAA7C,CAAzB;AAsBA,SAASF,YAAT","sourcesContent":["import { UniformsUtils, ShaderMaterial } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { HalftoneShader } from '../shaders/HalftoneShader.js';\n\n/**\n * RGB Halftone pass for three.js effects composer. Requires HalftoneShader.\n */\n\nvar HalftonePass = function (width, height, params) {\n  if (HalftoneShader === undefined) {\n    console.error('THREE.HalftonePass requires HalftoneShader');\n  }\n\n  this.uniforms = UniformsUtils.clone(HalftoneShader.uniforms);\n  this.material = new ShaderMaterial({\n    uniforms: this.uniforms,\n    fragmentShader: HalftoneShader.fragmentShader,\n    vertexShader: HalftoneShader.vertexShader\n  }); // set params\n\n  this.uniforms.width.value = width;\n  this.uniforms.height.value = height;\n\n  for (let key in params) {\n    if (params.hasOwnProperty(key) && this.uniforms.hasOwnProperty(key)) {\n      this.uniforms[key].value = params[key];\n    }\n  }\n\n  this.fsQuad = new FullScreenQuad(this.material);\n};\n\nHalftonePass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: HalftonePass,\n  render: function (renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/\n  ) {\n    this.material.uniforms['tDiffuse'].value = readBuffer.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  },\n  setSize: function (width, height) {\n    this.uniforms.width.value = width;\n    this.uniforms.height.value = height;\n  }\n});\n\nexport { HalftonePass };\n"]},"metadata":{},"sourceType":"module"}