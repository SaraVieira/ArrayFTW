{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector2, WebGLRenderTarget, Clock, LinearFilter, RGBAFormat } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass, ClearMaskPass } from './MaskPass.js';\n\nvar EffectComposer = /*#__PURE__*/function () {\n  function EffectComposer(renderer, renderTarget) {\n    _classCallCheck(this, EffectComposer);\n\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"_pixelRatio\", void 0);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"renderTarget1\", void 0);\n\n    _defineProperty(this, \"renderTarget2\", void 0);\n\n    _defineProperty(this, \"writeBuffer\", void 0);\n\n    _defineProperty(this, \"readBuffer\", void 0);\n\n    _defineProperty(this, \"renderToScreen\", void 0);\n\n    _defineProperty(this, \"passes\", []);\n\n    _defineProperty(this, \"copyPass\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      var parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      var size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  _createClass(EffectComposer, [{\n    key: \"swapBuffers\",\n    value: function swapBuffers() {\n      var tmp = this.readBuffer;\n      this.readBuffer = this.writeBuffer;\n      this.writeBuffer = tmp;\n    }\n  }, {\n    key: \"addPass\",\n    value: function addPass(pass) {\n      this.passes.push(pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"insertPass\",\n    value: function insertPass(pass, index) {\n      this.passes.splice(index, 0, pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"removePass\",\n    value: function removePass(pass) {\n      var index = this.passes.indexOf(pass);\n\n      if (index !== -1) {\n        this.passes.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"isLastEnabledPass\",\n    value: function isLastEnabledPass(passIndex) {\n      for (var i = passIndex + 1; i < this.passes.length; i++) {\n        if (this.passes[i].enabled) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render(deltaTime) {\n      // deltaTime value is in seconds\n      if (deltaTime === undefined) {\n        deltaTime = this.clock.getDelta();\n      }\n\n      var currentRenderTarget = this.renderer.getRenderTarget();\n      var maskActive = false;\n      var il = this.passes.length;\n\n      for (var i = 0; i < il; i++) {\n        var pass = this.passes[i];\n        if (pass.enabled === false) continue;\n        pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n        pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n        if (pass.needsSwap) {\n          if (maskActive) {\n            var context = this.renderer.getContext();\n            var stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n            stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n            this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n            stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n          }\n\n          this.swapBuffers();\n        }\n\n        if (MaskPass !== undefined) {\n          if (pass instanceof MaskPass) {\n            maskActive = true;\n          } else if (pass instanceof ClearMaskPass) {\n            maskActive = false;\n          }\n        }\n      }\n\n      this.renderer.setRenderTarget(currentRenderTarget);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(renderTarget) {\n      if (renderTarget === undefined) {\n        var size = this.renderer.getSize(new Vector2());\n        this._pixelRatio = this.renderer.getPixelRatio();\n        this._width = size.width;\n        this._height = size.height;\n        renderTarget = this.renderTarget1.clone();\n        renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      }\n\n      this.renderTarget1.dispose();\n      this.renderTarget2.dispose();\n      this.renderTarget1 = renderTarget;\n      this.renderTarget2 = renderTarget.clone();\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this._width = width;\n      this._height = height;\n      var effectiveWidth = this._width * this._pixelRatio;\n      var effectiveHeight = this._height * this._pixelRatio;\n      this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n      this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n      for (var i = 0; i < this.passes.length; i++) {\n        this.passes[i].setSize(effectiveWidth, effectiveHeight);\n      }\n    }\n  }, {\n    key: \"setPixelRatio\",\n    value: function setPixelRatio(pixelRatio) {\n      this._pixelRatio = pixelRatio;\n      this.setSize(this._width, this._height);\n    }\n  }]);\n\n  return EffectComposer;\n}();\n\nexport { EffectComposer };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/EffectComposer.js"],"names":["_defineProperty","Vector2","WebGLRenderTarget","Clock","LinearFilter","RGBAFormat","CopyShader","ShaderPass","MaskPass","ClearMaskPass","EffectComposer","renderer","renderTarget","undefined","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","width","_height","height","texture","name","renderTarget1","renderTarget2","clone","writeBuffer","readBuffer","renderToScreen","console","error","copyPass","clock","tmp","pass","passes","push","setSize","index","splice","indexOf","passIndex","i","length","enabled","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","isLastEnabledPass","render","needsSwap","context","getContext","stencil","state","buffers","setFunc","NOTEQUAL","EQUAL","swapBuffers","setRenderTarget","dispose","effectiveWidth","effectiveHeight","pixelRatio"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector2, WebGLRenderTarget, Clock, LinearFilter, RGBAFormat } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass, ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n  constructor(renderer, renderTarget) {\n    _defineProperty(this, \"renderer\", void 0);\n\n    _defineProperty(this, \"_pixelRatio\", void 0);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"renderTarget1\", void 0);\n\n    _defineProperty(this, \"renderTarget2\", void 0);\n\n    _defineProperty(this, \"writeBuffer\", void 0);\n\n    _defineProperty(this, \"readBuffer\", void 0);\n\n    _defineProperty(this, \"renderToScreen\", void 0);\n\n    _defineProperty(this, \"passes\", []);\n\n    _defineProperty(this, \"copyPass\", void 0);\n\n    _defineProperty(this, \"clock\", void 0);\n\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      const parameters = {\n        minFilter: LinearFilter,\n        magFilter: LinearFilter,\n        format: RGBAFormat\n      };\n      const size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  swapBuffers() {\n    const tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  }\n\n  addPass(pass) {\n    this.passes.push(pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  insertPass(pass, index) {\n    this.passes.splice(index, 0, pass);\n    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n  }\n\n  removePass(pass) {\n    const index = this.passes.indexOf(pass);\n\n    if (index !== -1) {\n      this.passes.splice(index, 1);\n    }\n  }\n\n  isLastEnabledPass(passIndex) {\n    for (let i = passIndex + 1; i < this.passes.length; i++) {\n      if (this.passes[i].enabled) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render(deltaTime) {\n    // deltaTime value is in seconds\n    if (deltaTime === undefined) {\n      deltaTime = this.clock.getDelta();\n    }\n\n    const currentRenderTarget = this.renderer.getRenderTarget();\n    let maskActive = false;\n    const il = this.passes.length;\n\n    for (let i = 0; i < il; i++) {\n      const pass = this.passes[i];\n      if (pass.enabled === false) continue;\n      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n      if (pass.needsSwap) {\n        if (maskActive) {\n          const context = this.renderer.getContext();\n          const stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n          stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n        }\n\n        this.swapBuffers();\n      }\n\n      if (MaskPass !== undefined) {\n        if (pass instanceof MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    }\n\n    this.renderer.setRenderTarget(currentRenderTarget);\n  }\n\n  reset(renderTarget) {\n    if (renderTarget === undefined) {\n      const size = this.renderer.getSize(new Vector2());\n      this._pixelRatio = this.renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  }\n\n  setSize(width, height) {\n    this._width = width;\n    this._height = height;\n    const effectiveWidth = this._width * this._pixelRatio;\n    const effectiveHeight = this._height * this._pixelRatio;\n    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n    for (let i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(effectiveWidth, effectiveHeight);\n    }\n  }\n\n  setPixelRatio(pixelRatio) {\n    this._pixelRatio = pixelRatio;\n    this.setSize(this._width, this._height);\n  }\n\n}\n\nexport { EffectComposer };\n"]},"metadata":{},"sourceType":"module"}