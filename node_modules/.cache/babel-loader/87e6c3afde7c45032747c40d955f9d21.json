{"ast":null,"code":"/**\n * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n * - \"r\" parameter control where \"focused\" horizontal line lies\n */\nvar VerticalTiltShiftShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    },\n    r: {\n      value: 0.35\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float v;', 'uniform float r;', 'varying vec2 vUv;', 'void main() {', '\tvec4 sum = vec4( 0.0 );', '\tfloat vv = v * abs( r - vUv.y );', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;', '\tgl_FragColor = sum;', '}'].join('\\n')\n};\nexport { VerticalTiltShiftShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/VerticalTiltShiftShader.js"],"names":["VerticalTiltShiftShader","uniforms","tDiffuse","value","v","r","vertexShader","join","fragmentShader"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,uBAAuB,GAAG;AAC5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,CAAC,EAAE;AACDD,MAAAA,KAAK,EAAE,MAAM;AADZ,KAJK;AAORE,IAAAA,CAAC,EAAE;AACDF,MAAAA,KAAK,EAAE;AADN;AAPK,GADkB;AAY5BG,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CAZc;AAa5BC,EAAAA,cAAc,EAAE,CAAC,6BAAD,EAAgC,kBAAhC,EAAoD,kBAApD,EAAwE,mBAAxE,EAA6F,eAA7F,EAA8G,0BAA9G,EAA0I,mCAA1I,EAA+K,yEAA/K,EAA0P,0EAA1P,EAAsU,2EAAtU,EAAmZ,0EAAnZ,EAA+d,+DAA/d,EAAgiB,0EAAhiB,EAA4mB,2EAA5mB,EAAyrB,0EAAzrB,EAAqwB,yEAArwB,EAAg1B,sBAAh1B,EAAw2B,GAAx2B,EAA62BD,IAA72B,CAAk3B,IAAl3B;AAbY,CAA9B;AAgBA,SAASP,uBAAT","sourcesContent":["/**\n * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n * - \"r\" parameter control where \"focused\" horizontal line lies\n */\nvar VerticalTiltShiftShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    },\n    r: {\n      value: 0.35\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float v;', 'uniform float r;', 'varying vec2 vUv;', 'void main() {', '\tvec4 sum = vec4( 0.0 );', '\tfloat vv = v * abs( r - vUv.y );', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;', '\tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;', '\tgl_FragColor = sum;', '}'].join('\\n')\n};\n\nexport { VerticalTiltShiftShader };\n"]},"metadata":{},"sourceType":"module"}