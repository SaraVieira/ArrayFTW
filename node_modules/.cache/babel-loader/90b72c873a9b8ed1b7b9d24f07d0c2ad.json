{"ast":null,"code":"import { Vector2 } from 'three';\n/**\n * WebGL port of Subpixel Morphological Antialiasing (SMAA) v2.8\n * Preset: SMAA 1x Medium (with color edge detection)\n * https://github.com/iryoku/smaa/releases/tag/v2.8\n */\n\nvar SMAAEdgesShader = {\n  defines: {\n    SMAA_THRESHOLD: '0.1'\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'void SMAAEdgeDetectionVS( vec2 texcoord ) {', '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0,  1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4(  1.0, 0.0, 0.0, -1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 2 ] = texcoord.xyxy + resolution.xyxy * vec4( -2.0, 0.0, 0.0,  2.0 );', // WebGL port note: Changed sign in W component\n  '}', 'void main() {', '\tvUv = uv;', '\tSMAAEdgeDetectionVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'vec4 SMAAColorEdgeDetectionPS( vec2 texcoord, vec4 offset[3], sampler2D colorTex ) {', '\tvec2 threshold = vec2( SMAA_THRESHOLD, SMAA_THRESHOLD );', // Calculate color deltas:\n  '\tvec4 delta;', '\tvec3 C = texture2D( colorTex, texcoord ).rgb;', '\tvec3 Cleft = texture2D( colorTex, offset[0].xy ).rgb;', '\tvec3 t = abs( C - Cleft );', '\tdelta.x = max( max( t.r, t.g ), t.b );', '\tvec3 Ctop = texture2D( colorTex, offset[0].zw ).rgb;', '\tt = abs( C - Ctop );', '\tdelta.y = max( max( t.r, t.g ), t.b );', // We do the usual threshold:\n  '\tvec2 edges = step( threshold, delta.xy );', // Then discard if there is no edge:\n  '\tif ( dot( edges, vec2( 1.0, 1.0 ) ) == 0.0 )', '\t\tdiscard;', // Calculate right and bottom deltas:\n  '\tvec3 Cright = texture2D( colorTex, offset[1].xy ).rgb;', '\tt = abs( C - Cright );', '\tdelta.z = max( max( t.r, t.g ), t.b );', '\tvec3 Cbottom  = texture2D( colorTex, offset[1].zw ).rgb;', '\tt = abs( C - Cbottom );', '\tdelta.w = max( max( t.r, t.g ), t.b );', // Calculate the maximum delta in the direct neighborhood:\n  '\tfloat maxDelta = max( max( max( delta.x, delta.y ), delta.z ), delta.w );', // Calculate left-left and top-top deltas:\n  '\tvec3 Cleftleft  = texture2D( colorTex, offset[2].xy ).rgb;', '\tt = abs( C - Cleftleft );', '\tdelta.z = max( max( t.r, t.g ), t.b );', '\tvec3 Ctoptop = texture2D( colorTex, offset[2].zw ).rgb;', '\tt = abs( C - Ctoptop );', '\tdelta.w = max( max( t.r, t.g ), t.b );', // Calculate the final maximum delta:\n  '\tmaxDelta = max( max( maxDelta, delta.z ), delta.w );', // Local contrast adaptation in action:\n  '\tedges.xy *= step( 0.5 * maxDelta, delta.xy );', '\treturn vec4( edges, 0.0, 0.0 );', '}', 'void main() {', '\tgl_FragColor = SMAAColorEdgeDetectionPS( vUv, vOffset, tDiffuse );', '}'].join('\\n')\n};\nvar SMAAWeightsShader = {\n  defines: {\n    SMAA_MAX_SEARCH_STEPS: '8',\n    SMAA_AREATEX_MAX_DISTANCE: '16',\n    SMAA_AREATEX_PIXEL_SIZE: '( 1.0 / vec2( 160.0, 560.0 ) )',\n    SMAA_AREATEX_SUBTEX_SIZE: '( 1.0 / 7.0 )'\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tArea: {\n      value: null\n    },\n    tSearch: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'varying vec2 vPixcoord;', 'void SMAABlendingWeightCalculationVS( vec2 texcoord ) {', '\tvPixcoord = texcoord / resolution;', // We will use these offsets for the searches later on (see @PSEUDO_GATHER4):\n  '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.25, 0.125, 1.25, 0.125 );', // WebGL port note: Changed sign in Y and W components\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.125, 0.25, -0.125, -1.25 );', // WebGL port note: Changed sign in Y and W components\n  // And these for the searches, they indicate the ends of the loops:\n  '\tvOffset[ 2 ] = vec4( vOffset[ 0 ].xz, vOffset[ 1 ].yw ) + vec4( -2.0, 2.0, -2.0, 2.0 ) * resolution.xxyy * float( SMAA_MAX_SEARCH_STEPS );', '}', 'void main() {', '\tvUv = uv;', '\tSMAABlendingWeightCalculationVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#define SMAASampleLevelZeroOffset( tex, coord, offset ) texture2D( tex, coord + float( offset ) * resolution, 0.0 )', 'uniform sampler2D tDiffuse;', 'uniform sampler2D tArea;', 'uniform sampler2D tSearch;', 'uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[3];', 'varying vec2 vPixcoord;', '#if __VERSION__ == 100', 'vec2 round( vec2 x ) {', '\treturn sign( x ) * floor( abs( x ) + 0.5 );', '}', '#endif', 'float SMAASearchLength( sampler2D searchTex, vec2 e, float bias, float scale ) {', // Not required if searchTex accesses are set to point:\n  // float2 SEARCH_TEX_PIXEL_SIZE = 1.0 / float2(66.0, 33.0);\n  // e = float2(bias, 0.0) + 0.5 * SEARCH_TEX_PIXEL_SIZE +\n  //     e * float2(scale, 1.0) * float2(64.0, 32.0) * SEARCH_TEX_PIXEL_SIZE;\n  '\te.r = bias + e.r * scale;', '\treturn 255.0 * texture2D( searchTex, e, 0.0 ).r;', '}', 'float SMAASearchXLeft( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {',\n  /**\n   * @PSEUDO_GATHER4\n   * This texcoord has been offset by (-0.25, -0.125) in the vertex shader to\n   * sample between edge, thus fetching four edges in a row.\n   * Sampling with different offsets in each direction allows to disambiguate\n   * which edges are active from the four fetched ones.\n   */\n  '\tvec2 e = vec2( 0.0, 1.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord -= vec2( 2.0, 0.0 ) * resolution;', '\t\tif ( ! ( texcoord.x > end && e.g > 0.8281 && e.r == 0.0 ) ) break;', '\t}', // We correct the previous (-0.25, -0.125) offset we applied:\n  '\ttexcoord.x += 0.25 * resolution.x;', // The searches are bias by 1, so adjust the coords accordingly:\n  '\ttexcoord.x += resolution.x;', // Disambiguate the length added by the last step:\n  '\ttexcoord.x += 2.0 * resolution.x;', // Undo last step\n  '\ttexcoord.x -= resolution.x * SMAASearchLength(searchTex, e, 0.0, 0.5);', '\treturn texcoord.x;', '}', 'float SMAASearchXRight( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 0.0, 1.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord += vec2( 2.0, 0.0 ) * resolution;', '\t\tif ( ! ( texcoord.x < end && e.g > 0.8281 && e.r == 0.0 ) ) break;', '\t}', '\ttexcoord.x -= 0.25 * resolution.x;', '\ttexcoord.x -= resolution.x;', '\ttexcoord.x -= 2.0 * resolution.x;', '\ttexcoord.x += resolution.x * SMAASearchLength( searchTex, e, 0.5, 0.5 );', '\treturn texcoord.x;', '}', 'float SMAASearchYUp( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 1.0, 0.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord += vec2( 0.0, 2.0 ) * resolution;', // WebGL port note: Changed sign\n  '\t\tif ( ! ( texcoord.y > end && e.r > 0.8281 && e.g == 0.0 ) ) break;', '\t}', '\ttexcoord.y -= 0.25 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= 2.0 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += resolution.y * SMAASearchLength( searchTex, e.gr, 0.0, 0.5 );', // WebGL port note: Changed sign\n  '\treturn texcoord.y;', '}', 'float SMAASearchYDown( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 1.0, 0.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord -= vec2( 0.0, 2.0 ) * resolution;', // WebGL port note: Changed sign\n  '\t\tif ( ! ( texcoord.y < end && e.r > 0.8281 && e.g == 0.0 ) ) break;', '\t}', '\ttexcoord.y += 0.25 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += 2.0 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= resolution.y * SMAASearchLength( searchTex, e.gr, 0.5, 0.5 );', // WebGL port note: Changed sign\n  '\treturn texcoord.y;', '}', 'vec2 SMAAArea( sampler2D areaTex, vec2 dist, float e1, float e2, float offset ) {', // Rounding prevents precision errors of bilinear filtering:\n  '\tvec2 texcoord = float( SMAA_AREATEX_MAX_DISTANCE ) * round( 4.0 * vec2( e1, e2 ) ) + dist;', // We do a scale and bias for mapping to texel space:\n  '\ttexcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + ( 0.5 * SMAA_AREATEX_PIXEL_SIZE );', // Move to proper place, according to the subpixel offset:\n  '\ttexcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;', '\treturn texture2D( areaTex, texcoord, 0.0 ).rg;', '}', 'vec4 SMAABlendingWeightCalculationPS( vec2 texcoord, vec2 pixcoord, vec4 offset[ 3 ], sampler2D edgesTex, sampler2D areaTex, sampler2D searchTex, ivec4 subsampleIndices ) {', '\tvec4 weights = vec4( 0.0, 0.0, 0.0, 0.0 );', '\tvec2 e = texture2D( edgesTex, texcoord ).rg;', '\tif ( e.g > 0.0 ) {', // Edge at north\n  '\t\tvec2 d;', // Find the distance to the left:\n  '\t\tvec2 coords;', '\t\tcoords.x = SMAASearchXLeft( edgesTex, searchTex, offset[ 0 ].xy, offset[ 2 ].x );', '\t\tcoords.y = offset[ 1 ].y;', // offset[1].y = texcoord.y - 0.25 * resolution.y (@CROSSING_OFFSET)\n  '\t\td.x = coords.x;', // Now fetch the left crossing edges, two at a time using bilinear\n  // filtering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to\n  // discern what value each edge has:\n  '\t\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).r;', // Find the distance to the right:\n  '\t\tcoords.x = SMAASearchXRight( edgesTex, searchTex, offset[ 0 ].zw, offset[ 2 ].y );', '\t\td.y = coords.x;', // We want the distances to be in pixel units (doing this here allow to\n  // better interleave arithmetic and memory accesses):\n  '\t\td = d / resolution.x - pixcoord.x;', // SMAAArea below needs a sqrt, as the areas texture is compressed\n  // quadratically:\n  '\t\tvec2 sqrt_d = sqrt( abs( d ) );', // Fetch the right crossing edges:\n  '\t\tcoords.y -= 1.0 * resolution.y;', // WebGL port note: Added\n  '\t\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 1, 0 ) ).r;', // Ok, we know how this pattern looks like, now it is time for getting\n  // the actual area:\n  '\t\tweights.rg = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.y ) );', '\t}', '\tif ( e.r > 0.0 ) {', // Edge at west\n  '\t\tvec2 d;', // Find the distance to the top:\n  '\t\tvec2 coords;', '\t\tcoords.y = SMAASearchYUp( edgesTex, searchTex, offset[ 1 ].xy, offset[ 2 ].z );', '\t\tcoords.x = offset[ 0 ].x;', // offset[1].x = texcoord.x - 0.25 * resolution.x;\n  '\t\td.x = coords.y;', // Fetch the top crossing edges:\n  '\t\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).g;', // Find the distance to the bottom:\n  '\t\tcoords.y = SMAASearchYDown( edgesTex, searchTex, offset[ 1 ].zw, offset[ 2 ].w );', '\t\td.y = coords.y;', // We want the distances to be in pixel units:\n  '\t\td = d / resolution.y - pixcoord.y;', // SMAAArea below needs a sqrt, as the areas texture is compressed\n  // quadratically:\n  '\t\tvec2 sqrt_d = sqrt( abs( d ) );', // Fetch the bottom crossing edges:\n  '\t\tcoords.y -= 1.0 * resolution.y;', // WebGL port note: Added\n  '\t\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 0, 1 ) ).g;', // Get the area for this direction:\n  '\t\tweights.ba = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.x ) );', '\t}', '\treturn weights;', '}', 'void main() {', '\tgl_FragColor = SMAABlendingWeightCalculationPS( vUv, vPixcoord, vOffset, tDiffuse, tArea, tSearch, ivec4( 0.0 ) );', '}'].join('\\n')\n};\nvar SMAABlendShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tColor: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 2 ];', 'void SMAANeighborhoodBlendingVS( vec2 texcoord ) {', '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0, 1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( 1.0, 0.0, 0.0, -1.0 );', // WebGL port note: Changed sign in W component\n  '}', 'void main() {', '\tvUv = uv;', '\tSMAANeighborhoodBlendingVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform sampler2D tColor;', 'uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 2 ];', 'vec4 SMAANeighborhoodBlendingPS( vec2 texcoord, vec4 offset[ 2 ], sampler2D colorTex, sampler2D blendTex ) {', // Fetch the blending weights for current pixel:\n  '\tvec4 a;', '\ta.xz = texture2D( blendTex, texcoord ).xz;', '\ta.y = texture2D( blendTex, offset[ 1 ].zw ).g;', '\ta.w = texture2D( blendTex, offset[ 1 ].xy ).a;', // Is there any blending weight with a value greater than 0.0?\n  '\tif ( dot(a, vec4( 1.0, 1.0, 1.0, 1.0 )) < 1e-5 ) {', '\t\treturn texture2D( colorTex, texcoord, 0.0 );', '\t} else {', // Up to 4 lines can be crossing a pixel (one through each edge). We\n  // favor blending by choosing the line with the maximum weight for each\n  // direction:\n  '\t\tvec2 offset;', '\t\toffset.x = a.a > a.b ? a.a : -a.b;', // left vs. right\n  '\t\toffset.y = a.g > a.r ? -a.g : a.r;', // top vs. bottom // WebGL port note: Changed signs\n  // Then we go in the direction that has the maximum weight:\n  '\t\tif ( abs( offset.x ) > abs( offset.y )) {', // horizontal vs. vertical\n  '\t\t\toffset.y = 0.0;', '\t\t} else {', '\t\t\toffset.x = 0.0;', '\t\t}', // Fetch the opposite color and lerp by hand:\n  '\t\tvec4 C = texture2D( colorTex, texcoord, 0.0 );', '\t\ttexcoord += sign( offset ) * resolution;', '\t\tvec4 Cop = texture2D( colorTex, texcoord, 0.0 );', '\t\tfloat s = abs( offset.x ) > abs( offset.y ) ? abs( offset.x ) : abs( offset.y );', // WebGL port note: Added gamma correction\n  '\t\tC.xyz = pow(C.xyz, vec3(2.2));', '\t\tCop.xyz = pow(Cop.xyz, vec3(2.2));', '\t\tvec4 mixed = mix(C, Cop, s);', '\t\tmixed.xyz = pow(mixed.xyz, vec3(1.0 / 2.2));', '\t\treturn mixed;', '\t}', '}', 'void main() {', '\tgl_FragColor = SMAANeighborhoodBlendingPS( vUv, vOffset, tColor, tDiffuse );', '}'].join('\\n')\n};\nexport { SMAABlendShader, SMAAEdgesShader, SMAAWeightsShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/SMAAShader.js"],"names":["Vector2","SMAAEdgesShader","defines","SMAA_THRESHOLD","uniforms","tDiffuse","value","resolution","vertexShader","join","fragmentShader","SMAAWeightsShader","SMAA_MAX_SEARCH_STEPS","SMAA_AREATEX_MAX_DISTANCE","SMAA_AREATEX_PIXEL_SIZE","SMAA_AREATEX_SUBTEX_SIZE","tArea","tSearch","SMAABlendShader","tColor"],"mappings":"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","sourcesContent":["import { Vector2 } from 'three';\n\n/**\n * WebGL port of Subpixel Morphological Antialiasing (SMAA) v2.8\n * Preset: SMAA 1x Medium (with color edge detection)\n * https://github.com/iryoku/smaa/releases/tag/v2.8\n */\n\nvar SMAAEdgesShader = {\n  defines: {\n    SMAA_THRESHOLD: '0.1'\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'void SMAAEdgeDetectionVS( vec2 texcoord ) {', '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0,  1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4(  1.0, 0.0, 0.0, -1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 2 ] = texcoord.xyxy + resolution.xyxy * vec4( -2.0, 0.0, 0.0,  2.0 );', // WebGL port note: Changed sign in W component\n  '}', 'void main() {', '\tvUv = uv;', '\tSMAAEdgeDetectionVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'vec4 SMAAColorEdgeDetectionPS( vec2 texcoord, vec4 offset[3], sampler2D colorTex ) {', '\tvec2 threshold = vec2( SMAA_THRESHOLD, SMAA_THRESHOLD );', // Calculate color deltas:\n  '\tvec4 delta;', '\tvec3 C = texture2D( colorTex, texcoord ).rgb;', '\tvec3 Cleft = texture2D( colorTex, offset[0].xy ).rgb;', '\tvec3 t = abs( C - Cleft );', '\tdelta.x = max( max( t.r, t.g ), t.b );', '\tvec3 Ctop = texture2D( colorTex, offset[0].zw ).rgb;', '\tt = abs( C - Ctop );', '\tdelta.y = max( max( t.r, t.g ), t.b );', // We do the usual threshold:\n  '\tvec2 edges = step( threshold, delta.xy );', // Then discard if there is no edge:\n  '\tif ( dot( edges, vec2( 1.0, 1.0 ) ) == 0.0 )', '\t\tdiscard;', // Calculate right and bottom deltas:\n  '\tvec3 Cright = texture2D( colorTex, offset[1].xy ).rgb;', '\tt = abs( C - Cright );', '\tdelta.z = max( max( t.r, t.g ), t.b );', '\tvec3 Cbottom  = texture2D( colorTex, offset[1].zw ).rgb;', '\tt = abs( C - Cbottom );', '\tdelta.w = max( max( t.r, t.g ), t.b );', // Calculate the maximum delta in the direct neighborhood:\n  '\tfloat maxDelta = max( max( max( delta.x, delta.y ), delta.z ), delta.w );', // Calculate left-left and top-top deltas:\n  '\tvec3 Cleftleft  = texture2D( colorTex, offset[2].xy ).rgb;', '\tt = abs( C - Cleftleft );', '\tdelta.z = max( max( t.r, t.g ), t.b );', '\tvec3 Ctoptop = texture2D( colorTex, offset[2].zw ).rgb;', '\tt = abs( C - Ctoptop );', '\tdelta.w = max( max( t.r, t.g ), t.b );', // Calculate the final maximum delta:\n  '\tmaxDelta = max( max( maxDelta, delta.z ), delta.w );', // Local contrast adaptation in action:\n  '\tedges.xy *= step( 0.5 * maxDelta, delta.xy );', '\treturn vec4( edges, 0.0, 0.0 );', '}', 'void main() {', '\tgl_FragColor = SMAAColorEdgeDetectionPS( vUv, vOffset, tDiffuse );', '}'].join('\\n')\n};\nvar SMAAWeightsShader = {\n  defines: {\n    SMAA_MAX_SEARCH_STEPS: '8',\n    SMAA_AREATEX_MAX_DISTANCE: '16',\n    SMAA_AREATEX_PIXEL_SIZE: '( 1.0 / vec2( 160.0, 560.0 ) )',\n    SMAA_AREATEX_SUBTEX_SIZE: '( 1.0 / 7.0 )'\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tArea: {\n      value: null\n    },\n    tSearch: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 3 ];', 'varying vec2 vPixcoord;', 'void SMAABlendingWeightCalculationVS( vec2 texcoord ) {', '\tvPixcoord = texcoord / resolution;', // We will use these offsets for the searches later on (see @PSEUDO_GATHER4):\n  '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.25, 0.125, 1.25, 0.125 );', // WebGL port note: Changed sign in Y and W components\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( -0.125, 0.25, -0.125, -1.25 );', // WebGL port note: Changed sign in Y and W components\n  // And these for the searches, they indicate the ends of the loops:\n  '\tvOffset[ 2 ] = vec4( vOffset[ 0 ].xz, vOffset[ 1 ].yw ) + vec4( -2.0, 2.0, -2.0, 2.0 ) * resolution.xxyy * float( SMAA_MAX_SEARCH_STEPS );', '}', 'void main() {', '\tvUv = uv;', '\tSMAABlendingWeightCalculationVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#define SMAASampleLevelZeroOffset( tex, coord, offset ) texture2D( tex, coord + float( offset ) * resolution, 0.0 )', 'uniform sampler2D tDiffuse;', 'uniform sampler2D tArea;', 'uniform sampler2D tSearch;', 'uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[3];', 'varying vec2 vPixcoord;', '#if __VERSION__ == 100', 'vec2 round( vec2 x ) {', '\treturn sign( x ) * floor( abs( x ) + 0.5 );', '}', '#endif', 'float SMAASearchLength( sampler2D searchTex, vec2 e, float bias, float scale ) {', // Not required if searchTex accesses are set to point:\n  // float2 SEARCH_TEX_PIXEL_SIZE = 1.0 / float2(66.0, 33.0);\n  // e = float2(bias, 0.0) + 0.5 * SEARCH_TEX_PIXEL_SIZE +\n  //     e * float2(scale, 1.0) * float2(64.0, 32.0) * SEARCH_TEX_PIXEL_SIZE;\n  '\te.r = bias + e.r * scale;', '\treturn 255.0 * texture2D( searchTex, e, 0.0 ).r;', '}', 'float SMAASearchXLeft( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {',\n  /**\n   * @PSEUDO_GATHER4\n   * This texcoord has been offset by (-0.25, -0.125) in the vertex shader to\n   * sample between edge, thus fetching four edges in a row.\n   * Sampling with different offsets in each direction allows to disambiguate\n   * which edges are active from the four fetched ones.\n   */\n  '\tvec2 e = vec2( 0.0, 1.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord -= vec2( 2.0, 0.0 ) * resolution;', '\t\tif ( ! ( texcoord.x > end && e.g > 0.8281 && e.r == 0.0 ) ) break;', '\t}', // We correct the previous (-0.25, -0.125) offset we applied:\n  '\ttexcoord.x += 0.25 * resolution.x;', // The searches are bias by 1, so adjust the coords accordingly:\n  '\ttexcoord.x += resolution.x;', // Disambiguate the length added by the last step:\n  '\ttexcoord.x += 2.0 * resolution.x;', // Undo last step\n  '\ttexcoord.x -= resolution.x * SMAASearchLength(searchTex, e, 0.0, 0.5);', '\treturn texcoord.x;', '}', 'float SMAASearchXRight( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 0.0, 1.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord += vec2( 2.0, 0.0 ) * resolution;', '\t\tif ( ! ( texcoord.x < end && e.g > 0.8281 && e.r == 0.0 ) ) break;', '\t}', '\ttexcoord.x -= 0.25 * resolution.x;', '\ttexcoord.x -= resolution.x;', '\ttexcoord.x -= 2.0 * resolution.x;', '\ttexcoord.x += resolution.x * SMAASearchLength( searchTex, e, 0.5, 0.5 );', '\treturn texcoord.x;', '}', 'float SMAASearchYUp( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 1.0, 0.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord += vec2( 0.0, 2.0 ) * resolution;', // WebGL port note: Changed sign\n  '\t\tif ( ! ( texcoord.y > end && e.r > 0.8281 && e.g == 0.0 ) ) break;', '\t}', '\ttexcoord.y -= 0.25 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= 2.0 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += resolution.y * SMAASearchLength( searchTex, e.gr, 0.0, 0.5 );', // WebGL port note: Changed sign\n  '\treturn texcoord.y;', '}', 'float SMAASearchYDown( sampler2D edgesTex, sampler2D searchTex, vec2 texcoord, float end ) {', '\tvec2 e = vec2( 1.0, 0.0 );', '\tfor ( int i = 0; i < SMAA_MAX_SEARCH_STEPS; i ++ ) {', // WebGL port note: Changed while to for\n  '\t\te = texture2D( edgesTex, texcoord, 0.0 ).rg;', '\t\ttexcoord -= vec2( 0.0, 2.0 ) * resolution;', // WebGL port note: Changed sign\n  '\t\tif ( ! ( texcoord.y < end && e.r > 0.8281 && e.g == 0.0 ) ) break;', '\t}', '\ttexcoord.y += 0.25 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y += 2.0 * resolution.y;', // WebGL port note: Changed sign\n  '\ttexcoord.y -= resolution.y * SMAASearchLength( searchTex, e.gr, 0.5, 0.5 );', // WebGL port note: Changed sign\n  '\treturn texcoord.y;', '}', 'vec2 SMAAArea( sampler2D areaTex, vec2 dist, float e1, float e2, float offset ) {', // Rounding prevents precision errors of bilinear filtering:\n  '\tvec2 texcoord = float( SMAA_AREATEX_MAX_DISTANCE ) * round( 4.0 * vec2( e1, e2 ) ) + dist;', // We do a scale and bias for mapping to texel space:\n  '\ttexcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + ( 0.5 * SMAA_AREATEX_PIXEL_SIZE );', // Move to proper place, according to the subpixel offset:\n  '\ttexcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;', '\treturn texture2D( areaTex, texcoord, 0.0 ).rg;', '}', 'vec4 SMAABlendingWeightCalculationPS( vec2 texcoord, vec2 pixcoord, vec4 offset[ 3 ], sampler2D edgesTex, sampler2D areaTex, sampler2D searchTex, ivec4 subsampleIndices ) {', '\tvec4 weights = vec4( 0.0, 0.0, 0.0, 0.0 );', '\tvec2 e = texture2D( edgesTex, texcoord ).rg;', '\tif ( e.g > 0.0 ) {', // Edge at north\n  '\t\tvec2 d;', // Find the distance to the left:\n  '\t\tvec2 coords;', '\t\tcoords.x = SMAASearchXLeft( edgesTex, searchTex, offset[ 0 ].xy, offset[ 2 ].x );', '\t\tcoords.y = offset[ 1 ].y;', // offset[1].y = texcoord.y - 0.25 * resolution.y (@CROSSING_OFFSET)\n  '\t\td.x = coords.x;', // Now fetch the left crossing edges, two at a time using bilinear\n  // filtering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to\n  // discern what value each edge has:\n  '\t\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).r;', // Find the distance to the right:\n  '\t\tcoords.x = SMAASearchXRight( edgesTex, searchTex, offset[ 0 ].zw, offset[ 2 ].y );', '\t\td.y = coords.x;', // We want the distances to be in pixel units (doing this here allow to\n  // better interleave arithmetic and memory accesses):\n  '\t\td = d / resolution.x - pixcoord.x;', // SMAAArea below needs a sqrt, as the areas texture is compressed\n  // quadratically:\n  '\t\tvec2 sqrt_d = sqrt( abs( d ) );', // Fetch the right crossing edges:\n  '\t\tcoords.y -= 1.0 * resolution.y;', // WebGL port note: Added\n  '\t\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 1, 0 ) ).r;', // Ok, we know how this pattern looks like, now it is time for getting\n  // the actual area:\n  '\t\tweights.rg = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.y ) );', '\t}', '\tif ( e.r > 0.0 ) {', // Edge at west\n  '\t\tvec2 d;', // Find the distance to the top:\n  '\t\tvec2 coords;', '\t\tcoords.y = SMAASearchYUp( edgesTex, searchTex, offset[ 1 ].xy, offset[ 2 ].z );', '\t\tcoords.x = offset[ 0 ].x;', // offset[1].x = texcoord.x - 0.25 * resolution.x;\n  '\t\td.x = coords.y;', // Fetch the top crossing edges:\n  '\t\tfloat e1 = texture2D( edgesTex, coords, 0.0 ).g;', // Find the distance to the bottom:\n  '\t\tcoords.y = SMAASearchYDown( edgesTex, searchTex, offset[ 1 ].zw, offset[ 2 ].w );', '\t\td.y = coords.y;', // We want the distances to be in pixel units:\n  '\t\td = d / resolution.y - pixcoord.y;', // SMAAArea below needs a sqrt, as the areas texture is compressed\n  // quadratically:\n  '\t\tvec2 sqrt_d = sqrt( abs( d ) );', // Fetch the bottom crossing edges:\n  '\t\tcoords.y -= 1.0 * resolution.y;', // WebGL port note: Added\n  '\t\tfloat e2 = SMAASampleLevelZeroOffset( edgesTex, coords, ivec2( 0, 1 ) ).g;', // Get the area for this direction:\n  '\t\tweights.ba = SMAAArea( areaTex, sqrt_d, e1, e2, float( subsampleIndices.x ) );', '\t}', '\treturn weights;', '}', 'void main() {', '\tgl_FragColor = SMAABlendingWeightCalculationPS( vUv, vPixcoord, vOffset, tDiffuse, tArea, tSearch, ivec4( 0.0 ) );', '}'].join('\\n')\n};\nvar SMAABlendShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    tColor: {\n      value: null\n    },\n    resolution: {\n      value: new Vector2(1 / 1024, 1 / 512)\n    }\n  },\n  vertexShader: ['uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 2 ];', 'void SMAANeighborhoodBlendingVS( vec2 texcoord ) {', '\tvOffset[ 0 ] = texcoord.xyxy + resolution.xyxy * vec4( -1.0, 0.0, 0.0, 1.0 );', // WebGL port note: Changed sign in W component\n  '\tvOffset[ 1 ] = texcoord.xyxy + resolution.xyxy * vec4( 1.0, 0.0, 0.0, -1.0 );', // WebGL port note: Changed sign in W component\n  '}', 'void main() {', '\tvUv = uv;', '\tSMAANeighborhoodBlendingVS( vUv );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform sampler2D tColor;', 'uniform vec2 resolution;', 'varying vec2 vUv;', 'varying vec4 vOffset[ 2 ];', 'vec4 SMAANeighborhoodBlendingPS( vec2 texcoord, vec4 offset[ 2 ], sampler2D colorTex, sampler2D blendTex ) {', // Fetch the blending weights for current pixel:\n  '\tvec4 a;', '\ta.xz = texture2D( blendTex, texcoord ).xz;', '\ta.y = texture2D( blendTex, offset[ 1 ].zw ).g;', '\ta.w = texture2D( blendTex, offset[ 1 ].xy ).a;', // Is there any blending weight with a value greater than 0.0?\n  '\tif ( dot(a, vec4( 1.0, 1.0, 1.0, 1.0 )) < 1e-5 ) {', '\t\treturn texture2D( colorTex, texcoord, 0.0 );', '\t} else {', // Up to 4 lines can be crossing a pixel (one through each edge). We\n  // favor blending by choosing the line with the maximum weight for each\n  // direction:\n  '\t\tvec2 offset;', '\t\toffset.x = a.a > a.b ? a.a : -a.b;', // left vs. right\n  '\t\toffset.y = a.g > a.r ? -a.g : a.r;', // top vs. bottom // WebGL port note: Changed signs\n  // Then we go in the direction that has the maximum weight:\n  '\t\tif ( abs( offset.x ) > abs( offset.y )) {', // horizontal vs. vertical\n  '\t\t\toffset.y = 0.0;', '\t\t} else {', '\t\t\toffset.x = 0.0;', '\t\t}', // Fetch the opposite color and lerp by hand:\n  '\t\tvec4 C = texture2D( colorTex, texcoord, 0.0 );', '\t\ttexcoord += sign( offset ) * resolution;', '\t\tvec4 Cop = texture2D( colorTex, texcoord, 0.0 );', '\t\tfloat s = abs( offset.x ) > abs( offset.y ) ? abs( offset.x ) : abs( offset.y );', // WebGL port note: Added gamma correction\n  '\t\tC.xyz = pow(C.xyz, vec3(2.2));', '\t\tCop.xyz = pow(Cop.xyz, vec3(2.2));', '\t\tvec4 mixed = mix(C, Cop, s);', '\t\tmixed.xyz = pow(mixed.xyz, vec3(1.0 / 2.2));', '\t\treturn mixed;', '\t}', '}', 'void main() {', '\tgl_FragColor = SMAANeighborhoodBlendingPS( vUv, vOffset, tColor, tDiffuse );', '}'].join('\\n')\n};\n\nexport { SMAABlendShader, SMAAEdgesShader, SMAAWeightsShader };\n"]},"metadata":{},"sourceType":"module"}