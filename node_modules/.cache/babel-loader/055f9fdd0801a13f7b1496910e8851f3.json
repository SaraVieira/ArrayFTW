{"ast":null,"code":"import { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from 'three';\n\nvar RenderableObject = function RenderableObject() {\n  this.id = 0;\n  this.object = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableFace = function RenderableFace() {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.v3 = new RenderableVertex();\n  this.normalModel = new Vector3();\n  this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n  this.vertexNormalsLength = 0;\n  this.color = new Color();\n  this.material = null;\n  this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableVertex = function RenderableVertex() {\n  this.position = new Vector3();\n  this.positionWorld = new Vector3();\n  this.positionScreen = new Vector4();\n  this.visible = true;\n};\n\nRenderableVertex.prototype.copy = function (vertex) {\n  this.positionWorld.copy(vertex.positionWorld);\n  this.positionScreen.copy(vertex.positionScreen);\n}; //\n\n\nvar RenderableLine = function RenderableLine() {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.vertexColors = [new Color(), new Color()];\n  this.material = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableSprite = function RenderableSprite() {\n  this.id = 0;\n  this.object = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.rotation = 0;\n  this.scale = new Vector2();\n  this.material = null;\n  this.renderOrder = 0;\n}; //\n\n\nvar Projector = function Projector() {\n  var _object,\n      _objectCount,\n      _objectPool = [],\n      _objectPoolLength = 0,\n      _vertex,\n      _vertexCount,\n      _vertexPool = [],\n      _vertexPoolLength = 0,\n      _face,\n      _faceCount,\n      _facePool = [],\n      _facePoolLength = 0,\n      _line,\n      _lineCount,\n      _linePool = [],\n      _linePoolLength = 0,\n      _sprite,\n      _spriteCount,\n      _spritePool = [],\n      _spritePoolLength = 0,\n      _renderData = {\n    objects: [],\n    lights: [],\n    elements: []\n  },\n      _vector3 = new Vector3(),\n      _vector4 = new Vector4(),\n      _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)),\n      _boundingBox = new Box3(),\n      _points3 = new Array(3),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _modelMatrix,\n      _modelViewProjectionMatrix = new Matrix4(),\n      _frustum = new Frustum(); //\n\n\n  this.projectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .projectVector() is now vector.project().');\n    vector.project(camera);\n  };\n\n  this.unprojectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n    vector.unproject(camera);\n  };\n\n  this.pickingRay = function () {\n    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n  }; //\n\n\n  var RenderList = function RenderList() {\n    var normals = [];\n    var colors = [];\n    var uvs = [];\n    var object = null;\n    var normalMatrix = new Matrix3();\n\n    function setObject(value) {\n      object = value;\n      normalMatrix.getNormalMatrix(object.matrixWorld);\n      normals.length = 0;\n      colors.length = 0;\n      uvs.length = 0;\n    }\n\n    function projectVertex(vertex) {\n      var position = vertex.position;\n      var positionWorld = vertex.positionWorld;\n      var positionScreen = vertex.positionScreen;\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n      var invW = 1 / positionScreen.w;\n      positionScreen.x *= invW;\n      positionScreen.y *= invW;\n      positionScreen.z *= invW;\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n    }\n\n    function pushVertex(x, y, z) {\n      _vertex = getNextVertexInPool();\n\n      _vertex.position.set(x, y, z);\n\n      projectVertex(_vertex);\n    }\n\n    function pushNormal(x, y, z) {\n      normals.push(x, y, z);\n    }\n\n    function pushColor(r, g, b) {\n      colors.push(r, g, b);\n    }\n\n    function pushUv(x, y) {\n      uvs.push(x, y);\n    }\n\n    function checkTriangleVisibility(v1, v2, v3) {\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n      _points3[0] = v1.positionScreen;\n      _points3[1] = v2.positionScreen;\n      _points3[2] = v3.positionScreen;\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n    }\n\n    function checkBackfaceCulling(v1, v2, v3) {\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n    }\n\n    function pushLine(a, b) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b]; // Clip\n\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n        // Perform the perspective divide\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n        _line = getNextLineInPool();\n        _line.id = object.id;\n\n        _line.v1.copy(v1);\n\n        _line.v2.copy(v2);\n\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n\n        if (object.material.vertexColors) {\n          _line.vertexColors[0].fromArray(colors, a * 3);\n\n          _line.vertexColors[1].fromArray(colors, b * 3);\n        }\n\n        _renderData.elements.push(_line);\n      }\n    }\n\n    function pushTriangle(a, b, c, material) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      var v3 = _vertexPool[c];\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n      if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n        _face = getNextFaceInPool();\n        _face.id = object.id;\n\n        _face.v1.copy(v1);\n\n        _face.v2.copy(v2);\n\n        _face.v3.copy(v3);\n\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n        _face.renderOrder = object.renderOrder; // face normal\n\n        _vector3.subVectors(v3.position, v2.position);\n\n        _vector4.subVectors(v1.position, v2.position);\n\n        _vector3.cross(_vector4);\n\n        _face.normalModel.copy(_vector3);\n\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\n        for (var i = 0; i < 3; i++) {\n          var normal = _face.vertexNormalsModel[i];\n          normal.fromArray(normals, arguments[i] * 3);\n          normal.applyMatrix3(normalMatrix).normalize();\n          var uv = _face.uvs[i];\n          uv.fromArray(uvs, arguments[i] * 2);\n        }\n\n        _face.vertexNormalsLength = 3;\n        _face.material = material;\n\n        if (material.vertexColors) {\n          _face.color.fromArray(colors, a * 3);\n        }\n\n        _renderData.elements.push(_face);\n      }\n    }\n\n    return {\n      setObject: setObject,\n      projectVertex: projectVertex,\n      checkTriangleVisibility: checkTriangleVisibility,\n      checkBackfaceCulling: checkBackfaceCulling,\n      pushVertex: pushVertex,\n      pushNormal: pushNormal,\n      pushColor: pushColor,\n      pushUv: pushUv,\n      pushLine: pushLine,\n      pushTriangle: pushTriangle\n    };\n  };\n\n  var renderList = new RenderList();\n\n  function projectObject(object) {\n    if (object.visible === false) return;\n\n    if (object.isLight) {\n      _renderData.lights.push(object);\n    } else if (object.isMesh || object.isLine || object.isPoints) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n      addObject(object);\n    } else if (object.isSprite) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n      addObject(object);\n    }\n\n    var children = object.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i]);\n    }\n  }\n\n  function addObject(object) {\n    _object = getNextObjectInPool();\n    _object.id = object.id;\n    _object.object = object;\n\n    _vector3.setFromMatrixPosition(object.matrixWorld);\n\n    _vector3.applyMatrix4(_viewProjectionMatrix);\n\n    _object.z = _vector3.z;\n    _object.renderOrder = object.renderOrder;\n\n    _renderData.objects.push(_object);\n  }\n\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\n    _faceCount = 0;\n    _lineCount = 0;\n    _spriteCount = 0;\n    _renderData.elements.length = 0;\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _frustum.setFromProjectionMatrix(_viewProjectionMatrix); //\n\n\n    _objectCount = 0;\n    _renderData.objects.length = 0;\n    _renderData.lights.length = 0;\n    projectObject(scene);\n\n    if (sortObjects === true) {\n      _renderData.objects.sort(painterSort);\n    } //\n\n\n    var objects = _renderData.objects;\n\n    for (var o = 0, ol = objects.length; o < ol; o++) {\n      var object = objects[o].object;\n      var geometry = object.geometry;\n      renderList.setObject(object);\n      _modelMatrix = object.matrixWorld;\n      _vertexCount = 0;\n\n      if (object.isMesh) {\n        if (geometry.isBufferGeometry) {\n          var material = object.material;\n          var isMultiMaterial = Array.isArray(material);\n          var attributes = geometry.attributes;\n          var groups = geometry.groups;\n          if (attributes.position === undefined) continue;\n          var positions = attributes.position.array;\n\n          for (var i = 0, l = positions.length; i < l; i += 3) {\n            var x = positions[i];\n            var y = positions[i + 1];\n            var z = positions[i + 2];\n\n            if (material.morphTargets === true) {\n              var morphTargets = geometry.morphAttributes.position;\n              var morphTargetsRelative = geometry.morphTargetsRelative;\n              var morphInfluences = object.morphTargetInfluences;\n\n              for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n                if (influence === 0) continue;\n                var target = morphTargets[t];\n\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n\n            renderList.pushVertex(x, y, z);\n          }\n\n          if (attributes.normal !== undefined) {\n            var normals = attributes.normal.array;\n\n            for (var _i = 0, _l = normals.length; _i < _l; _i += 3) {\n              renderList.pushNormal(normals[_i], normals[_i + 1], normals[_i + 2]);\n            }\n          }\n\n          if (attributes.color !== undefined) {\n            var colors = attributes.color.array;\n\n            for (var _i2 = 0, _l2 = colors.length; _i2 < _l2; _i2 += 3) {\n              renderList.pushColor(colors[_i2], colors[_i2 + 1], colors[_i2 + 2]);\n            }\n          }\n\n          if (attributes.uv !== undefined) {\n            var uvs = attributes.uv.array;\n\n            for (var _i3 = 0, _l3 = uvs.length; _i3 < _l3; _i3 += 2) {\n              renderList.pushUv(uvs[_i3], uvs[_i3 + 1]);\n            }\n          }\n\n          if (geometry.index !== null) {\n            var indices = geometry.index.array;\n\n            if (groups.length > 0) {\n              for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (var _i4 = group.start, _l4 = group.start + group.count; _i4 < _l4; _i4 += 3) {\n                  renderList.pushTriangle(indices[_i4], indices[_i4 + 1], indices[_i4 + 2], material);\n                }\n              }\n            } else {\n              for (var _i5 = 0, _l5 = indices.length; _i5 < _l5; _i5 += 3) {\n                renderList.pushTriangle(indices[_i5], indices[_i5 + 1], indices[_i5 + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (var _g = 0; _g < groups.length; _g++) {\n                var group = groups[_g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (var _i6 = group.start, _l6 = group.start + group.count; _i6 < _l6; _i6 += 3) {\n                  renderList.pushTriangle(_i6, _i6 + 1, _i6 + 2, material);\n                }\n              }\n            } else {\n              for (var _i7 = 0, _l7 = positions.length / 3; _i7 < _l7; _i7 += 3) {\n                renderList.pushTriangle(_i7, _i7 + 1, _i7 + 2, material);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isLine) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (var _i8 = 0, _l8 = positions.length; _i8 < _l8; _i8 += 3) {\n              renderList.pushVertex(positions[_i8], positions[_i8 + 1], positions[_i8 + 2]);\n            }\n\n            if (attributes.color !== undefined) {\n              var colors = attributes.color.array;\n\n              for (var _i9 = 0, _l9 = colors.length; _i9 < _l9; _i9 += 3) {\n                renderList.pushColor(colors[_i9], colors[_i9 + 1], colors[_i9 + 2]);\n              }\n            }\n\n            if (geometry.index !== null) {\n              var indices = geometry.index.array;\n\n              for (var _i10 = 0, _l10 = indices.length; _i10 < _l10; _i10 += 2) {\n                renderList.pushLine(indices[_i10], indices[_i10 + 1]);\n              }\n            } else {\n              var step = object.isLineSegments ? 2 : 1;\n\n              for (var _i11 = 0, _l11 = positions.length / 3 - 1; _i11 < _l11; _i11 += step) {\n                renderList.pushLine(_i11, _i11 + 1);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isPoints) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        } else if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (var _i12 = 0, _l12 = positions.length; _i12 < _l12; _i12 += 3) {\n              _vector4.set(positions[_i12], positions[_i12 + 1], positions[_i12 + 2], 1);\n\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        }\n      } else if (object.isSprite) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\n        _vector4.applyMatrix4(_viewProjectionMatrix);\n\n        pushPoint(_vector4, object, camera);\n      }\n    }\n\n    if (sortElements === true) {\n      _renderData.elements.sort(painterSort);\n    }\n\n    return _renderData;\n  };\n\n  function pushPoint(_vector4, object, camera) {\n    var invW = 1 / _vector4.w;\n    _vector4.z *= invW;\n\n    if (_vector4.z >= -1 && _vector4.z <= 1) {\n      _sprite = getNextSpriteInPool();\n      _sprite.id = object.id;\n      _sprite.x = _vector4.x * invW;\n      _sprite.y = _vector4.y * invW;\n      _sprite.z = _vector4.z;\n      _sprite.renderOrder = object.renderOrder;\n      _sprite.object = object;\n      _sprite.rotation = object.rotation;\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n      _sprite.material = object.material;\n\n      _renderData.elements.push(_sprite);\n    }\n  } // Pools\n\n\n  function getNextObjectInPool() {\n    if (_objectCount === _objectPoolLength) {\n      var object = new RenderableObject();\n\n      _objectPool.push(object);\n\n      _objectPoolLength++;\n      _objectCount++;\n      return object;\n    }\n\n    return _objectPool[_objectCount++];\n  }\n\n  function getNextVertexInPool() {\n    if (_vertexCount === _vertexPoolLength) {\n      var vertex = new RenderableVertex();\n\n      _vertexPool.push(vertex);\n\n      _vertexPoolLength++;\n      _vertexCount++;\n      return vertex;\n    }\n\n    return _vertexPool[_vertexCount++];\n  }\n\n  function getNextFaceInPool() {\n    if (_faceCount === _facePoolLength) {\n      var face = new RenderableFace();\n\n      _facePool.push(face);\n\n      _facePoolLength++;\n      _faceCount++;\n      return face;\n    }\n\n    return _facePool[_faceCount++];\n  }\n\n  function getNextLineInPool() {\n    if (_lineCount === _linePoolLength) {\n      var line = new RenderableLine();\n\n      _linePool.push(line);\n\n      _linePoolLength++;\n      _lineCount++;\n      return line;\n    }\n\n    return _linePool[_lineCount++];\n  }\n\n  function getNextSpriteInPool() {\n    if (_spriteCount === _spritePoolLength) {\n      var sprite = new RenderableSprite();\n\n      _spritePool.push(sprite);\n\n      _spritePoolLength++;\n      _spriteCount++;\n      return sprite;\n    }\n\n    return _spritePool[_spriteCount++];\n  } //\n\n\n  function painterSort(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else if (a.id !== b.id) {\n      return a.id - b.id;\n    } else {\n      return 0;\n    }\n  }\n\n  function clipLine(s1, s2) {\n    var alpha1 = 0,\n        alpha2 = 1,\n        // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n    // Z = -1 and Z = +1, respectively.\n    bc1near = s1.z + s1.w,\n        bc2near = s2.z + s2.w,\n        bc1far = -s1.z + s1.w,\n        bc2far = -s2.z + s2.w;\n\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n      // Both vertices lie entirely within all clip planes.\n      return true;\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n      // Both vertices lie entirely outside one of the clip planes.\n      return false;\n    } else {\n      // The line segment spans at least one clip plane.\n      if (bc1near < 0) {\n        // v1 lies outside the near plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n      } else if (bc2near < 0) {\n        // v2 lies outside the near plane, v1 inside\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n      }\n\n      if (bc1far < 0) {\n        // v1 lies outside the far plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n      } else if (bc2far < 0) {\n        // v2 lies outside the far plane, v2 inside\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n      }\n\n      if (alpha2 < alpha1) {\n        // The line segment spans two boundaries, but is outside both of them.\n        // (This can't happen when we're only clipping against just near/far but good\n        //  to leave the check here for future usage if other clip planes are added.)\n        return false;\n      } else {\n        // Update the s1 and s2 vertices to match the clipped line segment.\n        s1.lerp(s2, alpha1);\n        s2.lerp(s1, 1 - alpha2);\n        return true;\n      }\n    }\n  }\n};\n\nexport { Projector, RenderableFace, RenderableLine, RenderableObject, RenderableSprite, RenderableVertex };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/renderers/Projector.js"],"names":["Vector3","Color","Vector2","Vector4","Box3","Matrix4","Frustum","Matrix3","DoubleSide","RenderableObject","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","vertexNormalsModel","vertexNormalsLength","color","material","uvs","position","positionWorld","positionScreen","visible","prototype","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","_boundingBox","_points3","Array","_viewMatrix","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_frustum","projectVector","vector","camera","console","warn","project","unprojectVector","unproject","pickingRay","error","RenderList","normals","colors","normalMatrix","setObject","value","getNormalMatrix","matrixWorld","length","projectVertex","applyMatrix4","invW","w","pushVertex","getNextVertexInPool","set","pushNormal","push","pushColor","r","g","b","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","a","clipLine","multiplyScalar","getNextLineInPool","Math","max","fromArray","pushTriangle","c","side","getNextFaceInPool","subVectors","cross","applyMatrix3","normalize","i","normal","arguments","uv","renderList","projectObject","isLight","isMesh","isLine","isPoints","frustumCulled","intersectsObject","addObject","isSprite","intersectsSprite","children","l","getNextObjectInPool","setFromMatrixPosition","projectScene","scene","sortObjects","sortElements","autoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","projectionMatrix","setFromProjectionMatrix","sort","painterSort","o","ol","geometry","isBufferGeometry","isMultiMaterial","isArray","attributes","groups","undefined","positions","array","morphTargets","morphAttributes","morphTargetsRelative","morphInfluences","morphTargetInfluences","t","tl","influence","target","getX","getY","getZ","index","indices","group","materialIndex","start","count","isGeometry","step","isLineSegments","pushPoint","modelViewMatrix","getNextSpriteInPool","abs","face","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","min","lerp"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CC,IAA3C,EAAiDC,OAAjD,EAA0DC,OAA1D,EAAmEC,OAAnE,EAA4EC,UAA5E,QAA8F,OAA9F;;AAEA,IAAIC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAY;AACjC,OAAKC,EAAL,GAAU,CAAV;AACA,OAAKC,MAAL,GAAc,IAAd;AACA,OAAKC,CAAL,GAAS,CAAT;AACA,OAAKC,WAAL,GAAmB,CAAnB;AACD,CALD,C,CAKG;;;AAGH,IAAIC,cAAc,GAAG,SAAjBA,cAAiB,GAAY;AAC/B,OAAKJ,EAAL,GAAU,CAAV;AACA,OAAKK,EAAL,GAAU,IAAIC,gBAAJ,EAAV;AACA,OAAKC,EAAL,GAAU,IAAID,gBAAJ,EAAV;AACA,OAAKE,EAAL,GAAU,IAAIF,gBAAJ,EAAV;AACA,OAAKG,WAAL,GAAmB,IAAInB,OAAJ,EAAnB;AACA,OAAKoB,kBAAL,GAA0B,CAAC,IAAIpB,OAAJ,EAAD,EAAgB,IAAIA,OAAJ,EAAhB,EAA+B,IAAIA,OAAJ,EAA/B,CAA1B;AACA,OAAKqB,mBAAL,GAA2B,CAA3B;AACA,OAAKC,KAAL,GAAa,IAAIrB,KAAJ,EAAb;AACA,OAAKsB,QAAL,GAAgB,IAAhB;AACA,OAAKC,GAAL,GAAW,CAAC,IAAItB,OAAJ,EAAD,EAAgB,IAAIA,OAAJ,EAAhB,EAA+B,IAAIA,OAAJ,EAA/B,CAAX;AACA,OAAKU,CAAL,GAAS,CAAT;AACA,OAAKC,WAAL,GAAmB,CAAnB;AACD,CAbD,C,CAaG;;;AAGH,IAAIG,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAY;AACjC,OAAKS,QAAL,GAAgB,IAAIzB,OAAJ,EAAhB;AACA,OAAK0B,aAAL,GAAqB,IAAI1B,OAAJ,EAArB;AACA,OAAK2B,cAAL,GAAsB,IAAIxB,OAAJ,EAAtB;AACA,OAAKyB,OAAL,GAAe,IAAf;AACD,CALD;;AAOAZ,gBAAgB,CAACa,SAAjB,CAA2BC,IAA3B,GAAkC,UAAUC,MAAV,EAAkB;AAClD,OAAKL,aAAL,CAAmBI,IAAnB,CAAwBC,MAAM,CAACL,aAA/B;AACA,OAAKC,cAAL,CAAoBG,IAApB,CAAyBC,MAAM,CAACJ,cAAhC;AACD,CAHD,C,CAGG;;;AAGH,IAAIK,cAAc,GAAG,SAAjBA,cAAiB,GAAY;AAC/B,OAAKtB,EAAL,GAAU,CAAV;AACA,OAAKK,EAAL,GAAU,IAAIC,gBAAJ,EAAV;AACA,OAAKC,EAAL,GAAU,IAAID,gBAAJ,EAAV;AACA,OAAKiB,YAAL,GAAoB,CAAC,IAAIhC,KAAJ,EAAD,EAAc,IAAIA,KAAJ,EAAd,CAApB;AACA,OAAKsB,QAAL,GAAgB,IAAhB;AACA,OAAKX,CAAL,GAAS,CAAT;AACA,OAAKC,WAAL,GAAmB,CAAnB;AACD,CARD,C,CAQG;;;AAGH,IAAIqB,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAY;AACjC,OAAKxB,EAAL,GAAU,CAAV;AACA,OAAKC,MAAL,GAAc,IAAd;AACA,OAAKwB,CAAL,GAAS,CAAT;AACA,OAAKC,CAAL,GAAS,CAAT;AACA,OAAKxB,CAAL,GAAS,CAAT;AACA,OAAKyB,QAAL,GAAgB,CAAhB;AACA,OAAKC,KAAL,GAAa,IAAIpC,OAAJ,EAAb;AACA,OAAKqB,QAAL,GAAgB,IAAhB;AACA,OAAKV,WAAL,GAAmB,CAAnB;AACD,CAVD,C,CAUG;;;AAGH,IAAI0B,SAAS,GAAG,SAAZA,SAAY,GAAY;AAC1B,MAAIC,OAAJ;AAAA,MACIC,YADJ;AAAA,MAEIC,WAAW,GAAG,EAFlB;AAAA,MAGIC,iBAAiB,GAAG,CAHxB;AAAA,MAIIC,OAJJ;AAAA,MAKIC,YALJ;AAAA,MAMIC,WAAW,GAAG,EANlB;AAAA,MAOIC,iBAAiB,GAAG,CAPxB;AAAA,MAQIC,KARJ;AAAA,MASIC,UATJ;AAAA,MAUIC,SAAS,GAAG,EAVhB;AAAA,MAWIC,eAAe,GAAG,CAXtB;AAAA,MAYIC,KAZJ;AAAA,MAaIC,UAbJ;AAAA,MAcIC,SAAS,GAAG,EAdhB;AAAA,MAeIC,eAAe,GAAG,CAftB;AAAA,MAgBIC,OAhBJ;AAAA,MAiBIC,YAjBJ;AAAA,MAkBIC,WAAW,GAAG,EAlBlB;AAAA,MAmBIC,iBAAiB,GAAG,CAnBxB;AAAA,MAoBIC,WAAW,GAAG;AAChBC,IAAAA,OAAO,EAAE,EADO;AAEhBC,IAAAA,MAAM,EAAE,EAFQ;AAGhBC,IAAAA,QAAQ,EAAE;AAHM,GApBlB;AAAA,MAyBIC,QAAQ,GAAG,IAAIhE,OAAJ,EAzBf;AAAA,MA0BIiE,QAAQ,GAAG,IAAI9D,OAAJ,EA1Bf;AAAA,MA2BI+D,QAAQ,GAAG,IAAI9D,IAAJ,CAAS,IAAIJ,OAAJ,CAAY,CAAC,CAAb,EAAgB,CAAC,CAAjB,EAAoB,CAAC,CAArB,CAAT,EAAkC,IAAIA,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAlC,CA3Bf;AAAA,MA4BImE,YAAY,GAAG,IAAI/D,IAAJ,EA5BnB;AAAA,MA6BIgE,QAAQ,GAAG,IAAIC,KAAJ,CAAU,CAAV,CA7Bf;AAAA,MA8BIC,WAAW,GAAG,IAAIjE,OAAJ,EA9BlB;AAAA,MA+BIkE,qBAAqB,GAAG,IAAIlE,OAAJ,EA/B5B;AAAA,MAgCImE,YAhCJ;AAAA,MAiCIC,0BAA0B,GAAG,IAAIpE,OAAJ,EAjCjC;AAAA,MAkCIqE,QAAQ,GAAG,IAAIpE,OAAJ,EAlCf,CAD0B,CAmCI;;;AAG9B,OAAKqE,aAAL,GAAqB,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AAC7CC,IAAAA,OAAO,CAACC,IAAR,CAAa,4DAAb;AACAH,IAAAA,MAAM,CAACI,OAAP,CAAeH,MAAf;AACD,GAHD;;AAKA,OAAKI,eAAL,GAAuB,UAAUL,MAAV,EAAkBC,MAAlB,EAA0B;AAC/CC,IAAAA,OAAO,CAACC,IAAR,CAAa,gEAAb;AACAH,IAAAA,MAAM,CAACM,SAAP,CAAiBL,MAAjB;AACD,GAHD;;AAKA,OAAKM,UAAL,GAAkB,YAAY;AAC5BL,IAAAA,OAAO,CAACM,KAAR,CAAc,kEAAd;AACD,GAFD,CAhD0B,CAkDvB;;;AAGH,MAAIC,UAAU,GAAG,SAAbA,UAAa,GAAY;AAC3B,QAAIC,OAAO,GAAG,EAAd;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAI/D,GAAG,GAAG,EAAV;AACA,QAAIb,MAAM,GAAG,IAAb;AACA,QAAI6E,YAAY,GAAG,IAAIjF,OAAJ,EAAnB;;AAEA,aAASkF,SAAT,CAAmBC,KAAnB,EAA0B;AACxB/E,MAAAA,MAAM,GAAG+E,KAAT;AACAF,MAAAA,YAAY,CAACG,eAAb,CAA6BhF,MAAM,CAACiF,WAApC;AACAN,MAAAA,OAAO,CAACO,MAAR,GAAiB,CAAjB;AACAN,MAAAA,MAAM,CAACM,MAAP,GAAgB,CAAhB;AACArE,MAAAA,GAAG,CAACqE,MAAJ,GAAa,CAAb;AACD;;AAED,aAASC,aAAT,CAAuB/D,MAAvB,EAA+B;AAC7B,UAAIN,QAAQ,GAAGM,MAAM,CAACN,QAAtB;AACA,UAAIC,aAAa,GAAGK,MAAM,CAACL,aAA3B;AACA,UAAIC,cAAc,GAAGI,MAAM,CAACJ,cAA5B;AACAD,MAAAA,aAAa,CAACI,IAAd,CAAmBL,QAAnB,EAA6BsE,YAA7B,CAA0CvB,YAA1C;AACA7C,MAAAA,cAAc,CAACG,IAAf,CAAoBJ,aAApB,EAAmCqE,YAAnC,CAAgDxB,qBAAhD;AACA,UAAIyB,IAAI,GAAG,IAAIrE,cAAc,CAACsE,CAA9B;AACAtE,MAAAA,cAAc,CAACQ,CAAf,IAAoB6D,IAApB;AACArE,MAAAA,cAAc,CAACS,CAAf,IAAoB4D,IAApB;AACArE,MAAAA,cAAc,CAACf,CAAf,IAAoBoF,IAApB;AACAjE,MAAAA,MAAM,CAACH,OAAP,GAAiBD,cAAc,CAACQ,CAAf,IAAoB,CAAC,CAArB,IAA0BR,cAAc,CAACQ,CAAf,IAAoB,CAA9C,IAAmDR,cAAc,CAACS,CAAf,IAAoB,CAAC,CAAxE,IAA6ET,cAAc,CAACS,CAAf,IAAoB,CAAjG,IAAsGT,cAAc,CAACf,CAAf,IAAoB,CAAC,CAA3H,IAAgIe,cAAc,CAACf,CAAf,IAAoB,CAArK;AACD;;AAED,aAASsF,UAAT,CAAoB/D,CAApB,EAAuBC,CAAvB,EAA0BxB,CAA1B,EAA6B;AAC3BgC,MAAAA,OAAO,GAAGuD,mBAAmB,EAA7B;;AAEAvD,MAAAA,OAAO,CAACnB,QAAR,CAAiB2E,GAAjB,CAAqBjE,CAArB,EAAwBC,CAAxB,EAA2BxB,CAA3B;;AAEAkF,MAAAA,aAAa,CAAClD,OAAD,CAAb;AACD;;AAED,aAASyD,UAAT,CAAoBlE,CAApB,EAAuBC,CAAvB,EAA0BxB,CAA1B,EAA6B;AAC3B0E,MAAAA,OAAO,CAACgB,IAAR,CAAanE,CAAb,EAAgBC,CAAhB,EAAmBxB,CAAnB;AACD;;AAED,aAAS2F,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC1BnB,MAAAA,MAAM,CAACe,IAAP,CAAYE,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB;AACD;;AAED,aAASC,MAAT,CAAgBxE,CAAhB,EAAmBC,CAAnB,EAAsB;AACpBZ,MAAAA,GAAG,CAAC8E,IAAJ,CAASnE,CAAT,EAAYC,CAAZ;AACD;;AAED,aAASwE,uBAAT,CAAiC7F,EAAjC,EAAqCE,EAArC,EAAyCC,EAAzC,EAA6C;AAC3C,UAAIH,EAAE,CAACa,OAAH,KAAe,IAAf,IAAuBX,EAAE,CAACW,OAAH,KAAe,IAAtC,IAA8CV,EAAE,CAACU,OAAH,KAAe,IAAjE,EAAuE,OAAO,IAAP;AACvEwC,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcrD,EAAE,CAACY,cAAjB;AACAyC,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcnD,EAAE,CAACU,cAAjB;AACAyC,MAAAA,QAAQ,CAAC,CAAD,CAAR,GAAclD,EAAE,CAACS,cAAjB;AACA,aAAOuC,QAAQ,CAAC2C,aAAT,CAAuB1C,YAAY,CAAC2C,aAAb,CAA2B1C,QAA3B,CAAvB,CAAP;AACD;;AAED,aAAS2C,oBAAT,CAA8BhG,EAA9B,EAAkCE,EAAlC,EAAsCC,EAAtC,EAA0C;AACxC,aAAO,CAACA,EAAE,CAACS,cAAH,CAAkBQ,CAAlB,GAAsBpB,EAAE,CAACY,cAAH,CAAkBQ,CAAzC,KAA+ClB,EAAE,CAACU,cAAH,CAAkBS,CAAlB,GAAsBrB,EAAE,CAACY,cAAH,CAAkBS,CAAvF,IAA4F,CAAClB,EAAE,CAACS,cAAH,CAAkBS,CAAlB,GAAsBrB,EAAE,CAACY,cAAH,CAAkBS,CAAzC,KAA+CnB,EAAE,CAACU,cAAH,CAAkBQ,CAAlB,GAAsBpB,EAAE,CAACY,cAAH,CAAkBQ,CAAvF,CAA5F,GAAwL,CAA/L;AACD;;AAED,aAAS6E,QAAT,CAAkBC,CAAlB,EAAqBP,CAArB,EAAwB;AACtB,UAAI3F,EAAE,GAAG+B,WAAW,CAACmE,CAAD,CAApB;AACA,UAAIhG,EAAE,GAAG6B,WAAW,CAAC4D,CAAD,CAApB,CAFsB,CAEG;;AAEzB3F,MAAAA,EAAE,CAACY,cAAH,CAAkBG,IAAlB,CAAuBf,EAAE,CAACU,QAA1B,EAAoCsE,YAApC,CAAiDtB,0BAAjD;AACAxD,MAAAA,EAAE,CAACU,cAAH,CAAkBG,IAAlB,CAAuBb,EAAE,CAACQ,QAA1B,EAAoCsE,YAApC,CAAiDtB,0BAAjD;;AAEA,UAAIyC,QAAQ,CAACnG,EAAE,CAACY,cAAJ,EAAoBV,EAAE,CAACU,cAAvB,CAAR,KAAmD,IAAvD,EAA6D;AAC3D;AACAZ,QAAAA,EAAE,CAACY,cAAH,CAAkBwF,cAAlB,CAAiC,IAAIpG,EAAE,CAACY,cAAH,CAAkBsE,CAAvD;AACAhF,QAAAA,EAAE,CAACU,cAAH,CAAkBwF,cAAlB,CAAiC,IAAIlG,EAAE,CAACU,cAAH,CAAkBsE,CAAvD;AACA7C,QAAAA,KAAK,GAAGgE,iBAAiB,EAAzB;AACAhE,QAAAA,KAAK,CAAC1C,EAAN,GAAWC,MAAM,CAACD,EAAlB;;AAEA0C,QAAAA,KAAK,CAACrC,EAAN,CAASe,IAAT,CAAcf,EAAd;;AAEAqC,QAAAA,KAAK,CAACnC,EAAN,CAASa,IAAT,CAAcb,EAAd;;AAEAmC,QAAAA,KAAK,CAACxC,CAAN,GAAUyG,IAAI,CAACC,GAAL,CAASvG,EAAE,CAACY,cAAH,CAAkBf,CAA3B,EAA8BK,EAAE,CAACU,cAAH,CAAkBf,CAAhD,CAAV;AACAwC,QAAAA,KAAK,CAACvC,WAAN,GAAoBF,MAAM,CAACE,WAA3B;AACAuC,QAAAA,KAAK,CAAC7B,QAAN,GAAiBZ,MAAM,CAACY,QAAxB;;AAEA,YAAIZ,MAAM,CAACY,QAAP,CAAgBU,YAApB,EAAkC;AAChCmB,UAAAA,KAAK,CAACnB,YAAN,CAAmB,CAAnB,EAAsBsF,SAAtB,CAAgChC,MAAhC,EAAwC0B,CAAC,GAAG,CAA5C;;AAEA7D,UAAAA,KAAK,CAACnB,YAAN,CAAmB,CAAnB,EAAsBsF,SAAtB,CAAgChC,MAAhC,EAAwCmB,CAAC,GAAG,CAA5C;AACD;;AAED9C,QAAAA,WAAW,CAACG,QAAZ,CAAqBuC,IAArB,CAA0BlD,KAA1B;AACD;AACF;;AAED,aAASoE,YAAT,CAAsBP,CAAtB,EAAyBP,CAAzB,EAA4Be,CAA5B,EAA+BlG,QAA/B,EAAyC;AACvC,UAAIR,EAAE,GAAG+B,WAAW,CAACmE,CAAD,CAApB;AACA,UAAIhG,EAAE,GAAG6B,WAAW,CAAC4D,CAAD,CAApB;AACA,UAAIxF,EAAE,GAAG4B,WAAW,CAAC2E,CAAD,CAApB;AACA,UAAIb,uBAAuB,CAAC7F,EAAD,EAAKE,EAAL,EAASC,EAAT,CAAvB,KAAwC,KAA5C,EAAmD;;AAEnD,UAAIK,QAAQ,CAACmG,IAAT,KAAkBlH,UAAlB,IAAgCuG,oBAAoB,CAAChG,EAAD,EAAKE,EAAL,EAASC,EAAT,CAApB,KAAqC,IAAzE,EAA+E;AAC7E8B,QAAAA,KAAK,GAAG2E,iBAAiB,EAAzB;AACA3E,QAAAA,KAAK,CAACtC,EAAN,GAAWC,MAAM,CAACD,EAAlB;;AAEAsC,QAAAA,KAAK,CAACjC,EAAN,CAASe,IAAT,CAAcf,EAAd;;AAEAiC,QAAAA,KAAK,CAAC/B,EAAN,CAASa,IAAT,CAAcb,EAAd;;AAEA+B,QAAAA,KAAK,CAAC9B,EAAN,CAASY,IAAT,CAAcZ,EAAd;;AAEA8B,QAAAA,KAAK,CAACpC,CAAN,GAAU,CAACG,EAAE,CAACY,cAAH,CAAkBf,CAAlB,GAAsBK,EAAE,CAACU,cAAH,CAAkBf,CAAxC,GAA4CM,EAAE,CAACS,cAAH,CAAkBf,CAA/D,IAAoE,CAA9E;AACAoC,QAAAA,KAAK,CAACnC,WAAN,GAAoBF,MAAM,CAACE,WAA3B,CAX6E,CAWrC;;AAExCmD,QAAAA,QAAQ,CAAC4D,UAAT,CAAoB1G,EAAE,CAACO,QAAvB,EAAiCR,EAAE,CAACQ,QAApC;;AAEAwC,QAAAA,QAAQ,CAAC2D,UAAT,CAAoB7G,EAAE,CAACU,QAAvB,EAAiCR,EAAE,CAACQ,QAApC;;AAEAuC,QAAAA,QAAQ,CAAC6D,KAAT,CAAe5D,QAAf;;AAEAjB,QAAAA,KAAK,CAAC7B,WAAN,CAAkBW,IAAlB,CAAuBkC,QAAvB;;AAEAhB,QAAAA,KAAK,CAAC7B,WAAN,CAAkB2G,YAAlB,CAA+BtC,YAA/B,EAA6CuC,SAA7C;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,cAAIC,MAAM,GAAGjF,KAAK,CAAC5B,kBAAN,CAAyB4G,CAAzB,CAAb;AACAC,UAAAA,MAAM,CAACV,SAAP,CAAiBjC,OAAjB,EAA0B4C,SAAS,CAACF,CAAD,CAAT,GAAe,CAAzC;AACAC,UAAAA,MAAM,CAACH,YAAP,CAAoBtC,YAApB,EAAkCuC,SAAlC;AACA,cAAII,EAAE,GAAGnF,KAAK,CAACxB,GAAN,CAAUwG,CAAV,CAAT;AACAG,UAAAA,EAAE,CAACZ,SAAH,CAAa/F,GAAb,EAAkB0G,SAAS,CAACF,CAAD,CAAT,GAAe,CAAjC;AACD;;AAEDhF,QAAAA,KAAK,CAAC3B,mBAAN,GAA4B,CAA5B;AACA2B,QAAAA,KAAK,CAACzB,QAAN,GAAiBA,QAAjB;;AAEA,YAAIA,QAAQ,CAACU,YAAb,EAA2B;AACzBe,UAAAA,KAAK,CAAC1B,KAAN,CAAYiG,SAAZ,CAAsBhC,MAAtB,EAA8B0B,CAAC,GAAG,CAAlC;AACD;;AAEDrD,QAAAA,WAAW,CAACG,QAAZ,CAAqBuC,IAArB,CAA0BtD,KAA1B;AACD;AACF;;AAED,WAAO;AACLyC,MAAAA,SAAS,EAAEA,SADN;AAELK,MAAAA,aAAa,EAAEA,aAFV;AAGLc,MAAAA,uBAAuB,EAAEA,uBAHpB;AAILG,MAAAA,oBAAoB,EAAEA,oBAJjB;AAKLb,MAAAA,UAAU,EAAEA,UALP;AAMLG,MAAAA,UAAU,EAAEA,UANP;AAOLE,MAAAA,SAAS,EAAEA,SAPN;AAQLI,MAAAA,MAAM,EAAEA,MARH;AASLK,MAAAA,QAAQ,EAAEA,QATL;AAULQ,MAAAA,YAAY,EAAEA;AAVT,KAAP;AAYD,GAxJD;;AA0JA,MAAIY,UAAU,GAAG,IAAI/C,UAAJ,EAAjB;;AAEA,WAASgD,aAAT,CAAuB1H,MAAvB,EAA+B;AAC7B,QAAIA,MAAM,CAACiB,OAAP,KAAmB,KAAvB,EAA8B;;AAE9B,QAAIjB,MAAM,CAAC2H,OAAX,EAAoB;AAClB1E,MAAAA,WAAW,CAACE,MAAZ,CAAmBwC,IAAnB,CAAwB3F,MAAxB;AACD,KAFD,MAEO,IAAIA,MAAM,CAAC4H,MAAP,IAAiB5H,MAAM,CAAC6H,MAAxB,IAAkC7H,MAAM,CAAC8H,QAA7C,EAAuD;AAC5D,UAAI9H,MAAM,CAACY,QAAP,CAAgBK,OAAhB,KAA4B,KAAhC,EAAuC;AACvC,UAAIjB,MAAM,CAAC+H,aAAP,KAAyB,IAAzB,IAAiChE,QAAQ,CAACiE,gBAAT,CAA0BhI,MAA1B,MAAsC,KAA3E,EAAkF;AAClFiI,MAAAA,SAAS,CAACjI,MAAD,CAAT;AACD,KAJM,MAIA,IAAIA,MAAM,CAACkI,QAAX,EAAqB;AAC1B,UAAIlI,MAAM,CAACY,QAAP,CAAgBK,OAAhB,KAA4B,KAAhC,EAAuC;AACvC,UAAIjB,MAAM,CAAC+H,aAAP,KAAyB,IAAzB,IAAiChE,QAAQ,CAACoE,gBAAT,CAA0BnI,MAA1B,MAAsC,KAA3E,EAAkF;AAClFiI,MAAAA,SAAS,CAACjI,MAAD,CAAT;AACD;;AAED,QAAIoI,QAAQ,GAAGpI,MAAM,CAACoI,QAAtB;;AAEA,SAAK,IAAIf,CAAC,GAAG,CAAR,EAAWgB,CAAC,GAAGD,QAAQ,CAAClD,MAA7B,EAAqCmC,CAAC,GAAGgB,CAAzC,EAA4ChB,CAAC,EAA7C,EAAiD;AAC/CK,MAAAA,aAAa,CAACU,QAAQ,CAACf,CAAD,CAAT,CAAb;AACD;AACF;;AAED,WAASY,SAAT,CAAmBjI,MAAnB,EAA2B;AACzB6B,IAAAA,OAAO,GAAGyG,mBAAmB,EAA7B;AACAzG,IAAAA,OAAO,CAAC9B,EAAR,GAAaC,MAAM,CAACD,EAApB;AACA8B,IAAAA,OAAO,CAAC7B,MAAR,GAAiBA,MAAjB;;AAEAqD,IAAAA,QAAQ,CAACkF,qBAAT,CAA+BvI,MAAM,CAACiF,WAAtC;;AAEA5B,IAAAA,QAAQ,CAAC+B,YAAT,CAAsBxB,qBAAtB;;AAEA/B,IAAAA,OAAO,CAAC5B,CAAR,GAAYoD,QAAQ,CAACpD,CAArB;AACA4B,IAAAA,OAAO,CAAC3B,WAAR,GAAsBF,MAAM,CAACE,WAA7B;;AAEA+C,IAAAA,WAAW,CAACC,OAAZ,CAAoByC,IAApB,CAAyB9D,OAAzB;AACD;;AAED,OAAK2G,YAAL,GAAoB,UAAUC,KAAV,EAAiBvE,MAAjB,EAAyBwE,WAAzB,EAAsCC,YAAtC,EAAoD;AACtErG,IAAAA,UAAU,GAAG,CAAb;AACAI,IAAAA,UAAU,GAAG,CAAb;AACAI,IAAAA,YAAY,GAAG,CAAf;AACAG,IAAAA,WAAW,CAACG,QAAZ,CAAqB8B,MAArB,GAA8B,CAA9B;AACA,QAAIuD,KAAK,CAACG,UAAN,KAAqB,IAAzB,EAA+BH,KAAK,CAACI,iBAAN;AAC/B,QAAI3E,MAAM,CAAC4E,MAAP,KAAkB,IAAtB,EAA4B5E,MAAM,CAAC2E,iBAAP;;AAE5BlF,IAAAA,WAAW,CAACxC,IAAZ,CAAiB+C,MAAM,CAAC6E,kBAAxB;;AAEAnF,IAAAA,qBAAqB,CAACoF,gBAAtB,CAAuC9E,MAAM,CAAC+E,gBAA9C,EAAgEtF,WAAhE;;AAEAI,IAAAA,QAAQ,CAACmF,uBAAT,CAAiCtF,qBAAjC,EAZsE,CAYb;;;AAGzD9B,IAAAA,YAAY,GAAG,CAAf;AACAmB,IAAAA,WAAW,CAACC,OAAZ,CAAoBgC,MAApB,GAA6B,CAA7B;AACAjC,IAAAA,WAAW,CAACE,MAAZ,CAAmB+B,MAAnB,GAA4B,CAA5B;AACAwC,IAAAA,aAAa,CAACe,KAAD,CAAb;;AAEA,QAAIC,WAAW,KAAK,IAApB,EAA0B;AACxBzF,MAAAA,WAAW,CAACC,OAAZ,CAAoBiG,IAApB,CAAyBC,WAAzB;AACD,KAtBqE,CAsBpE;;;AAGF,QAAIlG,OAAO,GAAGD,WAAW,CAACC,OAA1B;;AAEA,SAAK,IAAImG,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGpG,OAAO,CAACgC,MAA7B,EAAqCmE,CAAC,GAAGC,EAAzC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,UAAIrJ,MAAM,GAAGkD,OAAO,CAACmG,CAAD,CAAP,CAAWrJ,MAAxB;AACA,UAAIuJ,QAAQ,GAAGvJ,MAAM,CAACuJ,QAAtB;AACA9B,MAAAA,UAAU,CAAC3C,SAAX,CAAqB9E,MAArB;AACA6D,MAAAA,YAAY,GAAG7D,MAAM,CAACiF,WAAtB;AACA/C,MAAAA,YAAY,GAAG,CAAf;;AAEA,UAAIlC,MAAM,CAAC4H,MAAX,EAAmB;AACjB,YAAI2B,QAAQ,CAACC,gBAAb,EAA+B;AAC7B,cAAI5I,QAAQ,GAAGZ,MAAM,CAACY,QAAtB;AACA,cAAI6I,eAAe,GAAG/F,KAAK,CAACgG,OAAN,CAAc9I,QAAd,CAAtB;AACA,cAAI+I,UAAU,GAAGJ,QAAQ,CAACI,UAA1B;AACA,cAAIC,MAAM,GAAGL,QAAQ,CAACK,MAAtB;AACA,cAAID,UAAU,CAAC7I,QAAX,KAAwB+I,SAA5B,EAAuC;AACvC,cAAIC,SAAS,GAAGH,UAAU,CAAC7I,QAAX,CAAoBiJ,KAApC;;AAEA,eAAK,IAAI1C,CAAC,GAAG,CAAR,EAAWgB,CAAC,GAAGyB,SAAS,CAAC5E,MAA9B,EAAsCmC,CAAC,GAAGgB,CAA1C,EAA6ChB,CAAC,IAAI,CAAlD,EAAqD;AACnD,gBAAI7F,CAAC,GAAGsI,SAAS,CAACzC,CAAD,CAAjB;AACA,gBAAI5F,CAAC,GAAGqI,SAAS,CAACzC,CAAC,GAAG,CAAL,CAAjB;AACA,gBAAIpH,CAAC,GAAG6J,SAAS,CAACzC,CAAC,GAAG,CAAL,CAAjB;;AAEA,gBAAIzG,QAAQ,CAACoJ,YAAT,KAA0B,IAA9B,EAAoC;AAClC,kBAAIA,YAAY,GAAGT,QAAQ,CAACU,eAAT,CAAyBnJ,QAA5C;AACA,kBAAIoJ,oBAAoB,GAAGX,QAAQ,CAACW,oBAApC;AACA,kBAAIC,eAAe,GAAGnK,MAAM,CAACoK,qBAA7B;;AAEA,mBAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGN,YAAY,CAAC9E,MAAlC,EAA0CmF,CAAC,GAAGC,EAA9C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,oBAAIE,SAAS,GAAGJ,eAAe,CAACE,CAAD,CAA/B;AACA,oBAAIE,SAAS,KAAK,CAAlB,EAAqB;AACrB,oBAAIC,MAAM,GAAGR,YAAY,CAACK,CAAD,CAAzB;;AAEA,oBAAIH,oBAAJ,EAA0B;AACxB1I,kBAAAA,CAAC,IAAIgJ,MAAM,CAACC,IAAP,CAAYpD,CAAC,GAAG,CAAhB,IAAqBkD,SAA1B;AACA9I,kBAAAA,CAAC,IAAI+I,MAAM,CAACE,IAAP,CAAYrD,CAAC,GAAG,CAAhB,IAAqBkD,SAA1B;AACAtK,kBAAAA,CAAC,IAAIuK,MAAM,CAACG,IAAP,CAAYtD,CAAC,GAAG,CAAhB,IAAqBkD,SAA1B;AACD,iBAJD,MAIO;AACL/I,kBAAAA,CAAC,IAAI,CAACgJ,MAAM,CAACC,IAAP,CAAYpD,CAAC,GAAG,CAAhB,IAAqByC,SAAS,CAACzC,CAAD,CAA/B,IAAsCkD,SAA3C;AACA9I,kBAAAA,CAAC,IAAI,CAAC+I,MAAM,CAACE,IAAP,CAAYrD,CAAC,GAAG,CAAhB,IAAqByC,SAAS,CAACzC,CAAC,GAAG,CAAL,CAA/B,IAA0CkD,SAA/C;AACAtK,kBAAAA,CAAC,IAAI,CAACuK,MAAM,CAACG,IAAP,CAAYtD,CAAC,GAAG,CAAhB,IAAqByC,SAAS,CAACzC,CAAC,GAAG,CAAL,CAA/B,IAA0CkD,SAA/C;AACD;AACF;AACF;;AAED9C,YAAAA,UAAU,CAAClC,UAAX,CAAsB/D,CAAtB,EAAyBC,CAAzB,EAA4BxB,CAA5B;AACD;;AAED,cAAI0J,UAAU,CAACrC,MAAX,KAAsBuC,SAA1B,EAAqC;AACnC,gBAAIlF,OAAO,GAAGgF,UAAU,CAACrC,MAAX,CAAkByC,KAAhC;;AAEA,iBAAK,IAAI1C,EAAC,GAAG,CAAR,EAAWgB,EAAC,GAAG1D,OAAO,CAACO,MAA5B,EAAoCmC,EAAC,GAAGgB,EAAxC,EAA2ChB,EAAC,IAAI,CAAhD,EAAmD;AACjDI,cAAAA,UAAU,CAAC/B,UAAX,CAAsBf,OAAO,CAAC0C,EAAD,CAA7B,EAAkC1C,OAAO,CAAC0C,EAAC,GAAG,CAAL,CAAzC,EAAkD1C,OAAO,CAAC0C,EAAC,GAAG,CAAL,CAAzD;AACD;AACF;;AAED,cAAIsC,UAAU,CAAChJ,KAAX,KAAqBkJ,SAAzB,EAAoC;AAClC,gBAAIjF,MAAM,GAAG+E,UAAU,CAAChJ,KAAX,CAAiBoJ,KAA9B;;AAEA,iBAAK,IAAI1C,GAAC,GAAG,CAAR,EAAWgB,GAAC,GAAGzD,MAAM,CAACM,MAA3B,EAAmCmC,GAAC,GAAGgB,GAAvC,EAA0ChB,GAAC,IAAI,CAA/C,EAAkD;AAChDI,cAAAA,UAAU,CAAC7B,SAAX,CAAqBhB,MAAM,CAACyC,GAAD,CAA3B,EAAgCzC,MAAM,CAACyC,GAAC,GAAG,CAAL,CAAtC,EAA+CzC,MAAM,CAACyC,GAAC,GAAG,CAAL,CAArD;AACD;AACF;;AAED,cAAIsC,UAAU,CAACnC,EAAX,KAAkBqC,SAAtB,EAAiC;AAC/B,gBAAIhJ,GAAG,GAAG8I,UAAU,CAACnC,EAAX,CAAcuC,KAAxB;;AAEA,iBAAK,IAAI1C,GAAC,GAAG,CAAR,EAAWgB,GAAC,GAAGxH,GAAG,CAACqE,MAAxB,EAAgCmC,GAAC,GAAGgB,GAApC,EAAuChB,GAAC,IAAI,CAA5C,EAA+C;AAC7CI,cAAAA,UAAU,CAACzB,MAAX,CAAkBnF,GAAG,CAACwG,GAAD,CAArB,EAA0BxG,GAAG,CAACwG,GAAC,GAAG,CAAL,CAA7B;AACD;AACF;;AAED,cAAIkC,QAAQ,CAACqB,KAAT,KAAmB,IAAvB,EAA6B;AAC3B,gBAAIC,OAAO,GAAGtB,QAAQ,CAACqB,KAAT,CAAeb,KAA7B;;AAEA,gBAAIH,MAAM,CAAC1E,MAAP,GAAgB,CAApB,EAAuB;AACrB,mBAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8D,MAAM,CAAC1E,MAA3B,EAAmCY,CAAC,EAApC,EAAwC;AACtC,oBAAIgF,KAAK,GAAGlB,MAAM,CAAC9D,CAAD,CAAlB;AACAlF,gBAAAA,QAAQ,GAAG6I,eAAe,KAAK,IAApB,GAA2BzJ,MAAM,CAACY,QAAP,CAAgBkK,KAAK,CAACC,aAAtB,CAA3B,GAAkE/K,MAAM,CAACY,QAApF;AACA,oBAAIA,QAAQ,KAAKiJ,SAAjB,EAA4B;;AAE5B,qBAAK,IAAIxC,GAAC,GAAGyD,KAAK,CAACE,KAAd,EAAqB3C,GAAC,GAAGyC,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACG,KAAlD,EAAyD5D,GAAC,GAAGgB,GAA7D,EAAgEhB,GAAC,IAAI,CAArE,EAAwE;AACtEI,kBAAAA,UAAU,CAACZ,YAAX,CAAwBgE,OAAO,CAACxD,GAAD,CAA/B,EAAoCwD,OAAO,CAACxD,GAAC,GAAG,CAAL,CAA3C,EAAoDwD,OAAO,CAACxD,GAAC,GAAG,CAAL,CAA3D,EAAoEzG,QAApE;AACD;AACF;AACF,aAVD,MAUO;AACL,mBAAK,IAAIyG,GAAC,GAAG,CAAR,EAAWgB,GAAC,GAAGwC,OAAO,CAAC3F,MAA5B,EAAoCmC,GAAC,GAAGgB,GAAxC,EAA2ChB,GAAC,IAAI,CAAhD,EAAmD;AACjDI,gBAAAA,UAAU,CAACZ,YAAX,CAAwBgE,OAAO,CAACxD,GAAD,CAA/B,EAAoCwD,OAAO,CAACxD,GAAC,GAAG,CAAL,CAA3C,EAAoDwD,OAAO,CAACxD,GAAC,GAAG,CAAL,CAA3D,EAAoEzG,QAApE;AACD;AACF;AACF,WAlBD,MAkBO;AACL,gBAAIgJ,MAAM,CAAC1E,MAAP,GAAgB,CAApB,EAAuB;AACrB,mBAAK,IAAIY,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG8D,MAAM,CAAC1E,MAA3B,EAAmCY,EAAC,EAApC,EAAwC;AACtC,oBAAIgF,KAAK,GAAGlB,MAAM,CAAC9D,EAAD,CAAlB;AACAlF,gBAAAA,QAAQ,GAAG6I,eAAe,KAAK,IAApB,GAA2BzJ,MAAM,CAACY,QAAP,CAAgBkK,KAAK,CAACC,aAAtB,CAA3B,GAAkE/K,MAAM,CAACY,QAApF;AACA,oBAAIA,QAAQ,KAAKiJ,SAAjB,EAA4B;;AAE5B,qBAAK,IAAIxC,GAAC,GAAGyD,KAAK,CAACE,KAAd,EAAqB3C,GAAC,GAAGyC,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACG,KAAlD,EAAyD5D,GAAC,GAAGgB,GAA7D,EAAgEhB,GAAC,IAAI,CAArE,EAAwE;AACtEI,kBAAAA,UAAU,CAACZ,YAAX,CAAwBQ,GAAxB,EAA2BA,GAAC,GAAG,CAA/B,EAAkCA,GAAC,GAAG,CAAtC,EAAyCzG,QAAzC;AACD;AACF;AACF,aAVD,MAUO;AACL,mBAAK,IAAIyG,GAAC,GAAG,CAAR,EAAWgB,GAAC,GAAGyB,SAAS,CAAC5E,MAAV,GAAmB,CAAvC,EAA0CmC,GAAC,GAAGgB,GAA9C,EAAiDhB,GAAC,IAAI,CAAtD,EAAyD;AACvDI,gBAAAA,UAAU,CAACZ,YAAX,CAAwBQ,GAAxB,EAA2BA,GAAC,GAAG,CAA/B,EAAkCA,GAAC,GAAG,CAAtC,EAAyCzG,QAAzC;AACD;AACF;AACF;AACF,SAjGD,MAiGO,IAAI2I,QAAQ,CAAC2B,UAAb,EAAyB;AAC9B/G,UAAAA,OAAO,CAACM,KAAR,CAAc,gFAAd;AACA;AACD;AACF,OAtGD,MAsGO,IAAIzE,MAAM,CAAC6H,MAAX,EAAmB;AACxB/D,QAAAA,0BAA0B,CAACkF,gBAA3B,CAA4CpF,qBAA5C,EAAmEC,YAAnE;;AAEA,YAAI0F,QAAQ,CAACC,gBAAb,EAA+B;AAC7B,cAAIG,UAAU,GAAGJ,QAAQ,CAACI,UAA1B;;AAEA,cAAIA,UAAU,CAAC7I,QAAX,KAAwB+I,SAA5B,EAAuC;AACrC,gBAAIC,SAAS,GAAGH,UAAU,CAAC7I,QAAX,CAAoBiJ,KAApC;;AAEA,iBAAK,IAAI1C,GAAC,GAAG,CAAR,EAAWgB,GAAC,GAAGyB,SAAS,CAAC5E,MAA9B,EAAsCmC,GAAC,GAAGgB,GAA1C,EAA6ChB,GAAC,IAAI,CAAlD,EAAqD;AACnDI,cAAAA,UAAU,CAAClC,UAAX,CAAsBuE,SAAS,CAACzC,GAAD,CAA/B,EAAoCyC,SAAS,CAACzC,GAAC,GAAG,CAAL,CAA7C,EAAsDyC,SAAS,CAACzC,GAAC,GAAG,CAAL,CAA/D;AACD;;AAED,gBAAIsC,UAAU,CAAChJ,KAAX,KAAqBkJ,SAAzB,EAAoC;AAClC,kBAAIjF,MAAM,GAAG+E,UAAU,CAAChJ,KAAX,CAAiBoJ,KAA9B;;AAEA,mBAAK,IAAI1C,GAAC,GAAG,CAAR,EAAWgB,GAAC,GAAGzD,MAAM,CAACM,MAA3B,EAAmCmC,GAAC,GAAGgB,GAAvC,EAA0ChB,GAAC,IAAI,CAA/C,EAAkD;AAChDI,gBAAAA,UAAU,CAAC7B,SAAX,CAAqBhB,MAAM,CAACyC,GAAD,CAA3B,EAAgCzC,MAAM,CAACyC,GAAC,GAAG,CAAL,CAAtC,EAA+CzC,MAAM,CAACyC,GAAC,GAAG,CAAL,CAArD;AACD;AACF;;AAED,gBAAIkC,QAAQ,CAACqB,KAAT,KAAmB,IAAvB,EAA6B;AAC3B,kBAAIC,OAAO,GAAGtB,QAAQ,CAACqB,KAAT,CAAeb,KAA7B;;AAEA,mBAAK,IAAI1C,IAAC,GAAG,CAAR,EAAWgB,IAAC,GAAGwC,OAAO,CAAC3F,MAA5B,EAAoCmC,IAAC,GAAGgB,IAAxC,EAA2ChB,IAAC,IAAI,CAAhD,EAAmD;AACjDI,gBAAAA,UAAU,CAACpB,QAAX,CAAoBwE,OAAO,CAACxD,IAAD,CAA3B,EAAgCwD,OAAO,CAACxD,IAAC,GAAG,CAAL,CAAvC;AACD;AACF,aAND,MAMO;AACL,kBAAI8D,IAAI,GAAGnL,MAAM,CAACoL,cAAP,GAAwB,CAAxB,GAA4B,CAAvC;;AAEA,mBAAK,IAAI/D,IAAC,GAAG,CAAR,EAAWgB,IAAC,GAAGyB,SAAS,CAAC5E,MAAV,GAAmB,CAAnB,GAAuB,CAA3C,EAA8CmC,IAAC,GAAGgB,IAAlD,EAAqDhB,IAAC,IAAI8D,IAA1D,EAAgE;AAC9D1D,gBAAAA,UAAU,CAACpB,QAAX,CAAoBgB,IAApB,EAAuBA,IAAC,GAAG,CAA3B;AACD;AACF;AACF;AACF,SAhCD,MAgCO,IAAIkC,QAAQ,CAAC2B,UAAb,EAAyB;AAC9B/G,UAAAA,OAAO,CAACM,KAAR,CAAc,gFAAd;AACA;AACD;AACF,OAvCM,MAuCA,IAAIzE,MAAM,CAAC8H,QAAX,EAAqB;AAC1BhE,QAAAA,0BAA0B,CAACkF,gBAA3B,CAA4CpF,qBAA5C,EAAmEC,YAAnE;;AAEA,YAAI0F,QAAQ,CAAC2B,UAAb,EAAyB;AACvB/G,UAAAA,OAAO,CAACM,KAAR,CAAc,gFAAd;AACA;AACD,SAHD,MAGO,IAAI8E,QAAQ,CAACC,gBAAb,EAA+B;AACpC,cAAIG,UAAU,GAAGJ,QAAQ,CAACI,UAA1B;;AAEA,cAAIA,UAAU,CAAC7I,QAAX,KAAwB+I,SAA5B,EAAuC;AACrC,gBAAIC,SAAS,GAAGH,UAAU,CAAC7I,QAAX,CAAoBiJ,KAApC;;AAEA,iBAAK,IAAI1C,IAAC,GAAG,CAAR,EAAWgB,IAAC,GAAGyB,SAAS,CAAC5E,MAA9B,EAAsCmC,IAAC,GAAGgB,IAA1C,EAA6ChB,IAAC,IAAI,CAAlD,EAAqD;AACnD/D,cAAAA,QAAQ,CAACmC,GAAT,CAAaqE,SAAS,CAACzC,IAAD,CAAtB,EAA2ByC,SAAS,CAACzC,IAAC,GAAG,CAAL,CAApC,EAA6CyC,SAAS,CAACzC,IAAC,GAAG,CAAL,CAAtD,EAA+D,CAA/D;;AAEA/D,cAAAA,QAAQ,CAAC8B,YAAT,CAAsBtB,0BAAtB;;AAEAuH,cAAAA,SAAS,CAAC/H,QAAD,EAAWtD,MAAX,EAAmBkE,MAAnB,CAAT;AACD;AACF;AACF;AACF,OArBM,MAqBA,IAAIlE,MAAM,CAACkI,QAAX,EAAqB;AAC1BlI,QAAAA,MAAM,CAACsL,eAAP,CAAuBtC,gBAAvB,CAAwC9E,MAAM,CAAC6E,kBAA/C,EAAmE/I,MAAM,CAACiF,WAA1E;;AAEA3B,QAAAA,QAAQ,CAACmC,GAAT,CAAa5B,YAAY,CAACT,QAAb,CAAsB,EAAtB,CAAb,EAAwCS,YAAY,CAACT,QAAb,CAAsB,EAAtB,CAAxC,EAAmES,YAAY,CAACT,QAAb,CAAsB,EAAtB,CAAnE,EAA8F,CAA9F;;AAEAE,QAAAA,QAAQ,CAAC8B,YAAT,CAAsBxB,qBAAtB;;AAEAyH,QAAAA,SAAS,CAAC/H,QAAD,EAAWtD,MAAX,EAAmBkE,MAAnB,CAAT;AACD;AACF;;AAED,QAAIyE,YAAY,KAAK,IAArB,EAA2B;AACzB1F,MAAAA,WAAW,CAACG,QAAZ,CAAqB+F,IAArB,CAA0BC,WAA1B;AACD;;AAED,WAAOnG,WAAP;AACD,GApND;;AAsNA,WAASoI,SAAT,CAAmB/H,QAAnB,EAA6BtD,MAA7B,EAAqCkE,MAArC,EAA6C;AAC3C,QAAImB,IAAI,GAAG,IAAI/B,QAAQ,CAACgC,CAAxB;AACAhC,IAAAA,QAAQ,CAACrD,CAAT,IAAcoF,IAAd;;AAEA,QAAI/B,QAAQ,CAACrD,CAAT,IAAc,CAAC,CAAf,IAAoBqD,QAAQ,CAACrD,CAAT,IAAc,CAAtC,EAAyC;AACvC4C,MAAAA,OAAO,GAAG0I,mBAAmB,EAA7B;AACA1I,MAAAA,OAAO,CAAC9C,EAAR,GAAaC,MAAM,CAACD,EAApB;AACA8C,MAAAA,OAAO,CAACrB,CAAR,GAAY8B,QAAQ,CAAC9B,CAAT,GAAa6D,IAAzB;AACAxC,MAAAA,OAAO,CAACpB,CAAR,GAAY6B,QAAQ,CAAC7B,CAAT,GAAa4D,IAAzB;AACAxC,MAAAA,OAAO,CAAC5C,CAAR,GAAYqD,QAAQ,CAACrD,CAArB;AACA4C,MAAAA,OAAO,CAAC3C,WAAR,GAAsBF,MAAM,CAACE,WAA7B;AACA2C,MAAAA,OAAO,CAAC7C,MAAR,GAAiBA,MAAjB;AACA6C,MAAAA,OAAO,CAACnB,QAAR,GAAmB1B,MAAM,CAAC0B,QAA1B;AACAmB,MAAAA,OAAO,CAAClB,KAAR,CAAcH,CAAd,GAAkBxB,MAAM,CAAC2B,KAAP,CAAaH,CAAb,GAAiBkF,IAAI,CAAC8E,GAAL,CAAS3I,OAAO,CAACrB,CAAR,GAAY,CAAC8B,QAAQ,CAAC9B,CAAT,GAAa0C,MAAM,CAAC+E,gBAAP,CAAwB7F,QAAxB,CAAiC,CAAjC,CAAd,KAAsDE,QAAQ,CAACgC,CAAT,GAAapB,MAAM,CAAC+E,gBAAP,CAAwB7F,QAAxB,CAAiC,EAAjC,CAAnE,CAArB,CAAnC;AACAP,MAAAA,OAAO,CAAClB,KAAR,CAAcF,CAAd,GAAkBzB,MAAM,CAAC2B,KAAP,CAAaF,CAAb,GAAiBiF,IAAI,CAAC8E,GAAL,CAAS3I,OAAO,CAACpB,CAAR,GAAY,CAAC6B,QAAQ,CAAC7B,CAAT,GAAayC,MAAM,CAAC+E,gBAAP,CAAwB7F,QAAxB,CAAiC,CAAjC,CAAd,KAAsDE,QAAQ,CAACgC,CAAT,GAAapB,MAAM,CAAC+E,gBAAP,CAAwB7F,QAAxB,CAAiC,EAAjC,CAAnE,CAArB,CAAnC;AACAP,MAAAA,OAAO,CAACjC,QAAR,GAAmBZ,MAAM,CAACY,QAA1B;;AAEAqC,MAAAA,WAAW,CAACG,QAAZ,CAAqBuC,IAArB,CAA0B9C,OAA1B;AACD;AACF,GA/dyB,CA+dxB;;;AAGF,WAASyF,mBAAT,GAA+B;AAC7B,QAAIxG,YAAY,KAAKE,iBAArB,EAAwC;AACtC,UAAIhC,MAAM,GAAG,IAAIF,gBAAJ,EAAb;;AAEAiC,MAAAA,WAAW,CAAC4D,IAAZ,CAAiB3F,MAAjB;;AAEAgC,MAAAA,iBAAiB;AACjBF,MAAAA,YAAY;AACZ,aAAO9B,MAAP;AACD;;AAED,WAAO+B,WAAW,CAACD,YAAY,EAAb,CAAlB;AACD;;AAED,WAAS0D,mBAAT,GAA+B;AAC7B,QAAItD,YAAY,KAAKE,iBAArB,EAAwC;AACtC,UAAIhB,MAAM,GAAG,IAAIf,gBAAJ,EAAb;;AAEA8B,MAAAA,WAAW,CAACwD,IAAZ,CAAiBvE,MAAjB;;AAEAgB,MAAAA,iBAAiB;AACjBF,MAAAA,YAAY;AACZ,aAAOd,MAAP;AACD;;AAED,WAAOe,WAAW,CAACD,YAAY,EAAb,CAAlB;AACD;;AAED,WAAS8E,iBAAT,GAA6B;AAC3B,QAAI1E,UAAU,KAAKE,eAAnB,EAAoC;AAClC,UAAIiJ,IAAI,GAAG,IAAItL,cAAJ,EAAX;;AAEAoC,MAAAA,SAAS,CAACoD,IAAV,CAAe8F,IAAf;;AAEAjJ,MAAAA,eAAe;AACfF,MAAAA,UAAU;AACV,aAAOmJ,IAAP;AACD;;AAED,WAAOlJ,SAAS,CAACD,UAAU,EAAX,CAAhB;AACD;;AAED,WAASmE,iBAAT,GAA6B;AAC3B,QAAI/D,UAAU,KAAKE,eAAnB,EAAoC;AAClC,UAAI8I,IAAI,GAAG,IAAIrK,cAAJ,EAAX;;AAEAsB,MAAAA,SAAS,CAACgD,IAAV,CAAe+F,IAAf;;AAEA9I,MAAAA,eAAe;AACfF,MAAAA,UAAU;AACV,aAAOgJ,IAAP;AACD;;AAED,WAAO/I,SAAS,CAACD,UAAU,EAAX,CAAhB;AACD;;AAED,WAAS6I,mBAAT,GAA+B;AAC7B,QAAIzI,YAAY,KAAKE,iBAArB,EAAwC;AACtC,UAAI2I,MAAM,GAAG,IAAIpK,gBAAJ,EAAb;;AAEAwB,MAAAA,WAAW,CAAC4C,IAAZ,CAAiBgG,MAAjB;;AAEA3I,MAAAA,iBAAiB;AACjBF,MAAAA,YAAY;AACZ,aAAO6I,MAAP;AACD;;AAED,WAAO5I,WAAW,CAACD,YAAY,EAAb,CAAlB;AACD,GAtiByB,CAsiBxB;;;AAGF,WAASsG,WAAT,CAAqB9C,CAArB,EAAwBP,CAAxB,EAA2B;AACzB,QAAIO,CAAC,CAACpG,WAAF,KAAkB6F,CAAC,CAAC7F,WAAxB,EAAqC;AACnC,aAAOoG,CAAC,CAACpG,WAAF,GAAgB6F,CAAC,CAAC7F,WAAzB;AACD,KAFD,MAEO,IAAIoG,CAAC,CAACrG,CAAF,KAAQ8F,CAAC,CAAC9F,CAAd,EAAiB;AACtB,aAAO8F,CAAC,CAAC9F,CAAF,GAAMqG,CAAC,CAACrG,CAAf;AACD,KAFM,MAEA,IAAIqG,CAAC,CAACvG,EAAF,KAASgG,CAAC,CAAChG,EAAf,EAAmB;AACxB,aAAOuG,CAAC,CAACvG,EAAF,GAAOgG,CAAC,CAAChG,EAAhB;AACD,KAFM,MAEA;AACL,aAAO,CAAP;AACD;AACF;;AAED,WAASwG,QAAT,CAAkBqF,EAAlB,EAAsBC,EAAtB,EAA0B;AACxB,QAAIC,MAAM,GAAG,CAAb;AAAA,QACIC,MAAM,GAAG,CADb;AAAA,QAEI;AACJ;AACAC,IAAAA,OAAO,GAAGJ,EAAE,CAAC3L,CAAH,GAAO2L,EAAE,CAACtG,CAJpB;AAAA,QAKI2G,OAAO,GAAGJ,EAAE,CAAC5L,CAAH,GAAO4L,EAAE,CAACvG,CALxB;AAAA,QAMI4G,MAAM,GAAG,CAACN,EAAE,CAAC3L,CAAJ,GAAQ2L,EAAE,CAACtG,CANxB;AAAA,QAOI6G,MAAM,GAAG,CAACN,EAAE,CAAC5L,CAAJ,GAAQ4L,EAAE,CAACvG,CAPxB;;AASA,QAAI0G,OAAO,IAAI,CAAX,IAAgBC,OAAO,IAAI,CAA3B,IAAgCC,MAAM,IAAI,CAA1C,IAA+CC,MAAM,IAAI,CAA7D,EAAgE;AAC9D;AACA,aAAO,IAAP;AACD,KAHD,MAGO,IAAIH,OAAO,GAAG,CAAV,IAAeC,OAAO,GAAG,CAAzB,IAA8BC,MAAM,GAAG,CAAT,IAAcC,MAAM,GAAG,CAAzD,EAA4D;AACjE;AACA,aAAO,KAAP;AACD,KAHM,MAGA;AACL;AACA,UAAIH,OAAO,GAAG,CAAd,EAAiB;AACf;AACAF,QAAAA,MAAM,GAAGpF,IAAI,CAACC,GAAL,CAASmF,MAAT,EAAiBE,OAAO,IAAIA,OAAO,GAAGC,OAAd,CAAxB,CAAT;AACD,OAHD,MAGO,IAAIA,OAAO,GAAG,CAAd,EAAiB;AACtB;AACAF,QAAAA,MAAM,GAAGrF,IAAI,CAAC0F,GAAL,CAASL,MAAT,EAAiBC,OAAO,IAAIA,OAAO,GAAGC,OAAd,CAAxB,CAAT;AACD;;AAED,UAAIC,MAAM,GAAG,CAAb,EAAgB;AACd;AACAJ,QAAAA,MAAM,GAAGpF,IAAI,CAACC,GAAL,CAASmF,MAAT,EAAiBI,MAAM,IAAIA,MAAM,GAAGC,MAAb,CAAvB,CAAT;AACD,OAHD,MAGO,IAAIA,MAAM,GAAG,CAAb,EAAgB;AACrB;AACAJ,QAAAA,MAAM,GAAGrF,IAAI,CAAC0F,GAAL,CAASL,MAAT,EAAiBG,MAAM,IAAIA,MAAM,GAAGC,MAAb,CAAvB,CAAT;AACD;;AAED,UAAIJ,MAAM,GAAGD,MAAb,EAAqB;AACnB;AACA;AACA;AACA,eAAO,KAAP;AACD,OALD,MAKO;AACL;AACAF,QAAAA,EAAE,CAACS,IAAH,CAAQR,EAAR,EAAYC,MAAZ;AACAD,QAAAA,EAAE,CAACQ,IAAH,CAAQT,EAAR,EAAY,IAAIG,MAAhB;AACA,eAAO,IAAP;AACD;AACF;AACF;AACF,CApmBD;;AAsmBA,SAASnK,SAAT,EAAoBzB,cAApB,EAAoCkB,cAApC,EAAoDvB,gBAApD,EAAsEyB,gBAAtE,EAAwFlB,gBAAxF","sourcesContent":["import { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from 'three';\n\nvar RenderableObject = function () {\n  this.id = 0;\n  this.object = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableFace = function () {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.v3 = new RenderableVertex();\n  this.normalModel = new Vector3();\n  this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n  this.vertexNormalsLength = 0;\n  this.color = new Color();\n  this.material = null;\n  this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableVertex = function () {\n  this.position = new Vector3();\n  this.positionWorld = new Vector3();\n  this.positionScreen = new Vector4();\n  this.visible = true;\n};\n\nRenderableVertex.prototype.copy = function (vertex) {\n  this.positionWorld.copy(vertex.positionWorld);\n  this.positionScreen.copy(vertex.positionScreen);\n}; //\n\n\nvar RenderableLine = function () {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.vertexColors = [new Color(), new Color()];\n  this.material = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableSprite = function () {\n  this.id = 0;\n  this.object = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.rotation = 0;\n  this.scale = new Vector2();\n  this.material = null;\n  this.renderOrder = 0;\n}; //\n\n\nvar Projector = function () {\n  var _object,\n      _objectCount,\n      _objectPool = [],\n      _objectPoolLength = 0,\n      _vertex,\n      _vertexCount,\n      _vertexPool = [],\n      _vertexPoolLength = 0,\n      _face,\n      _faceCount,\n      _facePool = [],\n      _facePoolLength = 0,\n      _line,\n      _lineCount,\n      _linePool = [],\n      _linePoolLength = 0,\n      _sprite,\n      _spriteCount,\n      _spritePool = [],\n      _spritePoolLength = 0,\n      _renderData = {\n    objects: [],\n    lights: [],\n    elements: []\n  },\n      _vector3 = new Vector3(),\n      _vector4 = new Vector4(),\n      _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)),\n      _boundingBox = new Box3(),\n      _points3 = new Array(3),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _modelMatrix,\n      _modelViewProjectionMatrix = new Matrix4(),\n      _frustum = new Frustum(); //\n\n\n  this.projectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .projectVector() is now vector.project().');\n    vector.project(camera);\n  };\n\n  this.unprojectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n    vector.unproject(camera);\n  };\n\n  this.pickingRay = function () {\n    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n  }; //\n\n\n  var RenderList = function () {\n    var normals = [];\n    var colors = [];\n    var uvs = [];\n    var object = null;\n    var normalMatrix = new Matrix3();\n\n    function setObject(value) {\n      object = value;\n      normalMatrix.getNormalMatrix(object.matrixWorld);\n      normals.length = 0;\n      colors.length = 0;\n      uvs.length = 0;\n    }\n\n    function projectVertex(vertex) {\n      var position = vertex.position;\n      var positionWorld = vertex.positionWorld;\n      var positionScreen = vertex.positionScreen;\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n      var invW = 1 / positionScreen.w;\n      positionScreen.x *= invW;\n      positionScreen.y *= invW;\n      positionScreen.z *= invW;\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n    }\n\n    function pushVertex(x, y, z) {\n      _vertex = getNextVertexInPool();\n\n      _vertex.position.set(x, y, z);\n\n      projectVertex(_vertex);\n    }\n\n    function pushNormal(x, y, z) {\n      normals.push(x, y, z);\n    }\n\n    function pushColor(r, g, b) {\n      colors.push(r, g, b);\n    }\n\n    function pushUv(x, y) {\n      uvs.push(x, y);\n    }\n\n    function checkTriangleVisibility(v1, v2, v3) {\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n      _points3[0] = v1.positionScreen;\n      _points3[1] = v2.positionScreen;\n      _points3[2] = v3.positionScreen;\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n    }\n\n    function checkBackfaceCulling(v1, v2, v3) {\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n    }\n\n    function pushLine(a, b) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b]; // Clip\n\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n        // Perform the perspective divide\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n        _line = getNextLineInPool();\n        _line.id = object.id;\n\n        _line.v1.copy(v1);\n\n        _line.v2.copy(v2);\n\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n\n        if (object.material.vertexColors) {\n          _line.vertexColors[0].fromArray(colors, a * 3);\n\n          _line.vertexColors[1].fromArray(colors, b * 3);\n        }\n\n        _renderData.elements.push(_line);\n      }\n    }\n\n    function pushTriangle(a, b, c, material) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      var v3 = _vertexPool[c];\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n      if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n        _face = getNextFaceInPool();\n        _face.id = object.id;\n\n        _face.v1.copy(v1);\n\n        _face.v2.copy(v2);\n\n        _face.v3.copy(v3);\n\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n        _face.renderOrder = object.renderOrder; // face normal\n\n        _vector3.subVectors(v3.position, v2.position);\n\n        _vector4.subVectors(v1.position, v2.position);\n\n        _vector3.cross(_vector4);\n\n        _face.normalModel.copy(_vector3);\n\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\n        for (let i = 0; i < 3; i++) {\n          var normal = _face.vertexNormalsModel[i];\n          normal.fromArray(normals, arguments[i] * 3);\n          normal.applyMatrix3(normalMatrix).normalize();\n          var uv = _face.uvs[i];\n          uv.fromArray(uvs, arguments[i] * 2);\n        }\n\n        _face.vertexNormalsLength = 3;\n        _face.material = material;\n\n        if (material.vertexColors) {\n          _face.color.fromArray(colors, a * 3);\n        }\n\n        _renderData.elements.push(_face);\n      }\n    }\n\n    return {\n      setObject: setObject,\n      projectVertex: projectVertex,\n      checkTriangleVisibility: checkTriangleVisibility,\n      checkBackfaceCulling: checkBackfaceCulling,\n      pushVertex: pushVertex,\n      pushNormal: pushNormal,\n      pushColor: pushColor,\n      pushUv: pushUv,\n      pushLine: pushLine,\n      pushTriangle: pushTriangle\n    };\n  };\n\n  var renderList = new RenderList();\n\n  function projectObject(object) {\n    if (object.visible === false) return;\n\n    if (object.isLight) {\n      _renderData.lights.push(object);\n    } else if (object.isMesh || object.isLine || object.isPoints) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n      addObject(object);\n    } else if (object.isSprite) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n      addObject(object);\n    }\n\n    var children = object.children;\n\n    for (let i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i]);\n    }\n  }\n\n  function addObject(object) {\n    _object = getNextObjectInPool();\n    _object.id = object.id;\n    _object.object = object;\n\n    _vector3.setFromMatrixPosition(object.matrixWorld);\n\n    _vector3.applyMatrix4(_viewProjectionMatrix);\n\n    _object.z = _vector3.z;\n    _object.renderOrder = object.renderOrder;\n\n    _renderData.objects.push(_object);\n  }\n\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\n    _faceCount = 0;\n    _lineCount = 0;\n    _spriteCount = 0;\n    _renderData.elements.length = 0;\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _frustum.setFromProjectionMatrix(_viewProjectionMatrix); //\n\n\n    _objectCount = 0;\n    _renderData.objects.length = 0;\n    _renderData.lights.length = 0;\n    projectObject(scene);\n\n    if (sortObjects === true) {\n      _renderData.objects.sort(painterSort);\n    } //\n\n\n    var objects = _renderData.objects;\n\n    for (let o = 0, ol = objects.length; o < ol; o++) {\n      var object = objects[o].object;\n      var geometry = object.geometry;\n      renderList.setObject(object);\n      _modelMatrix = object.matrixWorld;\n      _vertexCount = 0;\n\n      if (object.isMesh) {\n        if (geometry.isBufferGeometry) {\n          var material = object.material;\n          var isMultiMaterial = Array.isArray(material);\n          var attributes = geometry.attributes;\n          var groups = geometry.groups;\n          if (attributes.position === undefined) continue;\n          var positions = attributes.position.array;\n\n          for (let i = 0, l = positions.length; i < l; i += 3) {\n            var x = positions[i];\n            var y = positions[i + 1];\n            var z = positions[i + 2];\n\n            if (material.morphTargets === true) {\n              var morphTargets = geometry.morphAttributes.position;\n              var morphTargetsRelative = geometry.morphTargetsRelative;\n              var morphInfluences = object.morphTargetInfluences;\n\n              for (let t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n                if (influence === 0) continue;\n                var target = morphTargets[t];\n\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n\n            renderList.pushVertex(x, y, z);\n          }\n\n          if (attributes.normal !== undefined) {\n            var normals = attributes.normal.array;\n\n            for (let i = 0, l = normals.length; i < l; i += 3) {\n              renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n            }\n          }\n\n          if (attributes.color !== undefined) {\n            var colors = attributes.color.array;\n\n            for (let i = 0, l = colors.length; i < l; i += 3) {\n              renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n            }\n          }\n\n          if (attributes.uv !== undefined) {\n            var uvs = attributes.uv.array;\n\n            for (let i = 0, l = uvs.length; i < l; i += 2) {\n              renderList.pushUv(uvs[i], uvs[i + 1]);\n            }\n          }\n\n          if (geometry.index !== null) {\n            var indices = geometry.index.array;\n\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n                }\n              }\n            } else {\n              for (let i = 0, l = indices.length; i < l; i += 3) {\n                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(i, i + 1, i + 2, material);\n                }\n              }\n            } else {\n              for (let i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2, material);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isLine) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n\n            if (attributes.color !== undefined) {\n              var colors = attributes.color.array;\n\n              for (let i = 0, l = colors.length; i < l; i += 3) {\n                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n              }\n            }\n\n            if (geometry.index !== null) {\n              var indices = geometry.index.array;\n\n              for (let i = 0, l = indices.length; i < l; i += 2) {\n                renderList.pushLine(indices[i], indices[i + 1]);\n              }\n            } else {\n              var step = object.isLineSegments ? 2 : 1;\n\n              for (let i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                renderList.pushLine(i, i + 1);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isPoints) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        } else if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\n\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        }\n      } else if (object.isSprite) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\n        _vector4.applyMatrix4(_viewProjectionMatrix);\n\n        pushPoint(_vector4, object, camera);\n      }\n    }\n\n    if (sortElements === true) {\n      _renderData.elements.sort(painterSort);\n    }\n\n    return _renderData;\n  };\n\n  function pushPoint(_vector4, object, camera) {\n    var invW = 1 / _vector4.w;\n    _vector4.z *= invW;\n\n    if (_vector4.z >= -1 && _vector4.z <= 1) {\n      _sprite = getNextSpriteInPool();\n      _sprite.id = object.id;\n      _sprite.x = _vector4.x * invW;\n      _sprite.y = _vector4.y * invW;\n      _sprite.z = _vector4.z;\n      _sprite.renderOrder = object.renderOrder;\n      _sprite.object = object;\n      _sprite.rotation = object.rotation;\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n      _sprite.material = object.material;\n\n      _renderData.elements.push(_sprite);\n    }\n  } // Pools\n\n\n  function getNextObjectInPool() {\n    if (_objectCount === _objectPoolLength) {\n      var object = new RenderableObject();\n\n      _objectPool.push(object);\n\n      _objectPoolLength++;\n      _objectCount++;\n      return object;\n    }\n\n    return _objectPool[_objectCount++];\n  }\n\n  function getNextVertexInPool() {\n    if (_vertexCount === _vertexPoolLength) {\n      var vertex = new RenderableVertex();\n\n      _vertexPool.push(vertex);\n\n      _vertexPoolLength++;\n      _vertexCount++;\n      return vertex;\n    }\n\n    return _vertexPool[_vertexCount++];\n  }\n\n  function getNextFaceInPool() {\n    if (_faceCount === _facePoolLength) {\n      var face = new RenderableFace();\n\n      _facePool.push(face);\n\n      _facePoolLength++;\n      _faceCount++;\n      return face;\n    }\n\n    return _facePool[_faceCount++];\n  }\n\n  function getNextLineInPool() {\n    if (_lineCount === _linePoolLength) {\n      var line = new RenderableLine();\n\n      _linePool.push(line);\n\n      _linePoolLength++;\n      _lineCount++;\n      return line;\n    }\n\n    return _linePool[_lineCount++];\n  }\n\n  function getNextSpriteInPool() {\n    if (_spriteCount === _spritePoolLength) {\n      var sprite = new RenderableSprite();\n\n      _spritePool.push(sprite);\n\n      _spritePoolLength++;\n      _spriteCount++;\n      return sprite;\n    }\n\n    return _spritePool[_spriteCount++];\n  } //\n\n\n  function painterSort(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else if (a.id !== b.id) {\n      return a.id - b.id;\n    } else {\n      return 0;\n    }\n  }\n\n  function clipLine(s1, s2) {\n    var alpha1 = 0,\n        alpha2 = 1,\n        // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n    // Z = -1 and Z = +1, respectively.\n    bc1near = s1.z + s1.w,\n        bc2near = s2.z + s2.w,\n        bc1far = -s1.z + s1.w,\n        bc2far = -s2.z + s2.w;\n\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n      // Both vertices lie entirely within all clip planes.\n      return true;\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n      // Both vertices lie entirely outside one of the clip planes.\n      return false;\n    } else {\n      // The line segment spans at least one clip plane.\n      if (bc1near < 0) {\n        // v1 lies outside the near plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n      } else if (bc2near < 0) {\n        // v2 lies outside the near plane, v1 inside\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n      }\n\n      if (bc1far < 0) {\n        // v1 lies outside the far plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n      } else if (bc2far < 0) {\n        // v2 lies outside the far plane, v2 inside\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n      }\n\n      if (alpha2 < alpha1) {\n        // The line segment spans two boundaries, but is outside both of them.\n        // (This can't happen when we're only clipping against just near/far but good\n        //  to leave the check here for future usage if other clip planes are added.)\n        return false;\n      } else {\n        // Update the s1 and s2 vertices to match the clipped line segment.\n        s1.lerp(s2, alpha1);\n        s2.lerp(s1, 1 - alpha2);\n        return true;\n      }\n    }\n  }\n};\n\nexport { Projector, RenderableFace, RenderableLine, RenderableObject, RenderableSprite, RenderableVertex };\n"]},"metadata":{},"sourceType":"module"}