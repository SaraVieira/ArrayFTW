{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Vector3, ParametricGeometry, BufferGeometry, Curve } from 'three';\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nvar ParametricGeometries = {\n  klein: function klein(v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    var x, y, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function plane(width, height) {\n    return function (u, v, target) {\n      var x = u * width;\n      var y = 0;\n      var z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function mobius(u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    var v = 2 * Math.PI * t;\n    var x, y, z;\n    var a = 2;\n    x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function mobius3d(u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    var phi = u / 2;\n    var major = 2.25,\n        a = 0.125,\n        b = 0.65;\n    var x, y, z;\n    x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = function (path, segments, radius, segmentsRadius, closed) {\n  this.path = path;\n  this.segments = segments || 64;\n  this.radius = radius || 1;\n  this.segmentsRadius = segmentsRadius || 8;\n  this.closed = closed || false;\n  var scope = this,\n      numpoints = this.segments + 1;\n  var frames = path.computeFrenetFrames(segments, closed),\n      tangents = frames.tangents,\n      normals = frames.normals,\n      binormals = frames.binormals; // proxy internals\n\n  this.tangents = tangents;\n  this.normals = normals;\n  this.binormals = binormals;\n  var position = new Vector3();\n\n  var ParametricTube = function ParametricTube(u, v, target) {\n    v *= 2 * Math.PI;\n    var i = u * (numpoints - 1);\n    i = Math.floor(i);\n    path.getPointAt(u, position);\n    var normal = normals[i];\n    var binormal = binormals[i];\n    var cx = -scope.radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n    var cy = scope.radius * Math.sin(v);\n    position.x += cx * normal.x + cy * binormal.x;\n    position.y += cx * normal.y + cy * binormal.y;\n    position.z += cx * normal.z + cy * binormal.z;\n    target.copy(position);\n  };\n\n  ParametricGeometry.call(this, ParametricTube, segments, segmentsRadius);\n};\n\nParametricGeometries.TubeGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TubeGeometry.prototype.constructor = ParametricGeometries.TubeGeometry;\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = function (radius, tube, segmentsT, segmentsR, p, q) {\n  this.radius = radius || 200;\n  this.tube = tube || 40;\n  this.segmentsT = segmentsT || 64;\n  this.segmentsR = segmentsR || 8;\n  this.p = p || 2;\n  this.q = q || 3;\n\n  var TorusKnotCurve = /*#__PURE__*/function (_Curve) {\n    _inherits(TorusKnotCurve, _Curve);\n\n    var _super = _createSuper(TorusKnotCurve);\n\n    function TorusKnotCurve() {\n      _classCallCheck(this, TorusKnotCurve);\n\n      return _super.call(this);\n    }\n\n    _createClass(TorusKnotCurve, [{\n      key: \"getPoint\",\n      value: function getPoint(t, optionalTarget) {\n        var point = optionalTarget || new Vector3();\n        t *= Math.PI * 2;\n        var r = 0.5;\n        var x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n        var y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n        var z = r * Math.sin(q * t);\n        return point.set(x, y, z).multiplyScalar(radius);\n      }\n    }]);\n\n    return TorusKnotCurve;\n  }(Curve);\n\n  var segments = segmentsT;\n  var radiusSegments = segmentsR;\n  var extrudePath = new TorusKnotCurve();\n  ParametricGeometries.TubeGeometry.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n};\n\nParametricGeometries.TorusKnotGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TorusKnotGeometry.prototype.constructor = ParametricGeometries.TorusKnotGeometry;\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = function (size, u, v) {\n  function sphere(u, v, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    var x = size * Math.sin(u) * Math.cos(v);\n    var y = size * Math.sin(u) * Math.sin(v);\n    var z = size * Math.cos(u);\n    target.set(x, y, z);\n  }\n\n  ParametricGeometry.call(this, sphere, u, v);\n};\n\nParametricGeometries.SphereGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.SphereGeometry.prototype.constructor = ParametricGeometries.SphereGeometry;\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = function (width, depth, segmentsWidth, segmentsDepth) {\n  function plane(u, v, target) {\n    var x = u * width;\n    var y = 0;\n    var z = v * depth;\n    target.set(x, y, z);\n  }\n\n  ParametricGeometry.call(this, plane, segmentsWidth, segmentsDepth);\n};\n\nParametricGeometries.PlaneGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.PlaneGeometry.prototype.constructor = ParametricGeometries.PlaneGeometry;\nexport { ParametricGeometries };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/geometries/ParametricGeometries.js"],"names":["Vector3","ParametricGeometry","BufferGeometry","Curve","ParametricGeometries","klein","v","u","target","Math","PI","x","y","z","cos","sin","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TubeGeometry","path","segments","radius","segmentsRadius","closed","scope","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","i","floor","getPointAt","normal","binormal","cx","cy","copy","call","prototype","Object","create","constructor","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","sphere","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"mappings":"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","sourcesContent":["import { Vector3, ParametricGeometry, BufferGeometry, Curve } from 'three';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, y, z;\n\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return (u, v, target) => {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    let x, y, z;\n    const a = 2;\n    x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n          a = 0.125,\n          b = 0.65;\n    let x, y, z;\n    x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = function (path, segments, radius, segmentsRadius, closed) {\n  this.path = path;\n  this.segments = segments || 64;\n  this.radius = radius || 1;\n  this.segmentsRadius = segmentsRadius || 8;\n  this.closed = closed || false;\n  const scope = this,\n        numpoints = this.segments + 1;\n  const frames = path.computeFrenetFrames(segments, closed),\n        tangents = frames.tangents,\n        normals = frames.normals,\n        binormals = frames.binormals; // proxy internals\n\n  this.tangents = tangents;\n  this.normals = normals;\n  this.binormals = binormals;\n  const position = new Vector3();\n\n  const ParametricTube = (u, v, target) => {\n    v *= 2 * Math.PI;\n    let i = u * (numpoints - 1);\n    i = Math.floor(i);\n    path.getPointAt(u, position);\n    const normal = normals[i];\n    const binormal = binormals[i];\n    const cx = -scope.radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n    const cy = scope.radius * Math.sin(v);\n    position.x += cx * normal.x + cy * binormal.x;\n    position.y += cx * normal.y + cy * binormal.y;\n    position.z += cx * normal.z + cy * binormal.z;\n    target.copy(position);\n  };\n\n  ParametricGeometry.call(this, ParametricTube, segments, segmentsRadius);\n};\n\nParametricGeometries.TubeGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TubeGeometry.prototype.constructor = ParametricGeometries.TubeGeometry;\n/*********************************************\n *\n * Parametric Replacement for TorusKnotGeometry\n *\n *********************************************/\n\nParametricGeometries.TorusKnotGeometry = function (radius, tube, segmentsT, segmentsR, p, q) {\n  this.radius = radius || 200;\n  this.tube = tube || 40;\n  this.segmentsT = segmentsT || 64;\n  this.segmentsR = segmentsR || 8;\n  this.p = p || 2;\n  this.q = q || 3;\n\n  class TorusKnotCurve extends Curve {\n    constructor() {\n      super();\n    }\n\n    getPoint(t, optionalTarget) {\n      const point = optionalTarget || new Vector3();\n      t *= Math.PI * 2;\n      const r = 0.5;\n      const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n      const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n      const z = r * Math.sin(q * t);\n      return point.set(x, y, z).multiplyScalar(radius);\n    }\n\n  }\n\n  const segments = segmentsT;\n  const radiusSegments = segmentsR;\n  const extrudePath = new TorusKnotCurve();\n  ParametricGeometries.TubeGeometry.call(this, extrudePath, segments, tube, radiusSegments, true, false);\n};\n\nParametricGeometries.TorusKnotGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.TorusKnotGeometry.prototype.constructor = ParametricGeometries.TorusKnotGeometry;\n/*********************************************\n *\n * Parametric Replacement for SphereGeometry\n *\n *********************************************/\n\nParametricGeometries.SphereGeometry = function (size, u, v) {\n  function sphere(u, v, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    const x = size * Math.sin(u) * Math.cos(v);\n    const y = size * Math.sin(u) * Math.sin(v);\n    const z = size * Math.cos(u);\n    target.set(x, y, z);\n  }\n\n  ParametricGeometry.call(this, sphere, u, v);\n};\n\nParametricGeometries.SphereGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.SphereGeometry.prototype.constructor = ParametricGeometries.SphereGeometry;\n/*********************************************\n *\n * Parametric Replacement for PlaneGeometry\n *\n *********************************************/\n\nParametricGeometries.PlaneGeometry = function (width, depth, segmentsWidth, segmentsDepth) {\n  function plane(u, v, target) {\n    const x = u * width;\n    const y = 0;\n    const z = v * depth;\n    target.set(x, y, z);\n  }\n\n  ParametricGeometry.call(this, plane, segmentsWidth, segmentsDepth);\n};\n\nParametricGeometries.PlaneGeometry.prototype = Object.create(BufferGeometry.prototype);\nParametricGeometries.PlaneGeometry.prototype.constructor = ParametricGeometries.PlaneGeometry;\n\nexport { ParametricGeometries };\n"]},"metadata":{},"sourceType":"module"}