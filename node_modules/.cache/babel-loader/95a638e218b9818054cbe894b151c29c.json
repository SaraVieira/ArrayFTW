{"ast":null,"code":"import { Vector3, Quaternion, FileLoader, LoaderUtils, Matrix4, Bone, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, MeshPhongMaterial, FrontSide, Vector2, SkinnedMesh, Mesh, Skeleton, AnimationClip, AnimationMixer, Loader, TextureLoader } from 'three';\n\nvar XLoader = function () {\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var _i2 = 0; _i2 < props.length; _i2++) {\n        var descriptor = props[_i2];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if ('value' in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var XboneInf = function XboneInf() {\n    classCallCheck(this, XboneInf);\n    this.boneName = '';\n    this.BoneIndex = 0;\n    this.Indeces = [];\n    this.Weights = [];\n    this.initMatrix = null;\n    this.OffsetMatrix = null;\n  };\n\n  var XAnimationInfo = function XAnimationInfo() {\n    classCallCheck(this, XAnimationInfo);\n    this.animeName = '';\n    this.boneName = '';\n    this.targetBone = null;\n    this.keyType = 4;\n    this.frameStartLv = 0;\n    this.keyFrames = [];\n    this.InverseMx = null;\n  };\n\n  var XAnimationObj = function () {\n    function XAnimationObj(_flags) {\n      classCallCheck(this, XAnimationObj);\n      this.fps = 30;\n      this.name = 'xanimation';\n      this.length = 0;\n      this.hierarchy = [];\n      this.putFlags = _flags;\n\n      if (this.putFlags.putPos === undefined) {\n        this.putFlags.putPos = true;\n      }\n\n      if (this.putFlags.putRot === undefined) {\n        this.putFlags.putRot = true;\n      }\n\n      if (this.putFlags.putScl === undefined) {\n        this.putFlags.putScl = true;\n      }\n    }\n\n    createClass(XAnimationObj, [{\n      key: 'make',\n      value: function make(XAnimationInfoArray) {\n        for (var _i3 = 0; _i3 < XAnimationInfoArray.length; _i3++) {\n          this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[_i3]));\n        }\n\n        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n      }\n    }, {\n      key: 'clone',\n      value: function clone() {\n        return Object.assign({}, this);\n      }\n    }, {\n      key: 'makeBonekeys',\n      value: function makeBonekeys(XAnimationInfo) {\n        var refObj = {};\n        refObj.name = XAnimationInfo.boneName;\n        refObj.parent = '';\n        refObj.keys = this.keyFrameRefactor(XAnimationInfo);\n\n        refObj.copy = function () {\n          return Object.assign({}, this);\n        };\n\n        return refObj;\n      }\n    }, {\n      key: 'keyFrameRefactor',\n      value: function keyFrameRefactor(XAnimationInfo) {\n        var keys = [];\n\n        for (var _i4 = 0; _i4 < XAnimationInfo.keyFrames.length; _i4++) {\n          var keyframe = {};\n          keyframe.time = XAnimationInfo.keyFrames[_i4].time * this.fps;\n\n          if (XAnimationInfo.keyFrames[_i4].pos && this.putFlags.putPos) {\n            keyframe.pos = XAnimationInfo.keyFrames[_i4].pos;\n          }\n\n          if (XAnimationInfo.keyFrames[_i4].rot && this.putFlags.putRot) {\n            keyframe.rot = XAnimationInfo.keyFrames[_i4].rot;\n          }\n\n          if (XAnimationInfo.keyFrames[_i4].scl && this.putFlags.putScl) {\n            keyframe.scl = XAnimationInfo.keyFrames[_i4].scl;\n          }\n\n          if (XAnimationInfo.keyFrames[_i4].matrix) {\n            keyframe.matrix = XAnimationInfo.keyFrames[_i4].matrix;\n\n            if (this.putFlags.putPos) {\n              keyframe.pos = new Vector3().setFromMatrixPosition(keyframe.matrix);\n            }\n\n            if (this.putFlags.putRot) {\n              keyframe.rot = new Quaternion().setFromRotationMatrix(keyframe.matrix);\n            }\n\n            if (this.putFlags.putScl) {\n              keyframe.scl = new Vector3().setFromMatrixScale(keyframe.matrix);\n            }\n          }\n\n          keys.push(keyframe);\n        }\n\n        return keys;\n      }\n    }]);\n    return XAnimationObj;\n  }();\n\n  var XKeyFrameInfo = function XKeyFrameInfo() {\n    classCallCheck(this, XKeyFrameInfo);\n    this.index = 0;\n    this.Frame = 0;\n    this.time = 0.0;\n    this.matrix = null;\n  };\n\n  var XLoader = function () {\n    function XLoader(manager) {\n      Loader.call(this, manager);\n      classCallCheck(this, XLoader);\n      this.debug = false;\n      this.texloader = new TextureLoader(this.manager);\n      this.url = '';\n      this._putMatLength = 0;\n      this._nowMat = null;\n      this._nowFrameName = '';\n      this.frameHierarchie = [];\n      this.Hierarchies = {};\n      this.HieStack = [];\n      this._currentObject = {};\n      this._currentFrame = {};\n      this._data = null;\n      this.onLoad = null;\n      this.IsUvYReverse = true;\n      this.Meshes = [];\n      this.animations = [];\n      this.animTicksPerSecond = 30;\n      this._currentGeo = null;\n      this._currentAnime = null;\n      this._currentAnimeFrames = null;\n    }\n\n    createClass(XLoader, [{\n      key: '_setArgOption',\n      value: function _setArgOption(_arg) {\n        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n        if (!_arg) {\n          return;\n        }\n\n        for (var _i5 = _start; _i5 < _arg.length; _i5++) {\n          switch (_i5) {\n            case 0:\n              this.url = _arg[_i5];\n              break;\n\n            case 1:\n              this.options = _arg[_i5];\n              break;\n          }\n        }\n\n        if (this.options === undefined) {\n          this.options = {};\n        }\n      }\n    }, {\n      key: 'load',\n      value: function load(_arg, onLoad, onProgress, onError) {\n        var _this = this;\n\n        this._setArgOption(_arg);\n\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType('arraybuffer');\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(this.url, function (response) {\n          try {\n            _this.parse(response, onLoad);\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n\n            _this.manager.itemError(_this.url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: '_readLine',\n      value: function _readLine(line) {\n        var readed = 0;\n\n        while (true) {\n          var find = -1;\n          find = line.indexOf('//', readed);\n\n          if (find === -1) {\n            find = line.indexOf('#', readed);\n          }\n\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf('\\r\\n', readed);\n\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf('\\r', readed);\n\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf('\\n', readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n\n        return line.substr(readed);\n      }\n    }, {\n      key: '_readLine',\n      value: function _readLine(line) {\n        var readed = 0;\n\n        while (true) {\n          var find = -1;\n          find = line.indexOf('//', readed);\n\n          if (find === -1) {\n            find = line.indexOf('#', readed);\n          }\n\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf('\\r\\n', readed);\n\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf('\\r', readed);\n\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf('\\n', readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n\n        return line.substr(readed);\n      }\n    }, {\n      key: '_isBinary',\n      value: function _isBinary(binData) {\n        var reader = new DataView(binData);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n\n        if (expect === reader.byteLength) {\n          return true;\n        }\n\n        var fileLength = reader.byteLength;\n\n        for (var index = 0; index < fileLength; index++) {\n          if (reader.getUint8(index, false) > 127) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: '_ensureBinary',\n      value: function _ensureBinary(buf) {\n        if (typeof buf === 'string') {\n          var array_buffer = new Uint8Array(buf.length);\n\n          for (var _i6 = 0; _i6 < buf.length; _i6++) {\n            array_buffer[_i6] = buf.charCodeAt(_i6) & 0xff;\n          }\n\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: '_ensureString',\n      value: function _ensureString(buf) {\n        if (typeof buf !== 'string') {\n          return LoaderUtils.decodeText(new Uint8Array(buf));\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: 'parse',\n      value: function _parse(data, onLoad) {\n        var binData = this._ensureBinary(data);\n\n        this._data = this._ensureString(data);\n        this.onLoad = onLoad;\n        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n      }\n    }, {\n      key: '_parseBinary',\n      value: function _parseBinary(data) {\n        return this._parseASCII(LoaderUtils.decodeText(new Uint8Array(data)));\n      }\n    }, {\n      key: '_parseASCII',\n      value: function _parseASCII() {\n        var path;\n\n        if (this.resourcePath !== '') {\n          path = this.resourcePath;\n        } else if (this.path !== '') {\n          path = this.path;\n        } else {\n          path = LoaderUtils.extractUrlBase(this.url);\n        }\n\n        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n        var endRead = 16;\n        this.Hierarchies.children = [];\n\n        this._hierarchieParse(this.Hierarchies, endRead);\n\n        this._changeRoot();\n\n        this._currentObject = this.Hierarchies.children.shift();\n\n        this._mainloop();\n      }\n    }, {\n      key: '_hierarchieParse',\n      value: function _hierarchieParse(_parent, _end) {\n        var endRead = _end;\n\n        while (true) {\n          var find1 = this._data.indexOf('{', endRead) + 1;\n\n          var findEnd = this._data.indexOf('}', endRead);\n\n          var findNext = this._data.indexOf('{', find1) + 1;\n\n          if (find1 > 0 && findEnd > find1) {\n            var _currentObject = {};\n            _currentObject.children = [];\n\n            var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n\n            var word = nameData.split(/ /g);\n\n            if (word.length > 0) {\n              _currentObject.type = word[0];\n\n              if (word.length >= 2) {\n                _currentObject.name = word[1];\n              } else {\n                _currentObject.name = word[0] + this.Hierarchies.children.length;\n              }\n            } else {\n              _currentObject.name = nameData;\n              _currentObject.type = '';\n            }\n\n            if (_currentObject.type === 'Animation') {\n              _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n\n              var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n\n              endRead = refs.end;\n              _currentObject.children = refs.parent.children;\n            } else {\n              var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n\n              _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n\n              if (findNext <= 0 || findEnd < findNext) {\n                endRead = findEnd + 1;\n              } else {\n                var nextStart = Math.max(DataEnder + 1, find1);\n\n                var _refs = this._hierarchieParse(_currentObject, nextStart);\n\n                endRead = _refs.end;\n                _currentObject.children = _refs.parent.children;\n              }\n            }\n\n            _currentObject.parent = _parent;\n\n            if (_currentObject.type != 'template') {\n              _parent.children.push(_currentObject);\n            }\n          } else {\n            endRead = find1 === -1 ? this._data.length : findEnd + 1;\n            break;\n          }\n        }\n\n        return {\n          parent: _parent,\n          end: endRead\n        };\n      }\n    }, {\n      key: '_mainloop',\n      value: function _mainloop() {\n        var _this2 = this;\n\n        this._mainProc();\n\n        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n          setTimeout(function () {\n            _this2._mainloop();\n          }, 1);\n        } else {\n          setTimeout(function () {\n            _this2.onLoad({\n              models: _this2.Meshes,\n              animations: _this2.animations\n            });\n          }, 1);\n        }\n      }\n    }, {\n      key: '_mainProc',\n      value: function _mainProc() {\n        var breakFlag = false;\n\n        while (true) {\n          if (!this._currentObject.worked) {\n            switch (this._currentObject.type) {\n              case 'template':\n                break;\n\n              case 'AnimTicksPerSecond':\n                this.animTicksPerSecond = parseInt(this._currentObject.data);\n                break;\n\n              case 'Frame':\n                this._setFrame();\n\n                break;\n\n              case 'FrameTransformMatrix':\n                this._setFrameTransformMatrix();\n\n                break;\n\n              case 'Mesh':\n                this._changeRoot();\n\n                this._currentGeo = {};\n                this._currentGeo.name = this._currentObject.name.trim();\n                this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                this._currentGeo.VertexSetedBoneCount = [];\n                this._currentGeo.GeometryData = {\n                  vertices: [],\n                  normals: [],\n                  uvs: [],\n                  skinIndices: [],\n                  skinWeights: [],\n                  indices: [],\n                  materialIndices: []\n                };\n                this._currentGeo.Materials = [];\n                this._currentGeo.normalVectors = [];\n                this._currentGeo.BoneInfs = [];\n                this._currentGeo.baseFrame = this._currentFrame;\n\n                this._makeBoneFrom_CurrentFrame();\n\n                this._readVertexDatas();\n\n                breakFlag = true;\n                break;\n\n              case 'MeshNormals':\n                this._readVertexDatas();\n\n                break;\n\n              case 'MeshTextureCoords':\n                this._setMeshTextureCoords();\n\n                break;\n\n              case 'VertexDuplicationIndices':\n                break;\n\n              case 'MeshMaterialList':\n                this._setMeshMaterialList();\n\n                break;\n\n              case 'Material':\n                this._setMaterial();\n\n                break;\n\n              case 'SkinWeights':\n                this._setSkinWeights();\n\n                break;\n\n              case 'AnimationSet':\n                this._changeRoot();\n\n                this._currentAnime = {};\n                this._currentAnime.name = this._currentObject.name.trim();\n                this._currentAnime.AnimeFrames = [];\n                break;\n\n              case 'Animation':\n                if (this._currentAnimeFrames) {\n                  this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                }\n\n                this._currentAnimeFrames = new XAnimationInfo();\n                this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                break;\n\n              case 'AnimationKey':\n                this._readAnimationKey();\n\n                breakFlag = true;\n                break;\n            }\n\n            this._currentObject.worked = true;\n          }\n\n          if (this._currentObject.children.length > 0) {\n            this._currentObject = this._currentObject.children.shift();\n\n            if (this.debug) {\n              console.log('processing ' + this._currentObject.name);\n            }\n\n            if (breakFlag) break;\n          } else {\n            if (this._currentObject.worked) {\n              if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                this._changeRoot();\n              }\n            }\n\n            if (this._currentObject.parent) {\n              this._currentObject = this._currentObject.parent;\n            } else {\n              breakFlag = true;\n            }\n\n            if (breakFlag) break;\n          }\n        }\n\n        return;\n      }\n    }, {\n      key: '_changeRoot',\n      value: function _changeRoot() {\n        if (this._currentGeo != null && this._currentGeo.name) {\n          this._makeOutputGeometry();\n        }\n\n        this._currentGeo = {};\n\n        if (this._currentAnime != null && this._currentAnime.name) {\n          if (this._currentAnimeFrames) {\n            this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n\n            this._currentAnimeFrames = null;\n          }\n\n          this._makeOutputAnimation();\n        }\n\n        this._currentAnime = {};\n      }\n    }, {\n      key: '_getParentName',\n      value: function _getParentName(_obj) {\n        if (_obj.parent) {\n          if (_obj.parent.name) {\n            return _obj.parent.name;\n          } else {\n            return this._getParentName(_obj.parent);\n          }\n        } else {\n          return '';\n        }\n      }\n    }, {\n      key: '_setFrame',\n      value: function _setFrame() {\n        this._nowFrameName = this._currentObject.name.trim();\n        this._currentFrame = {};\n        this._currentFrame.name = this._nowFrameName;\n        this._currentFrame.children = [];\n\n        if (this._currentObject.parent && this._currentObject.parent.name) {\n          this._currentFrame.parentName = this._currentObject.parent.name;\n        }\n\n        this.frameHierarchie.push(this._nowFrameName);\n        this.HieStack[this._nowFrameName] = this._currentFrame;\n      }\n    }, {\n      key: '_setFrameTransformMatrix',\n      value: function _setFrameTransformMatrix() {\n        this._currentFrame.FrameTransformMatrix = new Matrix4();\n\n        var data = this._currentObject.data.split(',');\n\n        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n\n        this._makeBoneFrom_CurrentFrame();\n      }\n    }, {\n      key: '_makeBoneFrom_CurrentFrame',\n      value: function _makeBoneFrom_CurrentFrame() {\n        if (!this._currentFrame.FrameTransformMatrix) {\n          return;\n        }\n\n        var b = new Bone();\n        b.name = this._currentFrame.name;\n        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n        b.matrixWorld = b.matrix;\n        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n        this._currentFrame.putBone = b;\n\n        if (this._currentFrame.parentName) {\n          for (var frame in this.HieStack) {\n            if (this.HieStack[frame].name === this._currentFrame.parentName) {\n              this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n            }\n          }\n        }\n      }\n    }, {\n      key: '_readVertexDatas',\n      value: function _readVertexDatas() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        var maxLength = 0;\n\n        while (true) {\n          var changeMode = false;\n\n          if (mode_local === 0) {\n            var refO = this._readInt1(endRead);\n\n            endRead = refO.endRead;\n            mode_local = 1;\n            maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;\n\n            if (maxLength <= 0) {\n              maxLength = this._currentObject.data.length;\n            }\n          } else {\n            var find = 0;\n\n            switch (mode) {\n              case 0:\n                find = this._currentObject.data.indexOf(',', endRead) + 1;\n                break;\n\n              case 1:\n                find = this._currentObject.data.indexOf(';,', endRead) + 1;\n                break;\n            }\n\n            if (find === 0 || find > maxLength) {\n              find = maxLength;\n              mode_local = 0;\n              changeMode = true;\n            }\n\n            switch (this._currentObject.type) {\n              case 'Mesh':\n                switch (mode) {\n                  case 0:\n                    this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n\n                  case 1:\n                    this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n                }\n\n                break;\n\n              case 'MeshNormals':\n                switch (mode) {\n                  case 0:\n                    this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n                }\n\n                break;\n            }\n\n            endRead = find + 1;\n\n            if (changeMode) {\n              mode++;\n            }\n          }\n\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_readInt1',\n      value: function _readInt1(start) {\n        var find = this._currentObject.data.indexOf(';', start);\n\n        return {\n          refI: parseInt(this._currentObject.data.substr(start, find - start)),\n          endRead: find + 1\n        };\n      }\n    }, {\n      key: '_readVertex1',\n      value: function _readVertex1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n\n        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n\n        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n\n        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n\n        this._currentGeo.VertexSetedBoneCount.push(0);\n      }\n    }, {\n      key: '_readFace1',\n      value: function _readFace1(line) {\n        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');\n\n        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n      }\n    }, {\n      key: '_readNormalVector1',\n      value: function _readNormalVector1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n\n        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n      }\n    }, {\n      key: '_buildGeometry',\n      value: function _buildGeometry() {\n        var bufferGeometry = new BufferGeometry();\n        var position = [];\n        var normals = [];\n        var uvs = [];\n        var skinIndices = [];\n        var skinWeights = []; //\n\n        var data = this._currentGeo.GeometryData;\n\n        for (var _i7 = 0, l = data.indices.length; _i7 < l; _i7++) {\n          var stride2 = data.indices[_i7] * 2;\n          var stride3 = data.indices[_i7] * 3;\n          var stride4 = data.indices[_i7] * 4;\n          position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n          normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n          skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n          skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n          uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n        } //\n\n\n        bufferGeometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n        bufferGeometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n        bufferGeometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n        bufferGeometry.setAttribute('skinIndex', new Uint16BufferAttribute(skinIndices, 4));\n        bufferGeometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeights, 4));\n\n        this._computeGroups(bufferGeometry, data.materialIndices);\n\n        return bufferGeometry;\n      }\n    }, {\n      key: '_computeGroups',\n      value: function _computeGroups(bufferGeometry, materialIndices) {\n        var group;\n        var groups = [];\n        var materialIndex = undefined;\n\n        for (var _i8 = 0; _i8 < materialIndices.length; _i8++) {\n          var currentMaterialIndex = materialIndices[_i8];\n\n          if (currentMaterialIndex !== materialIndex) {\n            materialIndex = currentMaterialIndex;\n\n            if (group !== undefined) {\n              group.count = _i8 * 3 - group.start;\n              groups.push(group);\n            }\n\n            group = {\n              start: _i8 * 3,\n              materialIndex: materialIndex\n            };\n          }\n        }\n\n        if (group !== undefined) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n\n        bufferGeometry.groups = groups;\n      }\n    }, {\n      key: '_setMeshTextureCoords',\n      value: function _setMeshTextureCoords() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n\n        while (true) {\n          switch (mode) {\n            case 0:\n              if (mode_local === 0) {\n                var refO = this._readInt1(0);\n\n                endRead = refO.endRead;\n                mode_local = 1;\n              } else {\n                var find = this._currentObject.data.indexOf(',', endRead) + 1;\n\n                if (find === 0) {\n                  find = this._currentObject.data.length;\n                  mode = 2;\n                  mode_local = 0;\n                }\n\n                var line = this._currentObject.data.substr(endRead, find - endRead);\n\n                var data = this._readLine(line.trim()).split(';');\n\n                if (this.IsUvYReverse) {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                } else {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                }\n\n                endRead = find + 1;\n              }\n\n              break;\n          }\n\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_setMeshMaterialList',\n      value: function _setMeshMaterialList() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n\n        while (true) {\n          if (mode_local < 2) {\n            var refO = this._readInt1(endRead);\n\n            endRead = refO.endRead;\n            mode_local++;\n          } else {\n            var find = this._currentObject.data.indexOf(';', endRead);\n\n            if (find === -1) {\n              find = this._currentObject.data.length;\n              mode = 3;\n              mode_local = 0;\n            }\n\n            var line = this._currentObject.data.substr(endRead, find - endRead);\n\n            var data = this._readLine(line.trim()).split(',');\n\n            for (var _i9 = 0; _i9 < data.length; _i9++) {\n              this._currentGeo.GeometryData.materialIndices[_i9] = parseInt(data[_i9]);\n            }\n\n            endRead = this._currentObject.data.length;\n          }\n\n          if (endRead >= this._currentObject.data.length || mode >= 3) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_setMaterial',\n      value: function _setMaterial() {\n        var _nowMat = new MeshPhongMaterial({\n          color: Math.random() * 0xffffff\n        });\n\n        _nowMat.side = FrontSide;\n        _nowMat.name = this._currentObject.name;\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';;', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data = this._readLine(line.trim()).split(';');\n\n        _nowMat.color.r = parseFloat(data[0]);\n        _nowMat.color.g = parseFloat(data[1]);\n        _nowMat.color.b = parseFloat(data[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        _nowMat.shininess = parseFloat(this._readLine(line));\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';;', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data2 = this._readLine(line.trim()).split(';');\n\n        _nowMat.specular.r = parseFloat(data2[0]);\n        _nowMat.specular.g = parseFloat(data2[1]);\n        _nowMat.specular.b = parseFloat(data2[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(';;', endRead);\n\n        if (find === -1) {\n          find = this._currentObject.data.length;\n        }\n\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data3 = this._readLine(line.trim()).split(';');\n\n        _nowMat.emissive.r = parseFloat(data3[0]);\n        _nowMat.emissive.g = parseFloat(data3[1]);\n        _nowMat.emissive.b = parseFloat(data3[2]);\n        var localObject = null;\n\n        while (true) {\n          if (this._currentObject.children.length > 0) {\n            localObject = this._currentObject.children.shift();\n\n            if (this.debug) {\n              console.log('processing ' + localObject.name);\n            }\n\n            var fileName = localObject.data.substr(1, localObject.data.length - 2);\n\n            switch (localObject.type) {\n              case 'TextureFilename':\n                _nowMat.map = this.texloader.load(fileName);\n                break;\n\n              case 'BumpMapFilename':\n                _nowMat.bumpMap = this.texloader.load(fileName);\n                _nowMat.bumpScale = 0.05;\n                break;\n\n              case 'NormalMapFilename':\n                _nowMat.normalMap = this.texloader.load(fileName);\n                _nowMat.normalScale = new Vector2(2, 2);\n                break;\n\n              case 'EmissiveMapFilename':\n                _nowMat.emissiveMap = this.texloader.load(fileName);\n                break;\n\n              case 'LightMapFilename':\n                _nowMat.lightMap = this.texloader.load(fileName);\n                break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        this._currentGeo.Materials.push(_nowMat);\n      }\n    }, {\n      key: '_setSkinWeights',\n      value: function _setSkinWeights() {\n        var boneInf = new XboneInf();\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        endRead = find + 1;\n        boneInf.boneName = line.substr(1, line.length - 2);\n        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n        find = this._currentObject.data.indexOf(';', endRead);\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data = this._readLine(line.trim()).split(',');\n\n        for (var _i10 = 0; _i10 < data.length; _i10++) {\n          boneInf.Indeces.push(parseInt(data[_i10]));\n        }\n\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data2 = this._readLine(line.trim()).split(',');\n\n        for (var _i = 0; _i < data2.length; _i++) {\n          boneInf.Weights.push(parseFloat(data2[_i]));\n        }\n\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n\n        if (find <= 0) {\n          find = this._currentObject.data.length;\n        }\n\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data3 = this._readLine(line.trim()).split(',');\n\n        boneInf.OffsetMatrix = new Matrix4();\n\n        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n\n        this._currentGeo.BoneInfs.push(boneInf);\n      }\n    }, {\n      key: '_makePutBoneList',\n      value: function _makePutBoneList(_RootName, _bones) {\n        var putting = false;\n\n        for (var frame in this.HieStack) {\n          if (this.HieStack[frame].name === _RootName || putting) {\n            putting = true;\n            var b = new Bone();\n            b.name = this.HieStack[frame].name;\n            b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n            b.matrixWorld = b.matrix;\n            b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n            b.pos = new Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\n            b.rotq = new Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\n            b.scl = new Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\n\n            if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n              for (var _i11 = 0; _i11 < _bones.length; _i11++) {\n                if (this.HieStack[frame].parentName === _bones[_i11].name) {\n                  _bones[_i11].add(b);\n\n                  b.parent = _i11;\n                  break;\n                }\n              }\n            }\n\n            _bones.push(b);\n          }\n        }\n      }\n    }, {\n      key: '_makeOutputGeometry',\n      value: function _makeOutputGeometry() {\n        var mesh = null;\n\n        if (this._currentGeo.BoneInfs.length > 0) {\n          var putBones = [];\n\n          this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n\n          for (var bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n            var boneIndex = 0;\n\n            for (var bb = 0; bb < putBones.length; bb++) {\n              if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                boneIndex = bb;\n                putBones[bb].OffsetMatrix = new Matrix4();\n                putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                break;\n              }\n            }\n\n            for (var vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n              var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n              var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n              var stride = nowVertexID * 4;\n\n              switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                case 0:\n                  this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                  break;\n\n                case 1:\n                  this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                  break;\n\n                case 2:\n                  this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                  break;\n\n                case 3:\n                  this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                  break;\n              }\n\n              this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n\n              if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                console.log('warn! over 4 bone weight! :' + nowVertexID);\n              }\n            }\n          }\n\n          for (var sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n            this._currentGeo.Materials[sk].skinning = true;\n          }\n\n          var offsetList = [];\n\n          for (var _bi = 0; _bi < putBones.length; _bi++) {\n            if (putBones[_bi].OffsetMatrix) {\n              offsetList.push(putBones[_bi].OffsetMatrix);\n            } else {\n              offsetList.push(new Matrix4());\n            }\n          }\n\n          var bufferGeometry = this._buildGeometry();\n\n          mesh = new SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n\n          this._initSkeleton(mesh, putBones, offsetList);\n        } else {\n          var _bufferGeometry = this._buildGeometry();\n\n          mesh = new Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n        }\n\n        mesh.name = this._currentGeo.name;\n        var worldBaseMx = new Matrix4();\n        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n\n        if (currentMxFrame && currentMxFrame.parent) {\n          while (true) {\n            currentMxFrame = currentMxFrame.parent;\n\n            if (currentMxFrame) {\n              worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n            } else {\n              break;\n            }\n          }\n\n          mesh.applyMatrix4(worldBaseMx);\n        }\n\n        this.Meshes.push(mesh);\n      }\n    }, {\n      key: '_initSkeleton',\n      value: function _initSkeleton(mesh, boneList, boneInverses) {\n        var bones = [],\n            bone,\n            gbone;\n        var i, il;\n\n        for (i = 0, il = boneList.length; i < il; i++) {\n          gbone = boneList[i];\n          bone = new Bone();\n          bones.push(bone);\n          bone.name = gbone.name;\n          bone.position.fromArray(gbone.pos);\n          bone.quaternion.fromArray(gbone.rotq);\n          if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl);\n        }\n\n        for (i = 0, il = boneList.length; i < il; i++) {\n          gbone = boneList[i];\n\n          if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n            bones[gbone.parent].add(bones[i]);\n          } else {\n            mesh.add(bones[i]);\n          }\n        }\n\n        mesh.updateMatrixWorld(true);\n        var skeleton = new Skeleton(bones, boneInverses);\n        mesh.bind(skeleton, mesh.matrixWorld);\n      }\n    }, {\n      key: '_readAnimationKey',\n      value: function _readAnimationKey() {\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        endRead = find + 1;\n        var nowKeyType = parseInt(this._readLine(line));\n        find = this._currentObject.data.indexOf(';', endRead);\n        endRead = find + 1;\n        line = this._currentObject.data.substr(endRead);\n\n        var data = this._readLine(line.trim()).split(';;,');\n\n        for (var _i12 = 0; _i12 < data.length; _i12++) {\n          var data2 = data[_i12].split(';');\n\n          var keyInfo = new XKeyFrameInfo();\n          keyInfo.type = nowKeyType;\n          keyInfo.Frame = parseInt(data2[0]);\n          keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n          keyInfo.time = keyInfo.Frame;\n\n          if (nowKeyType != 4) {\n            var frameFound = false;\n\n            for (var mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n              if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                frameFound = true;\n                break;\n              }\n            }\n\n            var frameValue = data2[2].split(',');\n\n            switch (nowKeyType) {\n              case 0:\n                keyInfo.rot = new Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                break;\n\n              case 1:\n                keyInfo.scl = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n\n              case 2:\n                keyInfo.pos = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n            }\n\n            if (!frameFound) {\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\n            }\n          } else {\n            keyInfo.matrix = new Matrix4();\n\n            this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));\n\n            this._currentAnimeFrames.keyFrames.push(keyInfo);\n          }\n        }\n      }\n    }, {\n      key: '_makeOutputAnimation',\n      value: function _makeOutputAnimation() {\n        var animationObj = new XAnimationObj(this.options);\n        animationObj.fps = this.animTicksPerSecond;\n        animationObj.name = this._currentAnime.name;\n        animationObj.make(this._currentAnime.AnimeFrames);\n        this.animations.push(animationObj);\n      }\n    }, {\n      key: 'assignAnimation',\n      value: function assignAnimation(_model, _animation) {\n        var model = _model;\n        var animation = _animation;\n\n        if (!model) {\n          model = this.Meshes[0];\n        }\n\n        if (!animation) {\n          animation = this.animations[0];\n        }\n\n        if (!model || !animation) {\n          return null;\n        }\n\n        var put = {};\n        put.fps = animation.fps;\n        put.name = animation.name;\n        put.length = animation.length;\n        put.hierarchy = [];\n\n        for (var b = 0; b < model.skeleton.bones.length; b++) {\n          var findAnimation = false;\n\n          for (var _i13 = 0; _i13 < animation.hierarchy.length; _i13++) {\n            if (model.skeleton.bones[b].name === animation.hierarchy[_i13].name) {\n              findAnimation = true;\n\n              var c_key = animation.hierarchy[_i13].copy();\n\n              c_key.parent = -1;\n\n              if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\n                for (var bb = 0; bb < put.hierarchy.length; bb++) {\n                  if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                    c_key.parent = bb;\n                    c_key.parentName = model.skeleton.bones[b].parent.name;\n                  }\n                }\n              }\n\n              put.hierarchy.push(c_key);\n              break;\n            }\n          }\n\n          if (!findAnimation) {\n            var _c_key = animation.hierarchy[0].copy();\n\n            _c_key.name = model.skeleton.bones[b].name;\n            _c_key.parent = -1;\n\n            for (var k = 0; k < _c_key.keys.length; k++) {\n              if (_c_key.keys[k].pos) {\n                _c_key.keys[k].pos.set(0, 0, 0);\n              }\n\n              if (_c_key.keys[k].scl) {\n                _c_key.keys[k].scl.set(1, 1, 1);\n              }\n\n              if (_c_key.keys[k].rot) {\n                _c_key.keys[k].rot.set(0, 0, 0, 1);\n              }\n            }\n\n            put.hierarchy.push(_c_key);\n          }\n        }\n\n        if (!model.geometry.animations) {\n          model.geometry.animations = [];\n        }\n\n        model.geometry.animations.push(AnimationClip.parseAnimation(put, model.skeleton.bones));\n\n        if (!model.animationMixer) {\n          model.animationMixer = new AnimationMixer(model);\n        }\n\n        return put;\n      }\n    }, {\n      key: '_ParseMatrixData',\n      value: function _ParseMatrixData(targetMatrix, data) {\n        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n      }\n    }]);\n    return XLoader;\n  }();\n\n  return XLoader;\n}();\n\nexport { XLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/XLoader.js"],"names":["Vector3","Quaternion","FileLoader","LoaderUtils","Matrix4","Bone","BufferGeometry","Float32BufferAttribute","Uint16BufferAttribute","MeshPhongMaterial","FrontSide","Vector2","SkinnedMesh","Mesh","Skeleton","AnimationClip","AnimationMixer","Loader","TextureLoader","XLoader","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","XboneInf","boneName","BoneIndex","Indeces","Weights","initMatrix","OffsetMatrix","XAnimationInfo","animeName","targetBone","keyType","frameStartLv","keyFrames","InverseMx","XAnimationObj","_flags","fps","name","hierarchy","putFlags","putPos","undefined","putRot","putScl","value","make","XAnimationInfoArray","push","makeBonekeys","keys","time","clone","assign","refObj","parent","keyFrameRefactor","copy","keyframe","pos","rot","scl","matrix","setFromMatrixPosition","setFromRotationMatrix","setFromMatrixScale","XKeyFrameInfo","index","Frame","manager","call","debug","texloader","url","_putMatLength","_nowMat","_nowFrameName","frameHierarchie","Hierarchies","HieStack","_currentObject","_currentFrame","_data","onLoad","IsUvYReverse","Meshes","animations","animTicksPerSecond","_currentGeo","_currentAnime","_currentAnimeFrames","_setArgOption","_arg","_start","arguments","options","load","onProgress","onError","_this","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","response","parse","e","console","error","itemError","_readLine","line","readed","find","indexOf","foundNewLine","substr","_isBinary","binData","reader","DataView","face_size","n_faces","getUint32","expect","byteLength","fileLength","getUint8","_ensureBinary","buf","array_buffer","Uint8Array","charCodeAt","buffer","_ensureString","decodeText","_parse","data","_parseBinary","_parseASCII","resourcePath","extractUrlBase","setCrossOrigin","crossOrigin","endRead","children","_hierarchieParse","_changeRoot","shift","_mainloop","_parent","_end","find1","findEnd","findNext","nameData","trim","word","split","type","refs","end","DataEnder","lastIndexOf","Math","min","nextStart","max","_refs","_this2","_mainProc","worked","setTimeout","models","breakFlag","parseInt","_setFrame","_setFrameTransformMatrix","parentName","_getParentName","VertexSetedBoneCount","GeometryData","vertices","normals","uvs","skinIndices","skinWeights","indices","materialIndices","Materials","normalVectors","BoneInfs","baseFrame","_makeBoneFrom_CurrentFrame","_readVertexDatas","_setMeshTextureCoords","_setMeshMaterialList","_setMaterial","_setSkinWeights","AnimeFrames","_readAnimationKey","log","_makeOutputGeometry","_makeOutputAnimation","_obj","FrameTransformMatrix","_ParseMatrixData","b","applyMatrix4","matrixWorld","putBone","frame","add","mode","mode_local","maxLength","changeMode","refO","_readInt1","_readVertex1","_readFace1","_readNormalVector1","start","refI","parseFloat","_buildGeometry","bufferGeometry","position","l","stride2","stride3","stride4","setAttribute","_computeGroups","group","groups","materialIndex","currentMaterialIndex","count","color","random","side","r","g","shininess","data2","specular","data3","emissive","localObject","fileName","map","bumpMap","bumpScale","normalMap","normalScale","emissiveMap","lightMap","boneInf","_i","_makePutBoneList","_RootName","_bones","putting","toArray","rotq","mesh","putBones","bi","boneIndex","bb","vi","nowVertexID","nowVal","stride","sk","skinning","offsetList","_bi","_initSkeleton","_bufferGeometry","worldBaseMx","currentMxFrame","multiply","boneList","boneInverses","bones","bone","gbone","il","fromArray","quaternion","scale","updateMatrixWorld","skeleton","bind","nowKeyType","keyInfo","frameFound","mm","frameValue","animationObj","assignAnimation","_model","_animation","model","animation","put","findAnimation","c_key","_c_key","k","set","geometry","parseAnimation","animationMixer","targetMatrix"],"mappings":"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","sourcesContent":["import { Vector3, Quaternion, FileLoader, LoaderUtils, Matrix4, Bone, BufferGeometry, Float32BufferAttribute, Uint16BufferAttribute, MeshPhongMaterial, FrontSide, Vector2, SkinnedMesh, Mesh, Skeleton, AnimationClip, AnimationMixer, Loader, TextureLoader } from 'three';\n\nvar XLoader = function () {\n  var classCallCheck = function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  };\n\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (let i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if ('value' in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var XboneInf = function XboneInf() {\n    classCallCheck(this, XboneInf);\n    this.boneName = '';\n    this.BoneIndex = 0;\n    this.Indeces = [];\n    this.Weights = [];\n    this.initMatrix = null;\n    this.OffsetMatrix = null;\n  };\n\n  var XAnimationInfo = function XAnimationInfo() {\n    classCallCheck(this, XAnimationInfo);\n    this.animeName = '';\n    this.boneName = '';\n    this.targetBone = null;\n    this.keyType = 4;\n    this.frameStartLv = 0;\n    this.keyFrames = [];\n    this.InverseMx = null;\n  };\n\n  var XAnimationObj = function () {\n    function XAnimationObj(_flags) {\n      classCallCheck(this, XAnimationObj);\n      this.fps = 30;\n      this.name = 'xanimation';\n      this.length = 0;\n      this.hierarchy = [];\n      this.putFlags = _flags;\n\n      if (this.putFlags.putPos === undefined) {\n        this.putFlags.putPos = true;\n      }\n\n      if (this.putFlags.putRot === undefined) {\n        this.putFlags.putRot = true;\n      }\n\n      if (this.putFlags.putScl === undefined) {\n        this.putFlags.putScl = true;\n      }\n    }\n\n    createClass(XAnimationObj, [{\n      key: 'make',\n      value: function make(XAnimationInfoArray) {\n        for (let i = 0; i < XAnimationInfoArray.length; i++) {\n          this.hierarchy.push(this.makeBonekeys(XAnimationInfoArray[i]));\n        }\n\n        this.length = this.hierarchy[0].keys[this.hierarchy[0].keys.length - 1].time;\n      }\n    }, {\n      key: 'clone',\n      value: function clone() {\n        return Object.assign({}, this);\n      }\n    }, {\n      key: 'makeBonekeys',\n      value: function makeBonekeys(XAnimationInfo) {\n        var refObj = {};\n        refObj.name = XAnimationInfo.boneName;\n        refObj.parent = '';\n        refObj.keys = this.keyFrameRefactor(XAnimationInfo);\n\n        refObj.copy = function () {\n          return Object.assign({}, this);\n        };\n\n        return refObj;\n      }\n    }, {\n      key: 'keyFrameRefactor',\n      value: function keyFrameRefactor(XAnimationInfo) {\n        var keys = [];\n\n        for (let i = 0; i < XAnimationInfo.keyFrames.length; i++) {\n          var keyframe = {};\n          keyframe.time = XAnimationInfo.keyFrames[i].time * this.fps;\n\n          if (XAnimationInfo.keyFrames[i].pos && this.putFlags.putPos) {\n            keyframe.pos = XAnimationInfo.keyFrames[i].pos;\n          }\n\n          if (XAnimationInfo.keyFrames[i].rot && this.putFlags.putRot) {\n            keyframe.rot = XAnimationInfo.keyFrames[i].rot;\n          }\n\n          if (XAnimationInfo.keyFrames[i].scl && this.putFlags.putScl) {\n            keyframe.scl = XAnimationInfo.keyFrames[i].scl;\n          }\n\n          if (XAnimationInfo.keyFrames[i].matrix) {\n            keyframe.matrix = XAnimationInfo.keyFrames[i].matrix;\n\n            if (this.putFlags.putPos) {\n              keyframe.pos = new Vector3().setFromMatrixPosition(keyframe.matrix);\n            }\n\n            if (this.putFlags.putRot) {\n              keyframe.rot = new Quaternion().setFromRotationMatrix(keyframe.matrix);\n            }\n\n            if (this.putFlags.putScl) {\n              keyframe.scl = new Vector3().setFromMatrixScale(keyframe.matrix);\n            }\n          }\n\n          keys.push(keyframe);\n        }\n\n        return keys;\n      }\n    }]);\n    return XAnimationObj;\n  }();\n\n  var XKeyFrameInfo = function XKeyFrameInfo() {\n    classCallCheck(this, XKeyFrameInfo);\n    this.index = 0;\n    this.Frame = 0;\n    this.time = 0.0;\n    this.matrix = null;\n  };\n\n  var XLoader = function () {\n    function XLoader(manager) {\n      Loader.call(this, manager);\n      classCallCheck(this, XLoader);\n      this.debug = false;\n      this.texloader = new TextureLoader(this.manager);\n      this.url = '';\n      this._putMatLength = 0;\n      this._nowMat = null;\n      this._nowFrameName = '';\n      this.frameHierarchie = [];\n      this.Hierarchies = {};\n      this.HieStack = [];\n      this._currentObject = {};\n      this._currentFrame = {};\n      this._data = null;\n      this.onLoad = null;\n      this.IsUvYReverse = true;\n      this.Meshes = [];\n      this.animations = [];\n      this.animTicksPerSecond = 30;\n      this._currentGeo = null;\n      this._currentAnime = null;\n      this._currentAnimeFrames = null;\n    }\n\n    createClass(XLoader, [{\n      key: '_setArgOption',\n      value: function _setArgOption(_arg) {\n        var _start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n        if (!_arg) {\n          return;\n        }\n\n        for (let i = _start; i < _arg.length; i++) {\n          switch (i) {\n            case 0:\n              this.url = _arg[i];\n              break;\n\n            case 1:\n              this.options = _arg[i];\n              break;\n          }\n        }\n\n        if (this.options === undefined) {\n          this.options = {};\n        }\n      }\n    }, {\n      key: 'load',\n      value: function load(_arg, onLoad, onProgress, onError) {\n        var _this = this;\n\n        this._setArgOption(_arg);\n\n        var loader = new FileLoader(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType('arraybuffer');\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(this.url, function (response) {\n          try {\n            _this.parse(response, onLoad);\n          } catch (e) {\n            if (onError) {\n              onError(e);\n            } else {\n              console.error(e);\n            }\n\n            _this.manager.itemError(_this.url);\n          }\n        }, onProgress, onError);\n      }\n    }, {\n      key: '_readLine',\n      value: function _readLine(line) {\n        var readed = 0;\n\n        while (true) {\n          var find = -1;\n          find = line.indexOf('//', readed);\n\n          if (find === -1) {\n            find = line.indexOf('#', readed);\n          }\n\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf('\\r\\n', readed);\n\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf('\\r', readed);\n\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf('\\n', readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n\n        return line.substr(readed);\n      }\n    }, {\n      key: '_readLine',\n      value: function _readLine(line) {\n        var readed = 0;\n\n        while (true) {\n          var find = -1;\n          find = line.indexOf('//', readed);\n\n          if (find === -1) {\n            find = line.indexOf('#', readed);\n          }\n\n          if (find > -1 && find < 2) {\n            var foundNewLine = -1;\n            foundNewLine = line.indexOf('\\r\\n', readed);\n\n            if (foundNewLine > 0) {\n              readed = foundNewLine + 2;\n            } else {\n              foundNewLine = line.indexOf('\\r', readed);\n\n              if (foundNewLine > 0) {\n                readed = foundNewLine + 1;\n              } else {\n                readed = line.indexOf('\\n', readed) + 1;\n              }\n            }\n          } else {\n            break;\n          }\n        }\n\n        return line.substr(readed);\n      }\n    }, {\n      key: '_isBinary',\n      value: function _isBinary(binData) {\n        var reader = new DataView(binData);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n\n        if (expect === reader.byteLength) {\n          return true;\n        }\n\n        var fileLength = reader.byteLength;\n\n        for (let index = 0; index < fileLength; index++) {\n          if (reader.getUint8(index, false) > 127) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: '_ensureBinary',\n      value: function _ensureBinary(buf) {\n        if (typeof buf === 'string') {\n          var array_buffer = new Uint8Array(buf.length);\n\n          for (let i = 0; i < buf.length; i++) {\n            array_buffer[i] = buf.charCodeAt(i) & 0xff;\n          }\n\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: '_ensureString',\n      value: function _ensureString(buf) {\n        if (typeof buf !== 'string') {\n          return LoaderUtils.decodeText(new Uint8Array(buf));\n        } else {\n          return buf;\n        }\n      }\n    }, {\n      key: 'parse',\n      value: function _parse(data, onLoad) {\n        var binData = this._ensureBinary(data);\n\n        this._data = this._ensureString(data);\n        this.onLoad = onLoad;\n        return this._isBinary(binData) ? this._parseBinary(binData) : this._parseASCII();\n      }\n    }, {\n      key: '_parseBinary',\n      value: function _parseBinary(data) {\n        return this._parseASCII(LoaderUtils.decodeText(new Uint8Array(data)));\n      }\n    }, {\n      key: '_parseASCII',\n      value: function _parseASCII() {\n        var path;\n\n        if (this.resourcePath !== '') {\n          path = this.resourcePath;\n        } else if (this.path !== '') {\n          path = this.path;\n        } else {\n          path = LoaderUtils.extractUrlBase(this.url);\n        }\n\n        this.texloader.setPath(path).setCrossOrigin(this.crossOrigin);\n        var endRead = 16;\n        this.Hierarchies.children = [];\n\n        this._hierarchieParse(this.Hierarchies, endRead);\n\n        this._changeRoot();\n\n        this._currentObject = this.Hierarchies.children.shift();\n\n        this._mainloop();\n      }\n    }, {\n      key: '_hierarchieParse',\n      value: function _hierarchieParse(_parent, _end) {\n        var endRead = _end;\n\n        while (true) {\n          var find1 = this._data.indexOf('{', endRead) + 1;\n\n          var findEnd = this._data.indexOf('}', endRead);\n\n          var findNext = this._data.indexOf('{', find1) + 1;\n\n          if (find1 > 0 && findEnd > find1) {\n            var _currentObject = {};\n            _currentObject.children = [];\n\n            var nameData = this._readLine(this._data.substr(endRead, find1 - endRead - 1)).trim();\n\n            var word = nameData.split(/ /g);\n\n            if (word.length > 0) {\n              _currentObject.type = word[0];\n\n              if (word.length >= 2) {\n                _currentObject.name = word[1];\n              } else {\n                _currentObject.name = word[0] + this.Hierarchies.children.length;\n              }\n            } else {\n              _currentObject.name = nameData;\n              _currentObject.type = '';\n            }\n\n            if (_currentObject.type === 'Animation') {\n              _currentObject.data = this._data.substr(findNext, findEnd - findNext).trim();\n\n              var refs = this._hierarchieParse(_currentObject, findEnd + 1);\n\n              endRead = refs.end;\n              _currentObject.children = refs.parent.children;\n            } else {\n              var DataEnder = this._data.lastIndexOf(';', findNext > 0 ? Math.min(findNext, findEnd) : findEnd);\n\n              _currentObject.data = this._data.substr(find1, DataEnder - find1).trim();\n\n              if (findNext <= 0 || findEnd < findNext) {\n                endRead = findEnd + 1;\n              } else {\n                var nextStart = Math.max(DataEnder + 1, find1);\n\n                var _refs = this._hierarchieParse(_currentObject, nextStart);\n\n                endRead = _refs.end;\n                _currentObject.children = _refs.parent.children;\n              }\n            }\n\n            _currentObject.parent = _parent;\n\n            if (_currentObject.type != 'template') {\n              _parent.children.push(_currentObject);\n            }\n          } else {\n            endRead = find1 === -1 ? this._data.length : findEnd + 1;\n            break;\n          }\n        }\n\n        return {\n          parent: _parent,\n          end: endRead\n        };\n      }\n    }, {\n      key: '_mainloop',\n      value: function _mainloop() {\n        var _this2 = this;\n\n        this._mainProc();\n\n        if (this._currentObject.parent || this._currentObject.children.length > 0 || !this._currentObject.worked) {\n          setTimeout(function () {\n            _this2._mainloop();\n          }, 1);\n        } else {\n          setTimeout(function () {\n            _this2.onLoad({\n              models: _this2.Meshes,\n              animations: _this2.animations\n            });\n          }, 1);\n        }\n      }\n    }, {\n      key: '_mainProc',\n      value: function _mainProc() {\n        var breakFlag = false;\n\n        while (true) {\n          if (!this._currentObject.worked) {\n            switch (this._currentObject.type) {\n              case 'template':\n                break;\n\n              case 'AnimTicksPerSecond':\n                this.animTicksPerSecond = parseInt(this._currentObject.data);\n                break;\n\n              case 'Frame':\n                this._setFrame();\n\n                break;\n\n              case 'FrameTransformMatrix':\n                this._setFrameTransformMatrix();\n\n                break;\n\n              case 'Mesh':\n                this._changeRoot();\n\n                this._currentGeo = {};\n                this._currentGeo.name = this._currentObject.name.trim();\n                this._currentGeo.parentName = this._getParentName(this._currentObject).trim();\n                this._currentGeo.VertexSetedBoneCount = [];\n                this._currentGeo.GeometryData = {\n                  vertices: [],\n                  normals: [],\n                  uvs: [],\n                  skinIndices: [],\n                  skinWeights: [],\n                  indices: [],\n                  materialIndices: []\n                };\n                this._currentGeo.Materials = [];\n                this._currentGeo.normalVectors = [];\n                this._currentGeo.BoneInfs = [];\n                this._currentGeo.baseFrame = this._currentFrame;\n\n                this._makeBoneFrom_CurrentFrame();\n\n                this._readVertexDatas();\n\n                breakFlag = true;\n                break;\n\n              case 'MeshNormals':\n                this._readVertexDatas();\n\n                break;\n\n              case 'MeshTextureCoords':\n                this._setMeshTextureCoords();\n\n                break;\n\n              case 'VertexDuplicationIndices':\n                break;\n\n              case 'MeshMaterialList':\n                this._setMeshMaterialList();\n\n                break;\n\n              case 'Material':\n                this._setMaterial();\n\n                break;\n\n              case 'SkinWeights':\n                this._setSkinWeights();\n\n                break;\n\n              case 'AnimationSet':\n                this._changeRoot();\n\n                this._currentAnime = {};\n                this._currentAnime.name = this._currentObject.name.trim();\n                this._currentAnime.AnimeFrames = [];\n                break;\n\n              case 'Animation':\n                if (this._currentAnimeFrames) {\n                  this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n                }\n\n                this._currentAnimeFrames = new XAnimationInfo();\n                this._currentAnimeFrames.boneName = this._currentObject.data.trim();\n                break;\n\n              case 'AnimationKey':\n                this._readAnimationKey();\n\n                breakFlag = true;\n                break;\n            }\n\n            this._currentObject.worked = true;\n          }\n\n          if (this._currentObject.children.length > 0) {\n            this._currentObject = this._currentObject.children.shift();\n\n            if (this.debug) {\n              console.log('processing ' + this._currentObject.name);\n            }\n\n            if (breakFlag) break;\n          } else {\n            if (this._currentObject.worked) {\n              if (this._currentObject.parent && !this._currentObject.parent.parent) {\n                this._changeRoot();\n              }\n            }\n\n            if (this._currentObject.parent) {\n              this._currentObject = this._currentObject.parent;\n            } else {\n              breakFlag = true;\n            }\n\n            if (breakFlag) break;\n          }\n        }\n\n        return;\n      }\n    }, {\n      key: '_changeRoot',\n      value: function _changeRoot() {\n        if (this._currentGeo != null && this._currentGeo.name) {\n          this._makeOutputGeometry();\n        }\n\n        this._currentGeo = {};\n\n        if (this._currentAnime != null && this._currentAnime.name) {\n          if (this._currentAnimeFrames) {\n            this._currentAnime.AnimeFrames.push(this._currentAnimeFrames);\n\n            this._currentAnimeFrames = null;\n          }\n\n          this._makeOutputAnimation();\n        }\n\n        this._currentAnime = {};\n      }\n    }, {\n      key: '_getParentName',\n      value: function _getParentName(_obj) {\n        if (_obj.parent) {\n          if (_obj.parent.name) {\n            return _obj.parent.name;\n          } else {\n            return this._getParentName(_obj.parent);\n          }\n        } else {\n          return '';\n        }\n      }\n    }, {\n      key: '_setFrame',\n      value: function _setFrame() {\n        this._nowFrameName = this._currentObject.name.trim();\n        this._currentFrame = {};\n        this._currentFrame.name = this._nowFrameName;\n        this._currentFrame.children = [];\n\n        if (this._currentObject.parent && this._currentObject.parent.name) {\n          this._currentFrame.parentName = this._currentObject.parent.name;\n        }\n\n        this.frameHierarchie.push(this._nowFrameName);\n        this.HieStack[this._nowFrameName] = this._currentFrame;\n      }\n    }, {\n      key: '_setFrameTransformMatrix',\n      value: function _setFrameTransformMatrix() {\n        this._currentFrame.FrameTransformMatrix = new Matrix4();\n\n        var data = this._currentObject.data.split(',');\n\n        this._ParseMatrixData(this._currentFrame.FrameTransformMatrix, data);\n\n        this._makeBoneFrom_CurrentFrame();\n      }\n    }, {\n      key: '_makeBoneFrom_CurrentFrame',\n      value: function _makeBoneFrom_CurrentFrame() {\n        if (!this._currentFrame.FrameTransformMatrix) {\n          return;\n        }\n\n        var b = new Bone();\n        b.name = this._currentFrame.name;\n        b.applyMatrix4(this._currentFrame.FrameTransformMatrix);\n        b.matrixWorld = b.matrix;\n        b.FrameTransformMatrix = this._currentFrame.FrameTransformMatrix;\n        this._currentFrame.putBone = b;\n\n        if (this._currentFrame.parentName) {\n          for (let frame in this.HieStack) {\n            if (this.HieStack[frame].name === this._currentFrame.parentName) {\n              this.HieStack[frame].putBone.add(this._currentFrame.putBone);\n            }\n          }\n        }\n      }\n    }, {\n      key: '_readVertexDatas',\n      value: function _readVertexDatas() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n        var maxLength = 0;\n\n        while (true) {\n          var changeMode = false;\n\n          if (mode_local === 0) {\n            var refO = this._readInt1(endRead);\n\n            endRead = refO.endRead;\n            mode_local = 1;\n            maxLength = this._currentObject.data.indexOf(';;', endRead) + 1;\n\n            if (maxLength <= 0) {\n              maxLength = this._currentObject.data.length;\n            }\n          } else {\n            var find = 0;\n\n            switch (mode) {\n              case 0:\n                find = this._currentObject.data.indexOf(',', endRead) + 1;\n                break;\n\n              case 1:\n                find = this._currentObject.data.indexOf(';,', endRead) + 1;\n                break;\n            }\n\n            if (find === 0 || find > maxLength) {\n              find = maxLength;\n              mode_local = 0;\n              changeMode = true;\n            }\n\n            switch (this._currentObject.type) {\n              case 'Mesh':\n                switch (mode) {\n                  case 0:\n                    this._readVertex1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n\n                  case 1:\n                    this._readFace1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n                }\n\n                break;\n\n              case 'MeshNormals':\n                switch (mode) {\n                  case 0:\n                    this._readNormalVector1(this._currentObject.data.substr(endRead, find - endRead));\n\n                    break;\n                }\n\n                break;\n            }\n\n            endRead = find + 1;\n\n            if (changeMode) {\n              mode++;\n            }\n          }\n\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_readInt1',\n      value: function _readInt1(start) {\n        var find = this._currentObject.data.indexOf(';', start);\n\n        return {\n          refI: parseInt(this._currentObject.data.substr(start, find - start)),\n          endRead: find + 1\n        };\n      }\n    }, {\n      key: '_readVertex1',\n      value: function _readVertex1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n\n        this._currentGeo.GeometryData.vertices.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n\n        this._currentGeo.GeometryData.skinIndices.push(0, 0, 0, 0);\n\n        this._currentGeo.GeometryData.skinWeights.push(1, 0, 0, 0);\n\n        this._currentGeo.VertexSetedBoneCount.push(0);\n      }\n    }, {\n      key: '_readFace1',\n      value: function _readFace1(line) {\n        var data = this._readLine(line.trim()).substr(2, line.length - 4).split(',');\n\n        this._currentGeo.GeometryData.indices.push(parseInt(data[0], 10), parseInt(data[1], 10), parseInt(data[2], 10));\n      }\n    }, {\n      key: '_readNormalVector1',\n      value: function _readNormalVector1(line) {\n        var data = this._readLine(line.trim()).substr(0, line.length - 2).split(';');\n\n        this._currentGeo.GeometryData.normals.push(parseFloat(data[0]), parseFloat(data[1]), parseFloat(data[2]));\n      }\n    }, {\n      key: '_buildGeometry',\n      value: function _buildGeometry() {\n        var bufferGeometry = new BufferGeometry();\n        var position = [];\n        var normals = [];\n        var uvs = [];\n        var skinIndices = [];\n        var skinWeights = []; //\n\n        var data = this._currentGeo.GeometryData;\n\n        for (let i = 0, l = data.indices.length; i < l; i++) {\n          var stride2 = data.indices[i] * 2;\n          var stride3 = data.indices[i] * 3;\n          var stride4 = data.indices[i] * 4;\n          position.push(data.vertices[stride3], data.vertices[stride3 + 1], data.vertices[stride3 + 2]);\n          normals.push(data.normals[stride3], data.normals[stride3 + 1], data.normals[stride3 + 2]);\n          skinIndices.push(data.skinIndices[stride4], data.skinIndices[stride4 + 1], data.skinIndices[stride4 + 2], data.skinIndices[stride4 + 3]);\n          skinWeights.push(data.skinWeights[stride4], data.skinWeights[stride4 + 1], data.skinWeights[stride4 + 2], data.skinWeights[stride4 + 3]);\n          uvs.push(data.uvs[stride2], data.uvs[stride2 + 1]);\n        } //\n\n\n        bufferGeometry.setAttribute('position', new Float32BufferAttribute(position, 3));\n        bufferGeometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n        bufferGeometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n        bufferGeometry.setAttribute('skinIndex', new Uint16BufferAttribute(skinIndices, 4));\n        bufferGeometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeights, 4));\n\n        this._computeGroups(bufferGeometry, data.materialIndices);\n\n        return bufferGeometry;\n      }\n    }, {\n      key: '_computeGroups',\n      value: function _computeGroups(bufferGeometry, materialIndices) {\n        var group;\n        var groups = [];\n        var materialIndex = undefined;\n\n        for (let i = 0; i < materialIndices.length; i++) {\n          var currentMaterialIndex = materialIndices[i];\n\n          if (currentMaterialIndex !== materialIndex) {\n            materialIndex = currentMaterialIndex;\n\n            if (group !== undefined) {\n              group.count = i * 3 - group.start;\n              groups.push(group);\n            }\n\n            group = {\n              start: i * 3,\n              materialIndex: materialIndex\n            };\n          }\n        }\n\n        if (group !== undefined) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n\n        bufferGeometry.groups = groups;\n      }\n    }, {\n      key: '_setMeshTextureCoords',\n      value: function _setMeshTextureCoords() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n\n        while (true) {\n          switch (mode) {\n            case 0:\n              if (mode_local === 0) {\n                var refO = this._readInt1(0);\n\n                endRead = refO.endRead;\n                mode_local = 1;\n              } else {\n                var find = this._currentObject.data.indexOf(',', endRead) + 1;\n\n                if (find === 0) {\n                  find = this._currentObject.data.length;\n                  mode = 2;\n                  mode_local = 0;\n                }\n\n                var line = this._currentObject.data.substr(endRead, find - endRead);\n\n                var data = this._readLine(line.trim()).split(';');\n\n                if (this.IsUvYReverse) {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), 1 - parseFloat(data[1]));\n                } else {\n                  this._currentGeo.GeometryData.uvs.push(parseFloat(data[0]), parseFloat(data[1]));\n                }\n\n                endRead = find + 1;\n              }\n\n              break;\n          }\n\n          if (endRead >= this._currentObject.data.length) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_setMeshMaterialList',\n      value: function _setMeshMaterialList() {\n        var endRead = 0;\n        var mode = 0;\n        var mode_local = 0;\n\n        while (true) {\n          if (mode_local < 2) {\n            var refO = this._readInt1(endRead);\n\n            endRead = refO.endRead;\n            mode_local++;\n          } else {\n            var find = this._currentObject.data.indexOf(';', endRead);\n\n            if (find === -1) {\n              find = this._currentObject.data.length;\n              mode = 3;\n              mode_local = 0;\n            }\n\n            var line = this._currentObject.data.substr(endRead, find - endRead);\n\n            var data = this._readLine(line.trim()).split(',');\n\n            for (let i = 0; i < data.length; i++) {\n              this._currentGeo.GeometryData.materialIndices[i] = parseInt(data[i]);\n            }\n\n            endRead = this._currentObject.data.length;\n          }\n\n          if (endRead >= this._currentObject.data.length || mode >= 3) {\n            break;\n          }\n        }\n      }\n    }, {\n      key: '_setMaterial',\n      value: function _setMaterial() {\n        var _nowMat = new MeshPhongMaterial({\n          color: Math.random() * 0xffffff\n        });\n\n        _nowMat.side = FrontSide;\n        _nowMat.name = this._currentObject.name;\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';;', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data = this._readLine(line.trim()).split(';');\n\n        _nowMat.color.r = parseFloat(data[0]);\n        _nowMat.color.g = parseFloat(data[1]);\n        _nowMat.color.b = parseFloat(data[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n        _nowMat.shininess = parseFloat(this._readLine(line));\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';;', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data2 = this._readLine(line.trim()).split(';');\n\n        _nowMat.specular.r = parseFloat(data2[0]);\n        _nowMat.specular.g = parseFloat(data2[1]);\n        _nowMat.specular.b = parseFloat(data2[2]);\n        endRead = find + 2;\n        find = this._currentObject.data.indexOf(';;', endRead);\n\n        if (find === -1) {\n          find = this._currentObject.data.length;\n        }\n\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data3 = this._readLine(line.trim()).split(';');\n\n        _nowMat.emissive.r = parseFloat(data3[0]);\n        _nowMat.emissive.g = parseFloat(data3[1]);\n        _nowMat.emissive.b = parseFloat(data3[2]);\n        var localObject = null;\n\n        while (true) {\n          if (this._currentObject.children.length > 0) {\n            localObject = this._currentObject.children.shift();\n\n            if (this.debug) {\n              console.log('processing ' + localObject.name);\n            }\n\n            var fileName = localObject.data.substr(1, localObject.data.length - 2);\n\n            switch (localObject.type) {\n              case 'TextureFilename':\n                _nowMat.map = this.texloader.load(fileName);\n                break;\n\n              case 'BumpMapFilename':\n                _nowMat.bumpMap = this.texloader.load(fileName);\n                _nowMat.bumpScale = 0.05;\n                break;\n\n              case 'NormalMapFilename':\n                _nowMat.normalMap = this.texloader.load(fileName);\n                _nowMat.normalScale = new Vector2(2, 2);\n                break;\n\n              case 'EmissiveMapFilename':\n                _nowMat.emissiveMap = this.texloader.load(fileName);\n                break;\n\n              case 'LightMapFilename':\n                _nowMat.lightMap = this.texloader.load(fileName);\n                break;\n            }\n          } else {\n            break;\n          }\n        }\n\n        this._currentGeo.Materials.push(_nowMat);\n      }\n    }, {\n      key: '_setSkinWeights',\n      value: function _setSkinWeights() {\n        var boneInf = new XboneInf();\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        endRead = find + 1;\n        boneInf.boneName = line.substr(1, line.length - 2);\n        boneInf.BoneIndex = this._currentGeo.BoneInfs.length;\n        find = this._currentObject.data.indexOf(';', endRead);\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data = this._readLine(line.trim()).split(',');\n\n        for (let i = 0; i < data.length; i++) {\n          boneInf.Indeces.push(parseInt(data[i]));\n        }\n\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data2 = this._readLine(line.trim()).split(',');\n\n        for (let _i = 0; _i < data2.length; _i++) {\n          boneInf.Weights.push(parseFloat(data2[_i]));\n        }\n\n        endRead = find + 1;\n        find = this._currentObject.data.indexOf(';', endRead);\n\n        if (find <= 0) {\n          find = this._currentObject.data.length;\n        }\n\n        line = this._currentObject.data.substr(endRead, find - endRead);\n\n        var data3 = this._readLine(line.trim()).split(',');\n\n        boneInf.OffsetMatrix = new Matrix4();\n\n        this._ParseMatrixData(boneInf.OffsetMatrix, data3);\n\n        this._currentGeo.BoneInfs.push(boneInf);\n      }\n    }, {\n      key: '_makePutBoneList',\n      value: function _makePutBoneList(_RootName, _bones) {\n        var putting = false;\n\n        for (let frame in this.HieStack) {\n          if (this.HieStack[frame].name === _RootName || putting) {\n            putting = true;\n            var b = new Bone();\n            b.name = this.HieStack[frame].name;\n            b.applyMatrix4(this.HieStack[frame].FrameTransformMatrix);\n            b.matrixWorld = b.matrix;\n            b.FrameTransformMatrix = this.HieStack[frame].FrameTransformMatrix;\n            b.pos = new Vector3().setFromMatrixPosition(b.FrameTransformMatrix).toArray();\n            b.rotq = new Quaternion().setFromRotationMatrix(b.FrameTransformMatrix).toArray();\n            b.scl = new Vector3().setFromMatrixScale(b.FrameTransformMatrix).toArray();\n\n            if (this.HieStack[frame].parentName && this.HieStack[frame].parentName.length > 0) {\n              for (let i = 0; i < _bones.length; i++) {\n                if (this.HieStack[frame].parentName === _bones[i].name) {\n                  _bones[i].add(b);\n\n                  b.parent = i;\n                  break;\n                }\n              }\n            }\n\n            _bones.push(b);\n          }\n        }\n      }\n    }, {\n      key: '_makeOutputGeometry',\n      value: function _makeOutputGeometry() {\n        var mesh = null;\n\n        if (this._currentGeo.BoneInfs.length > 0) {\n          var putBones = [];\n\n          this._makePutBoneList(this._currentGeo.baseFrame.parentName, putBones);\n\n          for (let bi = 0; bi < this._currentGeo.BoneInfs.length; bi++) {\n            var boneIndex = 0;\n\n            for (let bb = 0; bb < putBones.length; bb++) {\n              if (putBones[bb].name === this._currentGeo.BoneInfs[bi].boneName) {\n                boneIndex = bb;\n                putBones[bb].OffsetMatrix = new Matrix4();\n                putBones[bb].OffsetMatrix.copy(this._currentGeo.BoneInfs[bi].OffsetMatrix);\n                break;\n              }\n            }\n\n            for (let vi = 0; vi < this._currentGeo.BoneInfs[bi].Indeces.length; vi++) {\n              var nowVertexID = this._currentGeo.BoneInfs[bi].Indeces[vi];\n              var nowVal = this._currentGeo.BoneInfs[bi].Weights[vi];\n              var stride = nowVertexID * 4;\n\n              switch (this._currentGeo.VertexSetedBoneCount[nowVertexID]) {\n                case 0:\n                  this._currentGeo.GeometryData.skinIndices[stride] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride] = nowVal;\n                  break;\n\n                case 1:\n                  this._currentGeo.GeometryData.skinIndices[stride + 1] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 1] = nowVal;\n                  break;\n\n                case 2:\n                  this._currentGeo.GeometryData.skinIndices[stride + 2] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 2] = nowVal;\n                  break;\n\n                case 3:\n                  this._currentGeo.GeometryData.skinIndices[stride + 3] = boneIndex;\n                  this._currentGeo.GeometryData.skinWeights[stride + 3] = nowVal;\n                  break;\n              }\n\n              this._currentGeo.VertexSetedBoneCount[nowVertexID]++;\n\n              if (this._currentGeo.VertexSetedBoneCount[nowVertexID] > 4) {\n                console.log('warn! over 4 bone weight! :' + nowVertexID);\n              }\n            }\n          }\n\n          for (let sk = 0; sk < this._currentGeo.Materials.length; sk++) {\n            this._currentGeo.Materials[sk].skinning = true;\n          }\n\n          var offsetList = [];\n\n          for (let _bi = 0; _bi < putBones.length; _bi++) {\n            if (putBones[_bi].OffsetMatrix) {\n              offsetList.push(putBones[_bi].OffsetMatrix);\n            } else {\n              offsetList.push(new Matrix4());\n            }\n          }\n\n          var bufferGeometry = this._buildGeometry();\n\n          mesh = new SkinnedMesh(bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n\n          this._initSkeleton(mesh, putBones, offsetList);\n        } else {\n          var _bufferGeometry = this._buildGeometry();\n\n          mesh = new Mesh(_bufferGeometry, this._currentGeo.Materials.length === 1 ? this._currentGeo.Materials[0] : this._currentGeo.Materials);\n        }\n\n        mesh.name = this._currentGeo.name;\n        var worldBaseMx = new Matrix4();\n        var currentMxFrame = this._currentGeo.baseFrame.putBone;\n\n        if (currentMxFrame && currentMxFrame.parent) {\n          while (true) {\n            currentMxFrame = currentMxFrame.parent;\n\n            if (currentMxFrame) {\n              worldBaseMx.multiply(currentMxFrame.FrameTransformMatrix);\n            } else {\n              break;\n            }\n          }\n\n          mesh.applyMatrix4(worldBaseMx);\n        }\n\n        this.Meshes.push(mesh);\n      }\n    }, {\n      key: '_initSkeleton',\n      value: function _initSkeleton(mesh, boneList, boneInverses) {\n        var bones = [],\n            bone,\n            gbone;\n        var i, il;\n\n        for (i = 0, il = boneList.length; i < il; i++) {\n          gbone = boneList[i];\n          bone = new Bone();\n          bones.push(bone);\n          bone.name = gbone.name;\n          bone.position.fromArray(gbone.pos);\n          bone.quaternion.fromArray(gbone.rotq);\n          if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl);\n        }\n\n        for (i = 0, il = boneList.length; i < il; i++) {\n          gbone = boneList[i];\n\n          if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n            bones[gbone.parent].add(bones[i]);\n          } else {\n            mesh.add(bones[i]);\n          }\n        }\n\n        mesh.updateMatrixWorld(true);\n        var skeleton = new Skeleton(bones, boneInverses);\n        mesh.bind(skeleton, mesh.matrixWorld);\n      }\n    }, {\n      key: '_readAnimationKey',\n      value: function _readAnimationKey() {\n        var endRead = 0;\n\n        var find = this._currentObject.data.indexOf(';', endRead);\n\n        var line = this._currentObject.data.substr(endRead, find - endRead);\n\n        endRead = find + 1;\n        var nowKeyType = parseInt(this._readLine(line));\n        find = this._currentObject.data.indexOf(';', endRead);\n        endRead = find + 1;\n        line = this._currentObject.data.substr(endRead);\n\n        var data = this._readLine(line.trim()).split(';;,');\n\n        for (let i = 0; i < data.length; i++) {\n          var data2 = data[i].split(';');\n          var keyInfo = new XKeyFrameInfo();\n          keyInfo.type = nowKeyType;\n          keyInfo.Frame = parseInt(data2[0]);\n          keyInfo.index = this._currentAnimeFrames.keyFrames.length;\n          keyInfo.time = keyInfo.Frame;\n\n          if (nowKeyType != 4) {\n            var frameFound = false;\n\n            for (let mm = 0; mm < this._currentAnimeFrames.keyFrames.length; mm++) {\n              if (this._currentAnimeFrames.keyFrames[mm].Frame === keyInfo.Frame) {\n                keyInfo = this._currentAnimeFrames.keyFrames[mm];\n                frameFound = true;\n                break;\n              }\n            }\n\n            var frameValue = data2[2].split(',');\n\n            switch (nowKeyType) {\n              case 0:\n                keyInfo.rot = new Quaternion(parseFloat(frameValue[1]), parseFloat(frameValue[2]), parseFloat(frameValue[3]), parseFloat(frameValue[0]) * -1);\n                break;\n\n              case 1:\n                keyInfo.scl = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n\n              case 2:\n                keyInfo.pos = new Vector3(parseFloat(frameValue[0]), parseFloat(frameValue[1]), parseFloat(frameValue[2]));\n                break;\n            }\n\n            if (!frameFound) {\n              this._currentAnimeFrames.keyFrames.push(keyInfo);\n            }\n          } else {\n            keyInfo.matrix = new Matrix4();\n\n            this._ParseMatrixData(keyInfo.matrix, data2[2].split(','));\n\n            this._currentAnimeFrames.keyFrames.push(keyInfo);\n          }\n        }\n      }\n    }, {\n      key: '_makeOutputAnimation',\n      value: function _makeOutputAnimation() {\n        var animationObj = new XAnimationObj(this.options);\n        animationObj.fps = this.animTicksPerSecond;\n        animationObj.name = this._currentAnime.name;\n        animationObj.make(this._currentAnime.AnimeFrames);\n        this.animations.push(animationObj);\n      }\n    }, {\n      key: 'assignAnimation',\n      value: function assignAnimation(_model, _animation) {\n        var model = _model;\n        var animation = _animation;\n\n        if (!model) {\n          model = this.Meshes[0];\n        }\n\n        if (!animation) {\n          animation = this.animations[0];\n        }\n\n        if (!model || !animation) {\n          return null;\n        }\n\n        var put = {};\n        put.fps = animation.fps;\n        put.name = animation.name;\n        put.length = animation.length;\n        put.hierarchy = [];\n\n        for (let b = 0; b < model.skeleton.bones.length; b++) {\n          var findAnimation = false;\n\n          for (let i = 0; i < animation.hierarchy.length; i++) {\n            if (model.skeleton.bones[b].name === animation.hierarchy[i].name) {\n              findAnimation = true;\n              var c_key = animation.hierarchy[i].copy();\n              c_key.parent = -1;\n\n              if (model.skeleton.bones[b].parent && model.skeleton.bones[b].parent.type === 'Bone') {\n                for (let bb = 0; bb < put.hierarchy.length; bb++) {\n                  if (put.hierarchy[bb].name === model.skeleton.bones[b].parent.name) {\n                    c_key.parent = bb;\n                    c_key.parentName = model.skeleton.bones[b].parent.name;\n                  }\n                }\n              }\n\n              put.hierarchy.push(c_key);\n              break;\n            }\n          }\n\n          if (!findAnimation) {\n            var _c_key = animation.hierarchy[0].copy();\n\n            _c_key.name = model.skeleton.bones[b].name;\n            _c_key.parent = -1;\n\n            for (let k = 0; k < _c_key.keys.length; k++) {\n              if (_c_key.keys[k].pos) {\n                _c_key.keys[k].pos.set(0, 0, 0);\n              }\n\n              if (_c_key.keys[k].scl) {\n                _c_key.keys[k].scl.set(1, 1, 1);\n              }\n\n              if (_c_key.keys[k].rot) {\n                _c_key.keys[k].rot.set(0, 0, 0, 1);\n              }\n            }\n\n            put.hierarchy.push(_c_key);\n          }\n        }\n\n        if (!model.geometry.animations) {\n          model.geometry.animations = [];\n        }\n\n        model.geometry.animations.push(AnimationClip.parseAnimation(put, model.skeleton.bones));\n\n        if (!model.animationMixer) {\n          model.animationMixer = new AnimationMixer(model);\n        }\n\n        return put;\n      }\n    }, {\n      key: '_ParseMatrixData',\n      value: function _ParseMatrixData(targetMatrix, data) {\n        targetMatrix.set(parseFloat(data[0]), parseFloat(data[4]), parseFloat(data[8]), parseFloat(data[12]), parseFloat(data[1]), parseFloat(data[5]), parseFloat(data[9]), parseFloat(data[13]), parseFloat(data[2]), parseFloat(data[6]), parseFloat(data[10]), parseFloat(data[14]), parseFloat(data[3]), parseFloat(data[7]), parseFloat(data[11]), parseFloat(data[15]));\n      }\n    }]);\n    return XLoader;\n  }();\n\n  return XLoader;\n}();\n\nexport { XLoader };\n"]},"metadata":{},"sourceType":"module"}