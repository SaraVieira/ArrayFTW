{"ast":null,"code":"import { Loader } from 'three';\nimport { GLTFLoader } from './GLTFLoader.js'; //\n// VRM is based on glTF 2.0 and VRM extension is defined\n// in top-level json.extensions.VRM\n\nvar VRMLoader = function () {\n  function VRMLoader(manager) {\n    if (GLTFLoader === undefined) {\n      throw new Error('THREE.VRMLoader: Import GLTFLoader.');\n    }\n\n    Loader.call(this, manager);\n    this.gltfLoader = new GLTFLoader(this.manager);\n  }\n\n  VRMLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n    constructor: VRMLoader,\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      this.gltfLoader.load(url, function (gltf) {\n        try {\n          scope.parse(gltf, onLoad);\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    },\n    setDRACOLoader: function setDRACOLoader(dracoLoader) {\n      this.gltfLoader.setDRACOLoader(dracoLoader);\n      return this;\n    },\n    parse: function parse(gltf, onLoad) {\n      // var gltfParser = gltf.parser;\n      // var gltfExtensions = gltf.userData.gltfExtensions || {};\n      // var vrmExtension = gltfExtensions.VRM || {};\n      // handle VRM Extension here\n      onLoad(gltf);\n    }\n  });\n  return VRMLoader;\n}();\n\nexport { VRMLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/VRMLoader.js"],"names":["Loader","GLTFLoader","VRMLoader","manager","undefined","Error","call","gltfLoader","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","gltf","parse","e","console","error","itemError","setDRACOLoader","dracoLoader"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,iBAA3B,C,CAEA;AACA;AACA;;AAEA,IAAIC,SAAS,GAAG,YAAY;AAC1B,WAASA,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,QAAIF,UAAU,KAAKG,SAAnB,EAA8B;AAC5B,YAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAEDL,IAAAA,MAAM,CAACM,IAAP,CAAY,IAAZ,EAAkBH,OAAlB;AACA,SAAKI,UAAL,GAAkB,IAAIN,UAAJ,CAAe,KAAKE,OAApB,CAAlB;AACD;;AAEDD,EAAAA,SAAS,CAACM,SAAV,GAAsBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcX,MAAM,CAACQ,SAArB,CAAd,EAA+C;AACnEI,IAAAA,WAAW,EAAEV,SADsD;AAEnEW,IAAAA,IAAI,EAAE,cAAUC,GAAV,EAAeC,MAAf,EAAuBC,UAAvB,EAAmCC,OAAnC,EAA4C;AAChD,UAAIC,KAAK,GAAG,IAAZ;AACA,WAAKX,UAAL,CAAgBM,IAAhB,CAAqBC,GAArB,EAA0B,UAAUK,IAAV,EAAgB;AACxC,YAAI;AACFD,UAAAA,KAAK,CAACE,KAAN,CAAYD,IAAZ,EAAkBJ,MAAlB;AACD,SAFD,CAEE,OAAOM,CAAP,EAAU;AACV,cAAIJ,OAAJ,EAAa;AACXA,YAAAA,OAAO,CAACI,CAAD,CAAP;AACD,WAFD,MAEO;AACLC,YAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;;AAEDH,UAAAA,KAAK,CAACf,OAAN,CAAcqB,SAAd,CAAwBV,GAAxB;AACD;AACF,OAZD,EAYGE,UAZH,EAYeC,OAZf;AAaD,KAjBkE;AAkBnEQ,IAAAA,cAAc,EAAE,wBAAUC,WAAV,EAAuB;AACrC,WAAKnB,UAAL,CAAgBkB,cAAhB,CAA+BC,WAA/B;AACA,aAAO,IAAP;AACD,KArBkE;AAsBnEN,IAAAA,KAAK,EAAE,eAAUD,IAAV,EAAgBJ,MAAhB,EAAwB;AAC7B;AACA;AACA;AACA;AACAA,MAAAA,MAAM,CAACI,IAAD,CAAN;AACD;AA5BkE,GAA/C,CAAtB;AA8BA,SAAOjB,SAAP;AACD,CAzCe,EAAhB;;AA2CA,SAASA,SAAT","sourcesContent":["import { Loader } from 'three';\nimport { GLTFLoader } from './GLTFLoader.js';\n\n//\n// VRM is based on glTF 2.0 and VRM extension is defined\n// in top-level json.extensions.VRM\n\nvar VRMLoader = function () {\n  function VRMLoader(manager) {\n    if (GLTFLoader === undefined) {\n      throw new Error('THREE.VRMLoader: Import GLTFLoader.');\n    }\n\n    Loader.call(this, manager);\n    this.gltfLoader = new GLTFLoader(this.manager);\n  }\n\n  VRMLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n    constructor: VRMLoader,\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n      this.gltfLoader.load(url, function (gltf) {\n        try {\n          scope.parse(gltf, onLoad);\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    },\n    setDRACOLoader: function (dracoLoader) {\n      this.gltfLoader.setDRACOLoader(dracoLoader);\n      return this;\n    },\n    parse: function (gltf, onLoad) {\n      // var gltfParser = gltf.parser;\n      // var gltfExtensions = gltf.userData.gltfExtensions || {};\n      // var vrmExtension = gltfExtensions.VRM || {};\n      // handle VRM Extension here\n      onLoad(gltf);\n    }\n  });\n  return VRMLoader;\n}();\n\nexport { VRMLoader };\n"]},"metadata":{},"sourceType":"module"}