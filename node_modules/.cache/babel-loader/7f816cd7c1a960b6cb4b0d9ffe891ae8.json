{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, TextureLoader, Vector3, Quaternion, Matrix4, Skeleton, BufferGeometry, MeshLambertMaterial, BufferAttribute, Mesh, SkinnedMesh, Object3D, MeshPhongMaterial, Bone, Color } from 'three';\n\nvar AssimpLoader = function AssimpLoader(manager) {\n  Loader.call(this, manager);\n};\n\nAssimpLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: AssimpLoader,\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function parse(buffer, path) {\n    var textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    var Virtulous = {};\n\n    Virtulous.KeyFrame = function (time, matrix) {\n      this.time = time;\n      this.matrix = matrix.clone();\n      this.position = new Vector3();\n      this.quaternion = new Quaternion();\n      this.scale = new Vector3(1, 1, 1);\n      this.matrix.decompose(this.position, this.quaternion, this.scale);\n\n      this.clone = function () {\n        var n = new Virtulous.KeyFrame(this.time, this.matrix);\n        return n;\n      };\n\n      this.lerp = function (nextKey, time) {\n        time -= this.time;\n        var dist = nextKey.time - this.time;\n        var l = time / dist;\n        var l2 = 1 - l;\n        var keypos = this.position;\n        var keyrot = this.quaternion; //      var keyscl =  key.parentspaceScl || key.scl;\n\n        var key2pos = nextKey.position;\n        var key2rot = nextKey.quaternion; //  var key2scl =  key2.parentspaceScl || key2.scl;\n\n        Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n        Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n        Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l; //     tempAniScale.x = keyscl[0] * l2 + key2scl[0] * l;\n        //     tempAniScale.y = keyscl[1] * l2 + key2scl[1] * l;\n        //     tempAniScale.z = keyscl[2] * l2 + key2scl[2] * l;\n\n        Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);\n        Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);\n        return Virtulous.KeyFrame.tempAniMatrix.compose(Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale);\n      };\n    };\n\n    Virtulous.KeyFrame.tempAniPos = new Vector3();\n    Virtulous.KeyFrame.tempAniQuat = new Quaternion();\n    Virtulous.KeyFrame.tempAniScale = new Vector3(1, 1, 1);\n    Virtulous.KeyFrame.tempAniMatrix = new Matrix4();\n\n    Virtulous.KeyFrameTrack = function () {\n      this.keys = [];\n      this.target = null;\n      this.time = 0;\n      this.length = 0;\n      this._accelTable = {};\n      this.fps = 20;\n\n      this.addKey = function (key) {\n        this.keys.push(key);\n      };\n\n      this.init = function () {\n        this.sortKeys();\n        if (this.keys.length > 0) this.length = this.keys[this.keys.length - 1].time;else this.length = 0;\n        if (!this.fps) return;\n\n        for (var j = 0; j < this.length * this.fps; j++) {\n          for (var i = 0; i < this.keys.length; i++) {\n            if (this.keys[i].time == j) {\n              this._accelTable[j] = i;\n              break;\n            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {\n              this._accelTable[j] = i;\n              break;\n            }\n          }\n        }\n      };\n\n      this.parseFromThree = function (data) {\n        var fps = data.fps;\n        this.target = data.node;\n        var track = data.hierarchy[0].keys;\n\n        for (var i = 0; i < track.length; i++) {\n          this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));\n        }\n\n        this.init();\n      };\n\n      this.parseFromCollada = function (data) {\n        var track = data.keys;\n        var fps = this.fps;\n\n        for (var i = 0; i < track.length; i++) {\n          this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));\n        }\n\n        this.init();\n      };\n\n      this.sortKeys = function () {\n        this.keys.sort(this.keySortFunc);\n      };\n\n      this.keySortFunc = function (a, b) {\n        return a.time - b.time;\n      };\n\n      this.clone = function () {\n        var t = new Virtulous.KeyFrameTrack();\n        t.target = this.target;\n        t.time = this.time;\n        t.length = this.length;\n\n        for (var i = 0; i < this.keys.length; i++) {\n          t.addKey(this.keys[i].clone());\n        }\n\n        t.init();\n        return t;\n      };\n\n      this.reTarget = function (root, compareitor) {\n        if (!compareitor) compareitor = Virtulous.TrackTargetNodeNameCompare;\n        this.target = compareitor(root, this.target);\n      };\n\n      this.keySearchAccel = function (time) {\n        time *= this.fps;\n        time = Math.floor(time);\n        return this._accelTable[time] || 0;\n      };\n\n      this.setTime = function (time) {\n        time = Math.abs(time);\n        if (this.length) time = time % this.length + 0.05;\n        var key0 = null;\n        var key1 = null;\n\n        for (var i = this.keySearchAccel(time); i < this.keys.length; i++) {\n          if (this.keys[i].time == time) {\n            key0 = this.keys[i];\n            key1 = this.keys[i];\n            break;\n          } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {\n            key0 = this.keys[i];\n            key1 = this.keys[i + 1];\n            break;\n          } else if (this.keys[i].time < time && i == this.keys.length - 1) {\n            key0 = this.keys[i];\n            key1 = this.keys[0].clone();\n            key1.time += this.length + 0.05;\n            break;\n          }\n        }\n\n        if (key0 && key1 && key0 !== key1) {\n          this.target.matrixAutoUpdate = false;\n          this.target.matrix.copy(key0.lerp(key1, time));\n          this.target.matrixWorldNeedsUpdate = true;\n          return;\n        }\n\n        if (key0 && key1 && key0 == key1) {\n          this.target.matrixAutoUpdate = false;\n          this.target.matrix.copy(key0.matrix);\n          this.target.matrixWorldNeedsUpdate = true;\n          return;\n        }\n      };\n    };\n\n    Virtulous.TrackTargetNodeNameCompare = function (root, target) {\n      function find(node, name) {\n        if (node.name == name) return node;\n\n        for (var i = 0; i < node.children.length; i++) {\n          var r = find(node.children[i], name);\n          if (r) return r;\n        }\n\n        return null;\n      }\n\n      return find(root, target.name);\n    };\n\n    Virtulous.Animation = function () {\n      this.tracks = [];\n      this.length = 0;\n\n      this.addTrack = function (track) {\n        this.tracks.push(track);\n        this.length = Math.max(track.length, this.length);\n      };\n\n      this.setTime = function (time) {\n        this.time = time;\n\n        for (var i = 0; i < this.tracks.length; i++) {\n          this.tracks[i].setTime(time);\n        }\n      };\n\n      this.clone = function (target, compareitor) {\n        if (!compareitor) compareitor = Virtulous.TrackTargetNodeNameCompare;\n        var n = new Virtulous.Animation();\n        n.target = target;\n\n        for (var i = 0; i < this.tracks.length; i++) {\n          var track = this.tracks[i].clone();\n          track.reTarget(target, compareitor);\n          n.addTrack(track);\n        }\n\n        return n;\n      };\n    };\n\n    var ASSBIN_CHUNK_AICAMERA = 0x1234;\n    var ASSBIN_CHUNK_AILIGHT = 0x1235;\n    var ASSBIN_CHUNK_AITEXTURE = 0x1236;\n    var ASSBIN_CHUNK_AIMESH = 0x1237;\n    var ASSBIN_CHUNK_AINODEANIM = 0x1238;\n    var ASSBIN_CHUNK_AISCENE = 0x1239;\n    var ASSBIN_CHUNK_AIBONE = 0x123a;\n    var ASSBIN_CHUNK_AIANIMATION = 0x123b;\n    var ASSBIN_CHUNK_AINODE = 0x123c;\n    var ASSBIN_CHUNK_AIMATERIAL = 0x123d;\n    var ASSBIN_CHUNK_AIMATERIALPROPERTY = 0x123e;\n    var ASSBIN_MESH_HAS_POSITIONS = 0x1;\n    var ASSBIN_MESH_HAS_NORMALS = 0x2;\n    var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 0x4;\n    var ASSBIN_MESH_HAS_TEXCOORD_BASE = 0x100;\n    var ASSBIN_MESH_HAS_COLOR_BASE = 0x10000;\n    var AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n    var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4; //var aiLightSource_UNDEFINED = 0x0;\n    //! A directional light source has a well-defined direction\n    //! but is infinitely far away. That's quite a good\n    //! approximation for sun light.\n\n    var aiLightSource_DIRECTIONAL = 0x1; //! A point light source has a well-defined position\n    //! in space but no direction - it emits light in all\n    //! directions. A normal bulb is a point light.\n    //var aiLightSource_POINT = 0x2;\n    //! A spot light source emits light in a specific\n    //! angle. It has a position and a direction it is pointing to.\n    //! A good example for a spot light is a light spot in\n    //! sport arenas.\n\n    var aiLightSource_SPOT = 0x3; //! The generic light level of the world, including the bounces\n    //! of all other lightsources.\n    //! Typically, there's at most one ambient light in a scene.\n    //! This light type doesn't have a valid position, direction, or\n    //! other properties, just a color.\n    //var aiLightSource_AMBIENT = 0x4;\n\n    /** Flat shading. Shading is done on per-face base,\n     *  diffuse only. Also known as 'faceted shading'.\n     */\n    //var aiShadingMode_Flat = 0x1;\n\n    /** Simple Gouraud shading.\n     */\n    //var aiShadingMode_Gouraud = 0x2;\n\n    /** Phong-Shading -\n     */\n    //var aiShadingMode_Phong = 0x3;\n\n    /** Phong-Blinn-Shading\n     */\n    //var aiShadingMode_Blinn = 0x4;\n\n    /** Toon-Shading per pixel\n     *\n     *  Also known as 'comic' shader.\n     */\n    //var aiShadingMode_Toon = 0x5;\n\n    /** OrenNayar-Shading per pixel\n     *\n     *  Extension to standard Lambertian shading, taking the\n     *  roughness of the material into account\n     */\n    //var aiShadingMode_OrenNayar = 0x6;\n\n    /** Minnaert-Shading per pixel\n     *\n     *  Extension to standard Lambertian shading, taking the\n     *  \"darkness\" of the material into account\n     */\n    //var aiShadingMode_Minnaert = 0x7;\n\n    /** CookTorrance-Shading per pixel\n     *\n     *  Special shader for metallic surfaces.\n     */\n    //var aiShadingMode_CookTorrance = 0x8;\n\n    /** No shading at all. Constant light influence of 1.0.\n     */\n    //var aiShadingMode_NoShading = 0x9;\n\n    /** Fresnel shading\n     */\n    //var aiShadingMode_Fresnel = 0xa;\n    //var aiTextureType_NONE = 0x0;\n\n    /** The texture is combined with the result of the diffuse\n     *  lighting equation.\n     */\n\n    var aiTextureType_DIFFUSE = 0x1;\n    /** The texture is combined with the result of the specular\n     *  lighting equation.\n     */\n    //var aiTextureType_SPECULAR = 0x2;\n\n    /** The texture is combined with the result of the ambient\n     *  lighting equation.\n     */\n    //var aiTextureType_AMBIENT = 0x3;\n\n    /** The texture is added to the result of the lighting\n     *  calculation. It isn't influenced by incoming light.\n     */\n    //var aiTextureType_EMISSIVE = 0x4;\n\n    /** The texture is a height map.\n     *\n     *  By convention, higher gray-scale values stand for\n     *  higher elevations from the base height.\n     */\n    //var aiTextureType_HEIGHT = 0x5;\n\n    /** The texture is a (tangent space) normal-map.\n     *\n     *  Again, there are several conventions for tangent-space\n     *  normal maps. Assimp does (intentionally) not\n     *  distinguish here.\n     */\n\n    var aiTextureType_NORMALS = 0x6;\n    /** The texture defines the glossiness of the material.\n     *\n     *  The glossiness is in fact the exponent of the specular\n     *  (phong) lighting equation. Usually there is a conversion\n     *  function defined to map the linear color values in the\n     *  texture to a suitable exponent. Have fun.\n     */\n    //var aiTextureType_SHININESS = 0x7;\n\n    /** The texture defines per-pixel opacity.\n     *\n     *  Usually 'white' means opaque and 'black' means\n     *  'transparency'. Or quite the opposite. Have fun.\n     */\n\n    var aiTextureType_OPACITY = 0x8;\n    /** Displacement texture\n     *\n     *  The exact purpose and format is application-dependent.\n     *  Higher color values stand for higher vertex displacements.\n     */\n    //var aiTextureType_DISPLACEMENT = 0x9;\n\n    /** Lightmap texture (aka Ambient Occlusion)\n     *\n     *  Both 'Lightmaps' and dedicated 'ambient occlusion maps' are\n     *  covered by this material property. The texture contains a\n     *  scaling value for the final color value of a pixel. Its\n     *  intensity is not affected by incoming light.\n     */\n\n    var aiTextureType_LIGHTMAP = 0xa;\n    /** Reflection texture\n     *\n     * Contains the color of a perfect mirror reflection.\n     * Rarely used, almost never for real-time applications.\n     */\n    //var aiTextureType_REFLECTION = 0xB;\n\n    /** Unknown texture\n     *\n     *  A texture reference that does not match any of the definitions\n     *  above is considered to be 'unknown'. It is still imported,\n     *  but is excluded from any further postprocessing.\n     */\n    //var aiTextureType_UNKNOWN = 0xC;\n\n    var BONESPERVERT = 4;\n\n    function ASSBIN_MESH_HAS_TEXCOORD(n) {\n      return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n    }\n\n    function ASSBIN_MESH_HAS_COLOR(n) {\n      return ASSBIN_MESH_HAS_COLOR_BASE << n;\n    }\n\n    function markBones(scene) {\n      for (var i in scene.mMeshes) {\n        var mesh = scene.mMeshes[i];\n\n        for (var k in mesh.mBones) {\n          var boneNode = scene.findNode(mesh.mBones[k].mName);\n          if (boneNode) boneNode.isBone = true;\n        }\n      }\n    }\n\n    function cloneTreeToBones(root, scene) {\n      var rootBone = new Bone();\n      rootBone.matrix.copy(root.matrix);\n      rootBone.matrixWorld.copy(root.matrixWorld);\n      rootBone.position.copy(root.position);\n      rootBone.quaternion.copy(root.quaternion);\n      rootBone.scale.copy(root.scale);\n      scene.nodeCount++;\n      rootBone.name = 'bone_' + root.name + scene.nodeCount.toString();\n      if (!scene.nodeToBoneMap[root.name]) scene.nodeToBoneMap[root.name] = [];\n      scene.nodeToBoneMap[root.name].push(rootBone);\n\n      for (var i in root.children) {\n        var child = cloneTreeToBones(root.children[i], scene);\n        rootBone.add(child);\n      }\n\n      return rootBone;\n    }\n\n    function sortWeights(indexes, weights) {\n      var pairs = [];\n\n      for (var i = 0; i < indexes.length; i++) {\n        pairs.push({\n          i: indexes[i],\n          w: weights[i]\n        });\n      }\n\n      pairs.sort(function (a, b) {\n        return b.w - a.w;\n      });\n\n      while (pairs.length < 4) {\n        pairs.push({\n          i: 0,\n          w: 0\n        });\n      }\n\n      if (pairs.length > 4) pairs.length = 4;\n      var sum = 0;\n\n      for (var _i = 0; _i < 4; _i++) {\n        sum += pairs[_i].w * pairs[_i].w;\n      }\n\n      sum = Math.sqrt(sum);\n\n      for (var _i2 = 0; _i2 < 4; _i2++) {\n        pairs[_i2].w = pairs[_i2].w / sum;\n        indexes[_i2] = pairs[_i2].i;\n        weights[_i2] = pairs[_i2].w;\n      }\n    }\n\n    function findMatchingBone(root, name) {\n      if (root.name.indexOf('bone_' + name) == 0) return root;\n\n      for (var i in root.children) {\n        var ret = findMatchingBone(root.children[i], name);\n        if (ret) return ret;\n      }\n\n      return undefined;\n    }\n\n    function aiMesh() {\n      this.mPrimitiveTypes = 0;\n      this.mNumVertices = 0;\n      this.mNumFaces = 0;\n      this.mNumBones = 0;\n      this.mMaterialIndex = 0;\n      this.mVertices = [];\n      this.mNormals = [];\n      this.mTangents = [];\n      this.mBitangents = [];\n      this.mColors = [[]];\n      this.mTextureCoords = [[]];\n      this.mFaces = [];\n      this.mBones = [];\n\n      this.hookupSkeletons = function (scene) {\n        if (this.mBones.length == 0) return;\n        var allBones = [];\n        var offsetMatrix = [];\n        var skeletonRoot = scene.findNode(this.mBones[0].mName);\n\n        while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {\n          skeletonRoot = skeletonRoot.mParent;\n        }\n\n        var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n        var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n        this.threeNode.add(threeSkeletonRootBone);\n\n        for (var i = 0; i < this.mBones.length; i++) {\n          var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n\n          if (bone) {\n            var tbone = bone;\n            allBones.push(tbone); //tbone.matrixAutoUpdate = false;\n\n            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n          } else {\n            var skeletonRoot = scene.findNode(this.mBones[i].mName);\n            if (!skeletonRoot) return;\n            var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n            var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n            this.threeNode.add(threeSkeletonRootBone);\n            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n            var tbone = bone;\n            allBones.push(tbone); //tbone.matrixAutoUpdate = false;\n\n            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n          }\n        }\n\n        var skeleton = new Skeleton(allBones, offsetMatrix);\n        this.threeNode.bind(skeleton, new Matrix4());\n        this.threeNode.material.skinning = true;\n      };\n\n      this.toTHREE = function (scene) {\n        if (this.threeNode) return this.threeNode;\n        var geometry = new BufferGeometry();\n        var mat;\n        if (scene.mMaterials[this.mMaterialIndex]) mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);else mat = new MeshLambertMaterial();\n        geometry.setIndex(new BufferAttribute(new Uint32Array(this.mIndexArray), 1));\n        geometry.setAttribute('position', new BufferAttribute(this.mVertexBuffer, 3));\n        if (this.mNormalBuffer && this.mNormalBuffer.length > 0) geometry.setAttribute('normal', new BufferAttribute(this.mNormalBuffer, 3));\n        if (this.mColorBuffer && this.mColorBuffer.length > 0) geometry.setAttribute('color', new BufferAttribute(this.mColorBuffer, 4));\n        if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0) geometry.setAttribute('uv', new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));\n        if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0) geometry.setAttribute('uv1', new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));\n        if (this.mTangentBuffer && this.mTangentBuffer.length > 0) geometry.setAttribute('tangents', new BufferAttribute(this.mTangentBuffer, 3));\n        if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0) geometry.setAttribute('bitangents', new BufferAttribute(this.mBitangentBuffer, 3));\n\n        if (this.mBones.length > 0) {\n          var weights = [];\n          var bones = [];\n\n          for (var i = 0; i < this.mBones.length; i++) {\n            for (var j = 0; j < this.mBones[i].mWeights.length; j++) {\n              var weight = this.mBones[i].mWeights[j];\n\n              if (weight) {\n                if (!weights[weight.mVertexId]) weights[weight.mVertexId] = [];\n                if (!bones[weight.mVertexId]) bones[weight.mVertexId] = [];\n                weights[weight.mVertexId].push(weight.mWeight);\n                bones[weight.mVertexId].push(parseInt(i));\n              }\n            }\n          }\n\n          for (var _i3 in bones) {\n            sortWeights(bones[_i3], weights[_i3]);\n          }\n\n          var _weights = [];\n          var _bones = [];\n\n          for (var _i4 = 0; _i4 < weights.length; _i4++) {\n            for (var _j = 0; _j < 4; _j++) {\n              if (weights[_i4] && bones[_i4]) {\n                _weights.push(weights[_i4][_j]);\n\n                _bones.push(bones[_i4][_j]);\n              } else {\n                _weights.push(0);\n\n                _bones.push(0);\n              }\n            }\n          }\n\n          geometry.setAttribute('skinWeight', new BufferAttribute(new Float32Array(_weights), BONESPERVERT));\n          geometry.setAttribute('skinIndex', new BufferAttribute(new Float32Array(_bones), BONESPERVERT));\n        }\n\n        var mesh;\n        if (this.mBones.length == 0) mesh = new Mesh(geometry, mat);\n\n        if (this.mBones.length > 0) {\n          mesh = new SkinnedMesh(geometry, mat);\n          mesh.normalizeSkinWeights();\n        }\n\n        this.threeNode = mesh; //mesh.matrixAutoUpdate = false;\n\n        return mesh;\n      };\n    }\n\n    function aiFace() {\n      this.mNumIndices = 0;\n      this.mIndices = [];\n    }\n\n    function aiVector3D() {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n\n      this.toTHREE = function () {\n        return new Vector3(this.x, this.y, this.z);\n      };\n    }\n\n    function aiColor3D() {\n      this.r = 0;\n      this.g = 0;\n      this.b = 0;\n      this.a = 0;\n\n      this.toTHREE = function () {\n        return new Color(this.r, this.g, this.b);\n      };\n    }\n\n    function aiQuaternion() {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n\n      this.toTHREE = function () {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n      };\n    }\n\n    function aiVertexWeight() {\n      this.mVertexId = 0;\n      this.mWeight = 0;\n    }\n\n    function aiString() {\n      this.data = [];\n\n      this.toString = function () {\n        var str = '';\n        this.data.forEach(function (i) {\n          str += String.fromCharCode(i);\n        });\n        return str.replace(/[^\\x20-\\x7E]+/g, '');\n      };\n    }\n\n    function aiVectorKey() {\n      this.mTime = 0;\n      this.mValue = null;\n    }\n\n    function aiQuatKey() {\n      this.mTime = 0;\n      this.mValue = null;\n    }\n\n    function aiNode() {\n      this.mName = '';\n      this.mTransformation = [];\n      this.mNumChildren = 0;\n      this.mNumMeshes = 0;\n      this.mMeshes = [];\n      this.mChildren = [];\n\n      this.toTHREE = function (scene) {\n        if (this.threeNode) return this.threeNode;\n        var o = new Object3D();\n        o.name = this.mName;\n        o.matrix = this.mTransformation.toTHREE();\n\n        for (var i = 0; i < this.mChildren.length; i++) {\n          o.add(this.mChildren[i].toTHREE(scene));\n        }\n\n        for (var _i5 = 0; _i5 < this.mMeshes.length; _i5++) {\n          o.add(scene.mMeshes[this.mMeshes[_i5]].toTHREE(scene));\n        }\n\n        this.threeNode = o; //o.matrixAutoUpdate = false;\n\n        o.matrix.decompose(o.position, o.quaternion, o.scale);\n        return o;\n      };\n    }\n\n    function aiBone() {\n      this.mName = '';\n      this.mNumWeights = 0;\n      this.mOffsetMatrix = 0;\n    }\n\n    function aiMaterialProperty() {\n      this.mKey = '';\n      this.mSemantic = 0;\n      this.mIndex = 0;\n      this.mData = [];\n      this.mDataLength = 0;\n      this.mType = 0;\n\n      this.dataAsColor = function () {\n        var array = new Uint8Array(this.mData).buffer;\n        var reader = new DataView(array);\n        var r = reader.getFloat32(0, true);\n        var g = reader.getFloat32(4, true);\n        var b = reader.getFloat32(8, true); //var a = reader.getFloat32(12, true);\n\n        return new Color(r, g, b);\n      };\n\n      this.dataAsFloat = function () {\n        var array = new Uint8Array(this.mData).buffer;\n        var reader = new DataView(array);\n        var r = reader.getFloat32(0, true);\n        return r;\n      };\n\n      this.dataAsBool = function () {\n        var array = new Uint8Array(this.mData).buffer;\n        var reader = new DataView(array);\n        var r = reader.getFloat32(0, true);\n        return !!r;\n      };\n\n      this.dataAsString = function () {\n        var s = new aiString();\n        s.data = this.mData;\n        return s.toString();\n      };\n\n      this.dataAsMap = function () {\n        var s = new aiString();\n        s.data = this.mData;\n        var path = s.toString();\n        path = path.replace(/\\\\/g, '/');\n\n        if (path.indexOf('/') != -1) {\n          path = path.substr(path.lastIndexOf('/') + 1);\n        }\n\n        return textureLoader.load(path);\n      };\n    }\n\n    var namePropMapping = {\n      '?mat.name': 'name',\n      '$mat.shadingm': 'shading',\n      '$mat.twosided': 'twoSided',\n      '$mat.wireframe': 'wireframe',\n      '$clr.ambient': 'ambient',\n      '$clr.diffuse': 'color',\n      '$clr.specular': 'specular',\n      '$clr.emissive': 'emissive',\n      '$clr.transparent': 'transparent',\n      '$clr.reflective': 'reflect',\n      '$mat.shininess': 'shininess',\n      '$mat.reflectivity': 'reflectivity',\n      '$mat.refracti': 'refraction',\n      '$tex.file': 'map'\n    };\n    var nameTypeMapping = {\n      '?mat.name': 'string',\n      '$mat.shadingm': 'bool',\n      '$mat.twosided': 'bool',\n      '$mat.wireframe': 'bool',\n      '$clr.ambient': 'color',\n      '$clr.diffuse': 'color',\n      '$clr.specular': 'color',\n      '$clr.emissive': 'color',\n      '$clr.transparent': 'color',\n      '$clr.reflective': 'color',\n      '$mat.shininess': 'float',\n      '$mat.reflectivity': 'float',\n      '$mat.refracti': 'float',\n      '$tex.file': 'map'\n    };\n\n    function aiMaterial() {\n      this.mNumAllocated = 0;\n      this.mNumProperties = 0;\n      this.mProperties = [];\n\n      this.toTHREE = function () {\n        var mat = new MeshPhongMaterial();\n\n        for (var i = 0; i < this.mProperties.length; i++) {\n          if (nameTypeMapping[this.mProperties[i].mKey] == 'float') mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();\n          if (nameTypeMapping[this.mProperties[i].mKey] == 'color') mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();\n          if (nameTypeMapping[this.mProperties[i].mKey] == 'bool') mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();\n          if (nameTypeMapping[this.mProperties[i].mKey] == 'string') mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();\n\n          if (nameTypeMapping[this.mProperties[i].mKey] == 'map') {\n            var prop = this.mProperties[i];\n            if (prop.mSemantic == aiTextureType_DIFFUSE) mat.map = this.mProperties[i].dataAsMap();\n            if (prop.mSemantic == aiTextureType_NORMALS) mat.normalMap = this.mProperties[i].dataAsMap();\n            if (prop.mSemantic == aiTextureType_LIGHTMAP) mat.lightMap = this.mProperties[i].dataAsMap();\n            if (prop.mSemantic == aiTextureType_OPACITY) mat.alphaMap = this.mProperties[i].dataAsMap();\n          }\n        }\n\n        mat.ambient.r = 0.53;\n        mat.ambient.g = 0.53;\n        mat.ambient.b = 0.53;\n        mat.color.r = 1;\n        mat.color.g = 1;\n        mat.color.b = 1;\n        return mat;\n      };\n    }\n\n    function veclerp(v1, v2, l) {\n      var v = new Vector3();\n      var lm1 = 1 - l;\n      v.x = v1.x * l + v2.x * lm1;\n      v.y = v1.y * l + v2.y * lm1;\n      v.z = v1.z * l + v2.z * lm1;\n      return v;\n    }\n\n    function quatlerp(q1, q2, l) {\n      return q1.clone().slerp(q2, 1 - l);\n    }\n\n    function sampleTrack(keys, time, lne, lerp) {\n      if (keys.length == 1) return keys[0].mValue.toTHREE();\n      var dist = Infinity;\n      var key = null;\n      var nextKey = null;\n\n      for (var i = 0; i < keys.length; i++) {\n        var timeDist = Math.abs(keys[i].mTime - time);\n\n        if (timeDist < dist && keys[i].mTime <= time) {\n          dist = timeDist;\n          key = keys[i];\n          nextKey = keys[i + 1];\n        }\n      }\n\n      if (!key) {\n        return null;\n      } else if (nextKey) {\n        var dT = nextKey.mTime - key.mTime;\n        var T = key.mTime - time;\n        var l = T / dT;\n        return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n      } else {\n        nextKey = keys[0].clone();\n        nextKey.mTime += lne;\n        var dT = nextKey.mTime - key.mTime;\n        var T = key.mTime - time;\n        var l = T / dT;\n        return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n      }\n    }\n\n    function aiNodeAnim() {\n      this.mNodeName = '';\n      this.mNumPositionKeys = 0;\n      this.mNumRotationKeys = 0;\n      this.mNumScalingKeys = 0;\n      this.mPositionKeys = [];\n      this.mRotationKeys = [];\n      this.mScalingKeys = [];\n      this.mPreState = '';\n      this.mPostState = '';\n\n      this.init = function (tps) {\n        if (!tps) tps = 1;\n\n        function t(t) {\n          t.mTime /= tps;\n        }\n\n        this.mPositionKeys.forEach(t);\n        this.mRotationKeys.forEach(t);\n        this.mScalingKeys.forEach(t);\n      };\n\n      this.sortKeys = function () {\n        function comp(a, b) {\n          return a.mTime - b.mTime;\n        }\n\n        this.mPositionKeys.sort(comp);\n        this.mRotationKeys.sort(comp);\n        this.mScalingKeys.sort(comp);\n      };\n\n      this.getLength = function () {\n        return Math.max(Math.max.apply(null, this.mPositionKeys.map(function (a) {\n          return a.mTime;\n        })), Math.max.apply(null, this.mRotationKeys.map(function (a) {\n          return a.mTime;\n        })), Math.max.apply(null, this.mScalingKeys.map(function (a) {\n          return a.mTime;\n        })));\n      };\n\n      this.toTHREE = function (o) {\n        this.sortKeys();\n        var length = this.getLength();\n        var track = new Virtulous.KeyFrameTrack();\n\n        for (var i = 0; i < length; i += 0.05) {\n          var matrix = new Matrix4();\n          var time = i;\n          var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);\n          var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);\n          var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);\n          matrix.compose(pos, rotation, scale);\n          var key = new Virtulous.KeyFrame(time, matrix);\n          track.addKey(key);\n        }\n\n        track.target = o.findNode(this.mNodeName).toTHREE();\n        var tracks = [track];\n\n        if (o.nodeToBoneMap[this.mNodeName]) {\n          for (var _i6 = 0; _i6 < o.nodeToBoneMap[this.mNodeName].length; _i6++) {\n            var t2 = track.clone();\n            t2.target = o.nodeToBoneMap[this.mNodeName][_i6];\n            tracks.push(t2);\n          }\n        }\n\n        return tracks;\n      };\n    }\n\n    function aiAnimation() {\n      this.mName = '';\n      this.mDuration = 0;\n      this.mTicksPerSecond = 0;\n      this.mNumChannels = 0;\n      this.mChannels = [];\n\n      this.toTHREE = function (root) {\n        var animationHandle = new Virtulous.Animation();\n\n        for (var i in this.mChannels) {\n          this.mChannels[i].init(this.mTicksPerSecond);\n          var tracks = this.mChannels[i].toTHREE(root);\n\n          for (var j in tracks) {\n            tracks[j].init();\n            animationHandle.addTrack(tracks[j]);\n          }\n        }\n\n        animationHandle.length = Math.max.apply(null, animationHandle.tracks.map(function (e) {\n          return e.length;\n        }));\n        return animationHandle;\n      };\n    }\n\n    function aiTexture() {\n      this.mWidth = 0;\n      this.mHeight = 0;\n      this.texAchFormatHint = [];\n      this.pcData = [];\n    }\n\n    function aiLight() {\n      this.mName = '';\n      this.mType = 0;\n      this.mAttenuationConstant = 0;\n      this.mAttenuationLinear = 0;\n      this.mAttenuationQuadratic = 0;\n      this.mAngleInnerCone = 0;\n      this.mAngleOuterCone = 0;\n      this.mColorDiffuse = null;\n      this.mColorSpecular = null;\n      this.mColorAmbient = null;\n    }\n\n    function aiCamera() {\n      this.mName = '';\n      this.mPosition = null;\n      this.mLookAt = null;\n      this.mUp = null;\n      this.mHorizontalFOV = 0;\n      this.mClipPlaneNear = 0;\n      this.mClipPlaneFar = 0;\n      this.mAspect = 0;\n    }\n\n    function aiScene() {\n      this.versionMajor = 0;\n      this.versionMinor = 0;\n      this.versionRevision = 0;\n      this.compileFlags = 0;\n      this.mFlags = 0;\n      this.mNumMeshes = 0;\n      this.mNumMaterials = 0;\n      this.mNumAnimations = 0;\n      this.mNumTextures = 0;\n      this.mNumLights = 0;\n      this.mNumCameras = 0;\n      this.mRootNode = null;\n      this.mMeshes = [];\n      this.mMaterials = [];\n      this.mAnimations = [];\n      this.mLights = [];\n      this.mCameras = [];\n      this.nodeToBoneMap = {};\n\n      this.findNode = function (name, root) {\n        if (!root) {\n          root = this.mRootNode;\n        }\n\n        if (root.mName == name) {\n          return root;\n        }\n\n        for (var i = 0; i < root.mChildren.length; i++) {\n          var ret = this.findNode(name, root.mChildren[i]);\n          if (ret) return ret;\n        }\n\n        return null;\n      };\n\n      this.toTHREE = function () {\n        this.nodeCount = 0;\n        markBones(this);\n        var o = this.mRootNode.toTHREE(this);\n\n        for (var i in this.mMeshes) {\n          this.mMeshes[i].hookupSkeletons(this);\n        }\n\n        if (this.mAnimations.length > 0) {\n          var a = this.mAnimations[0].toTHREE(this);\n        }\n\n        return {\n          object: o,\n          animation: a\n        };\n      };\n    }\n\n    function aiMatrix4() {\n      this.elements = [[], [], [], []];\n\n      this.toTHREE = function () {\n        var m = new Matrix4();\n\n        for (var i = 0; i < 4; ++i) {\n          for (var i2 = 0; i2 < 4; ++i2) {\n            m.elements[i * 4 + i2] = this.elements[i2][i];\n          }\n        }\n\n        return m;\n      };\n    }\n\n    var littleEndian = true;\n\n    function readFloat(dataview) {\n      var val = dataview.getFloat32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n\n    function Read_double(dataview) {\n      var val = dataview.getFloat64(dataview.readOffset, littleEndian);\n      dataview.readOffset += 8;\n      return val;\n    }\n\n    function Read_uint8_t(dataview) {\n      var val = dataview.getUint8(dataview.readOffset);\n      dataview.readOffset += 1;\n      return val;\n    }\n\n    function Read_uint16_t(dataview) {\n      var val = dataview.getUint16(dataview.readOffset, littleEndian);\n      dataview.readOffset += 2;\n      return val;\n    }\n\n    function Read_unsigned_int(dataview) {\n      var val = dataview.getUint32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n\n    function Read_uint32_t(dataview) {\n      var val = dataview.getUint32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n\n    function Read_aiVector3D(stream) {\n      var v = new aiVector3D();\n      v.x = readFloat(stream);\n      v.y = readFloat(stream);\n      v.z = readFloat(stream);\n      return v;\n    }\n\n    function Read_aiColor3D(stream) {\n      var c = new aiColor3D();\n      c.r = readFloat(stream);\n      c.g = readFloat(stream);\n      c.b = readFloat(stream);\n      return c;\n    }\n\n    function Read_aiQuaternion(stream) {\n      var v = new aiQuaternion();\n      v.w = readFloat(stream);\n      v.x = readFloat(stream);\n      v.y = readFloat(stream);\n      v.z = readFloat(stream);\n      return v;\n    }\n\n    function Read_aiString(stream) {\n      var s = new aiString();\n      var stringlengthbytes = Read_unsigned_int(stream);\n      stream.ReadBytes(s.data, 1, stringlengthbytes);\n      return s.toString();\n    }\n\n    function Read_aiVertexWeight(stream) {\n      var w = new aiVertexWeight();\n      w.mVertexId = Read_unsigned_int(stream);\n      w.mWeight = readFloat(stream);\n      return w;\n    }\n\n    function Read_aiMatrix4x4(stream) {\n      var m = new aiMatrix4();\n\n      for (var i = 0; i < 4; ++i) {\n        for (var i2 = 0; i2 < 4; ++i2) {\n          m.elements[i][i2] = readFloat(stream);\n        }\n      }\n\n      return m;\n    }\n\n    function Read_aiVectorKey(stream) {\n      var v = new aiVectorKey();\n      v.mTime = Read_double(stream);\n      v.mValue = Read_aiVector3D(stream);\n      return v;\n    }\n\n    function Read_aiQuatKey(stream) {\n      var v = new aiQuatKey();\n      v.mTime = Read_double(stream);\n      v.mValue = Read_aiQuaternion(stream);\n      return v;\n    }\n\n    function ReadArray_aiVertexWeight(stream, data, size) {\n      for (var i = 0; i < size; i++) {\n        data[i] = Read_aiVertexWeight(stream);\n      }\n    }\n\n    function ReadArray_aiVectorKey(stream, data, size) {\n      for (var i = 0; i < size; i++) {\n        data[i] = Read_aiVectorKey(stream);\n      }\n    }\n\n    function ReadArray_aiQuatKey(stream, data, size) {\n      for (var i = 0; i < size; i++) {\n        data[i] = Read_aiQuatKey(stream);\n      }\n    }\n\n    function ReadBounds(stream, T\n    /*p*/\n    , n) {\n      // not sure what to do here, the data isn't really useful.\n      return stream.Seek(sizeof(T) * n, aiOrigin_CUR); // eslint-disable-line no-undef\n    }\n\n    function ai_assert(bool) {\n      if (!bool) throw 'asset failed';\n    }\n\n    function ReadBinaryNode(stream, parent, depth) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AINODE);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      var node = new aiNode();\n      node.mParent = parent;\n      node.mDepth = depth;\n      node.mName = Read_aiString(stream);\n      node.mTransformation = Read_aiMatrix4x4(stream);\n      node.mNumChildren = Read_unsigned_int(stream);\n      node.mNumMeshes = Read_unsigned_int(stream);\n\n      if (node.mNumMeshes) {\n        node.mMeshes = [];\n\n        for (var i = 0; i < node.mNumMeshes; ++i) {\n          node.mMeshes[i] = Read_unsigned_int(stream);\n        }\n      }\n\n      if (node.mNumChildren) {\n        node.mChildren = [];\n\n        for (var _i7 = 0; _i7 < node.mNumChildren; ++_i7) {\n          var node2 = ReadBinaryNode(stream, node, depth++);\n          node.mChildren[_i7] = node2;\n        }\n      }\n\n      return node;\n    } // -----------------------------------------------------------------------------------\n\n\n    function ReadBinaryBone(stream, b) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      b.mName = Read_aiString(stream);\n      b.mNumWeights = Read_unsigned_int(stream);\n      b.mOffsetMatrix = Read_aiMatrix4x4(stream); // for the moment we write dumb min/max values for the bones, too.\n      // maybe I'll add a better, hash-like solution later\n\n      if (shortened) {\n        ReadBounds(stream, b.mWeights, b.mNumWeights);\n      } else {\n        // else write as usual\n        b.mWeights = [];\n        ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);\n      }\n\n      return b;\n    }\n\n    function ReadBinaryMesh(stream, mesh) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      mesh.mPrimitiveTypes = Read_unsigned_int(stream);\n      mesh.mNumVertices = Read_unsigned_int(stream);\n      mesh.mNumFaces = Read_unsigned_int(stream);\n      mesh.mNumBones = Read_unsigned_int(stream);\n      mesh.mMaterialIndex = Read_unsigned_int(stream);\n      mesh.mNumUVComponents = []; // first of all, write bits for all existent vertex components\n\n      var c = Read_unsigned_int(stream);\n\n      if (c & ASSBIN_MESH_HAS_POSITIONS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);\n        } else {\n          // else write as usual\n          mesh.mVertices = [];\n          mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n\n      if (c & ASSBIN_MESH_HAS_NORMALS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);\n        } else {\n          // else write as usual\n          mesh.mNormals = [];\n          mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n\n      if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);\n          ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);\n        } else {\n          // else write as usual\n          mesh.mTangents = [];\n          mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n          mesh.mBitangents = [];\n          mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n\n      for (var n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {\n        if (!(c & ASSBIN_MESH_HAS_COLOR(n))) break;\n\n        if (shortened) {\n          ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);\n        } else {\n          // else write as usual\n          mesh.mColors[n] = [];\n          mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);\n          stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);\n        }\n      }\n\n      mesh.mTexCoordsBuffers = [];\n\n      for (var _n = 0; _n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++_n) {\n        if (!(c & ASSBIN_MESH_HAS_TEXCOORD(_n))) break; // write number of UV components\n\n        mesh.mNumUVComponents[_n] = Read_unsigned_int(stream);\n\n        if (shortened) {\n          ReadBounds(stream, mesh.mTextureCoords[_n], mesh.mNumVertices);\n        } else {\n          // else write as usual\n          mesh.mTextureCoords[_n] = []; //note that assbin always writes 3d texcoords\n\n          mesh.mTexCoordsBuffers[_n] = [];\n\n          for (var uv = 0; uv < mesh.mNumVertices; uv++) {\n            mesh.mTexCoordsBuffers[_n].push(readFloat(stream));\n\n            mesh.mTexCoordsBuffers[_n].push(readFloat(stream));\n\n            readFloat(stream);\n          }\n        }\n      } // write faces. There are no floating-point calculations involved\n      // in these, so we can write a simple hash over the face data\n      // to the dump file. We generate a single 32 Bit hash for 512 faces\n      // using Assimp's standard hashing function.\n\n\n      if (shortened) {\n        Read_unsigned_int(stream);\n      } else {\n        // else write as usual\n        // if there are less than 2^16 vertices, we can simply use 16 bit integers ...\n        mesh.mFaces = [];\n        mesh.mIndexArray = [];\n\n        for (var i = 0; i < mesh.mNumFaces; ++i) {\n          var f = mesh.mFaces[i] = new aiFace(); // BOOST_STATIC_ASSERT(AI_MAX_FACE_INDICES <= 0xffff);\n\n          f.mNumIndices = Read_uint16_t(stream);\n          f.mIndices = [];\n\n          for (var a = 0; a < f.mNumIndices; ++a) {\n            if (mesh.mNumVertices < 1 << 16) {\n              f.mIndices[a] = Read_uint16_t(stream);\n            } else {\n              f.mIndices[a] = Read_unsigned_int(stream);\n            }\n          }\n\n          if (f.mNumIndices === 3) {\n            mesh.mIndexArray.push(f.mIndices[0]);\n            mesh.mIndexArray.push(f.mIndices[1]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n          } else if (f.mNumIndices === 4) {\n            mesh.mIndexArray.push(f.mIndices[0]);\n            mesh.mIndexArray.push(f.mIndices[1]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n            mesh.mIndexArray.push(f.mIndices[3]);\n            mesh.mIndexArray.push(f.mIndices[0]);\n          } else {\n            throw new Error(\"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\");\n          }\n        }\n      } // write bones\n\n\n      if (mesh.mNumBones) {\n        mesh.mBones = [];\n\n        for (var _a = 0; _a < mesh.mNumBones; ++_a) {\n          mesh.mBones[_a] = new aiBone();\n          ReadBinaryBone(stream, mesh.mBones[_a]);\n        }\n      }\n    }\n\n    function ReadBinaryMaterialProperty(stream, prop) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      prop.mKey = Read_aiString(stream);\n      prop.mSemantic = Read_unsigned_int(stream);\n      prop.mIndex = Read_unsigned_int(stream);\n      prop.mDataLength = Read_unsigned_int(stream);\n      prop.mType = Read_unsigned_int(stream);\n      prop.mData = [];\n      stream.ReadBytes(prop.mData, 1, prop.mDataLength);\n    } // -----------------------------------------------------------------------------------\n\n\n    function ReadBinaryMaterial(stream, mat) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);\n\n      if (mat.mNumProperties) {\n        if (mat.mProperties) {\n          delete mat.mProperties;\n        }\n\n        mat.mProperties = [];\n\n        for (var i = 0; i < mat.mNumProperties; ++i) {\n          mat.mProperties[i] = new aiMaterialProperty();\n          ReadBinaryMaterialProperty(stream, mat.mProperties[i]);\n        }\n      }\n    }\n\n    function ReadBinaryNodeAnim(stream, nd) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      nd.mNodeName = Read_aiString(stream);\n      nd.mNumPositionKeys = Read_unsigned_int(stream);\n      nd.mNumRotationKeys = Read_unsigned_int(stream);\n      nd.mNumScalingKeys = Read_unsigned_int(stream);\n      nd.mPreState = Read_unsigned_int(stream);\n      nd.mPostState = Read_unsigned_int(stream);\n\n      if (nd.mNumPositionKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n        } else {\n          // else write as usual\n          nd.mPositionKeys = [];\n          ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n        }\n      }\n\n      if (nd.mNumRotationKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n        } else {\n          // else write as usual\n          nd.mRotationKeys = [];\n          ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n        }\n      }\n\n      if (nd.mNumScalingKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n        } else {\n          // else write as usual\n          nd.mScalingKeys = [];\n          ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n        }\n      }\n    }\n\n    function ReadBinaryAnim(stream, anim) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      anim.mName = Read_aiString(stream);\n      anim.mDuration = Read_double(stream);\n      anim.mTicksPerSecond = Read_double(stream);\n      anim.mNumChannels = Read_unsigned_int(stream);\n\n      if (anim.mNumChannels) {\n        anim.mChannels = [];\n\n        for (var a = 0; a < anim.mNumChannels; ++a) {\n          anim.mChannels[a] = new aiNodeAnim();\n          ReadBinaryNodeAnim(stream, anim.mChannels[a]);\n        }\n      }\n    }\n\n    function ReadBinaryTexture(stream, tex) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      tex.mWidth = Read_unsigned_int(stream);\n      tex.mHeight = Read_unsigned_int(stream);\n      stream.ReadBytes(tex.achFormatHint, 1, 4);\n\n      if (!shortened) {\n        if (!tex.mHeight) {\n          tex.pcData = [];\n          stream.ReadBytes(tex.pcData, 1, tex.mWidth);\n        } else {\n          tex.pcData = [];\n          stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);\n        }\n      }\n    }\n\n    function ReadBinaryLight(stream, l) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      l.mName = Read_aiString(stream);\n      l.mType = Read_unsigned_int(stream);\n\n      if (l.mType != aiLightSource_DIRECTIONAL) {\n        l.mAttenuationConstant = readFloat(stream);\n        l.mAttenuationLinear = readFloat(stream);\n        l.mAttenuationQuadratic = readFloat(stream);\n      }\n\n      l.mColorDiffuse = Read_aiColor3D(stream);\n      l.mColorSpecular = Read_aiColor3D(stream);\n      l.mColorAmbient = Read_aiColor3D(stream);\n\n      if (l.mType == aiLightSource_SPOT) {\n        l.mAngleInnerCone = readFloat(stream);\n        l.mAngleOuterCone = readFloat(stream);\n      }\n    }\n\n    function ReadBinaryCamera(stream, cam) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      cam.mName = Read_aiString(stream);\n      cam.mPosition = Read_aiVector3D(stream);\n      cam.mLookAt = Read_aiVector3D(stream);\n      cam.mUp = Read_aiVector3D(stream);\n      cam.mHorizontalFOV = readFloat(stream);\n      cam.mClipPlaneNear = readFloat(stream);\n      cam.mClipPlaneFar = readFloat(stream);\n      cam.mAspect = readFloat(stream);\n    }\n\n    function ReadBinaryScene(stream, scene) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      scene.mFlags = Read_unsigned_int(stream);\n      scene.mNumMeshes = Read_unsigned_int(stream);\n      scene.mNumMaterials = Read_unsigned_int(stream);\n      scene.mNumAnimations = Read_unsigned_int(stream);\n      scene.mNumTextures = Read_unsigned_int(stream);\n      scene.mNumLights = Read_unsigned_int(stream);\n      scene.mNumCameras = Read_unsigned_int(stream); // Read node graph\n\n      scene.mRootNode = new aiNode();\n      scene.mRootNode = ReadBinaryNode(stream, null, 0); // Read all meshes\n\n      if (scene.mNumMeshes) {\n        scene.mMeshes = [];\n\n        for (var i = 0; i < scene.mNumMeshes; ++i) {\n          scene.mMeshes[i] = new aiMesh();\n          ReadBinaryMesh(stream, scene.mMeshes[i]);\n        }\n      } // Read materials\n\n\n      if (scene.mNumMaterials) {\n        scene.mMaterials = [];\n\n        for (var _i8 = 0; _i8 < scene.mNumMaterials; ++_i8) {\n          scene.mMaterials[_i8] = new aiMaterial();\n          ReadBinaryMaterial(stream, scene.mMaterials[_i8]);\n        }\n      } // Read all animations\n\n\n      if (scene.mNumAnimations) {\n        scene.mAnimations = [];\n\n        for (var _i9 = 0; _i9 < scene.mNumAnimations; ++_i9) {\n          scene.mAnimations[_i9] = new aiAnimation();\n          ReadBinaryAnim(stream, scene.mAnimations[_i9]);\n        }\n      } // Read all textures\n\n\n      if (scene.mNumTextures) {\n        scene.mTextures = [];\n\n        for (var _i10 = 0; _i10 < scene.mNumTextures; ++_i10) {\n          scene.mTextures[_i10] = new aiTexture();\n          ReadBinaryTexture(stream, scene.mTextures[_i10]);\n        }\n      } // Read lights\n\n\n      if (scene.mNumLights) {\n        scene.mLights = [];\n\n        for (var _i11 = 0; _i11 < scene.mNumLights; ++_i11) {\n          scene.mLights[_i11] = new aiLight();\n          ReadBinaryLight(stream, scene.mLights[_i11]);\n        }\n      } // Read cameras\n\n\n      if (scene.mNumCameras) {\n        scene.mCameras = [];\n\n        for (var _i12 = 0; _i12 < scene.mNumCameras; ++_i12) {\n          scene.mCameras[_i12] = new aiCamera();\n          ReadBinaryCamera(stream, scene.mCameras[_i12]);\n        }\n      }\n    }\n\n    var aiOrigin_CUR = 0;\n    var aiOrigin_BEG = 1;\n\n    function extendStream(stream) {\n      stream.readOffset = 0;\n\n      stream.Seek = function (off, ori) {\n        if (ori == aiOrigin_CUR) {\n          stream.readOffset += off;\n        }\n\n        if (ori == aiOrigin_BEG) {\n          stream.readOffset = off;\n        }\n      };\n\n      stream.ReadBytes = function (buff, size, n) {\n        var bytes = size * n;\n\n        for (var i = 0; i < bytes; i++) {\n          buff[i] = Read_uint8_t(this);\n        }\n      };\n\n      stream.subArray32 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Float32Array(newbuff);\n      };\n\n      stream.subArrayUint16 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint16Array(newbuff);\n      };\n\n      stream.subArrayUint8 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint8Array(newbuff);\n      };\n\n      stream.subArrayUint32 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint32Array(newbuff);\n      };\n    }\n\n    var shortened, compressed;\n\n    function InternReadFile(pFiledata) {\n      var pScene = new aiScene();\n      var stream = new DataView(pFiledata);\n      extendStream(stream);\n      stream.Seek(44, aiOrigin_CUR); // signature\n\n      /*unsigned int versionMajor =*/\n\n      pScene.versionMajor = Read_unsigned_int(stream);\n      /*unsigned int versionMinor =*/\n\n      pScene.versionMinor = Read_unsigned_int(stream);\n      /*unsigned int versionRevision =*/\n\n      pScene.versionRevision = Read_unsigned_int(stream);\n      /*unsigned int compileFlags =*/\n\n      pScene.compileFlags = Read_unsigned_int(stream);\n      shortened = Read_uint16_t(stream) > 0;\n      compressed = Read_uint16_t(stream) > 0;\n      if (shortened) throw 'Shortened binaries are not supported!';\n      stream.Seek(256, aiOrigin_CUR); // original filename\n\n      stream.Seek(128, aiOrigin_CUR); // options\n\n      stream.Seek(64, aiOrigin_CUR); // padding\n\n      if (compressed) {\n        var uncompressedSize = Read_uint32_t(stream);\n        var compressedSize = stream.FileSize() - stream.Tell();\n        var compressedData = [];\n        stream.Read(compressedData, 1, compressedSize);\n        var uncompressedData = [];\n        uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize); // eslint-disable-line no-undef\n\n        var buff = new ArrayBuffer(uncompressedData);\n        ReadBinaryScene(buff, pScene);\n      } else {\n        ReadBinaryScene(stream, pScene);\n      }\n\n      return pScene.toTHREE();\n    }\n\n    return InternReadFile(buffer);\n  }\n});\nexport { AssimpLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/AssimpLoader.js"],"names":["Loader","LoaderUtils","FileLoader","TextureLoader","Vector3","Quaternion","Matrix4","Skeleton","BufferGeometry","MeshLambertMaterial","BufferAttribute","Mesh","SkinnedMesh","Object3D","MeshPhongMaterial","Bone","Color","AssimpLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","textureLoader","resourcePath","setCrossOrigin","crossOrigin","Virtulous","KeyFrame","time","matrix","clone","position","quaternion","scale","decompose","n","lerp","nextKey","dist","l","l2","keypos","keyrot","key2pos","key2rot","tempAniPos","x","y","z","tempAniQuat","set","w","slerp","tempAniMatrix","compose","tempAniScale","KeyFrameTrack","keys","target","length","_accelTable","fps","addKey","key","push","init","sortKeys","j","i","parseFromThree","data","node","track","hierarchy","targets","parseFromCollada","sort","keySortFunc","a","b","t","reTarget","root","compareitor","TrackTargetNodeNameCompare","keySearchAccel","Math","floor","setTime","abs","key0","key1","matrixAutoUpdate","copy","matrixWorldNeedsUpdate","find","name","children","r","Animation","tracks","addTrack","max","ASSBIN_CHUNK_AICAMERA","ASSBIN_CHUNK_AILIGHT","ASSBIN_CHUNK_AITEXTURE","ASSBIN_CHUNK_AIMESH","ASSBIN_CHUNK_AINODEANIM","ASSBIN_CHUNK_AISCENE","ASSBIN_CHUNK_AIBONE","ASSBIN_CHUNK_AIANIMATION","ASSBIN_CHUNK_AINODE","ASSBIN_CHUNK_AIMATERIAL","ASSBIN_CHUNK_AIMATERIALPROPERTY","ASSBIN_MESH_HAS_POSITIONS","ASSBIN_MESH_HAS_NORMALS","ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS","ASSBIN_MESH_HAS_TEXCOORD_BASE","ASSBIN_MESH_HAS_COLOR_BASE","AI_MAX_NUMBER_OF_COLOR_SETS","AI_MAX_NUMBER_OF_TEXTURECOORDS","aiLightSource_DIRECTIONAL","aiLightSource_SPOT","aiTextureType_DIFFUSE","aiTextureType_NORMALS","aiTextureType_OPACITY","aiTextureType_LIGHTMAP","BONESPERVERT","ASSBIN_MESH_HAS_TEXCOORD","ASSBIN_MESH_HAS_COLOR","markBones","scene","mMeshes","mesh","k","mBones","boneNode","findNode","mName","isBone","cloneTreeToBones","rootBone","matrixWorld","nodeCount","toString","nodeToBoneMap","child","add","sortWeights","indexes","weights","pairs","sum","sqrt","findMatchingBone","indexOf","ret","undefined","aiMesh","mPrimitiveTypes","mNumVertices","mNumFaces","mNumBones","mMaterialIndex","mVertices","mNormals","mTangents","mBitangents","mColors","mTextureCoords","mFaces","hookupSkeletons","allBones","offsetMatrix","skeletonRoot","mParent","threeSkeletonRoot","toTHREE","threeSkeletonRootBone","threeNode","bone","tbone","mOffsetMatrix","skeleton","bind","material","skinning","geometry","mat","mMaterials","setIndex","Uint32Array","mIndexArray","setAttribute","mVertexBuffer","mNormalBuffer","mColorBuffer","mTexCoordsBuffers","Float32Array","mTangentBuffer","mBitangentBuffer","bones","mWeights","weight","mVertexId","mWeight","parseInt","_weights","_bones","normalizeSkinWeights","aiFace","mNumIndices","mIndices","aiVector3D","aiColor3D","g","aiQuaternion","aiVertexWeight","aiString","str","forEach","String","fromCharCode","replace","aiVectorKey","mTime","mValue","aiQuatKey","aiNode","mTransformation","mNumChildren","mNumMeshes","mChildren","o","aiBone","mNumWeights","aiMaterialProperty","mKey","mSemantic","mIndex","mData","mDataLength","mType","dataAsColor","array","Uint8Array","reader","DataView","getFloat32","dataAsFloat","dataAsBool","dataAsString","s","dataAsMap","substr","lastIndexOf","namePropMapping","nameTypeMapping","aiMaterial","mNumAllocated","mNumProperties","mProperties","prop","map","normalMap","lightMap","alphaMap","ambient","color","veclerp","v1","v2","v","lm1","quatlerp","q1","q2","sampleTrack","lne","Infinity","timeDist","dT","T","aiNodeAnim","mNodeName","mNumPositionKeys","mNumRotationKeys","mNumScalingKeys","mPositionKeys","mRotationKeys","mScalingKeys","mPreState","mPostState","tps","comp","getLength","apply","pos","rotation","t2","aiAnimation","mDuration","mTicksPerSecond","mNumChannels","mChannels","animationHandle","aiTexture","mWidth","mHeight","texAchFormatHint","pcData","aiLight","mAttenuationConstant","mAttenuationLinear","mAttenuationQuadratic","mAngleInnerCone","mAngleOuterCone","mColorDiffuse","mColorSpecular","mColorAmbient","aiCamera","mPosition","mLookAt","mUp","mHorizontalFOV","mClipPlaneNear","mClipPlaneFar","mAspect","aiScene","versionMajor","versionMinor","versionRevision","compileFlags","mFlags","mNumMaterials","mNumAnimations","mNumTextures","mNumLights","mNumCameras","mRootNode","mAnimations","mLights","mCameras","object","animation","aiMatrix4","elements","m","i2","littleEndian","readFloat","dataview","val","readOffset","Read_double","getFloat64","Read_uint8_t","getUint8","Read_uint16_t","getUint16","Read_unsigned_int","getUint32","Read_uint32_t","Read_aiVector3D","stream","Read_aiColor3D","c","Read_aiQuaternion","Read_aiString","stringlengthbytes","ReadBytes","Read_aiVertexWeight","Read_aiMatrix4x4","Read_aiVectorKey","Read_aiQuatKey","ReadArray_aiVertexWeight","size","ReadArray_aiVectorKey","ReadArray_aiQuatKey","ReadBounds","Seek","sizeof","aiOrigin_CUR","ai_assert","bool","ReadBinaryNode","parent","depth","chunkID","mDepth","node2","ReadBinaryBone","shortened","ReadBinaryMesh","mNumUVComponents","subArray32","uv","f","Error","ReadBinaryMaterialProperty","ReadBinaryMaterial","ReadBinaryNodeAnim","nd","ReadBinaryAnim","anim","ReadBinaryTexture","tex","achFormatHint","ReadBinaryLight","ReadBinaryCamera","cam","ReadBinaryScene","mTextures","aiOrigin_BEG","extendStream","off","ori","buff","bytes","start","end","newbuff","slice","subArrayUint16","Uint16Array","subArrayUint8","subArrayUint32","compressed","InternReadFile","pFiledata","pScene","uncompressedSize","compressedSize","FileSize","Tell","compressedData","Read","uncompressedData","uncompress","ArrayBuffer"],"mappings":"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","sourcesContent":["import { Loader, LoaderUtils, FileLoader, TextureLoader, Vector3, Quaternion, Matrix4, Skeleton, BufferGeometry, MeshLambertMaterial, BufferAttribute, Mesh, SkinnedMesh, Object3D, MeshPhongMaterial, Bone, Color } from 'three';\n\nvar AssimpLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nAssimpLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: AssimpLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  parse: function (buffer, path) {\n    var textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    var Virtulous = {};\n\n    Virtulous.KeyFrame = function (time, matrix) {\n      this.time = time;\n      this.matrix = matrix.clone();\n      this.position = new Vector3();\n      this.quaternion = new Quaternion();\n      this.scale = new Vector3(1, 1, 1);\n      this.matrix.decompose(this.position, this.quaternion, this.scale);\n\n      this.clone = function () {\n        var n = new Virtulous.KeyFrame(this.time, this.matrix);\n        return n;\n      };\n\n      this.lerp = function (nextKey, time) {\n        time -= this.time;\n        var dist = nextKey.time - this.time;\n        var l = time / dist;\n        var l2 = 1 - l;\n        var keypos = this.position;\n        var keyrot = this.quaternion; //      var keyscl =  key.parentspaceScl || key.scl;\n\n        var key2pos = nextKey.position;\n        var key2rot = nextKey.quaternion; //  var key2scl =  key2.parentspaceScl || key2.scl;\n\n        Virtulous.KeyFrame.tempAniPos.x = keypos.x * l2 + key2pos.x * l;\n        Virtulous.KeyFrame.tempAniPos.y = keypos.y * l2 + key2pos.y * l;\n        Virtulous.KeyFrame.tempAniPos.z = keypos.z * l2 + key2pos.z * l; //     tempAniScale.x = keyscl[0] * l2 + key2scl[0] * l;\n        //     tempAniScale.y = keyscl[1] * l2 + key2scl[1] * l;\n        //     tempAniScale.z = keyscl[2] * l2 + key2scl[2] * l;\n\n        Virtulous.KeyFrame.tempAniQuat.set(keyrot.x, keyrot.y, keyrot.z, keyrot.w);\n        Virtulous.KeyFrame.tempAniQuat.slerp(key2rot, l);\n        return Virtulous.KeyFrame.tempAniMatrix.compose(Virtulous.KeyFrame.tempAniPos, Virtulous.KeyFrame.tempAniQuat, Virtulous.KeyFrame.tempAniScale);\n      };\n    };\n\n    Virtulous.KeyFrame.tempAniPos = new Vector3();\n    Virtulous.KeyFrame.tempAniQuat = new Quaternion();\n    Virtulous.KeyFrame.tempAniScale = new Vector3(1, 1, 1);\n    Virtulous.KeyFrame.tempAniMatrix = new Matrix4();\n\n    Virtulous.KeyFrameTrack = function () {\n      this.keys = [];\n      this.target = null;\n      this.time = 0;\n      this.length = 0;\n      this._accelTable = {};\n      this.fps = 20;\n\n      this.addKey = function (key) {\n        this.keys.push(key);\n      };\n\n      this.init = function () {\n        this.sortKeys();\n        if (this.keys.length > 0) this.length = this.keys[this.keys.length - 1].time;else this.length = 0;\n        if (!this.fps) return;\n\n        for (let j = 0; j < this.length * this.fps; j++) {\n          for (let i = 0; i < this.keys.length; i++) {\n            if (this.keys[i].time == j) {\n              this._accelTable[j] = i;\n              break;\n            } else if (this.keys[i].time < j / this.fps && this.keys[i + 1] && this.keys[i + 1].time >= j / this.fps) {\n              this._accelTable[j] = i;\n              break;\n            }\n          }\n        }\n      };\n\n      this.parseFromThree = function (data) {\n        var fps = data.fps;\n        this.target = data.node;\n        var track = data.hierarchy[0].keys;\n\n        for (let i = 0; i < track.length; i++) {\n          this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].targets[0].data));\n        }\n\n        this.init();\n      };\n\n      this.parseFromCollada = function (data) {\n        var track = data.keys;\n        var fps = this.fps;\n\n        for (let i = 0; i < track.length; i++) {\n          this.addKey(new Virtulous.KeyFrame(i / fps || track[i].time, track[i].matrix));\n        }\n\n        this.init();\n      };\n\n      this.sortKeys = function () {\n        this.keys.sort(this.keySortFunc);\n      };\n\n      this.keySortFunc = function (a, b) {\n        return a.time - b.time;\n      };\n\n      this.clone = function () {\n        var t = new Virtulous.KeyFrameTrack();\n        t.target = this.target;\n        t.time = this.time;\n        t.length = this.length;\n\n        for (let i = 0; i < this.keys.length; i++) {\n          t.addKey(this.keys[i].clone());\n        }\n\n        t.init();\n        return t;\n      };\n\n      this.reTarget = function (root, compareitor) {\n        if (!compareitor) compareitor = Virtulous.TrackTargetNodeNameCompare;\n        this.target = compareitor(root, this.target);\n      };\n\n      this.keySearchAccel = function (time) {\n        time *= this.fps;\n        time = Math.floor(time);\n        return this._accelTable[time] || 0;\n      };\n\n      this.setTime = function (time) {\n        time = Math.abs(time);\n        if (this.length) time = time % this.length + 0.05;\n        var key0 = null;\n        var key1 = null;\n\n        for (let i = this.keySearchAccel(time); i < this.keys.length; i++) {\n          if (this.keys[i].time == time) {\n            key0 = this.keys[i];\n            key1 = this.keys[i];\n            break;\n          } else if (this.keys[i].time < time && this.keys[i + 1] && this.keys[i + 1].time > time) {\n            key0 = this.keys[i];\n            key1 = this.keys[i + 1];\n            break;\n          } else if (this.keys[i].time < time && i == this.keys.length - 1) {\n            key0 = this.keys[i];\n            key1 = this.keys[0].clone();\n            key1.time += this.length + 0.05;\n            break;\n          }\n        }\n\n        if (key0 && key1 && key0 !== key1) {\n          this.target.matrixAutoUpdate = false;\n          this.target.matrix.copy(key0.lerp(key1, time));\n          this.target.matrixWorldNeedsUpdate = true;\n          return;\n        }\n\n        if (key0 && key1 && key0 == key1) {\n          this.target.matrixAutoUpdate = false;\n          this.target.matrix.copy(key0.matrix);\n          this.target.matrixWorldNeedsUpdate = true;\n          return;\n        }\n      };\n    };\n\n    Virtulous.TrackTargetNodeNameCompare = function (root, target) {\n      function find(node, name) {\n        if (node.name == name) return node;\n\n        for (let i = 0; i < node.children.length; i++) {\n          var r = find(node.children[i], name);\n          if (r) return r;\n        }\n\n        return null;\n      }\n\n      return find(root, target.name);\n    };\n\n    Virtulous.Animation = function () {\n      this.tracks = [];\n      this.length = 0;\n\n      this.addTrack = function (track) {\n        this.tracks.push(track);\n        this.length = Math.max(track.length, this.length);\n      };\n\n      this.setTime = function (time) {\n        this.time = time;\n\n        for (let i = 0; i < this.tracks.length; i++) this.tracks[i].setTime(time);\n      };\n\n      this.clone = function (target, compareitor) {\n        if (!compareitor) compareitor = Virtulous.TrackTargetNodeNameCompare;\n        var n = new Virtulous.Animation();\n        n.target = target;\n\n        for (let i = 0; i < this.tracks.length; i++) {\n          var track = this.tracks[i].clone();\n          track.reTarget(target, compareitor);\n          n.addTrack(track);\n        }\n\n        return n;\n      };\n    };\n\n    var ASSBIN_CHUNK_AICAMERA = 0x1234;\n    var ASSBIN_CHUNK_AILIGHT = 0x1235;\n    var ASSBIN_CHUNK_AITEXTURE = 0x1236;\n    var ASSBIN_CHUNK_AIMESH = 0x1237;\n    var ASSBIN_CHUNK_AINODEANIM = 0x1238;\n    var ASSBIN_CHUNK_AISCENE = 0x1239;\n    var ASSBIN_CHUNK_AIBONE = 0x123a;\n    var ASSBIN_CHUNK_AIANIMATION = 0x123b;\n    var ASSBIN_CHUNK_AINODE = 0x123c;\n    var ASSBIN_CHUNK_AIMATERIAL = 0x123d;\n    var ASSBIN_CHUNK_AIMATERIALPROPERTY = 0x123e;\n    var ASSBIN_MESH_HAS_POSITIONS = 0x1;\n    var ASSBIN_MESH_HAS_NORMALS = 0x2;\n    var ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS = 0x4;\n    var ASSBIN_MESH_HAS_TEXCOORD_BASE = 0x100;\n    var ASSBIN_MESH_HAS_COLOR_BASE = 0x10000;\n    var AI_MAX_NUMBER_OF_COLOR_SETS = 1;\n    var AI_MAX_NUMBER_OF_TEXTURECOORDS = 4; //var aiLightSource_UNDEFINED = 0x0;\n    //! A directional light source has a well-defined direction\n    //! but is infinitely far away. That's quite a good\n    //! approximation for sun light.\n\n    var aiLightSource_DIRECTIONAL = 0x1; //! A point light source has a well-defined position\n    //! in space but no direction - it emits light in all\n    //! directions. A normal bulb is a point light.\n    //var aiLightSource_POINT = 0x2;\n    //! A spot light source emits light in a specific\n    //! angle. It has a position and a direction it is pointing to.\n    //! A good example for a spot light is a light spot in\n    //! sport arenas.\n\n    var aiLightSource_SPOT = 0x3; //! The generic light level of the world, including the bounces\n    //! of all other lightsources.\n    //! Typically, there's at most one ambient light in a scene.\n    //! This light type doesn't have a valid position, direction, or\n    //! other properties, just a color.\n    //var aiLightSource_AMBIENT = 0x4;\n\n    /** Flat shading. Shading is done on per-face base,\n     *  diffuse only. Also known as 'faceted shading'.\n     */\n    //var aiShadingMode_Flat = 0x1;\n\n    /** Simple Gouraud shading.\n     */\n    //var aiShadingMode_Gouraud = 0x2;\n\n    /** Phong-Shading -\n     */\n    //var aiShadingMode_Phong = 0x3;\n\n    /** Phong-Blinn-Shading\n     */\n    //var aiShadingMode_Blinn = 0x4;\n\n    /** Toon-Shading per pixel\n     *\n     *  Also known as 'comic' shader.\n     */\n    //var aiShadingMode_Toon = 0x5;\n\n    /** OrenNayar-Shading per pixel\n     *\n     *  Extension to standard Lambertian shading, taking the\n     *  roughness of the material into account\n     */\n    //var aiShadingMode_OrenNayar = 0x6;\n\n    /** Minnaert-Shading per pixel\n     *\n     *  Extension to standard Lambertian shading, taking the\n     *  \"darkness\" of the material into account\n     */\n    //var aiShadingMode_Minnaert = 0x7;\n\n    /** CookTorrance-Shading per pixel\n     *\n     *  Special shader for metallic surfaces.\n     */\n    //var aiShadingMode_CookTorrance = 0x8;\n\n    /** No shading at all. Constant light influence of 1.0.\n     */\n    //var aiShadingMode_NoShading = 0x9;\n\n    /** Fresnel shading\n     */\n    //var aiShadingMode_Fresnel = 0xa;\n    //var aiTextureType_NONE = 0x0;\n\n    /** The texture is combined with the result of the diffuse\n     *  lighting equation.\n     */\n\n    var aiTextureType_DIFFUSE = 0x1;\n    /** The texture is combined with the result of the specular\n     *  lighting equation.\n     */\n    //var aiTextureType_SPECULAR = 0x2;\n\n    /** The texture is combined with the result of the ambient\n     *  lighting equation.\n     */\n    //var aiTextureType_AMBIENT = 0x3;\n\n    /** The texture is added to the result of the lighting\n     *  calculation. It isn't influenced by incoming light.\n     */\n    //var aiTextureType_EMISSIVE = 0x4;\n\n    /** The texture is a height map.\n     *\n     *  By convention, higher gray-scale values stand for\n     *  higher elevations from the base height.\n     */\n    //var aiTextureType_HEIGHT = 0x5;\n\n    /** The texture is a (tangent space) normal-map.\n     *\n     *  Again, there are several conventions for tangent-space\n     *  normal maps. Assimp does (intentionally) not\n     *  distinguish here.\n     */\n\n    var aiTextureType_NORMALS = 0x6;\n    /** The texture defines the glossiness of the material.\n     *\n     *  The glossiness is in fact the exponent of the specular\n     *  (phong) lighting equation. Usually there is a conversion\n     *  function defined to map the linear color values in the\n     *  texture to a suitable exponent. Have fun.\n     */\n    //var aiTextureType_SHININESS = 0x7;\n\n    /** The texture defines per-pixel opacity.\n     *\n     *  Usually 'white' means opaque and 'black' means\n     *  'transparency'. Or quite the opposite. Have fun.\n     */\n\n    var aiTextureType_OPACITY = 0x8;\n    /** Displacement texture\n     *\n     *  The exact purpose and format is application-dependent.\n     *  Higher color values stand for higher vertex displacements.\n     */\n    //var aiTextureType_DISPLACEMENT = 0x9;\n\n    /** Lightmap texture (aka Ambient Occlusion)\n     *\n     *  Both 'Lightmaps' and dedicated 'ambient occlusion maps' are\n     *  covered by this material property. The texture contains a\n     *  scaling value for the final color value of a pixel. Its\n     *  intensity is not affected by incoming light.\n     */\n\n    var aiTextureType_LIGHTMAP = 0xa;\n    /** Reflection texture\n     *\n     * Contains the color of a perfect mirror reflection.\n     * Rarely used, almost never for real-time applications.\n     */\n    //var aiTextureType_REFLECTION = 0xB;\n\n    /** Unknown texture\n     *\n     *  A texture reference that does not match any of the definitions\n     *  above is considered to be 'unknown'. It is still imported,\n     *  but is excluded from any further postprocessing.\n     */\n    //var aiTextureType_UNKNOWN = 0xC;\n\n    var BONESPERVERT = 4;\n\n    function ASSBIN_MESH_HAS_TEXCOORD(n) {\n      return ASSBIN_MESH_HAS_TEXCOORD_BASE << n;\n    }\n\n    function ASSBIN_MESH_HAS_COLOR(n) {\n      return ASSBIN_MESH_HAS_COLOR_BASE << n;\n    }\n\n    function markBones(scene) {\n      for (let i in scene.mMeshes) {\n        var mesh = scene.mMeshes[i];\n\n        for (let k in mesh.mBones) {\n          var boneNode = scene.findNode(mesh.mBones[k].mName);\n          if (boneNode) boneNode.isBone = true;\n        }\n      }\n    }\n\n    function cloneTreeToBones(root, scene) {\n      var rootBone = new Bone();\n      rootBone.matrix.copy(root.matrix);\n      rootBone.matrixWorld.copy(root.matrixWorld);\n      rootBone.position.copy(root.position);\n      rootBone.quaternion.copy(root.quaternion);\n      rootBone.scale.copy(root.scale);\n      scene.nodeCount++;\n      rootBone.name = 'bone_' + root.name + scene.nodeCount.toString();\n      if (!scene.nodeToBoneMap[root.name]) scene.nodeToBoneMap[root.name] = [];\n      scene.nodeToBoneMap[root.name].push(rootBone);\n\n      for (let i in root.children) {\n        var child = cloneTreeToBones(root.children[i], scene);\n        rootBone.add(child);\n      }\n\n      return rootBone;\n    }\n\n    function sortWeights(indexes, weights) {\n      var pairs = [];\n\n      for (let i = 0; i < indexes.length; i++) {\n        pairs.push({\n          i: indexes[i],\n          w: weights[i]\n        });\n      }\n\n      pairs.sort(function (a, b) {\n        return b.w - a.w;\n      });\n\n      while (pairs.length < 4) {\n        pairs.push({\n          i: 0,\n          w: 0\n        });\n      }\n\n      if (pairs.length > 4) pairs.length = 4;\n      var sum = 0;\n\n      for (let i = 0; i < 4; i++) {\n        sum += pairs[i].w * pairs[i].w;\n      }\n\n      sum = Math.sqrt(sum);\n\n      for (let i = 0; i < 4; i++) {\n        pairs[i].w = pairs[i].w / sum;\n        indexes[i] = pairs[i].i;\n        weights[i] = pairs[i].w;\n      }\n    }\n\n    function findMatchingBone(root, name) {\n      if (root.name.indexOf('bone_' + name) == 0) return root;\n\n      for (let i in root.children) {\n        var ret = findMatchingBone(root.children[i], name);\n        if (ret) return ret;\n      }\n\n      return undefined;\n    }\n\n    function aiMesh() {\n      this.mPrimitiveTypes = 0;\n      this.mNumVertices = 0;\n      this.mNumFaces = 0;\n      this.mNumBones = 0;\n      this.mMaterialIndex = 0;\n      this.mVertices = [];\n      this.mNormals = [];\n      this.mTangents = [];\n      this.mBitangents = [];\n      this.mColors = [[]];\n      this.mTextureCoords = [[]];\n      this.mFaces = [];\n      this.mBones = [];\n\n      this.hookupSkeletons = function (scene) {\n        if (this.mBones.length == 0) return;\n        var allBones = [];\n        var offsetMatrix = [];\n        var skeletonRoot = scene.findNode(this.mBones[0].mName);\n\n        while (skeletonRoot.mParent && skeletonRoot.mParent.isBone) {\n          skeletonRoot = skeletonRoot.mParent;\n        }\n\n        var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n        var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n        this.threeNode.add(threeSkeletonRootBone);\n\n        for (let i = 0; i < this.mBones.length; i++) {\n          var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n\n          if (bone) {\n            var tbone = bone;\n            allBones.push(tbone); //tbone.matrixAutoUpdate = false;\n\n            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n          } else {\n            var skeletonRoot = scene.findNode(this.mBones[i].mName);\n            if (!skeletonRoot) return;\n            var threeSkeletonRoot = skeletonRoot.toTHREE(scene);\n            var threeSkeletonRootBone = cloneTreeToBones(threeSkeletonRoot, scene);\n            this.threeNode.add(threeSkeletonRootBone);\n            var bone = findMatchingBone(threeSkeletonRootBone, this.mBones[i].mName);\n            var tbone = bone;\n            allBones.push(tbone); //tbone.matrixAutoUpdate = false;\n\n            offsetMatrix.push(this.mBones[i].mOffsetMatrix.toTHREE());\n          }\n        }\n\n        var skeleton = new Skeleton(allBones, offsetMatrix);\n        this.threeNode.bind(skeleton, new Matrix4());\n        this.threeNode.material.skinning = true;\n      };\n\n      this.toTHREE = function (scene) {\n        if (this.threeNode) return this.threeNode;\n        var geometry = new BufferGeometry();\n        var mat;\n        if (scene.mMaterials[this.mMaterialIndex]) mat = scene.mMaterials[this.mMaterialIndex].toTHREE(scene);else mat = new MeshLambertMaterial();\n        geometry.setIndex(new BufferAttribute(new Uint32Array(this.mIndexArray), 1));\n        geometry.setAttribute('position', new BufferAttribute(this.mVertexBuffer, 3));\n        if (this.mNormalBuffer && this.mNormalBuffer.length > 0) geometry.setAttribute('normal', new BufferAttribute(this.mNormalBuffer, 3));\n        if (this.mColorBuffer && this.mColorBuffer.length > 0) geometry.setAttribute('color', new BufferAttribute(this.mColorBuffer, 4));\n        if (this.mTexCoordsBuffers[0] && this.mTexCoordsBuffers[0].length > 0) geometry.setAttribute('uv', new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[0]), 2));\n        if (this.mTexCoordsBuffers[1] && this.mTexCoordsBuffers[1].length > 0) geometry.setAttribute('uv1', new BufferAttribute(new Float32Array(this.mTexCoordsBuffers[1]), 2));\n        if (this.mTangentBuffer && this.mTangentBuffer.length > 0) geometry.setAttribute('tangents', new BufferAttribute(this.mTangentBuffer, 3));\n        if (this.mBitangentBuffer && this.mBitangentBuffer.length > 0) geometry.setAttribute('bitangents', new BufferAttribute(this.mBitangentBuffer, 3));\n\n        if (this.mBones.length > 0) {\n          var weights = [];\n          var bones = [];\n\n          for (let i = 0; i < this.mBones.length; i++) {\n            for (let j = 0; j < this.mBones[i].mWeights.length; j++) {\n              var weight = this.mBones[i].mWeights[j];\n\n              if (weight) {\n                if (!weights[weight.mVertexId]) weights[weight.mVertexId] = [];\n                if (!bones[weight.mVertexId]) bones[weight.mVertexId] = [];\n                weights[weight.mVertexId].push(weight.mWeight);\n                bones[weight.mVertexId].push(parseInt(i));\n              }\n            }\n          }\n\n          for (let i in bones) {\n            sortWeights(bones[i], weights[i]);\n          }\n\n          var _weights = [];\n          var _bones = [];\n\n          for (let i = 0; i < weights.length; i++) {\n            for (let j = 0; j < 4; j++) {\n              if (weights[i] && bones[i]) {\n                _weights.push(weights[i][j]);\n\n                _bones.push(bones[i][j]);\n              } else {\n                _weights.push(0);\n\n                _bones.push(0);\n              }\n            }\n          }\n\n          geometry.setAttribute('skinWeight', new BufferAttribute(new Float32Array(_weights), BONESPERVERT));\n          geometry.setAttribute('skinIndex', new BufferAttribute(new Float32Array(_bones), BONESPERVERT));\n        }\n\n        var mesh;\n        if (this.mBones.length == 0) mesh = new Mesh(geometry, mat);\n\n        if (this.mBones.length > 0) {\n          mesh = new SkinnedMesh(geometry, mat);\n          mesh.normalizeSkinWeights();\n        }\n\n        this.threeNode = mesh; //mesh.matrixAutoUpdate = false;\n\n        return mesh;\n      };\n    }\n\n    function aiFace() {\n      this.mNumIndices = 0;\n      this.mIndices = [];\n    }\n\n    function aiVector3D() {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n\n      this.toTHREE = function () {\n        return new Vector3(this.x, this.y, this.z);\n      };\n    }\n\n    function aiColor3D() {\n      this.r = 0;\n      this.g = 0;\n      this.b = 0;\n      this.a = 0;\n\n      this.toTHREE = function () {\n        return new Color(this.r, this.g, this.b);\n      };\n    }\n\n    function aiQuaternion() {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n\n      this.toTHREE = function () {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n      };\n    }\n\n    function aiVertexWeight() {\n      this.mVertexId = 0;\n      this.mWeight = 0;\n    }\n\n    function aiString() {\n      this.data = [];\n\n      this.toString = function () {\n        var str = '';\n        this.data.forEach(function (i) {\n          str += String.fromCharCode(i);\n        });\n        return str.replace(/[^\\x20-\\x7E]+/g, '');\n      };\n    }\n\n    function aiVectorKey() {\n      this.mTime = 0;\n      this.mValue = null;\n    }\n\n    function aiQuatKey() {\n      this.mTime = 0;\n      this.mValue = null;\n    }\n\n    function aiNode() {\n      this.mName = '';\n      this.mTransformation = [];\n      this.mNumChildren = 0;\n      this.mNumMeshes = 0;\n      this.mMeshes = [];\n      this.mChildren = [];\n\n      this.toTHREE = function (scene) {\n        if (this.threeNode) return this.threeNode;\n        var o = new Object3D();\n        o.name = this.mName;\n        o.matrix = this.mTransformation.toTHREE();\n\n        for (let i = 0; i < this.mChildren.length; i++) {\n          o.add(this.mChildren[i].toTHREE(scene));\n        }\n\n        for (let i = 0; i < this.mMeshes.length; i++) {\n          o.add(scene.mMeshes[this.mMeshes[i]].toTHREE(scene));\n        }\n\n        this.threeNode = o; //o.matrixAutoUpdate = false;\n\n        o.matrix.decompose(o.position, o.quaternion, o.scale);\n        return o;\n      };\n    }\n\n    function aiBone() {\n      this.mName = '';\n      this.mNumWeights = 0;\n      this.mOffsetMatrix = 0;\n    }\n\n    function aiMaterialProperty() {\n      this.mKey = '';\n      this.mSemantic = 0;\n      this.mIndex = 0;\n      this.mData = [];\n      this.mDataLength = 0;\n      this.mType = 0;\n\n      this.dataAsColor = function () {\n        var array = new Uint8Array(this.mData).buffer;\n        var reader = new DataView(array);\n        var r = reader.getFloat32(0, true);\n        var g = reader.getFloat32(4, true);\n        var b = reader.getFloat32(8, true); //var a = reader.getFloat32(12, true);\n\n        return new Color(r, g, b);\n      };\n\n      this.dataAsFloat = function () {\n        var array = new Uint8Array(this.mData).buffer;\n        var reader = new DataView(array);\n        var r = reader.getFloat32(0, true);\n        return r;\n      };\n\n      this.dataAsBool = function () {\n        var array = new Uint8Array(this.mData).buffer;\n        var reader = new DataView(array);\n        var r = reader.getFloat32(0, true);\n        return !!r;\n      };\n\n      this.dataAsString = function () {\n        var s = new aiString();\n        s.data = this.mData;\n        return s.toString();\n      };\n\n      this.dataAsMap = function () {\n        var s = new aiString();\n        s.data = this.mData;\n        var path = s.toString();\n        path = path.replace(/\\\\/g, '/');\n\n        if (path.indexOf('/') != -1) {\n          path = path.substr(path.lastIndexOf('/') + 1);\n        }\n\n        return textureLoader.load(path);\n      };\n    }\n\n    var namePropMapping = {\n      '?mat.name': 'name',\n      '$mat.shadingm': 'shading',\n      '$mat.twosided': 'twoSided',\n      '$mat.wireframe': 'wireframe',\n      '$clr.ambient': 'ambient',\n      '$clr.diffuse': 'color',\n      '$clr.specular': 'specular',\n      '$clr.emissive': 'emissive',\n      '$clr.transparent': 'transparent',\n      '$clr.reflective': 'reflect',\n      '$mat.shininess': 'shininess',\n      '$mat.reflectivity': 'reflectivity',\n      '$mat.refracti': 'refraction',\n      '$tex.file': 'map'\n    };\n    var nameTypeMapping = {\n      '?mat.name': 'string',\n      '$mat.shadingm': 'bool',\n      '$mat.twosided': 'bool',\n      '$mat.wireframe': 'bool',\n      '$clr.ambient': 'color',\n      '$clr.diffuse': 'color',\n      '$clr.specular': 'color',\n      '$clr.emissive': 'color',\n      '$clr.transparent': 'color',\n      '$clr.reflective': 'color',\n      '$mat.shininess': 'float',\n      '$mat.reflectivity': 'float',\n      '$mat.refracti': 'float',\n      '$tex.file': 'map'\n    };\n\n    function aiMaterial() {\n      this.mNumAllocated = 0;\n      this.mNumProperties = 0;\n      this.mProperties = [];\n\n      this.toTHREE = function () {\n        var mat = new MeshPhongMaterial();\n\n        for (let i = 0; i < this.mProperties.length; i++) {\n          if (nameTypeMapping[this.mProperties[i].mKey] == 'float') mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsFloat();\n          if (nameTypeMapping[this.mProperties[i].mKey] == 'color') mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsColor();\n          if (nameTypeMapping[this.mProperties[i].mKey] == 'bool') mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsBool();\n          if (nameTypeMapping[this.mProperties[i].mKey] == 'string') mat[namePropMapping[this.mProperties[i].mKey]] = this.mProperties[i].dataAsString();\n\n          if (nameTypeMapping[this.mProperties[i].mKey] == 'map') {\n            var prop = this.mProperties[i];\n            if (prop.mSemantic == aiTextureType_DIFFUSE) mat.map = this.mProperties[i].dataAsMap();\n            if (prop.mSemantic == aiTextureType_NORMALS) mat.normalMap = this.mProperties[i].dataAsMap();\n            if (prop.mSemantic == aiTextureType_LIGHTMAP) mat.lightMap = this.mProperties[i].dataAsMap();\n            if (prop.mSemantic == aiTextureType_OPACITY) mat.alphaMap = this.mProperties[i].dataAsMap();\n          }\n        }\n\n        mat.ambient.r = 0.53;\n        mat.ambient.g = 0.53;\n        mat.ambient.b = 0.53;\n        mat.color.r = 1;\n        mat.color.g = 1;\n        mat.color.b = 1;\n        return mat;\n      };\n    }\n\n    function veclerp(v1, v2, l) {\n      var v = new Vector3();\n      var lm1 = 1 - l;\n      v.x = v1.x * l + v2.x * lm1;\n      v.y = v1.y * l + v2.y * lm1;\n      v.z = v1.z * l + v2.z * lm1;\n      return v;\n    }\n\n    function quatlerp(q1, q2, l) {\n      return q1.clone().slerp(q2, 1 - l);\n    }\n\n    function sampleTrack(keys, time, lne, lerp) {\n      if (keys.length == 1) return keys[0].mValue.toTHREE();\n      var dist = Infinity;\n      var key = null;\n      var nextKey = null;\n\n      for (let i = 0; i < keys.length; i++) {\n        var timeDist = Math.abs(keys[i].mTime - time);\n\n        if (timeDist < dist && keys[i].mTime <= time) {\n          dist = timeDist;\n          key = keys[i];\n          nextKey = keys[i + 1];\n        }\n      }\n\n      if (!key) {\n        return null;\n      } else if (nextKey) {\n        var dT = nextKey.mTime - key.mTime;\n        var T = key.mTime - time;\n        var l = T / dT;\n        return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n      } else {\n        nextKey = keys[0].clone();\n        nextKey.mTime += lne;\n        var dT = nextKey.mTime - key.mTime;\n        var T = key.mTime - time;\n        var l = T / dT;\n        return lerp(key.mValue.toTHREE(), nextKey.mValue.toTHREE(), l);\n      }\n    }\n\n    function aiNodeAnim() {\n      this.mNodeName = '';\n      this.mNumPositionKeys = 0;\n      this.mNumRotationKeys = 0;\n      this.mNumScalingKeys = 0;\n      this.mPositionKeys = [];\n      this.mRotationKeys = [];\n      this.mScalingKeys = [];\n      this.mPreState = '';\n      this.mPostState = '';\n\n      this.init = function (tps) {\n        if (!tps) tps = 1;\n\n        function t(t) {\n          t.mTime /= tps;\n        }\n\n        this.mPositionKeys.forEach(t);\n        this.mRotationKeys.forEach(t);\n        this.mScalingKeys.forEach(t);\n      };\n\n      this.sortKeys = function () {\n        function comp(a, b) {\n          return a.mTime - b.mTime;\n        }\n\n        this.mPositionKeys.sort(comp);\n        this.mRotationKeys.sort(comp);\n        this.mScalingKeys.sort(comp);\n      };\n\n      this.getLength = function () {\n        return Math.max(Math.max.apply(null, this.mPositionKeys.map(function (a) {\n          return a.mTime;\n        })), Math.max.apply(null, this.mRotationKeys.map(function (a) {\n          return a.mTime;\n        })), Math.max.apply(null, this.mScalingKeys.map(function (a) {\n          return a.mTime;\n        })));\n      };\n\n      this.toTHREE = function (o) {\n        this.sortKeys();\n        var length = this.getLength();\n        var track = new Virtulous.KeyFrameTrack();\n\n        for (let i = 0; i < length; i += 0.05) {\n          var matrix = new Matrix4();\n          var time = i;\n          var pos = sampleTrack(this.mPositionKeys, time, length, veclerp);\n          var scale = sampleTrack(this.mScalingKeys, time, length, veclerp);\n          var rotation = sampleTrack(this.mRotationKeys, time, length, quatlerp);\n          matrix.compose(pos, rotation, scale);\n          var key = new Virtulous.KeyFrame(time, matrix);\n          track.addKey(key);\n        }\n\n        track.target = o.findNode(this.mNodeName).toTHREE();\n        var tracks = [track];\n\n        if (o.nodeToBoneMap[this.mNodeName]) {\n          for (let i = 0; i < o.nodeToBoneMap[this.mNodeName].length; i++) {\n            var t2 = track.clone();\n            t2.target = o.nodeToBoneMap[this.mNodeName][i];\n            tracks.push(t2);\n          }\n        }\n\n        return tracks;\n      };\n    }\n\n    function aiAnimation() {\n      this.mName = '';\n      this.mDuration = 0;\n      this.mTicksPerSecond = 0;\n      this.mNumChannels = 0;\n      this.mChannels = [];\n\n      this.toTHREE = function (root) {\n        var animationHandle = new Virtulous.Animation();\n\n        for (let i in this.mChannels) {\n          this.mChannels[i].init(this.mTicksPerSecond);\n          var tracks = this.mChannels[i].toTHREE(root);\n\n          for (let j in tracks) {\n            tracks[j].init();\n            animationHandle.addTrack(tracks[j]);\n          }\n        }\n\n        animationHandle.length = Math.max.apply(null, animationHandle.tracks.map(function (e) {\n          return e.length;\n        }));\n        return animationHandle;\n      };\n    }\n\n    function aiTexture() {\n      this.mWidth = 0;\n      this.mHeight = 0;\n      this.texAchFormatHint = [];\n      this.pcData = [];\n    }\n\n    function aiLight() {\n      this.mName = '';\n      this.mType = 0;\n      this.mAttenuationConstant = 0;\n      this.mAttenuationLinear = 0;\n      this.mAttenuationQuadratic = 0;\n      this.mAngleInnerCone = 0;\n      this.mAngleOuterCone = 0;\n      this.mColorDiffuse = null;\n      this.mColorSpecular = null;\n      this.mColorAmbient = null;\n    }\n\n    function aiCamera() {\n      this.mName = '';\n      this.mPosition = null;\n      this.mLookAt = null;\n      this.mUp = null;\n      this.mHorizontalFOV = 0;\n      this.mClipPlaneNear = 0;\n      this.mClipPlaneFar = 0;\n      this.mAspect = 0;\n    }\n\n    function aiScene() {\n      this.versionMajor = 0;\n      this.versionMinor = 0;\n      this.versionRevision = 0;\n      this.compileFlags = 0;\n      this.mFlags = 0;\n      this.mNumMeshes = 0;\n      this.mNumMaterials = 0;\n      this.mNumAnimations = 0;\n      this.mNumTextures = 0;\n      this.mNumLights = 0;\n      this.mNumCameras = 0;\n      this.mRootNode = null;\n      this.mMeshes = [];\n      this.mMaterials = [];\n      this.mAnimations = [];\n      this.mLights = [];\n      this.mCameras = [];\n      this.nodeToBoneMap = {};\n\n      this.findNode = function (name, root) {\n        if (!root) {\n          root = this.mRootNode;\n        }\n\n        if (root.mName == name) {\n          return root;\n        }\n\n        for (let i = 0; i < root.mChildren.length; i++) {\n          var ret = this.findNode(name, root.mChildren[i]);\n          if (ret) return ret;\n        }\n\n        return null;\n      };\n\n      this.toTHREE = function () {\n        this.nodeCount = 0;\n        markBones(this);\n        var o = this.mRootNode.toTHREE(this);\n\n        for (let i in this.mMeshes) this.mMeshes[i].hookupSkeletons(this);\n\n        if (this.mAnimations.length > 0) {\n          var a = this.mAnimations[0].toTHREE(this);\n        }\n\n        return {\n          object: o,\n          animation: a\n        };\n      };\n    }\n\n    function aiMatrix4() {\n      this.elements = [[], [], [], []];\n\n      this.toTHREE = function () {\n        var m = new Matrix4();\n\n        for (let i = 0; i < 4; ++i) {\n          for (let i2 = 0; i2 < 4; ++i2) {\n            m.elements[i * 4 + i2] = this.elements[i2][i];\n          }\n        }\n\n        return m;\n      };\n    }\n\n    var littleEndian = true;\n\n    function readFloat(dataview) {\n      var val = dataview.getFloat32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n\n    function Read_double(dataview) {\n      var val = dataview.getFloat64(dataview.readOffset, littleEndian);\n      dataview.readOffset += 8;\n      return val;\n    }\n\n    function Read_uint8_t(dataview) {\n      var val = dataview.getUint8(dataview.readOffset);\n      dataview.readOffset += 1;\n      return val;\n    }\n\n    function Read_uint16_t(dataview) {\n      var val = dataview.getUint16(dataview.readOffset, littleEndian);\n      dataview.readOffset += 2;\n      return val;\n    }\n\n    function Read_unsigned_int(dataview) {\n      var val = dataview.getUint32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n\n    function Read_uint32_t(dataview) {\n      var val = dataview.getUint32(dataview.readOffset, littleEndian);\n      dataview.readOffset += 4;\n      return val;\n    }\n\n    function Read_aiVector3D(stream) {\n      var v = new aiVector3D();\n      v.x = readFloat(stream);\n      v.y = readFloat(stream);\n      v.z = readFloat(stream);\n      return v;\n    }\n\n    function Read_aiColor3D(stream) {\n      var c = new aiColor3D();\n      c.r = readFloat(stream);\n      c.g = readFloat(stream);\n      c.b = readFloat(stream);\n      return c;\n    }\n\n    function Read_aiQuaternion(stream) {\n      var v = new aiQuaternion();\n      v.w = readFloat(stream);\n      v.x = readFloat(stream);\n      v.y = readFloat(stream);\n      v.z = readFloat(stream);\n      return v;\n    }\n\n    function Read_aiString(stream) {\n      var s = new aiString();\n      var stringlengthbytes = Read_unsigned_int(stream);\n      stream.ReadBytes(s.data, 1, stringlengthbytes);\n      return s.toString();\n    }\n\n    function Read_aiVertexWeight(stream) {\n      var w = new aiVertexWeight();\n      w.mVertexId = Read_unsigned_int(stream);\n      w.mWeight = readFloat(stream);\n      return w;\n    }\n\n    function Read_aiMatrix4x4(stream) {\n      var m = new aiMatrix4();\n\n      for (let i = 0; i < 4; ++i) {\n        for (let i2 = 0; i2 < 4; ++i2) {\n          m.elements[i][i2] = readFloat(stream);\n        }\n      }\n\n      return m;\n    }\n\n    function Read_aiVectorKey(stream) {\n      var v = new aiVectorKey();\n      v.mTime = Read_double(stream);\n      v.mValue = Read_aiVector3D(stream);\n      return v;\n    }\n\n    function Read_aiQuatKey(stream) {\n      var v = new aiQuatKey();\n      v.mTime = Read_double(stream);\n      v.mValue = Read_aiQuaternion(stream);\n      return v;\n    }\n\n    function ReadArray_aiVertexWeight(stream, data, size) {\n      for (let i = 0; i < size; i++) data[i] = Read_aiVertexWeight(stream);\n    }\n\n    function ReadArray_aiVectorKey(stream, data, size) {\n      for (let i = 0; i < size; i++) data[i] = Read_aiVectorKey(stream);\n    }\n\n    function ReadArray_aiQuatKey(stream, data, size) {\n      for (let i = 0; i < size; i++) data[i] = Read_aiQuatKey(stream);\n    }\n\n    function ReadBounds(stream, T\n    /*p*/\n    , n) {\n      // not sure what to do here, the data isn't really useful.\n      return stream.Seek(sizeof(T) * n, aiOrigin_CUR); // eslint-disable-line no-undef\n    }\n\n    function ai_assert(bool) {\n      if (!bool) throw 'asset failed';\n    }\n\n    function ReadBinaryNode(stream, parent, depth) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AINODE);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      var node = new aiNode();\n      node.mParent = parent;\n      node.mDepth = depth;\n      node.mName = Read_aiString(stream);\n      node.mTransformation = Read_aiMatrix4x4(stream);\n      node.mNumChildren = Read_unsigned_int(stream);\n      node.mNumMeshes = Read_unsigned_int(stream);\n\n      if (node.mNumMeshes) {\n        node.mMeshes = [];\n\n        for (let i = 0; i < node.mNumMeshes; ++i) {\n          node.mMeshes[i] = Read_unsigned_int(stream);\n        }\n      }\n\n      if (node.mNumChildren) {\n        node.mChildren = [];\n\n        for (let i = 0; i < node.mNumChildren; ++i) {\n          var node2 = ReadBinaryNode(stream, node, depth++);\n          node.mChildren[i] = node2;\n        }\n      }\n\n      return node;\n    } // -----------------------------------------------------------------------------------\n\n\n    function ReadBinaryBone(stream, b) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIBONE);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      b.mName = Read_aiString(stream);\n      b.mNumWeights = Read_unsigned_int(stream);\n      b.mOffsetMatrix = Read_aiMatrix4x4(stream); // for the moment we write dumb min/max values for the bones, too.\n      // maybe I'll add a better, hash-like solution later\n\n      if (shortened) {\n        ReadBounds(stream, b.mWeights, b.mNumWeights);\n      } else {\n        // else write as usual\n        b.mWeights = [];\n        ReadArray_aiVertexWeight(stream, b.mWeights, b.mNumWeights);\n      }\n\n      return b;\n    }\n\n    function ReadBinaryMesh(stream, mesh) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMESH);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      mesh.mPrimitiveTypes = Read_unsigned_int(stream);\n      mesh.mNumVertices = Read_unsigned_int(stream);\n      mesh.mNumFaces = Read_unsigned_int(stream);\n      mesh.mNumBones = Read_unsigned_int(stream);\n      mesh.mMaterialIndex = Read_unsigned_int(stream);\n      mesh.mNumUVComponents = []; // first of all, write bits for all existent vertex components\n\n      var c = Read_unsigned_int(stream);\n\n      if (c & ASSBIN_MESH_HAS_POSITIONS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mVertices, mesh.mNumVertices);\n        } else {\n          // else write as usual\n          mesh.mVertices = [];\n          mesh.mVertexBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n\n      if (c & ASSBIN_MESH_HAS_NORMALS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mNormals, mesh.mNumVertices);\n        } else {\n          // else write as usual\n          mesh.mNormals = [];\n          mesh.mNormalBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n\n      if (c & ASSBIN_MESH_HAS_TANGENTS_AND_BITANGENTS) {\n        if (shortened) {\n          ReadBounds(stream, mesh.mTangents, mesh.mNumVertices);\n          ReadBounds(stream, mesh.mBitangents, mesh.mNumVertices);\n        } else {\n          // else write as usual\n          mesh.mTangents = [];\n          mesh.mTangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n          mesh.mBitangents = [];\n          mesh.mBitangentBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 3 * 4);\n          stream.Seek(mesh.mNumVertices * 3 * 4, aiOrigin_CUR);\n        }\n      }\n\n      for (let n = 0; n < AI_MAX_NUMBER_OF_COLOR_SETS; ++n) {\n        if (!(c & ASSBIN_MESH_HAS_COLOR(n))) break;\n\n        if (shortened) {\n          ReadBounds(stream, mesh.mColors[n], mesh.mNumVertices);\n        } else {\n          // else write as usual\n          mesh.mColors[n] = [];\n          mesh.mColorBuffer = stream.subArray32(stream.readOffset, stream.readOffset + mesh.mNumVertices * 4 * 4);\n          stream.Seek(mesh.mNumVertices * 4 * 4, aiOrigin_CUR);\n        }\n      }\n\n      mesh.mTexCoordsBuffers = [];\n\n      for (let n = 0; n < AI_MAX_NUMBER_OF_TEXTURECOORDS; ++n) {\n        if (!(c & ASSBIN_MESH_HAS_TEXCOORD(n))) break; // write number of UV components\n\n        mesh.mNumUVComponents[n] = Read_unsigned_int(stream);\n\n        if (shortened) {\n          ReadBounds(stream, mesh.mTextureCoords[n], mesh.mNumVertices);\n        } else {\n          // else write as usual\n          mesh.mTextureCoords[n] = []; //note that assbin always writes 3d texcoords\n\n          mesh.mTexCoordsBuffers[n] = [];\n\n          for (let uv = 0; uv < mesh.mNumVertices; uv++) {\n            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n            mesh.mTexCoordsBuffers[n].push(readFloat(stream));\n            readFloat(stream);\n          }\n        }\n      } // write faces. There are no floating-point calculations involved\n      // in these, so we can write a simple hash over the face data\n      // to the dump file. We generate a single 32 Bit hash for 512 faces\n      // using Assimp's standard hashing function.\n\n\n      if (shortened) {\n        Read_unsigned_int(stream);\n      } else {\n        // else write as usual\n        // if there are less than 2^16 vertices, we can simply use 16 bit integers ...\n        mesh.mFaces = [];\n        mesh.mIndexArray = [];\n\n        for (let i = 0; i < mesh.mNumFaces; ++i) {\n          var f = mesh.mFaces[i] = new aiFace(); // BOOST_STATIC_ASSERT(AI_MAX_FACE_INDICES <= 0xffff);\n\n          f.mNumIndices = Read_uint16_t(stream);\n          f.mIndices = [];\n\n          for (let a = 0; a < f.mNumIndices; ++a) {\n            if (mesh.mNumVertices < 1 << 16) {\n              f.mIndices[a] = Read_uint16_t(stream);\n            } else {\n              f.mIndices[a] = Read_unsigned_int(stream);\n            }\n          }\n\n          if (f.mNumIndices === 3) {\n            mesh.mIndexArray.push(f.mIndices[0]);\n            mesh.mIndexArray.push(f.mIndices[1]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n          } else if (f.mNumIndices === 4) {\n            mesh.mIndexArray.push(f.mIndices[0]);\n            mesh.mIndexArray.push(f.mIndices[1]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n            mesh.mIndexArray.push(f.mIndices[2]);\n            mesh.mIndexArray.push(f.mIndices[3]);\n            mesh.mIndexArray.push(f.mIndices[0]);\n          } else {\n            throw new Error(\"Sorry, can't currently triangulate polys. Use the triangulate preprocessor in Assimp.\");\n          }\n        }\n      } // write bones\n\n\n      if (mesh.mNumBones) {\n        mesh.mBones = [];\n\n        for (let a = 0; a < mesh.mNumBones; ++a) {\n          mesh.mBones[a] = new aiBone();\n          ReadBinaryBone(stream, mesh.mBones[a]);\n        }\n      }\n    }\n\n    function ReadBinaryMaterialProperty(stream, prop) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIALPROPERTY);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      prop.mKey = Read_aiString(stream);\n      prop.mSemantic = Read_unsigned_int(stream);\n      prop.mIndex = Read_unsigned_int(stream);\n      prop.mDataLength = Read_unsigned_int(stream);\n      prop.mType = Read_unsigned_int(stream);\n      prop.mData = [];\n      stream.ReadBytes(prop.mData, 1, prop.mDataLength);\n    } // -----------------------------------------------------------------------------------\n\n\n    function ReadBinaryMaterial(stream, mat) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIMATERIAL);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      mat.mNumAllocated = mat.mNumProperties = Read_unsigned_int(stream);\n\n      if (mat.mNumProperties) {\n        if (mat.mProperties) {\n          delete mat.mProperties;\n        }\n\n        mat.mProperties = [];\n\n        for (let i = 0; i < mat.mNumProperties; ++i) {\n          mat.mProperties[i] = new aiMaterialProperty();\n          ReadBinaryMaterialProperty(stream, mat.mProperties[i]);\n        }\n      }\n    }\n\n    function ReadBinaryNodeAnim(stream, nd) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AINODEANIM);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      nd.mNodeName = Read_aiString(stream);\n      nd.mNumPositionKeys = Read_unsigned_int(stream);\n      nd.mNumRotationKeys = Read_unsigned_int(stream);\n      nd.mNumScalingKeys = Read_unsigned_int(stream);\n      nd.mPreState = Read_unsigned_int(stream);\n      nd.mPostState = Read_unsigned_int(stream);\n\n      if (nd.mNumPositionKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n        } else {\n          // else write as usual\n          nd.mPositionKeys = [];\n          ReadArray_aiVectorKey(stream, nd.mPositionKeys, nd.mNumPositionKeys);\n        }\n      }\n\n      if (nd.mNumRotationKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n        } else {\n          // else write as usual\n          nd.mRotationKeys = [];\n          ReadArray_aiQuatKey(stream, nd.mRotationKeys, nd.mNumRotationKeys);\n        }\n      }\n\n      if (nd.mNumScalingKeys) {\n        if (shortened) {\n          ReadBounds(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n        } else {\n          // else write as usual\n          nd.mScalingKeys = [];\n          ReadArray_aiVectorKey(stream, nd.mScalingKeys, nd.mNumScalingKeys);\n        }\n      }\n    }\n\n    function ReadBinaryAnim(stream, anim) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AIANIMATION);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      anim.mName = Read_aiString(stream);\n      anim.mDuration = Read_double(stream);\n      anim.mTicksPerSecond = Read_double(stream);\n      anim.mNumChannels = Read_unsigned_int(stream);\n\n      if (anim.mNumChannels) {\n        anim.mChannels = [];\n\n        for (let a = 0; a < anim.mNumChannels; ++a) {\n          anim.mChannels[a] = new aiNodeAnim();\n          ReadBinaryNodeAnim(stream, anim.mChannels[a]);\n        }\n      }\n    }\n\n    function ReadBinaryTexture(stream, tex) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AITEXTURE);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      tex.mWidth = Read_unsigned_int(stream);\n      tex.mHeight = Read_unsigned_int(stream);\n      stream.ReadBytes(tex.achFormatHint, 1, 4);\n\n      if (!shortened) {\n        if (!tex.mHeight) {\n          tex.pcData = [];\n          stream.ReadBytes(tex.pcData, 1, tex.mWidth);\n        } else {\n          tex.pcData = [];\n          stream.ReadBytes(tex.pcData, 1, tex.mWidth * tex.mHeight * 4);\n        }\n      }\n    }\n\n    function ReadBinaryLight(stream, l) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AILIGHT);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      l.mName = Read_aiString(stream);\n      l.mType = Read_unsigned_int(stream);\n\n      if (l.mType != aiLightSource_DIRECTIONAL) {\n        l.mAttenuationConstant = readFloat(stream);\n        l.mAttenuationLinear = readFloat(stream);\n        l.mAttenuationQuadratic = readFloat(stream);\n      }\n\n      l.mColorDiffuse = Read_aiColor3D(stream);\n      l.mColorSpecular = Read_aiColor3D(stream);\n      l.mColorAmbient = Read_aiColor3D(stream);\n\n      if (l.mType == aiLightSource_SPOT) {\n        l.mAngleInnerCone = readFloat(stream);\n        l.mAngleOuterCone = readFloat(stream);\n      }\n    }\n\n    function ReadBinaryCamera(stream, cam) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AICAMERA);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      cam.mName = Read_aiString(stream);\n      cam.mPosition = Read_aiVector3D(stream);\n      cam.mLookAt = Read_aiVector3D(stream);\n      cam.mUp = Read_aiVector3D(stream);\n      cam.mHorizontalFOV = readFloat(stream);\n      cam.mClipPlaneNear = readFloat(stream);\n      cam.mClipPlaneFar = readFloat(stream);\n      cam.mAspect = readFloat(stream);\n    }\n\n    function ReadBinaryScene(stream, scene) {\n      var chunkID = Read_uint32_t(stream);\n      ai_assert(chunkID == ASSBIN_CHUNK_AISCENE);\n      /*uint32_t size =*/\n\n      Read_uint32_t(stream);\n      scene.mFlags = Read_unsigned_int(stream);\n      scene.mNumMeshes = Read_unsigned_int(stream);\n      scene.mNumMaterials = Read_unsigned_int(stream);\n      scene.mNumAnimations = Read_unsigned_int(stream);\n      scene.mNumTextures = Read_unsigned_int(stream);\n      scene.mNumLights = Read_unsigned_int(stream);\n      scene.mNumCameras = Read_unsigned_int(stream); // Read node graph\n\n      scene.mRootNode = new aiNode();\n      scene.mRootNode = ReadBinaryNode(stream, null, 0); // Read all meshes\n\n      if (scene.mNumMeshes) {\n        scene.mMeshes = [];\n\n        for (let i = 0; i < scene.mNumMeshes; ++i) {\n          scene.mMeshes[i] = new aiMesh();\n          ReadBinaryMesh(stream, scene.mMeshes[i]);\n        }\n      } // Read materials\n\n\n      if (scene.mNumMaterials) {\n        scene.mMaterials = [];\n\n        for (let i = 0; i < scene.mNumMaterials; ++i) {\n          scene.mMaterials[i] = new aiMaterial();\n          ReadBinaryMaterial(stream, scene.mMaterials[i]);\n        }\n      } // Read all animations\n\n\n      if (scene.mNumAnimations) {\n        scene.mAnimations = [];\n\n        for (let i = 0; i < scene.mNumAnimations; ++i) {\n          scene.mAnimations[i] = new aiAnimation();\n          ReadBinaryAnim(stream, scene.mAnimations[i]);\n        }\n      } // Read all textures\n\n\n      if (scene.mNumTextures) {\n        scene.mTextures = [];\n\n        for (let i = 0; i < scene.mNumTextures; ++i) {\n          scene.mTextures[i] = new aiTexture();\n          ReadBinaryTexture(stream, scene.mTextures[i]);\n        }\n      } // Read lights\n\n\n      if (scene.mNumLights) {\n        scene.mLights = [];\n\n        for (let i = 0; i < scene.mNumLights; ++i) {\n          scene.mLights[i] = new aiLight();\n          ReadBinaryLight(stream, scene.mLights[i]);\n        }\n      } // Read cameras\n\n\n      if (scene.mNumCameras) {\n        scene.mCameras = [];\n\n        for (let i = 0; i < scene.mNumCameras; ++i) {\n          scene.mCameras[i] = new aiCamera();\n          ReadBinaryCamera(stream, scene.mCameras[i]);\n        }\n      }\n    }\n\n    var aiOrigin_CUR = 0;\n    var aiOrigin_BEG = 1;\n\n    function extendStream(stream) {\n      stream.readOffset = 0;\n\n      stream.Seek = function (off, ori) {\n        if (ori == aiOrigin_CUR) {\n          stream.readOffset += off;\n        }\n\n        if (ori == aiOrigin_BEG) {\n          stream.readOffset = off;\n        }\n      };\n\n      stream.ReadBytes = function (buff, size, n) {\n        var bytes = size * n;\n\n        for (let i = 0; i < bytes; i++) buff[i] = Read_uint8_t(this);\n      };\n\n      stream.subArray32 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Float32Array(newbuff);\n      };\n\n      stream.subArrayUint16 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint16Array(newbuff);\n      };\n\n      stream.subArrayUint8 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint8Array(newbuff);\n      };\n\n      stream.subArrayUint32 = function (start, end) {\n        var buff = this.buffer;\n        var newbuff = buff.slice(start, end);\n        return new Uint32Array(newbuff);\n      };\n    }\n\n    var shortened, compressed;\n\n    function InternReadFile(pFiledata) {\n      var pScene = new aiScene();\n      var stream = new DataView(pFiledata);\n      extendStream(stream);\n      stream.Seek(44, aiOrigin_CUR); // signature\n\n      /*unsigned int versionMajor =*/\n\n      pScene.versionMajor = Read_unsigned_int(stream);\n      /*unsigned int versionMinor =*/\n\n      pScene.versionMinor = Read_unsigned_int(stream);\n      /*unsigned int versionRevision =*/\n\n      pScene.versionRevision = Read_unsigned_int(stream);\n      /*unsigned int compileFlags =*/\n\n      pScene.compileFlags = Read_unsigned_int(stream);\n      shortened = Read_uint16_t(stream) > 0;\n      compressed = Read_uint16_t(stream) > 0;\n      if (shortened) throw 'Shortened binaries are not supported!';\n      stream.Seek(256, aiOrigin_CUR); // original filename\n\n      stream.Seek(128, aiOrigin_CUR); // options\n\n      stream.Seek(64, aiOrigin_CUR); // padding\n\n      if (compressed) {\n        var uncompressedSize = Read_uint32_t(stream);\n        var compressedSize = stream.FileSize() - stream.Tell();\n        var compressedData = [];\n        stream.Read(compressedData, 1, compressedSize);\n        var uncompressedData = [];\n        uncompress(uncompressedData, uncompressedSize, compressedData, compressedSize); // eslint-disable-line no-undef\n\n        var buff = new ArrayBuffer(uncompressedData);\n        ReadBinaryScene(buff, pScene);\n      } else {\n        ReadBinaryScene(stream, pScene);\n      }\n\n      return pScene.toTHREE();\n    }\n\n    return InternReadFile(buffer);\n  }\n});\n\nexport { AssimpLoader };\n"]},"metadata":{},"sourceType":"module"}