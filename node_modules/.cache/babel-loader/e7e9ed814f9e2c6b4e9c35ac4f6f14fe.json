{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Loader, FileLoader, Mesh, BufferGeometry, Float32BufferAttribute, MeshStandardMaterial, DataTexture3D, RedFormat, NearestFilter, LinearFilter } from 'three';\n\nvar VOXLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(VOXLoader, _Loader);\n\n  var _super = _createSuper(VOXLoader);\n\n  function VOXLoader() {\n    _classCallCheck(this, VOXLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(VOXLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.load(url, function (buffer) {\n        try {\n          onLoad(scope.parse(buffer));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(buffer) {\n      var data = new DataView(buffer);\n      var id = data.getUint32(0, true);\n      var version = data.getUint32(4, true);\n\n      if (id !== 542658390 || version !== 150) {\n        console.error('Not a valid VOX file');\n        return;\n      }\n\n      var DEFAULT_PALETTE = [0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff, 0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff, 0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff, 0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff, 0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc, 0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc, 0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc, 0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc, 0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc, 0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99, 0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999, 0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699, 0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099, 0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66, 0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66, 0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666, 0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366, 0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066, 0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33, 0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933, 0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633, 0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033, 0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00, 0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00, 0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600, 0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300, 0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000, 0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044, 0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700, 0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000, 0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd, 0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111];\n      var i = 8;\n      var chunk;\n      var chunks = [];\n\n      while (i < data.byteLength) {\n        var _id = '';\n\n        for (var j = 0; j < 4; j++) {\n          _id += String.fromCharCode(data.getUint8(i++, true));\n        }\n\n        var chunkSize = data.getUint32(i, true);\n        i += 4;\n        data.getUint32(i, true);\n        i += 4; // childChunks\n\n        if (_id === 'SIZE') {\n          var x = data.getUint32(i, true);\n          i += 4;\n          var y = data.getUint32(i, true);\n          i += 4;\n          var z = data.getUint32(i, true);\n          i += 4;\n          chunk = {\n            palette: DEFAULT_PALETTE,\n            size: {\n              x: x,\n              y: y,\n              z: z\n            }\n          };\n          chunks.push(chunk);\n          i += chunkSize - 3 * 4;\n        } else if (_id === 'XYZI') {\n          var numVoxels = data.getUint32(i, true);\n          i += 4;\n          chunk.data = new Uint8Array(buffer, i, numVoxels * 4);\n          i += numVoxels * 4;\n        } else if (_id === 'RGBA') {\n          var palette = [0];\n\n          for (var _j = 0; _j < 256; _j++) {\n            palette[_j + 1] = data.getUint32(i, true);\n            i += 4;\n          }\n\n          chunk.palette = palette;\n        } else {\n          // console.log( id, chunkSize, childChunks );\n          i += chunkSize;\n        }\n      }\n\n      return chunks;\n    }\n  }]);\n\n  return VOXLoader;\n}(Loader);\n\nvar VOXMesh = /*#__PURE__*/function (_Mesh) {\n  _inherits(VOXMesh, _Mesh);\n\n  var _super2 = _createSuper(VOXMesh);\n\n  function VOXMesh(chunk) {\n    _classCallCheck(this, VOXMesh);\n\n    var data = chunk.data;\n    var size = chunk.size;\n    var palette = chunk.palette; //\n\n    var vertices = [];\n    var colors = [];\n    var nx = [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1];\n    var px = [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0];\n    var py = [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1];\n    var ny = [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0];\n    var nz = [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0];\n    var pz = [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1];\n\n    function add(tile, x, y, z, r, g, b) {\n      x -= size.x / 2;\n      y -= size.z / 2;\n      z += size.y / 2;\n\n      for (var i = 0; i < 18; i += 3) {\n        vertices.push(tile[i + 0] + x, tile[i + 1] + y, tile[i + 2] + z);\n        colors.push(r, g, b);\n      }\n    } // Store data in a volume for sampling\n\n\n    var offsety = size.x;\n    var offsetz = size.x * size.y;\n    var array = new Uint8Array(size.x * size.y * size.z);\n\n    for (var j = 0; j < data.length; j += 4) {\n      var x = data[j + 0];\n      var y = data[j + 1];\n      var z = data[j + 2];\n      var index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    } // Construct geometry\n\n\n    var hasColors = false;\n\n    for (var _j2 = 0; _j2 < data.length; _j2 += 4) {\n      var _x = data[_j2 + 0];\n      var _y = data[_j2 + 1];\n      var _z = data[_j2 + 2];\n      var c = data[_j2 + 3];\n      var hex = palette[c];\n      var r = (hex >> 0 & 0xff) / 0xff;\n      var g = (hex >> 8 & 0xff) / 0xff;\n      var b = (hex >> 16 & 0xff) / 0xff;\n      if (r > 0 || g > 0 || b > 0) hasColors = true;\n\n      var _index = _x + _y * offsety + _z * offsetz;\n\n      if (array[_index + 1] === 0 || _x === size.x - 1) add(px, _x, _z, -_y, r, g, b);\n      if (array[_index - 1] === 0 || _x === 0) add(nx, _x, _z, -_y, r, g, b);\n      if (array[_index + offsety] === 0 || _y === size.y - 1) add(ny, _x, _z, -_y, r, g, b);\n      if (array[_index - offsety] === 0 || _y === 0) add(py, _x, _z, -_y, r, g, b);\n      if (array[_index + offsetz] === 0 || _z === size.z - 1) add(pz, _x, _z, -_y, r, g, b);\n      if (array[_index - offsetz] === 0 || _z === 0) add(nz, _x, _z, -_y, r, g, b);\n    }\n\n    var geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.computeVertexNormals();\n    var material = new MeshStandardMaterial();\n\n    if (hasColors) {\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      material.vertexColors = true;\n    }\n\n    return _super2.call(this, geometry, material);\n  }\n\n  return VOXMesh;\n}(Mesh);\n\nvar VOXDataTexture3D = /*#__PURE__*/function (_DataTexture3D) {\n  _inherits(VOXDataTexture3D, _DataTexture3D);\n\n  var _super3 = _createSuper(VOXDataTexture3D);\n\n  function VOXDataTexture3D(chunk) {\n    var _this;\n\n    _classCallCheck(this, VOXDataTexture3D);\n\n    var data = chunk.data;\n    var size = chunk.size;\n    var offsety = size.x;\n    var offsetz = size.x * size.y;\n    var array = new Uint8Array(size.x * size.y * size.z);\n\n    for (var j = 0; j < data.length; j += 4) {\n      var x = data[j + 0];\n      var y = data[j + 1];\n      var z = data[j + 2];\n      var index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    }\n\n    _this = _super3.call(this, array, size.x, size.y, size.z);\n    _this.format = RedFormat;\n    _this.minFilter = NearestFilter;\n    _this.magFilter = LinearFilter;\n    _this.unpackAlignment = 1;\n    return _this;\n  }\n\n  return VOXDataTexture3D;\n}(DataTexture3D);\n\nexport { VOXDataTexture3D, VOXLoader, VOXMesh };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/VOXLoader.js"],"names":["Loader","FileLoader","Mesh","BufferGeometry","Float32BufferAttribute","MeshStandardMaterial","DataTexture3D","RedFormat","NearestFilter","LinearFilter","VOXLoader","url","onLoad","onProgress","onError","scope","loader","manager","setPath","path","setResponseType","setRequestHeader","requestHeader","load","buffer","parse","e","console","error","itemError","data","DataView","id","getUint32","version","DEFAULT_PALETTE","i","chunk","chunks","byteLength","j","String","fromCharCode","getUint8","chunkSize","x","y","z","palette","size","push","numVoxels","Uint8Array","VOXMesh","vertices","colors","nx","px","py","ny","nz","pz","add","tile","r","g","b","offsety","offsetz","array","length","index","hasColors","c","hex","geometry","setAttribute","computeVertexNormals","material","vertexColors","VOXDataTexture3D","format","minFilter","magFilter","unpackAlignment"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, Mesh, BufferGeometry, Float32BufferAttribute, MeshStandardMaterial, DataTexture3D, RedFormat, NearestFilter, LinearFilter } from 'three';\n\nclass VOXLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(buffer) {\n    const data = new DataView(buffer);\n    const id = data.getUint32(0, true);\n    const version = data.getUint32(4, true);\n\n    if (id !== 542658390 || version !== 150) {\n      console.error('Not a valid VOX file');\n      return;\n    }\n\n    const DEFAULT_PALETTE = [0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff, 0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff, 0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff, 0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff, 0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc, 0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc, 0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc, 0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc, 0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc, 0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99, 0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999, 0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699, 0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099, 0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66, 0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66, 0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666, 0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366, 0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066, 0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33, 0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933, 0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633, 0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033, 0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00, 0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00, 0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600, 0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300, 0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000, 0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044, 0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700, 0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000, 0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd, 0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111];\n    let i = 8;\n    let chunk;\n    const chunks = [];\n\n    while (i < data.byteLength) {\n      let id = '';\n\n      for (let j = 0; j < 4; j++) {\n        id += String.fromCharCode(data.getUint8(i++, true));\n      }\n\n      const chunkSize = data.getUint32(i, true);\n      i += 4;\n      data.getUint32(i, true);\n      i += 4; // childChunks\n\n      if (id === 'SIZE') {\n        const x = data.getUint32(i, true);\n        i += 4;\n        const y = data.getUint32(i, true);\n        i += 4;\n        const z = data.getUint32(i, true);\n        i += 4;\n        chunk = {\n          palette: DEFAULT_PALETTE,\n          size: {\n            x: x,\n            y: y,\n            z: z\n          }\n        };\n        chunks.push(chunk);\n        i += chunkSize - 3 * 4;\n      } else if (id === 'XYZI') {\n        const numVoxels = data.getUint32(i, true);\n        i += 4;\n        chunk.data = new Uint8Array(buffer, i, numVoxels * 4);\n        i += numVoxels * 4;\n      } else if (id === 'RGBA') {\n        const palette = [0];\n\n        for (let j = 0; j < 256; j++) {\n          palette[j + 1] = data.getUint32(i, true);\n          i += 4;\n        }\n\n        chunk.palette = palette;\n      } else {\n        // console.log( id, chunkSize, childChunks );\n        i += chunkSize;\n      }\n    }\n\n    return chunks;\n  }\n\n}\n\nclass VOXMesh extends Mesh {\n  constructor(chunk) {\n    const data = chunk.data;\n    const size = chunk.size;\n    const palette = chunk.palette; //\n\n    const vertices = [];\n    const colors = [];\n    const nx = [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1];\n    const px = [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0];\n    const py = [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1];\n    const ny = [0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0];\n    const nz = [0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0];\n    const pz = [0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1];\n\n    function add(tile, x, y, z, r, g, b) {\n      x -= size.x / 2;\n      y -= size.z / 2;\n      z += size.y / 2;\n\n      for (let i = 0; i < 18; i += 3) {\n        vertices.push(tile[i + 0] + x, tile[i + 1] + y, tile[i + 2] + z);\n        colors.push(r, g, b);\n      }\n    } // Store data in a volume for sampling\n\n\n    const offsety = size.x;\n    const offsetz = size.x * size.y;\n    const array = new Uint8Array(size.x * size.y * size.z);\n\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    } // Construct geometry\n\n\n    let hasColors = false;\n\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const c = data[j + 3];\n      const hex = palette[c];\n      const r = (hex >> 0 & 0xff) / 0xff;\n      const g = (hex >> 8 & 0xff) / 0xff;\n      const b = (hex >> 16 & 0xff) / 0xff;\n      if (r > 0 || g > 0 || b > 0) hasColors = true;\n      const index = x + y * offsety + z * offsetz;\n      if (array[index + 1] === 0 || x === size.x - 1) add(px, x, z, -y, r, g, b);\n      if (array[index - 1] === 0 || x === 0) add(nx, x, z, -y, r, g, b);\n      if (array[index + offsety] === 0 || y === size.y - 1) add(ny, x, z, -y, r, g, b);\n      if (array[index - offsety] === 0 || y === 0) add(py, x, z, -y, r, g, b);\n      if (array[index + offsetz] === 0 || z === size.z - 1) add(pz, x, z, -y, r, g, b);\n      if (array[index - offsetz] === 0 || z === 0) add(nz, x, z, -y, r, g, b);\n    }\n\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.computeVertexNormals();\n    const material = new MeshStandardMaterial();\n\n    if (hasColors) {\n      geometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n      material.vertexColors = true;\n    }\n\n    super(geometry, material);\n  }\n\n}\n\nclass VOXDataTexture3D extends DataTexture3D {\n  constructor(chunk) {\n    const data = chunk.data;\n    const size = chunk.size;\n    const offsety = size.x;\n    const offsetz = size.x * size.y;\n    const array = new Uint8Array(size.x * size.y * size.z);\n\n    for (let j = 0; j < data.length; j += 4) {\n      const x = data[j + 0];\n      const y = data[j + 1];\n      const z = data[j + 2];\n      const index = x + y * offsety + z * offsetz;\n      array[index] = 255;\n    }\n\n    super(array, size.x, size.y, size.z);\n    this.format = RedFormat;\n    this.minFilter = NearestFilter;\n    this.magFilter = LinearFilter;\n    this.unpackAlignment = 1;\n  }\n\n}\n\nexport { VOXDataTexture3D, VOXLoader, VOXMesh };\n"]},"metadata":{},"sourceType":"module"}