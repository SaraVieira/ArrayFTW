{"ast":null,"code":"import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { PositionNode } from './PositionNode.js';\n\nfunction CameraNode(scope, camera) {\n  TempNode.call(this, 'v3');\n  this.setScope(scope || CameraNode.POSITION);\n  this.setCamera(camera);\n}\n\nCameraNode.Nodes = function () {\n  var depthColor = new FunctionNode(['float depthColor( float mNear, float mFar ) {', '\t#ifdef USE_LOGDEPTHBUF_EXT', '\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;', '\t#else', '\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;', '\t#endif', '\treturn 1.0 - smoothstep( mNear, mFar, depth );', '}'].join('\\n'));\n  return {\n    depthColor: depthColor\n  };\n}();\n\nCameraNode.POSITION = 'position';\nCameraNode.DEPTH = 'depth';\nCameraNode.TO_VERTEX = 'toVertex';\nCameraNode.prototype = Object.create(TempNode.prototype);\nCameraNode.prototype.constructor = CameraNode;\nCameraNode.prototype.nodeType = 'Camera';\n\nCameraNode.prototype.setCamera = function (camera) {\n  this.camera = camera;\n  this.updateFrame = camera !== undefined ? this.onUpdateFrame : undefined;\n};\n\nCameraNode.prototype.setScope = function (scope) {\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n      delete this.near;\n      delete this.far;\n      break;\n  }\n\n  this.scope = scope;\n\n  switch (scope) {\n    case CameraNode.DEPTH:\n      var camera = this.camera;\n      this.near = new FloatNode(camera ? camera.near : 1);\n      this.far = new FloatNode(camera ? camera.far : 1200);\n      break;\n  }\n};\n\nCameraNode.prototype.getType = function ()\n/* builder */\n{\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n      return 'f';\n  }\n\n  return this.type;\n};\n\nCameraNode.prototype.getUnique = function ()\n/* builder */\n{\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n    case CameraNode.TO_VERTEX:\n      return true;\n  }\n\n  return false;\n};\n\nCameraNode.prototype.getShared = function ()\n/* builder */\n{\n  switch (this.scope) {\n    case CameraNode.POSITION:\n      return false;\n  }\n\n  return true;\n};\n\nCameraNode.prototype.generate = function (builder, output) {\n  var result;\n\n  switch (this.scope) {\n    case CameraNode.POSITION:\n      result = 'cameraPosition';\n      break;\n\n    case CameraNode.DEPTH:\n      var depthColor = builder.include(CameraNode.Nodes.depthColor);\n      result = depthColor + '( ' + this.near.build(builder, 'f') + ', ' + this.far.build(builder, 'f') + ' )';\n      break;\n\n    case CameraNode.TO_VERTEX:\n      result = 'normalize( ' + new PositionNode(PositionNode.WORLD).build(builder, 'v3') + ' - cameraPosition )';\n      break;\n  }\n\n  return builder.format(result, this.getType(builder), output);\n};\n\nCameraNode.prototype.onUpdateFrame = function ()\n/* frame */\n{\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n      var camera = this.camera;\n      this.near.value = camera.near;\n      this.far.value = camera.far;\n      break;\n  }\n};\n\nCameraNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.setScope(source.scope);\n\n  if (source.camera) {\n    this.setCamera(source.camera);\n  }\n\n  switch (source.scope) {\n    case CameraNode.DEPTH:\n      this.near.number = source.near;\n      this.far.number = source.far;\n      break;\n  }\n\n  return this;\n};\n\nCameraNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.scope = this.scope;\n    if (this.camera) data.camera = this.camera.uuid;\n\n    switch (this.scope) {\n      case CameraNode.DEPTH:\n        data.near = this.near.value;\n        data.far = this.far.value;\n        break;\n    }\n  }\n\n  return data;\n};\n\nexport { CameraNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/accessors/CameraNode.js"],"names":["TempNode","FunctionNode","FloatNode","PositionNode","CameraNode","scope","camera","call","setScope","POSITION","setCamera","Nodes","depthColor","join","DEPTH","TO_VERTEX","prototype","Object","create","constructor","nodeType","updateFrame","undefined","onUpdateFrame","near","far","getType","type","getUnique","getShared","generate","builder","output","result","include","build","WORLD","format","value","copy","source","number","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"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","sourcesContent":["import { TempNode } from '../core/TempNode.js';\nimport { FunctionNode } from '../core/FunctionNode.js';\nimport { FloatNode } from '../inputs/FloatNode.js';\nimport { PositionNode } from './PositionNode.js';\n\nfunction CameraNode(scope, camera) {\n  TempNode.call(this, 'v3');\n  this.setScope(scope || CameraNode.POSITION);\n  this.setCamera(camera);\n}\n\nCameraNode.Nodes = function () {\n  var depthColor = new FunctionNode(['float depthColor( float mNear, float mFar ) {', '\t#ifdef USE_LOGDEPTHBUF_EXT', '\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;', '\t#else', '\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;', '\t#endif', '\treturn 1.0 - smoothstep( mNear, mFar, depth );', '}'].join('\\n'));\n  return {\n    depthColor: depthColor\n  };\n}();\n\nCameraNode.POSITION = 'position';\nCameraNode.DEPTH = 'depth';\nCameraNode.TO_VERTEX = 'toVertex';\nCameraNode.prototype = Object.create(TempNode.prototype);\nCameraNode.prototype.constructor = CameraNode;\nCameraNode.prototype.nodeType = 'Camera';\n\nCameraNode.prototype.setCamera = function (camera) {\n  this.camera = camera;\n  this.updateFrame = camera !== undefined ? this.onUpdateFrame : undefined;\n};\n\nCameraNode.prototype.setScope = function (scope) {\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n      delete this.near;\n      delete this.far;\n      break;\n  }\n\n  this.scope = scope;\n\n  switch (scope) {\n    case CameraNode.DEPTH:\n      var camera = this.camera;\n      this.near = new FloatNode(camera ? camera.near : 1);\n      this.far = new FloatNode(camera ? camera.far : 1200);\n      break;\n  }\n};\n\nCameraNode.prototype.getType = function ()\n/* builder */\n{\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n      return 'f';\n  }\n\n  return this.type;\n};\n\nCameraNode.prototype.getUnique = function ()\n/* builder */\n{\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n    case CameraNode.TO_VERTEX:\n      return true;\n  }\n\n  return false;\n};\n\nCameraNode.prototype.getShared = function ()\n/* builder */\n{\n  switch (this.scope) {\n    case CameraNode.POSITION:\n      return false;\n  }\n\n  return true;\n};\n\nCameraNode.prototype.generate = function (builder, output) {\n  var result;\n\n  switch (this.scope) {\n    case CameraNode.POSITION:\n      result = 'cameraPosition';\n      break;\n\n    case CameraNode.DEPTH:\n      var depthColor = builder.include(CameraNode.Nodes.depthColor);\n      result = depthColor + '( ' + this.near.build(builder, 'f') + ', ' + this.far.build(builder, 'f') + ' )';\n      break;\n\n    case CameraNode.TO_VERTEX:\n      result = 'normalize( ' + new PositionNode(PositionNode.WORLD).build(builder, 'v3') + ' - cameraPosition )';\n      break;\n  }\n\n  return builder.format(result, this.getType(builder), output);\n};\n\nCameraNode.prototype.onUpdateFrame = function ()\n/* frame */\n{\n  switch (this.scope) {\n    case CameraNode.DEPTH:\n      var camera = this.camera;\n      this.near.value = camera.near;\n      this.far.value = camera.far;\n      break;\n  }\n};\n\nCameraNode.prototype.copy = function (source) {\n  TempNode.prototype.copy.call(this, source);\n  this.setScope(source.scope);\n\n  if (source.camera) {\n    this.setCamera(source.camera);\n  }\n\n  switch (source.scope) {\n    case CameraNode.DEPTH:\n      this.near.number = source.near;\n      this.far.number = source.far;\n      break;\n  }\n\n  return this;\n};\n\nCameraNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.scope = this.scope;\n    if (this.camera) data.camera = this.camera.uuid;\n\n    switch (this.scope) {\n      case CameraNode.DEPTH:\n        data.near = this.near.value;\n        data.far = this.far.value;\n        break;\n    }\n  }\n\n  return data;\n};\n\nexport { CameraNode };\n"]},"metadata":{},"sourceType":"module"}