{"ast":null,"code":"import _slicedToArray from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { useRef, useState, useMemo, useEffect } from 'react';\nimport { AnimationMixer } from 'three';\nimport { useFrame } from '@react-three/fiber';\n\nfunction useAnimations(clips, root) {\n  var ref = useRef();\n  var actualRef = root ? root : ref;\n\n  var _useState = useState(function () {\n    return new AnimationMixer(undefined);\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      mixer = _useState2[0];\n\n  var api = useMemo(function () {\n    return {\n      ref: actualRef,\n      clips: clips,\n      actions: clips.reduce(function (prev, clip) {\n        return _extends({}, prev, {\n          [clip.name]: null\n        });\n      }, {}),\n      names: clips.map(function (clip) {\n        return clip.name;\n      }),\n      mixer: mixer\n    };\n  }, [clips, mixer, actualRef]);\n  useFrame(function (state, delta) {\n    return mixer.update(delta);\n  });\n  useEffect(function () {\n    var currentRoot = actualRef.current;\n\n    if (currentRoot) {\n      clips.forEach(function (clip) {\n        return api.actions[clip.name] = mixer.clipAction(clip, currentRoot);\n      });\n    }\n\n    return function () {\n      return Object.values(api.actions).forEach(function (action) {\n        if (currentRoot) {\n          mixer.uncacheAction(action, currentRoot);\n        }\n      });\n    };\n  }, [api, clips, mixer, root, actualRef]);\n  return api;\n}\n\nexport { useAnimations };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/@react-three/drei/core/useAnimations.js"],"names":["_extends","useRef","useState","useMemo","useEffect","AnimationMixer","useFrame","useAnimations","clips","root","ref","actualRef","undefined","mixer","api","actions","reduce","prev","clip","name","names","map","state","delta","update","currentRoot","current","forEach","clipAction","Object","values","action","uncacheAction"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoCC,SAApC,QAAqD,OAArD;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,QAAT,QAAyB,oBAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;AAClC,MAAMC,GAAG,GAAGT,MAAM,EAAlB;AACA,MAAMU,SAAS,GAAGF,IAAI,GAAGA,IAAH,GAAUC,GAAhC;;AACA,kBAAgBR,QAAQ,CAAC;AAAA,WAAM,IAAIG,cAAJ,CAAmBO,SAAnB,CAAN;AAAA,GAAD,CAAxB;AAAA;AAAA,MAAOC,KAAP;;AACA,MAAMC,GAAG,GAAGX,OAAO,CAAC;AAAA,WAAO;AACzBO,MAAAA,GAAG,EAAEC,SADoB;AAEzBH,MAAAA,KAAK,EAALA,KAFyB;AAGzBO,MAAAA,OAAO,EAAEP,KAAK,CAACQ,MAAN,CAAa,UAACC,IAAD,EAAOC,IAAP;AAAA,eAAgBlB,QAAQ,CAAC,EAAD,EAAKiB,IAAL,EAAW;AACvD,WAACC,IAAI,CAACC,IAAN,GAAa;AAD0C,SAAX,CAAxB;AAAA,OAAb,EAEL,EAFK,CAHgB;AAMzBC,MAAAA,KAAK,EAAEZ,KAAK,CAACa,GAAN,CAAU,UAAAH,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAT;AAAA,OAAd,CANkB;AAOzBN,MAAAA,KAAK,EAALA;AAPyB,KAAP;AAAA,GAAD,EAQf,CAACL,KAAD,EAAQK,KAAR,EAAeF,SAAf,CARe,CAAnB;AASAL,EAAAA,QAAQ,CAAC,UAACgB,KAAD,EAAQC,KAAR;AAAA,WAAkBV,KAAK,CAACW,MAAN,CAAaD,KAAb,CAAlB;AAAA,GAAD,CAAR;AACAnB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMqB,WAAW,GAAGd,SAAS,CAACe,OAA9B;;AAEA,QAAID,WAAJ,EAAiB;AACfjB,MAAAA,KAAK,CAACmB,OAAN,CAAc,UAAAT,IAAI;AAAA,eAAIJ,GAAG,CAACC,OAAJ,CAAYG,IAAI,CAACC,IAAjB,IAAyBN,KAAK,CAACe,UAAN,CAAiBV,IAAjB,EAAuBO,WAAvB,CAA7B;AAAA,OAAlB;AACD;;AAED,WAAO;AAAA,aAAMI,MAAM,CAACC,MAAP,CAAchB,GAAG,CAACC,OAAlB,EAA2BY,OAA3B,CAAmC,UAAAI,MAAM,EAAI;AACxD,YAAIN,WAAJ,EAAiB;AACfZ,UAAAA,KAAK,CAACmB,aAAN,CAAoBD,MAApB,EAA4BN,WAA5B;AACD;AACF,OAJY,CAAN;AAAA,KAAP;AAKD,GAZQ,EAYN,CAACX,GAAD,EAAMN,KAAN,EAAaK,KAAb,EAAoBJ,IAApB,EAA0BE,SAA1B,CAZM,CAAT;AAaA,SAAOG,GAAP;AACD;;AAED,SAASP,aAAT","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useRef, useState, useMemo, useEffect } from 'react';\nimport { AnimationMixer } from 'three';\nimport { useFrame } from '@react-three/fiber';\n\nfunction useAnimations(clips, root) {\n  const ref = useRef();\n  const actualRef = root ? root : ref;\n  const [mixer] = useState(() => new AnimationMixer(undefined));\n  const api = useMemo(() => ({\n    ref: actualRef,\n    clips,\n    actions: clips.reduce((prev, clip) => _extends({}, prev, {\n      [clip.name]: null\n    }), {}),\n    names: clips.map(clip => clip.name),\n    mixer\n  }), [clips, mixer, actualRef]);\n  useFrame((state, delta) => mixer.update(delta));\n  useEffect(() => {\n    const currentRoot = actualRef.current;\n\n    if (currentRoot) {\n      clips.forEach(clip => api.actions[clip.name] = mixer.clipAction(clip, currentRoot));\n    }\n\n    return () => Object.values(api.actions).forEach(action => {\n      if (currentRoot) {\n        mixer.uncacheAction(action, currentRoot);\n      }\n    });\n  }, [api, clips, mixer, root, actualRef]);\n  return api;\n}\n\nexport { useAnimations };\n"]},"metadata":{},"sourceType":"module"}