{"ast":null,"code":"import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from 'three';\n/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @class TDSLoader\n * @constructor\n */\n\nvar TDSLoader = function TDSLoader(manager) {\n  Loader.call(this, manager);\n  this.debug = false;\n  this.group = null;\n  this.position = 0;\n  this.materials = [];\n  this.meshes = [];\n};\n\nTDSLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: TDSLoader,\n\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  load: function load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n  parse: function parse(arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n\n    for (var i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n\n    return this.group;\n  },\n\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n  readFile: function readFile(arraybuffer, path) {\n    var data = new DataView(arraybuffer);\n    var chunk = this.readChunk(data);\n\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      var next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          var version = this.readDWord(data);\n          this.debugMessage('3DS file version: ' + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage('Unknown main chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n    }\n\n    this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n  },\n\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMeshData: function readMeshData(data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        var version = +this.readDWord(data);\n        this.debugMessage('Mesh Version: ' + version);\n      } else if (next === MASTER_SCALE) {\n        var scale = this.readFloat(data);\n        this.debugMessage('Master scale: ' + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage('Named Object');\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage('Material');\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n  },\n\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n  readNamedObject: function readNamedObject(data) {\n    var chunk = this.readChunk(data);\n    var name = this.readString(data, 64);\n    chunk.cur = this.position;\n    var next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        var mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n  },\n\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMaterialEntry: function readMaterialEntry(data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var material = new MeshPhongMaterial();\n\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage('   Name: ' + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage('   Wireframe');\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        var value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage('   Wireframe Thickness: ' + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage('   DoubleSided');\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage('   Additive Blending');\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage('   Diffuse Color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage('   Specular Color');\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage('   Ambient color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        var shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage('   Shininess : ' + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        var transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage('  Transparency : ' + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage('   ColorMap');\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage('   BumpMap');\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage('   OpacityMap');\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage('   SpecularMap');\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  },\n\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n  readMesh: function readMesh(data) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var geometry = new BufferGeometry();\n    var uvs = [];\n    var material = new MeshPhongMaterial();\n    var mesh = new Mesh(geometry, material);\n    mesh.name = 'mesh';\n\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        var points = this.readWord(data);\n        this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n        var vertices = [];\n\n        for (var i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        var texels = this.readWord(data);\n        this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n        var uvs = [];\n\n        for (var _i = 0; _i < texels; _i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage('   Tranformation Matrix (TODO)');\n        var values = [];\n\n        for (var _i2 = 0; _i2 < 12; _i2++) {\n          values[_i2] = this.readFloat(data);\n        }\n\n        var matrix = new Matrix4(); //X Line\n\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9]; //Y Line\n\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11]; //Z Line\n\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10]; //W Line\n\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        var inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  },\n\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n  readFaceArray: function readFaceArray(data, mesh) {\n    var chunk = this.readChunk(data);\n    var faces = this.readWord(data);\n    this.debugMessage('   Faces: ' + faces);\n    var index = [];\n\n    for (var i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data); // visibility\n    }\n\n    mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n    var materialIndex = 0;\n    var start = 0;\n\n    while (this.position < chunk.end) {\n      var subchunk = this.readChunk(data);\n\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage('      Material Group');\n        this.resetPosition(data);\n        var group = this.readMaterialGroup(data);\n        var count = group.index.length * 3; // assuming successive indices\n\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        var material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false) mesh.material = [];\n\n        if (material !== undefined) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\n      }\n\n      this.endChunk(subchunk);\n    }\n\n    if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\n\n    this.endChunk(chunk);\n  },\n\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n  readMap: function readMap(data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var texture = {};\n    var loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        var name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage('      File: ' + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage('      OffsetX: ' + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage('      OffsetY: ' + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage('      RepeatX: ' + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage('      RepeatY: ' + texture.repeat.y);\n      } else {\n        this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    return texture;\n  },\n\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n  readMaterialGroup: function readMaterialGroup(data) {\n    this.readChunk(data);\n    var name = this.readString(data, 64);\n    var numFaces = this.readWord(data);\n    this.debugMessage('         Name: ' + name);\n    this.debugMessage('         Faces: ' + numFaces);\n    var index = [];\n\n    for (var i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n\n    return {\n      name: name,\n      index: index\n    };\n  },\n\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n  readColor: function readColor(data) {\n    var chunk = this.readChunk(data);\n    var color = new Color();\n\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      var r = this.readByte(data);\n      var g = this.readByte(data);\n      var b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      var r = this.readFloat(data);\n      var g = this.readFloat(data);\n      var b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else {\n      this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return color;\n  },\n\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n  readChunk: function readChunk(data) {\n    var chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  },\n\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n  endChunk: function endChunk(chunk) {\n    this.position = chunk.end;\n  },\n\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n  nextChunk: function nextChunk(data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n\n    this.position = chunk.cur;\n\n    try {\n      var next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage('Unable to read chunk at ' + this.position);\n      return 0;\n    }\n  },\n\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n  resetPosition: function resetPosition() {\n    this.position -= 6;\n  },\n\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readByte: function readByte(data) {\n    var v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  },\n\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readFloat: function readFloat(data) {\n    try {\n      var v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n    }\n  },\n\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readInt: function readInt(data) {\n    var v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  },\n\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readShort: function readShort(data) {\n    var v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  },\n\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readDWord: function readDWord(data) {\n    var v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  },\n\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readWord: function readWord(data) {\n    var v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  },\n\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n  readString: function readString(data, maxLength) {\n    var s = '';\n\n    for (var i = 0; i < maxLength; i++) {\n      var c = this.readByte(data);\n\n      if (!c) {\n        break;\n      }\n\n      s += String.fromCharCode(c);\n    }\n\n    return s;\n  },\n\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readPercentage: function readPercentage(data) {\n    var chunk = this.readChunk(data);\n    var value;\n\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n\n      default:\n        this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return value;\n  },\n\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n  debugMessage: function debugMessage(message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n}); // var NULL_CHUNK = 0x0000;\n\nvar M3DMAGIC = 0x4d4d; // var SMAGIC = 0x2D2D;\n// var LMAGIC = 0x2D3D;\n\nvar MLIBMAGIC = 0x3daa; // var MATMAGIC = 0x3DFF;\n\nvar CMAGIC = 0xc23d;\nvar M3D_VERSION = 0x0002; // var M3D_KFVERSION = 0x0005;\n\nvar COLOR_F = 0x0010;\nvar COLOR_24 = 0x0011;\nvar LIN_COLOR_24 = 0x0012;\nvar LIN_COLOR_F = 0x0013;\nvar INT_PERCENTAGE = 0x0030;\nvar FLOAT_PERCENTAGE = 0x0031;\nvar MDATA = 0x3d3d;\nvar MESH_VERSION = 0x3d3e;\nvar MASTER_SCALE = 0x0100; // var LO_SHADOW_BIAS = 0x1400;\n// var HI_SHADOW_BIAS = 0x1410;\n// var SHADOW_MAP_SIZE = 0x1420;\n// var SHADOW_SAMPLES = 0x1430;\n// var SHADOW_RANGE = 0x1440;\n// var SHADOW_FILTER = 0x1450;\n// var RAY_BIAS = 0x1460;\n// var O_CONSTS = 0x1500;\n// var AMBIENT_LIGHT = 0x2100;\n// var BIT_MAP = 0x1100;\n// var SOLID_BGND = 0x1200;\n// var V_GRADIENT = 0x1300;\n// var USE_BIT_MAP = 0x1101;\n// var USE_SOLID_BGND = 0x1201;\n// var USE_V_GRADIENT = 0x1301;\n// var FOG = 0x2200;\n// var FOG_BGND = 0x2210;\n// var LAYER_FOG = 0x2302;\n// var DISTANCE_CUE = 0x2300;\n// var DCUE_BGND = 0x2310;\n// var USE_FOG = 0x2201;\n// var USE_LAYER_FOG = 0x2303;\n// var USE_DISTANCE_CUE = 0x2301;\n\nvar MAT_ENTRY = 0xafff;\nvar MAT_NAME = 0xa000;\nvar MAT_AMBIENT = 0xa010;\nvar MAT_DIFFUSE = 0xa020;\nvar MAT_SPECULAR = 0xa030;\nvar MAT_SHININESS = 0xa040; // var MAT_SHIN2PCT = 0xA041;\n\nvar MAT_TRANSPARENCY = 0xa050; // var MAT_XPFALL = 0xA052;\n// var MAT_USE_XPFALL = 0xA240;\n// var MAT_REFBLUR = 0xA053;\n// var MAT_SHADING = 0xA100;\n// var MAT_USE_REFBLUR = 0xA250;\n// var MAT_SELF_ILLUM = 0xA084;\n\nvar MAT_TWO_SIDE = 0xa081; // var MAT_DECAL = 0xA082;\n\nvar MAT_ADDITIVE = 0xa083;\nvar MAT_WIRE = 0xa085; // var MAT_FACEMAP = 0xA088;\n// var MAT_TRANSFALLOFF_IN = 0xA08A;\n// var MAT_PHONGSOFT = 0xA08C;\n// var MAT_WIREABS = 0xA08E;\n\nvar MAT_WIRE_SIZE = 0xa087;\nvar MAT_TEXMAP = 0xa200; // var MAT_SXP_TEXT_DATA = 0xA320;\n// var MAT_TEXMASK = 0xA33E;\n// var MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// var MAT_TEX2MAP = 0xA33A;\n// var MAT_SXP_TEXT2_DATA = 0xA321;\n// var MAT_TEX2MASK = 0xA340;\n// var MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nvar MAT_OPACMAP = 0xa210; // var MAT_SXP_OPAC_DATA = 0xA322;\n// var MAT_OPACMASK = 0xA342;\n// var MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nvar MAT_BUMPMAP = 0xa230; // var MAT_SXP_BUMP_DATA = 0xA324;\n// var MAT_BUMPMASK = 0xA344;\n// var MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nvar MAT_SPECMAP = 0xa204; // var MAT_SXP_SPEC_DATA = 0xA325;\n// var MAT_SPECMASK = 0xA348;\n// var MAT_SXP_SPECMASK_DATA = 0xA332;\n// var MAT_SHINMAP = 0xA33C;\n// var MAT_SXP_SHIN_DATA = 0xA326;\n// var MAT_SHINMASK = 0xA346;\n// var MAT_SXP_SHINMASK_DATA = 0xA334;\n// var MAT_SELFIMAP = 0xA33D;\n// var MAT_SXP_SELFI_DATA = 0xA328;\n// var MAT_SELFIMASK = 0xA34A;\n// var MAT_SXP_SELFIMASK_DATA = 0xA336;\n// var MAT_REFLMAP = 0xA220;\n// var MAT_REFLMASK = 0xA34C;\n// var MAT_SXP_REFLMASK_DATA = 0xA338;\n// var MAT_ACUBIC = 0xA310;\n\nvar MAT_MAPNAME = 0xa300; // var MAT_MAP_TILING = 0xA351;\n// var MAT_MAP_TEXBLUR = 0xA353;\n\nvar MAT_MAP_USCALE = 0xa354;\nvar MAT_MAP_VSCALE = 0xa356;\nvar MAT_MAP_UOFFSET = 0xa358;\nvar MAT_MAP_VOFFSET = 0xa35a; // var MAT_MAP_ANG = 0xA35C;\n// var MAT_MAP_COL1 = 0xA360;\n// var MAT_MAP_COL2 = 0xA362;\n// var MAT_MAP_RCOL = 0xA364;\n// var MAT_MAP_GCOL = 0xA366;\n// var MAT_MAP_BCOL = 0xA368;\n\nvar NAMED_OBJECT = 0x4000; // var N_DIRECT_LIGHT = 0x4600;\n// var DL_OFF = 0x4620;\n// var DL_OUTER_RANGE = 0x465A;\n// var DL_INNER_RANGE = 0x4659;\n// var DL_MULTIPLIER = 0x465B;\n// var DL_EXCLUDE = 0x4654;\n// var DL_ATTENUATE = 0x4625;\n// var DL_SPOTLIGHT = 0x4610;\n// var DL_SPOT_ROLL = 0x4656;\n// var DL_SHADOWED = 0x4630;\n// var DL_LOCAL_SHADOW2 = 0x4641;\n// var DL_SEE_CONE = 0x4650;\n// var DL_SPOT_RECTANGULAR = 0x4651;\n// var DL_SPOT_ASPECT = 0x4657;\n// var DL_SPOT_PROJECTOR = 0x4653;\n// var DL_SPOT_OVERSHOOT = 0x4652;\n// var DL_RAY_BIAS = 0x4658;\n// var DL_RAYSHAD = 0x4627;\n// var N_CAMERA = 0x4700;\n// var CAM_SEE_CONE = 0x4710;\n// var CAM_RANGES = 0x4720;\n// var OBJ_HIDDEN = 0x4010;\n// var OBJ_VIS_LOFTER = 0x4011;\n// var OBJ_DOESNT_CAST = 0x4012;\n// var OBJ_DONT_RECVSHADOW = 0x4017;\n// var OBJ_MATTE = 0x4013;\n// var OBJ_FAST = 0x4014;\n// var OBJ_PROCEDURAL = 0x4015;\n// var OBJ_FROZEN = 0x4016;\n\nvar N_TRI_OBJECT = 0x4100;\nvar POINT_ARRAY = 0x4110; // var POINT_FLAG_ARRAY = 0x4111;\n\nvar FACE_ARRAY = 0x4120;\nvar MSH_MAT_GROUP = 0x4130; // var SMOOTH_GROUP = 0x4150;\n// var MSH_BOXMAP = 0x4190;\n\nvar TEX_VERTS = 0x4140;\nvar MESH_MATRIX = 0x4160; // var MESH_COLOR = 0x4165;\n\nexport { TDSLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/TDSLoader.js"],"names":["Loader","LoaderUtils","FileLoader","Group","MeshPhongMaterial","DoubleSide","AdditiveBlending","BufferGeometry","Mesh","Float32BufferAttribute","Matrix4","TextureLoader","Color","TDSLoader","manager","call","debug","group","position","materials","meshes","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","data","parse","e","console","error","itemError","arraybuffer","readFile","i","length","add","DataView","chunk","readChunk","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","nextChunk","M3D_VERSION","version","readDWord","debugMessage","MDATA","resetPosition","readMeshData","toString","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","cur","N_TRI_OBJECT","mesh","readMesh","push","endChunk","material","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","value","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","MAT_ADDITIVE","blending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readPercentage","MAT_TRANSPARENCY","transparency","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","uvs","POINT_ARRAY","points","readWord","vertices","setAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","MESH_MATRIX","values","matrix","elements","transpose","inverse","copy","invert","applyMatrix4","decompose","quaternion","computeVertexNormals","faces","index","setIndex","materialIndex","start","end","subchunk","MSH_MAT_GROUP","readMaterialGroup","count","addGroup","Array","isArray","undefined","texture","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","size","v","getUint8","getFloat32","byteLength","readInt","getInt32","readShort","getInt16","getUint32","getUint16","maxLength","s","c","String","fromCharCode","INT_PERCENTAGE","FLOAT_PERCENTAGE","message","log"],"mappings":"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","sourcesContent":["import { Loader, LoaderUtils, FileLoader, Group, MeshPhongMaterial, DoubleSide, AdditiveBlending, BufferGeometry, Mesh, Float32BufferAttribute, Matrix4, TextureLoader, Color } from 'three';\n\n/**\n * Autodesk 3DS three.js file loader, based on lib3ds.\n *\n * Loads geometry with uv and materials basic properties with texture support.\n *\n * @class TDSLoader\n * @constructor\n */\n\nvar TDSLoader = function (manager) {\n  Loader.call(this, manager);\n  this.debug = false;\n  this.group = null;\n  this.position = 0;\n  this.materials = [];\n  this.meshes = [];\n};\n\nTDSLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: TDSLoader,\n\n  /**\n   * Load 3ds file from url.\n   *\n   * @method load\n   * @param {[type]} url URL for the file.\n   * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\n   * @param {Function} onProgress onProgress callback.\n   * @param {Function} onError onError callback.\n   */\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n    var loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (data) {\n      try {\n        onLoad(scope.parse(data, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n\n  /**\n   * Parse arraybuffer data and load 3ds file.\n   *\n   * @method parse\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   * @return {Group} Group loaded from 3ds file.\n   */\n  parse: function (arraybuffer, path) {\n    this.group = new Group();\n    this.position = 0;\n    this.materials = [];\n    this.meshes = [];\n    this.readFile(arraybuffer, path);\n\n    for (let i = 0; i < this.meshes.length; i++) {\n      this.group.add(this.meshes[i]);\n    }\n\n    return this.group;\n  },\n\n  /**\n   * Decode file content to read 3ds data.\n   *\n   * @method readFile\n   * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\n   * @param {String} path Path for external resources.\n   */\n  readFile: function (arraybuffer, path) {\n    var data = new DataView(arraybuffer);\n    var chunk = this.readChunk(data);\n\n    if (chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC) {\n      var next = this.nextChunk(data, chunk);\n\n      while (next !== 0) {\n        if (next === M3D_VERSION) {\n          var version = this.readDWord(data);\n          this.debugMessage('3DS file version: ' + version);\n        } else if (next === MDATA) {\n          this.resetPosition(data);\n          this.readMeshData(data, path);\n        } else {\n          this.debugMessage('Unknown main chunk: ' + next.toString(16));\n        }\n\n        next = this.nextChunk(data, chunk);\n      }\n    }\n\n    this.debugMessage('Parsed ' + this.meshes.length + ' meshes');\n  },\n\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMeshData\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMeshData: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === MESH_VERSION) {\n        var version = +this.readDWord(data);\n        this.debugMessage('Mesh Version: ' + version);\n      } else if (next === MASTER_SCALE) {\n        var scale = this.readFloat(data);\n        this.debugMessage('Master scale: ' + scale);\n        this.group.scale.set(scale, scale, scale);\n      } else if (next === NAMED_OBJECT) {\n        this.debugMessage('Named Object');\n        this.resetPosition(data);\n        this.readNamedObject(data);\n      } else if (next === MAT_ENTRY) {\n        this.debugMessage('Material');\n        this.resetPosition(data);\n        this.readMaterialEntry(data, path);\n      } else {\n        this.debugMessage('Unknown MDATA chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n  },\n\n  /**\n   * Read named object chunk.\n   *\n   * @method readNamedObject\n   * @param {Dataview} data Dataview in use.\n   */\n  readNamedObject: function (data) {\n    var chunk = this.readChunk(data);\n    var name = this.readString(data, 64);\n    chunk.cur = this.position;\n    var next = this.nextChunk(data, chunk);\n\n    while (next !== 0) {\n      if (next === N_TRI_OBJECT) {\n        this.resetPosition(data);\n        var mesh = this.readMesh(data);\n        mesh.name = name;\n        this.meshes.push(mesh);\n      } else {\n        this.debugMessage('Unknown named object chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n  },\n\n  /**\n   * Read material data chunk and add it to the material list.\n   *\n   * @method readMaterialEntry\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   */\n  readMaterialEntry: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var material = new MeshPhongMaterial();\n\n    while (next !== 0) {\n      if (next === MAT_NAME) {\n        material.name = this.readString(data, 64);\n        this.debugMessage('   Name: ' + material.name);\n      } else if (next === MAT_WIRE) {\n        this.debugMessage('   Wireframe');\n        material.wireframe = true;\n      } else if (next === MAT_WIRE_SIZE) {\n        var value = this.readByte(data);\n        material.wireframeLinewidth = value;\n        this.debugMessage('   Wireframe Thickness: ' + value);\n      } else if (next === MAT_TWO_SIDE) {\n        material.side = DoubleSide;\n        this.debugMessage('   DoubleSided');\n      } else if (next === MAT_ADDITIVE) {\n        this.debugMessage('   Additive Blending');\n        material.blending = AdditiveBlending;\n      } else if (next === MAT_DIFFUSE) {\n        this.debugMessage('   Diffuse Color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SPECULAR) {\n        this.debugMessage('   Specular Color');\n        material.specular = this.readColor(data);\n      } else if (next === MAT_AMBIENT) {\n        this.debugMessage('   Ambient color');\n        material.color = this.readColor(data);\n      } else if (next === MAT_SHININESS) {\n        var shininess = this.readPercentage(data);\n        material.shininess = shininess * 100;\n        this.debugMessage('   Shininess : ' + shininess);\n      } else if (next === MAT_TRANSPARENCY) {\n        var transparency = this.readPercentage(data);\n        material.opacity = 1 - transparency;\n        this.debugMessage('  Transparency : ' + transparency);\n        material.transparent = material.opacity < 1 ? true : false;\n      } else if (next === MAT_TEXMAP) {\n        this.debugMessage('   ColorMap');\n        this.resetPosition(data);\n        material.map = this.readMap(data, path);\n      } else if (next === MAT_BUMPMAP) {\n        this.debugMessage('   BumpMap');\n        this.resetPosition(data);\n        material.bumpMap = this.readMap(data, path);\n      } else if (next === MAT_OPACMAP) {\n        this.debugMessage('   OpacityMap');\n        this.resetPosition(data);\n        material.alphaMap = this.readMap(data, path);\n      } else if (next === MAT_SPECMAP) {\n        this.debugMessage('   SpecularMap');\n        this.resetPosition(data);\n        material.specularMap = this.readMap(data, path);\n      } else {\n        this.debugMessage('   Unknown material chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    this.materials[material.name] = material;\n  },\n\n  /**\n   * Read mesh data chunk.\n   *\n   * @method readMesh\n   * @param {Dataview} data Dataview in use.\n   * @return {Mesh} The parsed mesh.\n   */\n  readMesh: function (data) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var geometry = new BufferGeometry();\n    var uvs = [];\n    var material = new MeshPhongMaterial();\n    var mesh = new Mesh(geometry, material);\n    mesh.name = 'mesh';\n\n    while (next !== 0) {\n      if (next === POINT_ARRAY) {\n        var points = this.readWord(data);\n        this.debugMessage('   Vertex: ' + points); //BufferGeometry\n\n        var vertices = [];\n\n        for (let i = 0; i < points; i++) {\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n          vertices.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n      } else if (next === FACE_ARRAY) {\n        this.resetPosition(data);\n        this.readFaceArray(data, mesh);\n      } else if (next === TEX_VERTS) {\n        var texels = this.readWord(data);\n        this.debugMessage('   UV: ' + texels); //BufferGeometry\n\n        var uvs = [];\n\n        for (let i = 0; i < texels; i++) {\n          uvs.push(this.readFloat(data));\n          uvs.push(this.readFloat(data));\n        }\n\n        geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n      } else if (next === MESH_MATRIX) {\n        this.debugMessage('   Tranformation Matrix (TODO)');\n        var values = [];\n\n        for (let i = 0; i < 12; i++) {\n          values[i] = this.readFloat(data);\n        }\n\n        var matrix = new Matrix4(); //X Line\n\n        matrix.elements[0] = values[0];\n        matrix.elements[1] = values[6];\n        matrix.elements[2] = values[3];\n        matrix.elements[3] = values[9]; //Y Line\n\n        matrix.elements[4] = values[2];\n        matrix.elements[5] = values[8];\n        matrix.elements[6] = values[5];\n        matrix.elements[7] = values[11]; //Z Line\n\n        matrix.elements[8] = values[1];\n        matrix.elements[9] = values[7];\n        matrix.elements[10] = values[4];\n        matrix.elements[11] = values[10]; //W Line\n\n        matrix.elements[12] = 0;\n        matrix.elements[13] = 0;\n        matrix.elements[14] = 0;\n        matrix.elements[15] = 1;\n        matrix.transpose();\n        var inverse = new Matrix4();\n        inverse.copy(matrix).invert();\n        geometry.applyMatrix4(inverse);\n        matrix.decompose(mesh.position, mesh.quaternion, mesh.scale);\n      } else {\n        this.debugMessage('   Unknown mesh chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    geometry.computeVertexNormals();\n    return mesh;\n  },\n\n  /**\n   * Read face array data chunk.\n   *\n   * @method readFaceArray\n   * @param {Dataview} data Dataview in use.\n   * @param {Mesh} mesh Mesh to be filled with the data read.\n   */\n  readFaceArray: function (data, mesh) {\n    var chunk = this.readChunk(data);\n    var faces = this.readWord(data);\n    this.debugMessage('   Faces: ' + faces);\n    var index = [];\n\n    for (let i = 0; i < faces; ++i) {\n      index.push(this.readWord(data), this.readWord(data), this.readWord(data));\n      this.readWord(data); // visibility\n    }\n\n    mesh.geometry.setIndex(index); //The rest of the FACE_ARRAY chunk is subchunks\n\n    var materialIndex = 0;\n    var start = 0;\n\n    while (this.position < chunk.end) {\n      var subchunk = this.readChunk(data);\n\n      if (subchunk.id === MSH_MAT_GROUP) {\n        this.debugMessage('      Material Group');\n        this.resetPosition(data);\n        var group = this.readMaterialGroup(data);\n        var count = group.index.length * 3; // assuming successive indices\n\n        mesh.geometry.addGroup(start, count, materialIndex);\n        start += count;\n        materialIndex++;\n        var material = this.materials[group.name];\n        if (Array.isArray(mesh.material) === false) mesh.material = [];\n\n        if (material !== undefined) {\n          mesh.material.push(material);\n        }\n      } else {\n        this.debugMessage('      Unknown face array chunk: ' + subchunk.toString(16));\n      }\n\n      this.endChunk(subchunk);\n    }\n\n    if (mesh.material.length === 1) mesh.material = mesh.material[0]; // for backwards compatibility\n\n    this.endChunk(chunk);\n  },\n\n  /**\n   * Read texture map data chunk.\n   *\n   * @method readMap\n   * @param {Dataview} data Dataview in use.\n   * @param {String} path Path for external resources.\n   * @return {Texture} Texture read from this data chunk.\n   */\n  readMap: function (data, path) {\n    var chunk = this.readChunk(data);\n    var next = this.nextChunk(data, chunk);\n    var texture = {};\n    var loader = new TextureLoader(this.manager);\n    loader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n\n    while (next !== 0) {\n      if (next === MAT_MAPNAME) {\n        var name = this.readString(data, 128);\n        texture = loader.load(name);\n        this.debugMessage('      File: ' + path + name);\n      } else if (next === MAT_MAP_UOFFSET) {\n        texture.offset.x = this.readFloat(data);\n        this.debugMessage('      OffsetX: ' + texture.offset.x);\n      } else if (next === MAT_MAP_VOFFSET) {\n        texture.offset.y = this.readFloat(data);\n        this.debugMessage('      OffsetY: ' + texture.offset.y);\n      } else if (next === MAT_MAP_USCALE) {\n        texture.repeat.x = this.readFloat(data);\n        this.debugMessage('      RepeatX: ' + texture.repeat.x);\n      } else if (next === MAT_MAP_VSCALE) {\n        texture.repeat.y = this.readFloat(data);\n        this.debugMessage('      RepeatY: ' + texture.repeat.y);\n      } else {\n        this.debugMessage('      Unknown map chunk: ' + next.toString(16));\n      }\n\n      next = this.nextChunk(data, chunk);\n    }\n\n    this.endChunk(chunk);\n    return texture;\n  },\n\n  /**\n   * Read material group data chunk.\n   *\n   * @method readMaterialGroup\n   * @param {Dataview} data Dataview in use.\n   * @return {Object} Object with name and index of the object.\n   */\n  readMaterialGroup: function (data) {\n    this.readChunk(data);\n    var name = this.readString(data, 64);\n    var numFaces = this.readWord(data);\n    this.debugMessage('         Name: ' + name);\n    this.debugMessage('         Faces: ' + numFaces);\n    var index = [];\n\n    for (let i = 0; i < numFaces; ++i) {\n      index.push(this.readWord(data));\n    }\n\n    return {\n      name: name,\n      index: index\n    };\n  },\n\n  /**\n   * Read a color value.\n   *\n   * @method readColor\n   * @param {DataView} data Dataview.\n   * @return {Color} Color value read..\n   */\n  readColor: function (data) {\n    var chunk = this.readChunk(data);\n    var color = new Color();\n\n    if (chunk.id === COLOR_24 || chunk.id === LIN_COLOR_24) {\n      var r = this.readByte(data);\n      var g = this.readByte(data);\n      var b = this.readByte(data);\n      color.setRGB(r / 255, g / 255, b / 255);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else if (chunk.id === COLOR_F || chunk.id === LIN_COLOR_F) {\n      var r = this.readFloat(data);\n      var g = this.readFloat(data);\n      var b = this.readFloat(data);\n      color.setRGB(r, g, b);\n      this.debugMessage('      Color: ' + color.r + ', ' + color.g + ', ' + color.b);\n    } else {\n      this.debugMessage('      Unknown color chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return color;\n  },\n\n  /**\n   * Read next chunk of data.\n   *\n   * @method readChunk\n   * @param {DataView} data Dataview.\n   * @return {Object} Chunk of data read.\n   */\n  readChunk: function (data) {\n    var chunk = {};\n    chunk.cur = this.position;\n    chunk.id = this.readWord(data);\n    chunk.size = this.readDWord(data);\n    chunk.end = chunk.cur + chunk.size;\n    chunk.cur += 6;\n    return chunk;\n  },\n\n  /**\n   * Set position to the end of the current chunk of data.\n   *\n   * @method endChunk\n   * @param {Object} chunk Data chunk.\n   */\n  endChunk: function (chunk) {\n    this.position = chunk.end;\n  },\n\n  /**\n   * Move to the next data chunk.\n   *\n   * @method nextChunk\n   * @param {DataView} data Dataview.\n   * @param {Object} chunk Data chunk.\n   */\n  nextChunk: function (data, chunk) {\n    if (chunk.cur >= chunk.end) {\n      return 0;\n    }\n\n    this.position = chunk.cur;\n\n    try {\n      var next = this.readChunk(data);\n      chunk.cur += next.size;\n      return next.id;\n    } catch (e) {\n      this.debugMessage('Unable to read chunk at ' + this.position);\n      return 0;\n    }\n  },\n\n  /**\n   * Reset dataview position.\n   *\n   * @method resetPosition\n   */\n  resetPosition: function () {\n    this.position -= 6;\n  },\n\n  /**\n   * Read byte value.\n   *\n   * @method readByte\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readByte: function (data) {\n    var v = data.getUint8(this.position, true);\n    this.position += 1;\n    return v;\n  },\n\n  /**\n   * Read 32 bit float value.\n   *\n   * @method readFloat\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readFloat: function (data) {\n    try {\n      var v = data.getFloat32(this.position, true);\n      this.position += 4;\n      return v;\n    } catch (e) {\n      this.debugMessage(e + ' ' + this.position + ' ' + data.byteLength);\n    }\n  },\n\n  /**\n   * Read 32 bit signed integer value.\n   *\n   * @method readInt\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readInt: function (data) {\n    var v = data.getInt32(this.position, true);\n    this.position += 4;\n    return v;\n  },\n\n  /**\n   * Read 16 bit signed integer value.\n   *\n   * @method readShort\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readShort: function (data) {\n    var v = data.getInt16(this.position, true);\n    this.position += 2;\n    return v;\n  },\n\n  /**\n   * Read 64 bit unsigned integer value.\n   *\n   * @method readDWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readDWord: function (data) {\n    var v = data.getUint32(this.position, true);\n    this.position += 4;\n    return v;\n  },\n\n  /**\n   * Read 32 bit unsigned integer value.\n   *\n   * @method readWord\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readWord: function (data) {\n    var v = data.getUint16(this.position, true);\n    this.position += 2;\n    return v;\n  },\n\n  /**\n   * Read string value.\n   *\n   * @method readString\n   * @param {DataView} data Dataview to read data from.\n   * @param {Number} maxLength Max size of the string to be read.\n   * @return {String} Data read from the dataview.\n   */\n  readString: function (data, maxLength) {\n    var s = '';\n\n    for (let i = 0; i < maxLength; i++) {\n      var c = this.readByte(data);\n\n      if (!c) {\n        break;\n      }\n\n      s += String.fromCharCode(c);\n    }\n\n    return s;\n  },\n\n  /**\n   * Read percentage value.\n   *\n   * @method readPercentage\n   * @param {DataView} data Dataview to read data from.\n   * @return {Number} Data read from the dataview.\n   */\n  readPercentage: function (data) {\n    var chunk = this.readChunk(data);\n    var value;\n\n    switch (chunk.id) {\n      case INT_PERCENTAGE:\n        value = this.readShort(data) / 100;\n        break;\n\n      case FLOAT_PERCENTAGE:\n        value = this.readFloat(data);\n        break;\n\n      default:\n        this.debugMessage('      Unknown percentage chunk: ' + chunk.toString(16));\n    }\n\n    this.endChunk(chunk);\n    return value;\n  },\n\n  /**\n   * Print debug message to the console.\n   *\n   * Is controlled by a flag to show or hide debug messages.\n   *\n   * @method debugMessage\n   * @param {Object} message Debug message to print to the console.\n   */\n  debugMessage: function (message) {\n    if (this.debug) {\n      console.log(message);\n    }\n  }\n}); // var NULL_CHUNK = 0x0000;\n\nvar M3DMAGIC = 0x4d4d; // var SMAGIC = 0x2D2D;\n// var LMAGIC = 0x2D3D;\n\nvar MLIBMAGIC = 0x3daa; // var MATMAGIC = 0x3DFF;\n\nvar CMAGIC = 0xc23d;\nvar M3D_VERSION = 0x0002; // var M3D_KFVERSION = 0x0005;\n\nvar COLOR_F = 0x0010;\nvar COLOR_24 = 0x0011;\nvar LIN_COLOR_24 = 0x0012;\nvar LIN_COLOR_F = 0x0013;\nvar INT_PERCENTAGE = 0x0030;\nvar FLOAT_PERCENTAGE = 0x0031;\nvar MDATA = 0x3d3d;\nvar MESH_VERSION = 0x3d3e;\nvar MASTER_SCALE = 0x0100; // var LO_SHADOW_BIAS = 0x1400;\n// var HI_SHADOW_BIAS = 0x1410;\n// var SHADOW_MAP_SIZE = 0x1420;\n// var SHADOW_SAMPLES = 0x1430;\n// var SHADOW_RANGE = 0x1440;\n// var SHADOW_FILTER = 0x1450;\n// var RAY_BIAS = 0x1460;\n// var O_CONSTS = 0x1500;\n// var AMBIENT_LIGHT = 0x2100;\n// var BIT_MAP = 0x1100;\n// var SOLID_BGND = 0x1200;\n// var V_GRADIENT = 0x1300;\n// var USE_BIT_MAP = 0x1101;\n// var USE_SOLID_BGND = 0x1201;\n// var USE_V_GRADIENT = 0x1301;\n// var FOG = 0x2200;\n// var FOG_BGND = 0x2210;\n// var LAYER_FOG = 0x2302;\n// var DISTANCE_CUE = 0x2300;\n// var DCUE_BGND = 0x2310;\n// var USE_FOG = 0x2201;\n// var USE_LAYER_FOG = 0x2303;\n// var USE_DISTANCE_CUE = 0x2301;\n\nvar MAT_ENTRY = 0xafff;\nvar MAT_NAME = 0xa000;\nvar MAT_AMBIENT = 0xa010;\nvar MAT_DIFFUSE = 0xa020;\nvar MAT_SPECULAR = 0xa030;\nvar MAT_SHININESS = 0xa040; // var MAT_SHIN2PCT = 0xA041;\n\nvar MAT_TRANSPARENCY = 0xa050; // var MAT_XPFALL = 0xA052;\n// var MAT_USE_XPFALL = 0xA240;\n// var MAT_REFBLUR = 0xA053;\n// var MAT_SHADING = 0xA100;\n// var MAT_USE_REFBLUR = 0xA250;\n// var MAT_SELF_ILLUM = 0xA084;\n\nvar MAT_TWO_SIDE = 0xa081; // var MAT_DECAL = 0xA082;\n\nvar MAT_ADDITIVE = 0xa083;\nvar MAT_WIRE = 0xa085; // var MAT_FACEMAP = 0xA088;\n// var MAT_TRANSFALLOFF_IN = 0xA08A;\n// var MAT_PHONGSOFT = 0xA08C;\n// var MAT_WIREABS = 0xA08E;\n\nvar MAT_WIRE_SIZE = 0xa087;\nvar MAT_TEXMAP = 0xa200; // var MAT_SXP_TEXT_DATA = 0xA320;\n// var MAT_TEXMASK = 0xA33E;\n// var MAT_SXP_TEXTMASK_DATA = 0xA32A;\n// var MAT_TEX2MAP = 0xA33A;\n// var MAT_SXP_TEXT2_DATA = 0xA321;\n// var MAT_TEX2MASK = 0xA340;\n// var MAT_SXP_TEXT2MASK_DATA = 0xA32C;\n\nvar MAT_OPACMAP = 0xa210; // var MAT_SXP_OPAC_DATA = 0xA322;\n// var MAT_OPACMASK = 0xA342;\n// var MAT_SXP_OPACMASK_DATA = 0xA32E;\n\nvar MAT_BUMPMAP = 0xa230; // var MAT_SXP_BUMP_DATA = 0xA324;\n// var MAT_BUMPMASK = 0xA344;\n// var MAT_SXP_BUMPMASK_DATA = 0xA330;\n\nvar MAT_SPECMAP = 0xa204; // var MAT_SXP_SPEC_DATA = 0xA325;\n// var MAT_SPECMASK = 0xA348;\n// var MAT_SXP_SPECMASK_DATA = 0xA332;\n// var MAT_SHINMAP = 0xA33C;\n// var MAT_SXP_SHIN_DATA = 0xA326;\n// var MAT_SHINMASK = 0xA346;\n// var MAT_SXP_SHINMASK_DATA = 0xA334;\n// var MAT_SELFIMAP = 0xA33D;\n// var MAT_SXP_SELFI_DATA = 0xA328;\n// var MAT_SELFIMASK = 0xA34A;\n// var MAT_SXP_SELFIMASK_DATA = 0xA336;\n// var MAT_REFLMAP = 0xA220;\n// var MAT_REFLMASK = 0xA34C;\n// var MAT_SXP_REFLMASK_DATA = 0xA338;\n// var MAT_ACUBIC = 0xA310;\n\nvar MAT_MAPNAME = 0xa300; // var MAT_MAP_TILING = 0xA351;\n// var MAT_MAP_TEXBLUR = 0xA353;\n\nvar MAT_MAP_USCALE = 0xa354;\nvar MAT_MAP_VSCALE = 0xa356;\nvar MAT_MAP_UOFFSET = 0xa358;\nvar MAT_MAP_VOFFSET = 0xa35a; // var MAT_MAP_ANG = 0xA35C;\n// var MAT_MAP_COL1 = 0xA360;\n// var MAT_MAP_COL2 = 0xA362;\n// var MAT_MAP_RCOL = 0xA364;\n// var MAT_MAP_GCOL = 0xA366;\n// var MAT_MAP_BCOL = 0xA368;\n\nvar NAMED_OBJECT = 0x4000; // var N_DIRECT_LIGHT = 0x4600;\n// var DL_OFF = 0x4620;\n// var DL_OUTER_RANGE = 0x465A;\n// var DL_INNER_RANGE = 0x4659;\n// var DL_MULTIPLIER = 0x465B;\n// var DL_EXCLUDE = 0x4654;\n// var DL_ATTENUATE = 0x4625;\n// var DL_SPOTLIGHT = 0x4610;\n// var DL_SPOT_ROLL = 0x4656;\n// var DL_SHADOWED = 0x4630;\n// var DL_LOCAL_SHADOW2 = 0x4641;\n// var DL_SEE_CONE = 0x4650;\n// var DL_SPOT_RECTANGULAR = 0x4651;\n// var DL_SPOT_ASPECT = 0x4657;\n// var DL_SPOT_PROJECTOR = 0x4653;\n// var DL_SPOT_OVERSHOOT = 0x4652;\n// var DL_RAY_BIAS = 0x4658;\n// var DL_RAYSHAD = 0x4627;\n// var N_CAMERA = 0x4700;\n// var CAM_SEE_CONE = 0x4710;\n// var CAM_RANGES = 0x4720;\n// var OBJ_HIDDEN = 0x4010;\n// var OBJ_VIS_LOFTER = 0x4011;\n// var OBJ_DOESNT_CAST = 0x4012;\n// var OBJ_DONT_RECVSHADOW = 0x4017;\n// var OBJ_MATTE = 0x4013;\n// var OBJ_FAST = 0x4014;\n// var OBJ_PROCEDURAL = 0x4015;\n// var OBJ_FROZEN = 0x4016;\n\nvar N_TRI_OBJECT = 0x4100;\nvar POINT_ARRAY = 0x4110; // var POINT_FLAG_ARRAY = 0x4111;\n\nvar FACE_ARRAY = 0x4120;\nvar MSH_MAT_GROUP = 0x4130; // var SMOOTH_GROUP = 0x4150;\n// var MSH_BOXMAP = 0x4190;\n\nvar TEX_VERTS = 0x4140;\nvar MESH_MATRIX = 0x4160; // var MESH_COLOR = 0x4165;\n\nexport { TDSLoader };\n"]},"metadata":{},"sourceType":"module"}