{"ast":null,"code":"import { Color } from 'three';\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nvar LuminosityHighPassShader = {\n  shaderID: 'luminosityHighPass',\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    luminosityThreshold: {\n      value: 1.0\n    },\n    smoothWidth: {\n      value: 1.0\n    },\n    defaultColor: {\n      value: new Color(0x000000)\n    },\n    defaultOpacity: {\n      value: 0.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform vec3 defaultColor;', 'uniform float defaultOpacity;', 'uniform float luminosityThreshold;', 'uniform float smoothWidth;', 'varying vec2 vUv;', 'void main() {', '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tvec3 luma = vec3( 0.299, 0.587, 0.114 );', '\tfloat v = dot( texel.xyz, luma );', '\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );', '\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );', '\tgl_FragColor = mix( outputColor, texel, alpha );', '}'].join('\\n')\n};\nexport { LuminosityHighPassShader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/shaders/LuminosityHighPassShader.js"],"names":["Color","LuminosityHighPassShader","shaderID","uniforms","tDiffuse","value","luminosityThreshold","smoothWidth","defaultColor","defaultOpacity","vertexShader","join","fragmentShader"],"mappings":"AAAA,SAASA,KAAT,QAAsB,OAAtB;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,wBAAwB,GAAG;AAC7BC,EAAAA,QAAQ,EAAE,oBADmB;AAE7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,mBAAmB,EAAE;AACnBD,MAAAA,KAAK,EAAE;AADY,KAJb;AAORE,IAAAA,WAAW,EAAE;AACXF,MAAAA,KAAK,EAAE;AADI,KAPL;AAURG,IAAAA,YAAY,EAAE;AACZH,MAAAA,KAAK,EAAE,IAAIL,KAAJ,CAAU,QAAV;AADK,KAVN;AAaRS,IAAAA,cAAc,EAAE;AACdJ,MAAAA,KAAK,EAAE;AADO;AAbR,GAFmB;AAmB7BK,EAAAA,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CAnBe;AAoB7BC,EAAAA,cAAc,EAAE,CAAC,6BAAD,EAAgC,4BAAhC,EAA8D,+BAA9D,EAA+F,oCAA/F,EAAqI,4BAArI,EAAmK,mBAAnK,EAAwL,eAAxL,EAAyM,2CAAzM,EAAsP,2CAAtP,EAAmS,oCAAnS,EAAyU,+DAAzU,EAA0Y,yFAA1Y,EAAqe,mDAAre,EAA0hB,GAA1hB,EAA+hBD,IAA/hB,CAAoiB,IAApiB;AApBa,CAA/B;AAuBA,SAASV,wBAAT","sourcesContent":["import { Color } from 'three';\n\n/**\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nvar LuminosityHighPassShader = {\n  shaderID: 'luminosityHighPass',\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    luminosityThreshold: {\n      value: 1.0\n    },\n    smoothWidth: {\n      value: 1.0\n    },\n    defaultColor: {\n      value: new Color(0x000000)\n    },\n    defaultOpacity: {\n      value: 0.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform vec3 defaultColor;', 'uniform float defaultOpacity;', 'uniform float luminosityThreshold;', 'uniform float smoothWidth;', 'varying vec2 vUv;', 'void main() {', '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tvec3 luma = vec3( 0.299, 0.587, 0.114 );', '\tfloat v = dot( texel.xyz, luma );', '\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );', '\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );', '\tgl_FragColor = mix( outputColor, texel, alpha );', '}'].join('\\n')\n};\n\nexport { LuminosityHighPassShader };\n"]},"metadata":{},"sourceType":"module"}