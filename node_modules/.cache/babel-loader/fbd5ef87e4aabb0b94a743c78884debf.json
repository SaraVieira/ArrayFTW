{"ast":null,"code":"import { CompressedTextureLoader } from 'three';\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nvar KTXLoader = function KTXLoader(manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nKTXLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: KTXLoader,\n  parse: function parse(buffer, loadMipmaps) {\n    var ktx = new KhronosTextureContainer(buffer, 1);\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels\n    };\n  }\n});\n\nvar KhronosTextureContainer = function () {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  function KhronosTextureContainer(arrayBuffer, facesExpected\n  /*, threeDExpected, textureArrayExpected */\n  ) {\n    this.arrayBuffer = arrayBuffer; // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\n    var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n\n    if (identifier[0] !== 0xab || identifier[1] !== 0x4b || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xbb || identifier[8] !== 0x0d || identifier[9] !== 0x0a || identifier[10] !== 0x1a || identifier[11] !== 0x0a) {\n      console.error('texture missing KTX identifier');\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported');\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported');\n      return;\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported');\n      return;\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n\n    this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n  } // return mipmaps for js\n\n\n  KhronosTextureContainer.prototype.mipmaps = function (loadMipmaps) {\n    var mipmaps = []; // initialize width & height for level 1\n\n    var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n    var width = this.pixelWidth;\n    var height = this.pixelHeight;\n    var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n    for (var level = 0; level < mipmapCount; level++) {\n      var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n      dataOffset += 4; // size of the image + 4 for the imageSize field\n\n      for (var face = 0; face < this.numberOfFaces; face++) {\n        var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n        mipmaps.push({\n          data: byteArray,\n          width: width,\n          height: height\n        });\n        dataOffset += imageSize;\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n\n    return mipmaps;\n  };\n\n  KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n  // load types\n\n  KhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n\n  KhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n\n  KhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\n\n  KhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n\n  return KhronosTextureContainer;\n}();\n\nexport { KTXLoader };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/loaders/KTXLoader.js"],"names":["CompressedTextureLoader","KTXLoader","manager","call","prototype","Object","assign","create","constructor","parse","buffer","loadMipmaps","ktx","KhronosTextureContainer","mipmaps","width","pixelWidth","height","pixelHeight","format","glInternalFormat","isCubemap","numberOfFaces","mipmapCount","numberOfMipmapLevels","arrayBuffer","facesExpected","identifier","Uint8Array","console","error","dataSize","Uint32Array","BYTES_PER_ELEMENT","headerDataView","DataView","endianness","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","bytesOfKeyValueData","warn","Math","max","loadType","COMPRESSED_2D","dataOffset","HEADER_LEN","level","imageSize","Int32Array","face","byteArray","push","data","COMPRESSED_3D","TEX_2D","TEX_3D"],"mappings":"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","sourcesContent":["import { CompressedTextureLoader } from 'three';\n\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nvar KTXLoader = function (manager) {\n  CompressedTextureLoader.call(this, manager);\n};\n\nKTXLoader.prototype = Object.assign(Object.create(CompressedTextureLoader.prototype), {\n  constructor: KTXLoader,\n  parse: function (buffer, loadMipmaps) {\n    var ktx = new KhronosTextureContainer(buffer, 1);\n    return {\n      mipmaps: ktx.mipmaps(loadMipmaps),\n      width: ktx.pixelWidth,\n      height: ktx.pixelHeight,\n      format: ktx.glInternalFormat,\n      isCubemap: ktx.numberOfFaces === 6,\n      mipmapCount: ktx.numberOfMipmapLevels\n    };\n  }\n});\n\nvar KhronosTextureContainer = function () {\n  /**\n   * @param {ArrayBuffer} arrayBuffer- contents of the KTX container file\n   * @param {number} facesExpected- should be either 1 or 6, based whether a cube texture or or\n   * @param {boolean} threeDExpected- provision for indicating that data should be a 3D texture, not implemented\n   * @param {boolean} textureArrayExpected- provision for indicating that data should be a texture array, not implemented\n   */\n  function KhronosTextureContainer(arrayBuffer, facesExpected\n  /*, threeDExpected, textureArrayExpected */\n  ) {\n    this.arrayBuffer = arrayBuffer; // Test that it is a ktx formatted file, based on the first 12 bytes, character representation is:\n    // '´', 'K', 'T', 'X', ' ', '1', '1', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n    // 0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n\n    var identifier = new Uint8Array(this.arrayBuffer, 0, 12);\n\n    if (identifier[0] !== 0xab || identifier[1] !== 0x4b || identifier[2] !== 0x54 || identifier[3] !== 0x58 || identifier[4] !== 0x20 || identifier[5] !== 0x31 || identifier[6] !== 0x31 || identifier[7] !== 0xbb || identifier[8] !== 0x0d || identifier[9] !== 0x0a || identifier[10] !== 0x1a || identifier[11] !== 0x0a) {\n      console.error('texture missing KTX identifier');\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.arrayBuffer, 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      console.warn('only compressed formats currently supported');\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      console.warn('only 2D textures currently supported');\n      return;\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      console.warn('texture arrays not currently supported');\n      return;\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      console.warn('number of faces expected' + facesExpected + ', but found ' + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n\n    this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n  } // return mipmaps for js\n\n\n  KhronosTextureContainer.prototype.mipmaps = function (loadMipmaps) {\n    var mipmaps = []; // initialize width & height for level 1\n\n    var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n    var width = this.pixelWidth;\n    var height = this.pixelHeight;\n    var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n    for (let level = 0; level < mipmapCount; level++) {\n      var imageSize = new Int32Array(this.arrayBuffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n      dataOffset += 4; // size of the image + 4 for the imageSize field\n\n      for (let face = 0; face < this.numberOfFaces; face++) {\n        var byteArray = new Uint8Array(this.arrayBuffer, dataOffset, imageSize);\n        mipmaps.push({\n          data: byteArray,\n          width: width,\n          height: height\n        });\n        dataOffset += imageSize;\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n\n    return mipmaps;\n  };\n\n  KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n  // load types\n\n  KhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n\n  KhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n\n  KhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\n\n  KhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n\n  return KhronosTextureContainer;\n}();\n\nexport { KTXLoader };\n"]},"metadata":{},"sourceType":"module"}