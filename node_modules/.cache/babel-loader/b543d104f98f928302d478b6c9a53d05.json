{"ast":null,"code":"import { Node } from '../core/Node.js';\n\nfunction BypassNode(code, value) {\n  Node.call(this);\n  this.code = code;\n  this.value = value;\n}\n\nBypassNode.prototype = Object.create(Node.prototype);\nBypassNode.prototype.constructor = BypassNode;\nBypassNode.prototype.nodeType = 'Bypass';\n\nBypassNode.prototype.getType = function (builder) {\n  if (this.value) {\n    return this.value.getType(builder);\n  } else if (builder.isShader('fragment')) {\n    return 'f';\n  }\n\n  return 'void';\n};\n\nBypassNode.prototype.generate = function (builder, output) {\n  var code = this.code.build(builder, output) + ';';\n  builder.addNodeCode(code);\n\n  if (builder.isShader('vertex')) {\n    if (this.value) {\n      return this.value.build(builder, output);\n    }\n  } else {\n    return this.value ? this.value.build(builder, output) : builder.format('0.0', 'f', output);\n  }\n};\n\nBypassNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source);\n  this.code = source.code;\n  this.value = source.value;\n  return this;\n};\n\nBypassNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.code = this.code.toJSON(meta).uuid;\n    if (this.value) data.value = this.value.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { BypassNode };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/nodes/utils/BypassNode.js"],"names":["Node","BypassNode","code","value","call","prototype","Object","create","constructor","nodeType","getType","builder","isShader","generate","output","build","addNodeCode","format","copy","source","toJSON","meta","data","getJSONNode","createJSONNode","uuid"],"mappings":"AAAA,SAASA,IAAT,QAAqB,iBAArB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,KAA1B,EAAiC;AAC/BH,EAAAA,IAAI,CAACI,IAAL,CAAU,IAAV;AACA,OAAKF,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACD;;AAEDF,UAAU,CAACI,SAAX,GAAuBC,MAAM,CAACC,MAAP,CAAcP,IAAI,CAACK,SAAnB,CAAvB;AACAJ,UAAU,CAACI,SAAX,CAAqBG,WAArB,GAAmCP,UAAnC;AACAA,UAAU,CAACI,SAAX,CAAqBI,QAArB,GAAgC,QAAhC;;AAEAR,UAAU,CAACI,SAAX,CAAqBK,OAArB,GAA+B,UAAUC,OAAV,EAAmB;AAChD,MAAI,KAAKR,KAAT,EAAgB;AACd,WAAO,KAAKA,KAAL,CAAWO,OAAX,CAAmBC,OAAnB,CAAP;AACD,GAFD,MAEO,IAAIA,OAAO,CAACC,QAAR,CAAiB,UAAjB,CAAJ,EAAkC;AACvC,WAAO,GAAP;AACD;;AAED,SAAO,MAAP;AACD,CARD;;AAUAX,UAAU,CAACI,SAAX,CAAqBQ,QAArB,GAAgC,UAAUF,OAAV,EAAmBG,MAAnB,EAA2B;AACzD,MAAIZ,IAAI,GAAG,KAAKA,IAAL,CAAUa,KAAV,CAAgBJ,OAAhB,EAAyBG,MAAzB,IAAmC,GAA9C;AACAH,EAAAA,OAAO,CAACK,WAAR,CAAoBd,IAApB;;AAEA,MAAIS,OAAO,CAACC,QAAR,CAAiB,QAAjB,CAAJ,EAAgC;AAC9B,QAAI,KAAKT,KAAT,EAAgB;AACd,aAAO,KAAKA,KAAL,CAAWY,KAAX,CAAiBJ,OAAjB,EAA0BG,MAA1B,CAAP;AACD;AACF,GAJD,MAIO;AACL,WAAO,KAAKX,KAAL,GAAa,KAAKA,KAAL,CAAWY,KAAX,CAAiBJ,OAAjB,EAA0BG,MAA1B,CAAb,GAAiDH,OAAO,CAACM,MAAR,CAAe,KAAf,EAAsB,GAAtB,EAA2BH,MAA3B,CAAxD;AACD;AACF,CAXD;;AAaAb,UAAU,CAACI,SAAX,CAAqBa,IAArB,GAA4B,UAAUC,MAAV,EAAkB;AAC5CnB,EAAAA,IAAI,CAACK,SAAL,CAAea,IAAf,CAAoBd,IAApB,CAAyB,IAAzB,EAA+Be,MAA/B;AACA,OAAKjB,IAAL,GAAYiB,MAAM,CAACjB,IAAnB;AACA,OAAKC,KAAL,GAAagB,MAAM,CAAChB,KAApB;AACA,SAAO,IAAP;AACD,CALD;;AAOAF,UAAU,CAACI,SAAX,CAAqBe,MAArB,GAA8B,UAAUC,IAAV,EAAgB;AAC5C,MAAIC,IAAI,GAAG,KAAKC,WAAL,CAAiBF,IAAjB,CAAX;;AAEA,MAAI,CAACC,IAAL,EAAW;AACTA,IAAAA,IAAI,GAAG,KAAKE,cAAL,CAAoBH,IAApB,CAAP;AACAC,IAAAA,IAAI,CAACpB,IAAL,GAAY,KAAKA,IAAL,CAAUkB,MAAV,CAAiBC,IAAjB,EAAuBI,IAAnC;AACA,QAAI,KAAKtB,KAAT,EAAgBmB,IAAI,CAACnB,KAAL,GAAa,KAAKA,KAAL,CAAWiB,MAAX,CAAkBC,IAAlB,EAAwBI,IAArC;AACjB;;AAED,SAAOH,IAAP;AACD,CAVD;;AAYA,SAASrB,UAAT","sourcesContent":["import { Node } from '../core/Node.js';\n\nfunction BypassNode(code, value) {\n  Node.call(this);\n  this.code = code;\n  this.value = value;\n}\n\nBypassNode.prototype = Object.create(Node.prototype);\nBypassNode.prototype.constructor = BypassNode;\nBypassNode.prototype.nodeType = 'Bypass';\n\nBypassNode.prototype.getType = function (builder) {\n  if (this.value) {\n    return this.value.getType(builder);\n  } else if (builder.isShader('fragment')) {\n    return 'f';\n  }\n\n  return 'void';\n};\n\nBypassNode.prototype.generate = function (builder, output) {\n  var code = this.code.build(builder, output) + ';';\n  builder.addNodeCode(code);\n\n  if (builder.isShader('vertex')) {\n    if (this.value) {\n      return this.value.build(builder, output);\n    }\n  } else {\n    return this.value ? this.value.build(builder, output) : builder.format('0.0', 'f', output);\n  }\n};\n\nBypassNode.prototype.copy = function (source) {\n  Node.prototype.copy.call(this, source);\n  this.code = source.code;\n  this.value = source.value;\n  return this;\n};\n\nBypassNode.prototype.toJSON = function (meta) {\n  var data = this.getJSONNode(meta);\n\n  if (!data) {\n    data = this.createJSONNode(meta);\n    data.code = this.code.toJSON(meta).uuid;\n    if (this.value) data.value = this.value.toJSON(meta).uuid;\n  }\n\n  return data;\n};\n\nexport { BypassNode };\n"]},"metadata":{},"sourceType":"module"}