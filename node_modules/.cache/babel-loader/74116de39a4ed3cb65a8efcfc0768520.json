{"ast":null,"code":"import _classCallCheck from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Projects/arrayftw/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Matrix4, Object3D, Vector3, EventDispatcher, MathUtils, Matrix3, Color, Box3, Sphere, BufferGeometry, BufferAttribute, Float32BufferAttribute, Vector2 } from 'three';\n\nvar _m1 = new Matrix4();\n\nvar _obj = new Object3D();\n\nvar _offset = new Vector3();\n\nvar Geometry = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(Geometry, _EventDispatcher);\n\n  var _super = _createSuper(Geometry);\n\n  function Geometry() {\n    var _this;\n\n    _classCallCheck(this, Geometry);\n\n    _this = _super.call(this);\n    _this.isGeometry = true;\n    _this.uuid = MathUtils.generateUUID();\n    _this.name = '';\n    _this.type = 'Geometry';\n    _this.vertices = [];\n    _this.colors = [];\n    _this.faces = [];\n    _this.faceVertexUvs = [[]];\n    _this.morphTargets = [];\n    _this.morphNormals = [];\n    _this.skinWeights = [];\n    _this.skinIndices = [];\n    _this.lineDistances = [];\n    _this.boundingBox = null;\n    _this.boundingSphere = null; // update flags\n\n    _this.elementsNeedUpdate = false;\n    _this.verticesNeedUpdate = false;\n    _this.uvsNeedUpdate = false;\n    _this.normalsNeedUpdate = false;\n    _this.colorsNeedUpdate = false;\n    _this.lineDistancesNeedUpdate = false;\n    _this.groupsNeedUpdate = false;\n    return _this;\n  }\n\n  _createClass(Geometry, [{\n    key: \"applyMatrix4\",\n    value: function applyMatrix4(matrix) {\n      var normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\n      for (var i = 0, il = this.vertices.length; i < il; i++) {\n        var vertex = this.vertices[i];\n        vertex.applyMatrix4(matrix);\n      }\n\n      for (var _i = 0, _il = this.faces.length; _i < _il; _i++) {\n        var face = this.faces[_i];\n        face.normal.applyMatrix3(normalMatrix).normalize();\n\n        for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n          face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n        }\n      }\n\n      if (this.boundingBox !== null) {\n        this.computeBoundingBox();\n      }\n\n      if (this.boundingSphere !== null) {\n        this.computeBoundingSphere();\n      }\n\n      this.verticesNeedUpdate = true;\n      this.normalsNeedUpdate = true;\n      return this;\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(angle) {\n      // rotate geometry around world x-axis\n      _m1.makeRotationX(angle);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(angle) {\n      // rotate geometry around world y-axis\n      _m1.makeRotationY(angle);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n  }, {\n    key: \"rotateZ\",\n    value: function rotateZ(angle) {\n      // rotate geometry around world z-axis\n      _m1.makeRotationZ(angle);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n  }, {\n    key: \"translate\",\n    value: function translate(x, y, z) {\n      // translate geometry\n      _m1.makeTranslation(x, y, z);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(x, y, z) {\n      // scale geometry\n      _m1.makeScale(x, y, z);\n\n      this.applyMatrix4(_m1);\n      return this;\n    }\n  }, {\n    key: \"lookAt\",\n    value: function lookAt(vector) {\n      _obj.lookAt(vector);\n\n      _obj.updateMatrix();\n\n      this.applyMatrix4(_obj.matrix);\n      return this;\n    }\n  }, {\n    key: \"fromBufferGeometry\",\n    value: function fromBufferGeometry(geometry) {\n      var scope = this;\n      var index = geometry.index !== null ? geometry.index : undefined;\n      var attributes = geometry.attributes;\n\n      if (attributes.position === undefined) {\n        console.error('THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.');\n        return this;\n      }\n\n      var position = attributes.position;\n      var normal = attributes.normal;\n      var color = attributes.color;\n      var uv = attributes.uv;\n      var uv2 = attributes.uv2;\n      if (uv2 !== undefined) this.faceVertexUvs[1] = [];\n\n      for (var i = 0; i < position.count; i++) {\n        scope.vertices.push(new Vector3().fromBufferAttribute(position, i));\n\n        if (color !== undefined) {\n          scope.colors.push(new Color().fromBufferAttribute(color, i));\n        }\n      }\n\n      function addFace(a, b, c, materialIndex) {\n        var vertexColors = color === undefined ? [] : [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()];\n        var vertexNormals = normal === undefined ? [] : [new Vector3().fromBufferAttribute(normal, a), new Vector3().fromBufferAttribute(normal, b), new Vector3().fromBufferAttribute(normal, c)];\n        var face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n        scope.faces.push(face);\n\n        if (uv !== undefined) {\n          scope.faceVertexUvs[0].push([new Vector2().fromBufferAttribute(uv, a), new Vector2().fromBufferAttribute(uv, b), new Vector2().fromBufferAttribute(uv, c)]);\n        }\n\n        if (uv2 !== undefined) {\n          scope.faceVertexUvs[1].push([new Vector2().fromBufferAttribute(uv2, a), new Vector2().fromBufferAttribute(uv2, b), new Vector2().fromBufferAttribute(uv2, c)]);\n        }\n      }\n\n      var groups = geometry.groups;\n\n      if (groups.length > 0) {\n        for (var _i2 = 0; _i2 < groups.length; _i2++) {\n          var group = groups[_i2];\n          var start = group.start;\n          var count = group.count;\n\n          for (var j = start, jl = start + count; j < jl; j += 3) {\n            if (index !== undefined) {\n              addFace(index.getX(j), index.getX(j + 1), index.getX(j + 2), group.materialIndex);\n            } else {\n              addFace(j, j + 1, j + 2, group.materialIndex);\n            }\n          }\n        }\n      } else {\n        if (index !== undefined) {\n          for (var _i3 = 0; _i3 < index.count; _i3 += 3) {\n            addFace(index.getX(_i3), index.getX(_i3 + 1), index.getX(_i3 + 2));\n          }\n        } else {\n          for (var _i4 = 0; _i4 < position.count; _i4 += 3) {\n            addFace(_i4, _i4 + 1, _i4 + 2);\n          }\n        }\n      }\n\n      this.computeFaceNormals();\n\n      if (geometry.boundingBox !== null) {\n        this.boundingBox = geometry.boundingBox.clone();\n      }\n\n      if (geometry.boundingSphere !== null) {\n        this.boundingSphere = geometry.boundingSphere.clone();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"center\",\n    value: function center() {\n      this.computeBoundingBox();\n      this.boundingBox.getCenter(_offset).negate();\n      this.translate(_offset.x, _offset.y, _offset.z);\n      return this;\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      this.computeBoundingSphere();\n      var center = this.boundingSphere.center;\n      var radius = this.boundingSphere.radius;\n      var s = radius === 0 ? 1 : 1.0 / radius;\n      var matrix = new Matrix4();\n      matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n      this.applyMatrix4(matrix);\n      return this;\n    }\n  }, {\n    key: \"computeFaceNormals\",\n    value: function computeFaceNormals() {\n      var cb = new Vector3(),\n          ab = new Vector3();\n\n      for (var f = 0, fl = this.faces.length; f < fl; f++) {\n        var face = this.faces[f];\n        var vA = this.vertices[face.a];\n        var vB = this.vertices[face.b];\n        var vC = this.vertices[face.c];\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n      }\n    }\n  }, {\n    key: \"computeVertexNormals\",\n    value: function computeVertexNormals() {\n      var areaWeighted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var vertices = new Array(this.vertices.length);\n\n      for (var v = 0, vl = this.vertices.length; v < vl; v++) {\n        vertices[v] = new Vector3();\n      }\n\n      if (areaWeighted) {\n        // vertex normals weighted by triangle areas\n        // http://www.iquilezles.org/www/articles/normals/normals.htm\n        var cb = new Vector3(),\n            ab = new Vector3();\n\n        for (var f = 0, fl = this.faces.length; f < fl; f++) {\n          var face = this.faces[f];\n          var vA = this.vertices[face.a];\n          var vB = this.vertices[face.b];\n          var vC = this.vertices[face.c];\n          cb.subVectors(vC, vB);\n          ab.subVectors(vA, vB);\n          cb.cross(ab);\n          vertices[face.a].add(cb);\n          vertices[face.b].add(cb);\n          vertices[face.c].add(cb);\n        }\n      } else {\n        this.computeFaceNormals();\n\n        for (var _f = 0, _fl = this.faces.length; _f < _fl; _f++) {\n          var _face = this.faces[_f];\n\n          vertices[_face.a].add(_face.normal);\n\n          vertices[_face.b].add(_face.normal);\n\n          vertices[_face.c].add(_face.normal);\n        }\n      }\n\n      for (var _v = 0, _vl = this.vertices.length; _v < _vl; _v++) {\n        vertices[_v].normalize();\n      }\n\n      for (var _f2 = 0, _fl2 = this.faces.length; _f2 < _fl2; _f2++) {\n        var _face2 = this.faces[_f2];\n        var vertexNormals = _face2.vertexNormals;\n\n        if (vertexNormals.length === 3) {\n          vertexNormals[0].copy(vertices[_face2.a]);\n          vertexNormals[1].copy(vertices[_face2.b]);\n          vertexNormals[2].copy(vertices[_face2.c]);\n        } else {\n          vertexNormals[0] = vertices[_face2.a].clone();\n          vertexNormals[1] = vertices[_face2.b].clone();\n          vertexNormals[2] = vertices[_face2.c].clone();\n        }\n      }\n\n      if (this.faces.length > 0) {\n        this.normalsNeedUpdate = true;\n      }\n    }\n  }, {\n    key: \"computeFlatVertexNormals\",\n    value: function computeFlatVertexNormals() {\n      this.computeFaceNormals();\n\n      for (var f = 0, fl = this.faces.length; f < fl; f++) {\n        var face = this.faces[f];\n        var vertexNormals = face.vertexNormals;\n\n        if (vertexNormals.length === 3) {\n          vertexNormals[0].copy(face.normal);\n          vertexNormals[1].copy(face.normal);\n          vertexNormals[2].copy(face.normal);\n        } else {\n          vertexNormals[0] = face.normal.clone();\n          vertexNormals[1] = face.normal.clone();\n          vertexNormals[2] = face.normal.clone();\n        }\n      }\n\n      if (this.faces.length > 0) {\n        this.normalsNeedUpdate = true;\n      }\n    }\n  }, {\n    key: \"computeMorphNormals\",\n    value: function computeMorphNormals() {\n      // save original normals\n      // - create temp variables on first access\n      //   otherwise just copy (for faster repeated calls)\n      for (var f = 0, fl = this.faces.length; f < fl; f++) {\n        var face = this.faces[f];\n\n        if (!face.__originalFaceNormal) {\n          face.__originalFaceNormal = face.normal.clone();\n        } else {\n          face.__originalFaceNormal.copy(face.normal);\n        }\n\n        if (!face.__originalVertexNormals) face.__originalVertexNormals = [];\n\n        for (var i = 0, il = face.vertexNormals.length; i < il; i++) {\n          if (!face.__originalVertexNormals[i]) {\n            face.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n          } else {\n            face.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n          }\n        }\n      } // use temp geometry to compute face and vertex normals for each morph\n\n\n      var tmpGeo = new Geometry();\n      tmpGeo.faces = this.faces;\n\n      for (var _i5 = 0, _il2 = this.morphTargets.length; _i5 < _il2; _i5++) {\n        // create on first access\n        if (!this.morphNormals[_i5]) {\n          this.morphNormals[_i5] = {};\n          this.morphNormals[_i5].faceNormals = [];\n          this.morphNormals[_i5].vertexNormals = [];\n          var dstNormalsFace = this.morphNormals[_i5].faceNormals;\n          var dstNormalsVertex = this.morphNormals[_i5].vertexNormals;\n\n          for (var _f3 = 0, _fl3 = this.faces.length; _f3 < _fl3; _f3++) {\n            var faceNormal = new Vector3();\n            var vertexNormals = {\n              a: new Vector3(),\n              b: new Vector3(),\n              c: new Vector3()\n            };\n            dstNormalsFace.push(faceNormal);\n            dstNormalsVertex.push(vertexNormals);\n          }\n        }\n\n        var morphNormals = this.morphNormals[_i5]; // set vertices to morph target\n\n        tmpGeo.vertices = this.morphTargets[_i5].vertices; // compute morph normals\n\n        tmpGeo.computeFaceNormals();\n        tmpGeo.computeVertexNormals(); // store morph normals\n\n        for (var _f4 = 0, _fl4 = this.faces.length; _f4 < _fl4; _f4++) {\n          var _face3 = this.faces[_f4];\n          var _faceNormal = morphNormals.faceNormals[_f4];\n          var _vertexNormals = morphNormals.vertexNormals[_f4];\n\n          _faceNormal.copy(_face3.normal);\n\n          _vertexNormals.a.copy(_face3.vertexNormals[0]);\n\n          _vertexNormals.b.copy(_face3.vertexNormals[1]);\n\n          _vertexNormals.c.copy(_face3.vertexNormals[2]);\n        }\n      } // restore original normals\n\n\n      for (var _f5 = 0, _fl5 = this.faces.length; _f5 < _fl5; _f5++) {\n        var _face4 = this.faces[_f5];\n        _face4.normal = _face4.__originalFaceNormal;\n        _face4.vertexNormals = _face4.__originalVertexNormals;\n      }\n    }\n  }, {\n    key: \"computeBoundingBox\",\n    value: function computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new Box3();\n      }\n\n      this.boundingBox.setFromPoints(this.vertices);\n    }\n  }, {\n    key: \"computeBoundingSphere\",\n    value: function computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new Sphere();\n      }\n\n      this.boundingSphere.setFromPoints(this.vertices);\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(geometry, matrix) {\n      var materialIndexOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (!(geometry && geometry.isGeometry)) {\n        console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);\n        return;\n      }\n\n      var normalMatrix;\n      var vertexOffset = this.vertices.length,\n          vertices1 = this.vertices,\n          vertices2 = geometry.vertices,\n          faces1 = this.faces,\n          faces2 = geometry.faces,\n          colors1 = this.colors,\n          colors2 = geometry.colors;\n\n      if (matrix !== undefined) {\n        normalMatrix = new Matrix3().getNormalMatrix(matrix);\n      } // vertices\n\n\n      for (var i = 0, il = vertices2.length; i < il; i++) {\n        var vertex = vertices2[i];\n        var vertexCopy = vertex.clone();\n        if (matrix !== undefined) vertexCopy.applyMatrix4(matrix);\n        vertices1.push(vertexCopy);\n      } // colors\n\n\n      for (var _i6 = 0, _il3 = colors2.length; _i6 < _il3; _i6++) {\n        colors1.push(colors2[_i6].clone());\n      } // faces\n\n\n      for (var _i7 = 0, _il4 = faces2.length; _i7 < _il4; _i7++) {\n        var face = faces2[_i7];\n        var normal = void 0,\n            color = void 0;\n        var faceVertexNormals = face.vertexNormals,\n            faceVertexColors = face.vertexColors;\n        var faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n        faceCopy.normal.copy(face.normal);\n\n        if (normalMatrix !== undefined) {\n          faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n        }\n\n        for (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n          normal = faceVertexNormals[j].clone();\n\n          if (normalMatrix !== undefined) {\n            normal.applyMatrix3(normalMatrix).normalize();\n          }\n\n          faceCopy.vertexNormals.push(normal);\n        }\n\n        faceCopy.color.copy(face.color);\n\n        for (var _j = 0, _jl = faceVertexColors.length; _j < _jl; _j++) {\n          color = faceVertexColors[_j];\n          faceCopy.vertexColors.push(color.clone());\n        }\n\n        faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n        faces1.push(faceCopy);\n      } // uvs\n\n\n      for (var _i8 = 0, _il5 = geometry.faceVertexUvs.length; _i8 < _il5; _i8++) {\n        var faceVertexUvs2 = geometry.faceVertexUvs[_i8];\n        if (this.faceVertexUvs[_i8] === undefined) this.faceVertexUvs[_i8] = [];\n\n        for (var _j2 = 0, _jl2 = faceVertexUvs2.length; _j2 < _jl2; _j2++) {\n          var uvs2 = faceVertexUvs2[_j2],\n              uvsCopy = [];\n\n          for (var k = 0, kl = uvs2.length; k < kl; k++) {\n            uvsCopy.push(uvs2[k].clone());\n          }\n\n          this.faceVertexUvs[_i8].push(uvsCopy);\n        }\n      }\n    }\n  }, {\n    key: \"mergeMesh\",\n    value: function mergeMesh(mesh) {\n      if (!(mesh && mesh.isMesh)) {\n        console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);\n        return;\n      }\n\n      if (mesh.matrixAutoUpdate) mesh.updateMatrix();\n      this.merge(mesh.geometry, mesh.matrix);\n    }\n    /*\n     * Checks for duplicate vertices with hashmap.\n     * Duplicated vertices are removed\n     * and faces' vertices are updated.\n     */\n\n  }, {\n    key: \"mergeVertices\",\n    value: function mergeVertices() {\n      var precisionPoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n      var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\n      var unique = [],\n          changes = [];\n      var precision = Math.pow(10, precisionPoints);\n\n      for (var i = 0, il = this.vertices.length; i < il; i++) {\n        var v = this.vertices[i];\n        var key = \"\".concat(Math.round(v.x * precision), \"_\").concat(Math.round(v.y * precision), \"_\").concat(Math.round(v.z * precision));\n\n        if (verticesMap[key] === undefined) {\n          verticesMap[key] = i;\n          unique.push(this.vertices[i]);\n          changes[i] = unique.length - 1;\n        } else {\n          //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n          changes[i] = changes[verticesMap[key]];\n        }\n      } // if faces are completely degenerate after merging vertices, we\n      // have to remove them from the geometry.\n\n\n      var faceIndicesToRemove = [];\n\n      for (var _i9 = 0, _il6 = this.faces.length; _i9 < _il6; _i9++) {\n        var face = this.faces[_i9];\n        face.a = changes[face.a];\n        face.b = changes[face.b];\n        face.c = changes[face.c];\n        var indices = [face.a, face.b, face.c]; // if any duplicate vertices are found in a Face3\n        // we have to remove the face as nothing can be saved\n\n        for (var n = 0; n < 3; n++) {\n          if (indices[n] === indices[(n + 1) % 3]) {\n            faceIndicesToRemove.push(_i9);\n            break;\n          }\n        }\n      }\n\n      for (var _i10 = faceIndicesToRemove.length - 1; _i10 >= 0; _i10--) {\n        var idx = faceIndicesToRemove[_i10];\n        this.faces.splice(idx, 1);\n\n        for (var j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n          this.faceVertexUvs[j].splice(idx, 1);\n        }\n      } // Use unique set of vertices\n\n\n      var diff = this.vertices.length - unique.length;\n      this.vertices = unique;\n      return diff;\n    }\n  }, {\n    key: \"setFromPoints\",\n    value: function setFromPoints(points) {\n      this.vertices = [];\n\n      for (var i = 0, l = points.length; i < l; i++) {\n        var point = points[i];\n        this.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"sortFacesByMaterialIndex\",\n    value: function sortFacesByMaterialIndex() {\n      var faces = this.faces;\n      var length = faces.length; // tag faces\n\n      for (var i = 0; i < length; i++) {\n        faces[i]._id = i;\n      } // sort faces\n\n\n      function materialIndexSort(a, b) {\n        return a.materialIndex - b.materialIndex;\n      }\n\n      faces.sort(materialIndexSort); // sort uvs\n\n      var uvs1 = this.faceVertexUvs[0];\n      var uvs2 = this.faceVertexUvs[1];\n      var newUvs1, newUvs2;\n      if (uvs1 && uvs1.length === length) newUvs1 = [];\n      if (uvs2 && uvs2.length === length) newUvs2 = [];\n\n      for (var _i11 = 0; _i11 < length; _i11++) {\n        var id = faces[_i11]._id;\n        if (newUvs1) newUvs1.push(uvs1[id]);\n        if (newUvs2) newUvs2.push(uvs2[id]);\n      }\n\n      if (newUvs1) this.faceVertexUvs[0] = newUvs1;\n      if (newUvs2) this.faceVertexUvs[1] = newUvs2;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var data = {\n        metadata: {\n          version: 4.5,\n          type: 'Geometry',\n          generator: 'Geometry.toJSON'\n        }\n      }; // standard Geometry serialization\n\n      data.uuid = this.uuid;\n      data.type = this.type;\n      if (this.name !== '') data.name = this.name;\n\n      if (this.parameters !== undefined) {\n        var parameters = this.parameters;\n\n        for (var key in parameters) {\n          if (parameters[key] !== undefined) data[key] = parameters[key];\n        }\n\n        return data;\n      }\n\n      var vertices = [];\n\n      for (var i = 0; i < this.vertices.length; i++) {\n        var vertex = this.vertices[i];\n        vertices.push(vertex.x, vertex.y, vertex.z);\n      }\n\n      var faces = [];\n      var normals = [];\n      var normalsHash = {};\n      var colors = [];\n      var colorsHash = {};\n      var uvs = [];\n      var uvsHash = {};\n\n      for (var _i12 = 0; _i12 < this.faces.length; _i12++) {\n        var face = this.faces[_i12];\n        var hasMaterial = true;\n        var hasFaceUv = false; // deprecated\n\n        var hasFaceVertexUv = this.faceVertexUvs[0][_i12] !== undefined;\n        var hasFaceNormal = face.normal.length() > 0;\n        var hasFaceVertexNormal = face.vertexNormals.length > 0;\n        var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n        var hasFaceVertexColor = face.vertexColors.length > 0;\n        var faceType = 0;\n        faceType = setBit(faceType, 0, 0); // isQuad\n\n        faceType = setBit(faceType, 1, hasMaterial);\n        faceType = setBit(faceType, 2, hasFaceUv);\n        faceType = setBit(faceType, 3, hasFaceVertexUv);\n        faceType = setBit(faceType, 4, hasFaceNormal);\n        faceType = setBit(faceType, 5, hasFaceVertexNormal);\n        faceType = setBit(faceType, 6, hasFaceColor);\n        faceType = setBit(faceType, 7, hasFaceVertexColor);\n        faces.push(faceType);\n        faces.push(face.a, face.b, face.c);\n        faces.push(face.materialIndex);\n\n        if (hasFaceVertexUv) {\n          var faceVertexUvs = this.faceVertexUvs[0][_i12];\n          faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));\n        }\n\n        if (hasFaceNormal) {\n          faces.push(getNormalIndex(face.normal));\n        }\n\n        if (hasFaceVertexNormal) {\n          var vertexNormals = face.vertexNormals;\n          faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));\n        }\n\n        if (hasFaceColor) {\n          faces.push(getColorIndex(face.color));\n        }\n\n        if (hasFaceVertexColor) {\n          var vertexColors = face.vertexColors;\n          faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));\n        }\n      }\n\n      function setBit(value, position, enabled) {\n        return enabled ? value | 1 << position : value & ~(1 << position);\n      }\n\n      function getNormalIndex(normal) {\n        var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n        if (normalsHash[hash] !== undefined) {\n          return normalsHash[hash];\n        }\n\n        normalsHash[hash] = normals.length / 3;\n        normals.push(normal.x, normal.y, normal.z);\n        return normalsHash[hash];\n      }\n\n      function getColorIndex(color) {\n        var hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n        if (colorsHash[hash] !== undefined) {\n          return colorsHash[hash];\n        }\n\n        colorsHash[hash] = colors.length;\n        colors.push(color.getHex());\n        return colorsHash[hash];\n      }\n\n      function getUvIndex(uv) {\n        var hash = uv.x.toString() + uv.y.toString();\n\n        if (uvsHash[hash] !== undefined) {\n          return uvsHash[hash];\n        }\n\n        uvsHash[hash] = uvs.length / 2;\n        uvs.push(uv.x, uv.y);\n        return uvsHash[hash];\n      }\n\n      data.data = {};\n      data.data.vertices = vertices;\n      data.data.normals = normals;\n      if (colors.length > 0) data.data.colors = colors;\n      if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n\n      data.data.faces = faces;\n      return data;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      /*\n      // Handle primitives\n      const parameters = this.parameters;\n      if ( parameters !== undefined ) {\n      const values = [];\n      for ( const key in parameters ) {\n      values.push( parameters[ key ] );\n      }\n      const geometry = Object.create( this.constructor.prototype );\n      this.constructor.apply( geometry, values );\n      return geometry;\n      }\n      return new this.constructor().copy( this );\n      */\n      return new Geometry().copy(this);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      // reset\n      this.vertices = [];\n      this.colors = [];\n      this.faces = [];\n      this.faceVertexUvs = [[]];\n      this.morphTargets = [];\n      this.morphNormals = [];\n      this.skinWeights = [];\n      this.skinIndices = [];\n      this.lineDistances = [];\n      this.boundingBox = null;\n      this.boundingSphere = null; // name\n\n      this.name = source.name; // vertices\n\n      var vertices = source.vertices;\n\n      for (var i = 0, il = vertices.length; i < il; i++) {\n        this.vertices.push(vertices[i].clone());\n      } // colors\n\n\n      var colors = source.colors;\n\n      for (var _i13 = 0, _il7 = colors.length; _i13 < _il7; _i13++) {\n        this.colors.push(colors[_i13].clone());\n      } // faces\n\n\n      var faces = source.faces;\n\n      for (var _i14 = 0, _il8 = faces.length; _i14 < _il8; _i14++) {\n        this.faces.push(faces[_i14].clone());\n      } // face vertex uvs\n\n\n      for (var _i15 = 0, _il9 = source.faceVertexUvs.length; _i15 < _il9; _i15++) {\n        var faceVertexUvs = source.faceVertexUvs[_i15];\n\n        if (this.faceVertexUvs[_i15] === undefined) {\n          this.faceVertexUvs[_i15] = [];\n        }\n\n        for (var j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n          var uvs = faceVertexUvs[j],\n              uvsCopy = [];\n\n          for (var k = 0, kl = uvs.length; k < kl; k++) {\n            var uv = uvs[k];\n            uvsCopy.push(uv.clone());\n          }\n\n          this.faceVertexUvs[_i15].push(uvsCopy);\n        }\n      } // morph targets\n\n\n      var morphTargets = source.morphTargets;\n\n      for (var _i16 = 0, _il10 = morphTargets.length; _i16 < _il10; _i16++) {\n        var morphTarget = {};\n        morphTarget.name = morphTargets[_i16].name; // vertices\n\n        if (morphTargets[_i16].vertices !== undefined) {\n          morphTarget.vertices = [];\n\n          for (var _j3 = 0, _jl3 = morphTargets[_i16].vertices.length; _j3 < _jl3; _j3++) {\n            morphTarget.vertices.push(morphTargets[_i16].vertices[_j3].clone());\n          }\n        } // normals\n\n\n        if (morphTargets[_i16].normals !== undefined) {\n          morphTarget.normals = [];\n\n          for (var _j4 = 0, _jl4 = morphTargets[_i16].normals.length; _j4 < _jl4; _j4++) {\n            morphTarget.normals.push(morphTargets[_i16].normals[_j4].clone());\n          }\n        }\n\n        this.morphTargets.push(morphTarget);\n      } // morph normals\n\n\n      var morphNormals = source.morphNormals;\n\n      for (var _i17 = 0, _il11 = morphNormals.length; _i17 < _il11; _i17++) {\n        var morphNormal = {}; // vertex normals\n\n        if (morphNormals[_i17].vertexNormals !== undefined) {\n          morphNormal.vertexNormals = [];\n\n          for (var _j5 = 0, _jl5 = morphNormals[_i17].vertexNormals.length; _j5 < _jl5; _j5++) {\n            var srcVertexNormal = morphNormals[_i17].vertexNormals[_j5];\n            var destVertexNormal = {};\n            destVertexNormal.a = srcVertexNormal.a.clone();\n            destVertexNormal.b = srcVertexNormal.b.clone();\n            destVertexNormal.c = srcVertexNormal.c.clone();\n            morphNormal.vertexNormals.push(destVertexNormal);\n          }\n        } // face normals\n\n\n        if (morphNormals[_i17].faceNormals !== undefined) {\n          morphNormal.faceNormals = [];\n\n          for (var _j6 = 0, _jl6 = morphNormals[_i17].faceNormals.length; _j6 < _jl6; _j6++) {\n            morphNormal.faceNormals.push(morphNormals[_i17].faceNormals[_j6].clone());\n          }\n        }\n\n        this.morphNormals.push(morphNormal);\n      } // skin weights\n\n\n      var skinWeights = source.skinWeights;\n\n      for (var _i18 = 0, _il12 = skinWeights.length; _i18 < _il12; _i18++) {\n        this.skinWeights.push(skinWeights[_i18].clone());\n      } // skin indices\n\n\n      var skinIndices = source.skinIndices;\n\n      for (var _i19 = 0, _il13 = skinIndices.length; _i19 < _il13; _i19++) {\n        this.skinIndices.push(skinIndices[_i19].clone());\n      } // line distances\n\n\n      var lineDistances = source.lineDistances;\n\n      for (var _i20 = 0, _il14 = lineDistances.length; _i20 < _il14; _i20++) {\n        this.lineDistances.push(lineDistances[_i20]);\n      } // bounding box\n\n\n      var boundingBox = source.boundingBox;\n\n      if (boundingBox !== null) {\n        this.boundingBox = boundingBox.clone();\n      } // bounding sphere\n\n\n      var boundingSphere = source.boundingSphere;\n\n      if (boundingSphere !== null) {\n        this.boundingSphere = boundingSphere.clone();\n      } // update flags\n\n\n      this.elementsNeedUpdate = source.elementsNeedUpdate;\n      this.verticesNeedUpdate = source.verticesNeedUpdate;\n      this.uvsNeedUpdate = source.uvsNeedUpdate;\n      this.normalsNeedUpdate = source.normalsNeedUpdate;\n      this.colorsNeedUpdate = source.colorsNeedUpdate;\n      this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n      this.groupsNeedUpdate = source.groupsNeedUpdate;\n      return this;\n    }\n  }, {\n    key: \"toBufferGeometry\",\n    value: function toBufferGeometry() {\n      var geometry = new DirectGeometry().fromGeometry(this);\n      var buffergeometry = new BufferGeometry();\n      var positions = new Float32Array(geometry.vertices.length * 3);\n      buffergeometry.setAttribute('position', new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n\n      if (geometry.normals.length > 0) {\n        var normals = new Float32Array(geometry.normals.length * 3);\n        buffergeometry.setAttribute('normal', new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n      }\n\n      if (geometry.colors.length > 0) {\n        var colors = new Float32Array(geometry.colors.length * 3);\n        buffergeometry.setAttribute('color', new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n      }\n\n      if (geometry.uvs.length > 0) {\n        var uvs = new Float32Array(geometry.uvs.length * 2);\n        buffergeometry.setAttribute('uv', new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n      }\n\n      if (geometry.uvs2.length > 0) {\n        var uvs2 = new Float32Array(geometry.uvs2.length * 2);\n        buffergeometry.setAttribute('uv2', new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n      } // groups\n\n\n      buffergeometry.groups = geometry.groups; // morphs\n\n      for (var name in geometry.morphTargets) {\n        var array = [];\n        var morphTargets = geometry.morphTargets[name];\n\n        for (var i = 0, l = morphTargets.length; i < l; i++) {\n          var morphTarget = morphTargets[i];\n          var attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);\n          attribute.name = morphTarget.name;\n          array.push(attribute.copyVector3sArray(morphTarget.data));\n        }\n\n        buffergeometry.morphAttributes[name] = array;\n      } // skinning\n\n\n      if (geometry.skinIndices.length > 0) {\n        var skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);\n        buffergeometry.setAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));\n      }\n\n      if (geometry.skinWeights.length > 0) {\n        var skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);\n        buffergeometry.setAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));\n      } //\n\n\n      if (geometry.boundingSphere !== null) {\n        buffergeometry.boundingSphere = geometry.boundingSphere.clone();\n      }\n\n      if (geometry.boundingBox !== null) {\n        buffergeometry.boundingBox = geometry.boundingBox.clone();\n      }\n\n      return buffergeometry;\n    }\n  }, {\n    key: \"computeTangents\",\n    value: function computeTangents() {\n      console.error('THREE.Geometry: .computeTangents() has been removed.');\n    }\n  }, {\n    key: \"computeLineDistances\",\n    value: function computeLineDistances() {\n      console.error('THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.');\n    }\n  }, {\n    key: \"applyMatrix\",\n    value: function applyMatrix(matrix) {\n      console.warn('THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().');\n      return this.applyMatrix4(matrix);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n  }]);\n\n  return Geometry;\n}(EventDispatcher);\n\nGeometry.createBufferGeometryFromObject = function (object) {\n  var buffergeometry = new BufferGeometry();\n  var geometry = object.geometry;\n\n  if (object.isPoints || object.isLine) {\n    var positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);\n    var colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);\n    buffergeometry.setAttribute('position', positions.copyVector3sArray(geometry.vertices));\n    buffergeometry.setAttribute('color', colors.copyColorsArray(geometry.colors));\n\n    if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n      var lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);\n      buffergeometry.setAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));\n    }\n\n    if (geometry.boundingSphere !== null) {\n      buffergeometry.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    if (geometry.boundingBox !== null) {\n      buffergeometry.boundingBox = geometry.boundingBox.clone();\n    }\n  } else if (object.isMesh) {\n    buffergeometry = geometry.toBufferGeometry();\n  }\n\n  return buffergeometry;\n};\n\nvar DirectGeometry = /*#__PURE__*/function () {\n  function DirectGeometry() {\n    _classCallCheck(this, DirectGeometry);\n\n    this.vertices = [];\n    this.normals = [];\n    this.colors = [];\n    this.uvs = [];\n    this.uvs2 = [];\n    this.groups = [];\n    this.morphTargets = {};\n    this.skinWeights = [];\n    this.skinIndices = []; // this.lineDistances = [];\n\n    this.boundingBox = null;\n    this.boundingSphere = null; // update flags\n\n    this.verticesNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  }\n\n  _createClass(DirectGeometry, [{\n    key: \"computeGroups\",\n    value: function computeGroups(geometry) {\n      var groups = [];\n      var group, i;\n      var materialIndex = undefined;\n      var faces = geometry.faces;\n\n      for (i = 0; i < faces.length; i++) {\n        var face = faces[i]; // materials\n\n        if (face.materialIndex !== materialIndex) {\n          materialIndex = face.materialIndex;\n\n          if (group !== undefined) {\n            group.count = i * 3 - group.start;\n            groups.push(group);\n          }\n\n          group = {\n            start: i * 3,\n            materialIndex: materialIndex\n          };\n        }\n      }\n\n      if (group !== undefined) {\n        group.count = i * 3 - group.start;\n        groups.push(group);\n      }\n\n      this.groups = groups;\n    }\n  }, {\n    key: \"fromGeometry\",\n    value: function fromGeometry(geometry) {\n      var faces = geometry.faces;\n      var vertices = geometry.vertices;\n      var faceVertexUvs = geometry.faceVertexUvs;\n      var hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n      var hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0; // morphs\n\n      var morphTargets = geometry.morphTargets;\n      var morphTargetsLength = morphTargets.length;\n      var morphTargetsPosition;\n\n      if (morphTargetsLength > 0) {\n        morphTargetsPosition = [];\n\n        for (var i = 0; i < morphTargetsLength; i++) {\n          morphTargetsPosition[i] = {\n            name: morphTargets[i].name,\n            data: []\n          };\n        }\n\n        this.morphTargets.position = morphTargetsPosition;\n      }\n\n      var morphNormals = geometry.morphNormals;\n      var morphNormalsLength = morphNormals.length;\n      var morphTargetsNormal;\n\n      if (morphNormalsLength > 0) {\n        morphTargetsNormal = [];\n\n        for (var _i21 = 0; _i21 < morphNormalsLength; _i21++) {\n          morphTargetsNormal[_i21] = {\n            name: morphNormals[_i21].name,\n            data: []\n          };\n        }\n\n        this.morphTargets.normal = morphTargetsNormal;\n      } // skins\n\n\n      var skinIndices = geometry.skinIndices;\n      var skinWeights = geometry.skinWeights;\n      var hasSkinIndices = skinIndices.length === vertices.length;\n      var hasSkinWeights = skinWeights.length === vertices.length; //\n\n      if (vertices.length > 0 && faces.length === 0) {\n        console.error('THREE.DirectGeometry: Faceless geometries are not supported.');\n      }\n\n      for (var _i22 = 0; _i22 < faces.length; _i22++) {\n        var face = faces[_i22];\n        this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n        var vertexNormals = face.vertexNormals;\n\n        if (vertexNormals.length === 3) {\n          this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n        } else {\n          var normal = face.normal;\n          this.normals.push(normal, normal, normal);\n        }\n\n        var vertexColors = face.vertexColors;\n\n        if (vertexColors.length === 3) {\n          this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n        } else {\n          var color = face.color;\n          this.colors.push(color, color, color);\n        }\n\n        if (hasFaceVertexUv === true) {\n          var vertexUvs = faceVertexUvs[0][_i22];\n\n          if (vertexUvs !== undefined) {\n            this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n          } else {\n            console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', _i22);\n            this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n          }\n        }\n\n        if (hasFaceVertexUv2 === true) {\n          var _vertexUvs = faceVertexUvs[1][_i22];\n\n          if (_vertexUvs !== undefined) {\n            this.uvs2.push(_vertexUvs[0], _vertexUvs[1], _vertexUvs[2]);\n          } else {\n            console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', _i22);\n            this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n          }\n        } // morphs\n\n\n        for (var j = 0; j < morphTargetsLength; j++) {\n          var morphTarget = morphTargets[j].vertices;\n          morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n        }\n\n        for (var _j7 = 0; _j7 < morphNormalsLength; _j7++) {\n          var morphNormal = morphNormals[_j7].vertexNormals[_i22];\n\n          morphTargetsNormal[_j7].data.push(morphNormal.a, morphNormal.b, morphNormal.c);\n        } // skins\n\n\n        if (hasSkinIndices) {\n          this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n        }\n\n        if (hasSkinWeights) {\n          this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n        }\n      }\n\n      this.computeGroups(geometry);\n      this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n      this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n      this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n      this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n      this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n      if (geometry.boundingSphere !== null) {\n        this.boundingSphere = geometry.boundingSphere.clone();\n      }\n\n      if (geometry.boundingBox !== null) {\n        this.boundingBox = geometry.boundingBox.clone();\n      }\n\n      return this;\n    }\n  }]);\n\n  return DirectGeometry;\n}();\n\nvar Face3 = /*#__PURE__*/function () {\n  function Face3(a, b, c, normal, color) {\n    var materialIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n    _classCallCheck(this, Face3);\n\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = normal && normal.isVector3 ? normal : new Vector3();\n    this.vertexNormals = Array.isArray(normal) ? normal : [];\n    this.color = color && color.isColor ? color : new Color();\n    this.vertexColors = Array.isArray(color) ? color : [];\n    this.materialIndex = materialIndex;\n  }\n\n  _createClass(Face3, [{\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      this.a = source.a;\n      this.b = source.b;\n      this.c = source.c;\n      this.normal.copy(source.normal);\n      this.color.copy(source.color);\n      this.materialIndex = source.materialIndex;\n\n      for (var i = 0, il = source.vertexNormals.length; i < il; i++) {\n        this.vertexNormals[i] = source.vertexNormals[i].clone();\n      }\n\n      for (var _i23 = 0, _il15 = source.vertexColors.length; _i23 < _il15; _i23++) {\n        this.vertexColors[_i23] = source.vertexColors[_i23].clone();\n      }\n\n      return this;\n    }\n  }]);\n\n  return Face3;\n}();\n\nexport { Face3, Geometry };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/deprecated/Geometry.js"],"names":["Matrix4","Object3D","Vector3","EventDispatcher","MathUtils","Matrix3","Color","Box3","Sphere","BufferGeometry","BufferAttribute","Float32BufferAttribute","Vector2","_m1","_obj","_offset","Geometry","isGeometry","uuid","generateUUID","name","type","vertices","colors","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","matrix","normalMatrix","getNormalMatrix","i","il","length","vertex","applyMatrix4","face","normal","applyMatrix3","normalize","j","jl","vertexNormals","computeBoundingBox","computeBoundingSphere","angle","makeRotationX","makeRotationY","makeRotationZ","x","y","z","makeTranslation","makeScale","vector","lookAt","updateMatrix","geometry","scope","index","undefined","attributes","position","console","error","color","uv","uv2","count","push","fromBufferAttribute","addFace","a","b","c","materialIndex","vertexColors","clone","Face3","groups","group","start","getX","computeFaceNormals","getCenter","negate","translate","center","radius","s","set","cb","ab","f","fl","vA","vB","vC","subVectors","cross","copy","areaWeighted","Array","v","vl","add","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","computeVertexNormals","setFromPoints","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceVertexNormals","faceVertexColors","faceCopy","faceVertexUvs2","uvs2","uvsCopy","k","kl","mesh","isMesh","matrixAutoUpdate","merge","precisionPoints","verticesMap","unique","changes","precision","Math","pow","key","round","faceIndicesToRemove","indices","n","idx","splice","diff","points","l","point","_id","materialIndexSort","sort","uvs1","newUvs1","newUvs2","id","data","metadata","version","generator","parameters","normals","normalsHash","colorsHash","uvs","uvsHash","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","r","g","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","value","enabled","hash","toString","getHex","source","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","DirectGeometry","fromGeometry","buffergeometry","positions","Float32Array","setAttribute","copyVector3sArray","copyColorsArray","copyVector2sArray","array","attribute","morphAttributes","copyVector4sArray","warn","dispatchEvent","createBufferGeometryFromObject","object","isPoints","isLine","copyArray","toBufferGeometry","hasFaceVertexUv2","morphTargetsLength","morphTargetsPosition","morphNormalsLength","morphTargetsNormal","hasSkinIndices","hasSkinWeights","vertexUvs","computeGroups","isVector3","isArray","isColor","constructor"],"mappings":"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","sourcesContent":["import { Matrix4, Object3D, Vector3, EventDispatcher, MathUtils, Matrix3, Color, Box3, Sphere, BufferGeometry, BufferAttribute, Float32BufferAttribute, Vector2 } from 'three';\n\nconst _m1 = new Matrix4();\n\nconst _obj = new Object3D();\n\nconst _offset = new Vector3();\n\nclass Geometry extends EventDispatcher {\n  constructor() {\n    super();\n    this.isGeometry = true;\n    this.uuid = MathUtils.generateUUID();\n    this.name = '';\n    this.type = 'Geometry';\n    this.vertices = [];\n    this.colors = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n    this.morphTargets = [];\n    this.morphNormals = [];\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.lineDistances = [];\n    this.boundingBox = null;\n    this.boundingSphere = null; // update flags\n\n    this.elementsNeedUpdate = false;\n    this.verticesNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.lineDistancesNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  }\n\n  applyMatrix4(matrix) {\n    const normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\n    for (let i = 0, il = this.vertices.length; i < il; i++) {\n      const vertex = this.vertices[i];\n      vertex.applyMatrix4(matrix);\n    }\n\n    for (let i = 0, il = this.faces.length; i < il; i++) {\n      const face = this.faces[i];\n      face.normal.applyMatrix3(normalMatrix).normalize();\n\n      for (let j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n        face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n      }\n    }\n\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n\n    this.verticesNeedUpdate = true;\n    this.normalsNeedUpdate = true;\n    return this;\n  }\n\n  rotateX(angle) {\n    // rotate geometry around world x-axis\n    _m1.makeRotationX(angle);\n\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  rotateY(angle) {\n    // rotate geometry around world y-axis\n    _m1.makeRotationY(angle);\n\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  rotateZ(angle) {\n    // rotate geometry around world z-axis\n    _m1.makeRotationZ(angle);\n\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  translate(x, y, z) {\n    // translate geometry\n    _m1.makeTranslation(x, y, z);\n\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  scale(x, y, z) {\n    // scale geometry\n    _m1.makeScale(x, y, z);\n\n    this.applyMatrix4(_m1);\n    return this;\n  }\n\n  lookAt(vector) {\n    _obj.lookAt(vector);\n\n    _obj.updateMatrix();\n\n    this.applyMatrix4(_obj.matrix);\n    return this;\n  }\n\n  fromBufferGeometry(geometry) {\n    const scope = this;\n    const index = geometry.index !== null ? geometry.index : undefined;\n    const attributes = geometry.attributes;\n\n    if (attributes.position === undefined) {\n      console.error('THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.');\n      return this;\n    }\n\n    const position = attributes.position;\n    const normal = attributes.normal;\n    const color = attributes.color;\n    const uv = attributes.uv;\n    const uv2 = attributes.uv2;\n    if (uv2 !== undefined) this.faceVertexUvs[1] = [];\n\n    for (let i = 0; i < position.count; i++) {\n      scope.vertices.push(new Vector3().fromBufferAttribute(position, i));\n\n      if (color !== undefined) {\n        scope.colors.push(new Color().fromBufferAttribute(color, i));\n      }\n    }\n\n    function addFace(a, b, c, materialIndex) {\n      const vertexColors = color === undefined ? [] : [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()];\n      const vertexNormals = normal === undefined ? [] : [new Vector3().fromBufferAttribute(normal, a), new Vector3().fromBufferAttribute(normal, b), new Vector3().fromBufferAttribute(normal, c)];\n      const face = new Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n      scope.faces.push(face);\n\n      if (uv !== undefined) {\n        scope.faceVertexUvs[0].push([new Vector2().fromBufferAttribute(uv, a), new Vector2().fromBufferAttribute(uv, b), new Vector2().fromBufferAttribute(uv, c)]);\n      }\n\n      if (uv2 !== undefined) {\n        scope.faceVertexUvs[1].push([new Vector2().fromBufferAttribute(uv2, a), new Vector2().fromBufferAttribute(uv2, b), new Vector2().fromBufferAttribute(uv2, c)]);\n      }\n    }\n\n    const groups = geometry.groups;\n\n    if (groups.length > 0) {\n      for (let i = 0; i < groups.length; i++) {\n        const group = groups[i];\n        const start = group.start;\n        const count = group.count;\n\n        for (let j = start, jl = start + count; j < jl; j += 3) {\n          if (index !== undefined) {\n            addFace(index.getX(j), index.getX(j + 1), index.getX(j + 2), group.materialIndex);\n          } else {\n            addFace(j, j + 1, j + 2, group.materialIndex);\n          }\n        }\n      }\n    } else {\n      if (index !== undefined) {\n        for (let i = 0; i < index.count; i += 3) {\n          addFace(index.getX(i), index.getX(i + 1), index.getX(i + 2));\n        }\n      } else {\n        for (let i = 0; i < position.count; i += 3) {\n          addFace(i, i + 1, i + 2);\n        }\n      }\n    }\n\n    this.computeFaceNormals();\n\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    return this;\n  }\n\n  center() {\n    this.computeBoundingBox();\n    this.boundingBox.getCenter(_offset).negate();\n    this.translate(_offset.x, _offset.y, _offset.z);\n    return this;\n  }\n\n  normalize() {\n    this.computeBoundingSphere();\n    const center = this.boundingSphere.center;\n    const radius = this.boundingSphere.radius;\n    const s = radius === 0 ? 1 : 1.0 / radius;\n    const matrix = new Matrix4();\n    matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n    this.applyMatrix4(matrix);\n    return this;\n  }\n\n  computeFaceNormals() {\n    const cb = new Vector3(),\n          ab = new Vector3();\n\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      const vA = this.vertices[face.a];\n      const vB = this.vertices[face.b];\n      const vC = this.vertices[face.c];\n      cb.subVectors(vC, vB);\n      ab.subVectors(vA, vB);\n      cb.cross(ab);\n      cb.normalize();\n      face.normal.copy(cb);\n    }\n  }\n\n  computeVertexNormals(areaWeighted = true) {\n    const vertices = new Array(this.vertices.length);\n\n    for (let v = 0, vl = this.vertices.length; v < vl; v++) {\n      vertices[v] = new Vector3();\n    }\n\n    if (areaWeighted) {\n      // vertex normals weighted by triangle areas\n      // http://www.iquilezles.org/www/articles/normals/normals.htm\n      const cb = new Vector3(),\n            ab = new Vector3();\n\n      for (let f = 0, fl = this.faces.length; f < fl; f++) {\n        const face = this.faces[f];\n        const vA = this.vertices[face.a];\n        const vB = this.vertices[face.b];\n        const vC = this.vertices[face.c];\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        vertices[face.a].add(cb);\n        vertices[face.b].add(cb);\n        vertices[face.c].add(cb);\n      }\n    } else {\n      this.computeFaceNormals();\n\n      for (let f = 0, fl = this.faces.length; f < fl; f++) {\n        const face = this.faces[f];\n        vertices[face.a].add(face.normal);\n        vertices[face.b].add(face.normal);\n        vertices[face.c].add(face.normal);\n      }\n    }\n\n    for (let v = 0, vl = this.vertices.length; v < vl; v++) {\n      vertices[v].normalize();\n    }\n\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      const vertexNormals = face.vertexNormals;\n\n      if (vertexNormals.length === 3) {\n        vertexNormals[0].copy(vertices[face.a]);\n        vertexNormals[1].copy(vertices[face.b]);\n        vertexNormals[2].copy(vertices[face.c]);\n      } else {\n        vertexNormals[0] = vertices[face.a].clone();\n        vertexNormals[1] = vertices[face.b].clone();\n        vertexNormals[2] = vertices[face.c].clone();\n      }\n    }\n\n    if (this.faces.length > 0) {\n      this.normalsNeedUpdate = true;\n    }\n  }\n\n  computeFlatVertexNormals() {\n    this.computeFaceNormals();\n\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      const vertexNormals = face.vertexNormals;\n\n      if (vertexNormals.length === 3) {\n        vertexNormals[0].copy(face.normal);\n        vertexNormals[1].copy(face.normal);\n        vertexNormals[2].copy(face.normal);\n      } else {\n        vertexNormals[0] = face.normal.clone();\n        vertexNormals[1] = face.normal.clone();\n        vertexNormals[2] = face.normal.clone();\n      }\n    }\n\n    if (this.faces.length > 0) {\n      this.normalsNeedUpdate = true;\n    }\n  }\n\n  computeMorphNormals() {\n    // save original normals\n    // - create temp variables on first access\n    //   otherwise just copy (for faster repeated calls)\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n\n      if (!face.__originalFaceNormal) {\n        face.__originalFaceNormal = face.normal.clone();\n      } else {\n        face.__originalFaceNormal.copy(face.normal);\n      }\n\n      if (!face.__originalVertexNormals) face.__originalVertexNormals = [];\n\n      for (let i = 0, il = face.vertexNormals.length; i < il; i++) {\n        if (!face.__originalVertexNormals[i]) {\n          face.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n        } else {\n          face.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n        }\n      }\n    } // use temp geometry to compute face and vertex normals for each morph\n\n\n    const tmpGeo = new Geometry();\n    tmpGeo.faces = this.faces;\n\n    for (let i = 0, il = this.morphTargets.length; i < il; i++) {\n      // create on first access\n      if (!this.morphNormals[i]) {\n        this.morphNormals[i] = {};\n        this.morphNormals[i].faceNormals = [];\n        this.morphNormals[i].vertexNormals = [];\n        const dstNormalsFace = this.morphNormals[i].faceNormals;\n        const dstNormalsVertex = this.morphNormals[i].vertexNormals;\n\n        for (let f = 0, fl = this.faces.length; f < fl; f++) {\n          const faceNormal = new Vector3();\n          const vertexNormals = {\n            a: new Vector3(),\n            b: new Vector3(),\n            c: new Vector3()\n          };\n          dstNormalsFace.push(faceNormal);\n          dstNormalsVertex.push(vertexNormals);\n        }\n      }\n\n      const morphNormals = this.morphNormals[i]; // set vertices to morph target\n\n      tmpGeo.vertices = this.morphTargets[i].vertices; // compute morph normals\n\n      tmpGeo.computeFaceNormals();\n      tmpGeo.computeVertexNormals(); // store morph normals\n\n      for (let f = 0, fl = this.faces.length; f < fl; f++) {\n        const face = this.faces[f];\n        const faceNormal = morphNormals.faceNormals[f];\n        const vertexNormals = morphNormals.vertexNormals[f];\n        faceNormal.copy(face.normal);\n        vertexNormals.a.copy(face.vertexNormals[0]);\n        vertexNormals.b.copy(face.vertexNormals[1]);\n        vertexNormals.c.copy(face.vertexNormals[2]);\n      }\n    } // restore original normals\n\n\n    for (let f = 0, fl = this.faces.length; f < fl; f++) {\n      const face = this.faces[f];\n      face.normal = face.__originalFaceNormal;\n      face.vertexNormals = face.__originalVertexNormals;\n    }\n  }\n\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new Box3();\n    }\n\n    this.boundingBox.setFromPoints(this.vertices);\n  }\n\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new Sphere();\n    }\n\n    this.boundingSphere.setFromPoints(this.vertices);\n  }\n\n  merge(geometry, matrix, materialIndexOffset = 0) {\n    if (!(geometry && geometry.isGeometry)) {\n      console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);\n      return;\n    }\n\n    let normalMatrix;\n    const vertexOffset = this.vertices.length,\n          vertices1 = this.vertices,\n          vertices2 = geometry.vertices,\n          faces1 = this.faces,\n          faces2 = geometry.faces,\n          colors1 = this.colors,\n          colors2 = geometry.colors;\n\n    if (matrix !== undefined) {\n      normalMatrix = new Matrix3().getNormalMatrix(matrix);\n    } // vertices\n\n\n    for (let i = 0, il = vertices2.length; i < il; i++) {\n      const vertex = vertices2[i];\n      const vertexCopy = vertex.clone();\n      if (matrix !== undefined) vertexCopy.applyMatrix4(matrix);\n      vertices1.push(vertexCopy);\n    } // colors\n\n\n    for (let i = 0, il = colors2.length; i < il; i++) {\n      colors1.push(colors2[i].clone());\n    } // faces\n\n\n    for (let i = 0, il = faces2.length; i < il; i++) {\n      const face = faces2[i];\n      let normal, color;\n      const faceVertexNormals = face.vertexNormals,\n            faceVertexColors = face.vertexColors;\n      const faceCopy = new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n      faceCopy.normal.copy(face.normal);\n\n      if (normalMatrix !== undefined) {\n        faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n      }\n\n      for (let j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n        normal = faceVertexNormals[j].clone();\n\n        if (normalMatrix !== undefined) {\n          normal.applyMatrix3(normalMatrix).normalize();\n        }\n\n        faceCopy.vertexNormals.push(normal);\n      }\n\n      faceCopy.color.copy(face.color);\n\n      for (let j = 0, jl = faceVertexColors.length; j < jl; j++) {\n        color = faceVertexColors[j];\n        faceCopy.vertexColors.push(color.clone());\n      }\n\n      faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n      faces1.push(faceCopy);\n    } // uvs\n\n\n    for (let i = 0, il = geometry.faceVertexUvs.length; i < il; i++) {\n      const faceVertexUvs2 = geometry.faceVertexUvs[i];\n      if (this.faceVertexUvs[i] === undefined) this.faceVertexUvs[i] = [];\n\n      for (let j = 0, jl = faceVertexUvs2.length; j < jl; j++) {\n        const uvs2 = faceVertexUvs2[j],\n              uvsCopy = [];\n\n        for (let k = 0, kl = uvs2.length; k < kl; k++) {\n          uvsCopy.push(uvs2[k].clone());\n        }\n\n        this.faceVertexUvs[i].push(uvsCopy);\n      }\n    }\n  }\n\n  mergeMesh(mesh) {\n    if (!(mesh && mesh.isMesh)) {\n      console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);\n      return;\n    }\n\n    if (mesh.matrixAutoUpdate) mesh.updateMatrix();\n    this.merge(mesh.geometry, mesh.matrix);\n  }\n  /*\n   * Checks for duplicate vertices with hashmap.\n   * Duplicated vertices are removed\n   * and faces' vertices are updated.\n   */\n\n\n  mergeVertices(precisionPoints = 4) {\n    const verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\n    const unique = [],\n          changes = [];\n    const precision = Math.pow(10, precisionPoints);\n\n    for (let i = 0, il = this.vertices.length; i < il; i++) {\n      const v = this.vertices[i];\n      const key = `${Math.round(v.x * precision)}_${Math.round(v.y * precision)}_${Math.round(v.z * precision)}`;\n\n      if (verticesMap[key] === undefined) {\n        verticesMap[key] = i;\n        unique.push(this.vertices[i]);\n        changes[i] = unique.length - 1;\n      } else {\n        //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n        changes[i] = changes[verticesMap[key]];\n      }\n    } // if faces are completely degenerate after merging vertices, we\n    // have to remove them from the geometry.\n\n\n    const faceIndicesToRemove = [];\n\n    for (let i = 0, il = this.faces.length; i < il; i++) {\n      const face = this.faces[i];\n      face.a = changes[face.a];\n      face.b = changes[face.b];\n      face.c = changes[face.c];\n      const indices = [face.a, face.b, face.c]; // if any duplicate vertices are found in a Face3\n      // we have to remove the face as nothing can be saved\n\n      for (let n = 0; n < 3; n++) {\n        if (indices[n] === indices[(n + 1) % 3]) {\n          faceIndicesToRemove.push(i);\n          break;\n        }\n      }\n    }\n\n    for (let i = faceIndicesToRemove.length - 1; i >= 0; i--) {\n      const idx = faceIndicesToRemove[i];\n      this.faces.splice(idx, 1);\n\n      for (let j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n        this.faceVertexUvs[j].splice(idx, 1);\n      }\n    } // Use unique set of vertices\n\n\n    const diff = this.vertices.length - unique.length;\n    this.vertices = unique;\n    return diff;\n  }\n\n  setFromPoints(points) {\n    this.vertices = [];\n\n    for (let i = 0, l = points.length; i < l; i++) {\n      const point = points[i];\n      this.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n    }\n\n    return this;\n  }\n\n  sortFacesByMaterialIndex() {\n    const faces = this.faces;\n    const length = faces.length; // tag faces\n\n    for (let i = 0; i < length; i++) {\n      faces[i]._id = i;\n    } // sort faces\n\n\n    function materialIndexSort(a, b) {\n      return a.materialIndex - b.materialIndex;\n    }\n\n    faces.sort(materialIndexSort); // sort uvs\n\n    const uvs1 = this.faceVertexUvs[0];\n    const uvs2 = this.faceVertexUvs[1];\n    let newUvs1, newUvs2;\n    if (uvs1 && uvs1.length === length) newUvs1 = [];\n    if (uvs2 && uvs2.length === length) newUvs2 = [];\n\n    for (let i = 0; i < length; i++) {\n      const id = faces[i]._id;\n      if (newUvs1) newUvs1.push(uvs1[id]);\n      if (newUvs2) newUvs2.push(uvs2[id]);\n    }\n\n    if (newUvs1) this.faceVertexUvs[0] = newUvs1;\n    if (newUvs2) this.faceVertexUvs[1] = newUvs2;\n  }\n\n  toJSON() {\n    const data = {\n      metadata: {\n        version: 4.5,\n        type: 'Geometry',\n        generator: 'Geometry.toJSON'\n      }\n    }; // standard Geometry serialization\n\n    data.uuid = this.uuid;\n    data.type = this.type;\n    if (this.name !== '') data.name = this.name;\n\n    if (this.parameters !== undefined) {\n      const parameters = this.parameters;\n\n      for (let key in parameters) {\n        if (parameters[key] !== undefined) data[key] = parameters[key];\n      }\n\n      return data;\n    }\n\n    const vertices = [];\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      const vertex = this.vertices[i];\n      vertices.push(vertex.x, vertex.y, vertex.z);\n    }\n\n    const faces = [];\n    const normals = [];\n    const normalsHash = {};\n    const colors = [];\n    const colorsHash = {};\n    const uvs = [];\n    const uvsHash = {};\n\n    for (let i = 0; i < this.faces.length; i++) {\n      const face = this.faces[i];\n      const hasMaterial = true;\n      const hasFaceUv = false; // deprecated\n\n      const hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;\n      const hasFaceNormal = face.normal.length() > 0;\n      const hasFaceVertexNormal = face.vertexNormals.length > 0;\n      const hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n      const hasFaceVertexColor = face.vertexColors.length > 0;\n      let faceType = 0;\n      faceType = setBit(faceType, 0, 0); // isQuad\n\n      faceType = setBit(faceType, 1, hasMaterial);\n      faceType = setBit(faceType, 2, hasFaceUv);\n      faceType = setBit(faceType, 3, hasFaceVertexUv);\n      faceType = setBit(faceType, 4, hasFaceNormal);\n      faceType = setBit(faceType, 5, hasFaceVertexNormal);\n      faceType = setBit(faceType, 6, hasFaceColor);\n      faceType = setBit(faceType, 7, hasFaceVertexColor);\n      faces.push(faceType);\n      faces.push(face.a, face.b, face.c);\n      faces.push(face.materialIndex);\n\n      if (hasFaceVertexUv) {\n        const faceVertexUvs = this.faceVertexUvs[0][i];\n        faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));\n      }\n\n      if (hasFaceNormal) {\n        faces.push(getNormalIndex(face.normal));\n      }\n\n      if (hasFaceVertexNormal) {\n        const vertexNormals = face.vertexNormals;\n        faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));\n      }\n\n      if (hasFaceColor) {\n        faces.push(getColorIndex(face.color));\n      }\n\n      if (hasFaceVertexColor) {\n        const vertexColors = face.vertexColors;\n        faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));\n      }\n    }\n\n    function setBit(value, position, enabled) {\n      return enabled ? value | 1 << position : value & ~(1 << position);\n    }\n\n    function getNormalIndex(normal) {\n      const hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n      if (normalsHash[hash] !== undefined) {\n        return normalsHash[hash];\n      }\n\n      normalsHash[hash] = normals.length / 3;\n      normals.push(normal.x, normal.y, normal.z);\n      return normalsHash[hash];\n    }\n\n    function getColorIndex(color) {\n      const hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n      if (colorsHash[hash] !== undefined) {\n        return colorsHash[hash];\n      }\n\n      colorsHash[hash] = colors.length;\n      colors.push(color.getHex());\n      return colorsHash[hash];\n    }\n\n    function getUvIndex(uv) {\n      const hash = uv.x.toString() + uv.y.toString();\n\n      if (uvsHash[hash] !== undefined) {\n        return uvsHash[hash];\n      }\n\n      uvsHash[hash] = uvs.length / 2;\n      uvs.push(uv.x, uv.y);\n      return uvsHash[hash];\n    }\n\n    data.data = {};\n    data.data.vertices = vertices;\n    data.data.normals = normals;\n    if (colors.length > 0) data.data.colors = colors;\n    if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n\n    data.data.faces = faces;\n    return data;\n  }\n\n  clone() {\n    /*\n    // Handle primitives\n    const parameters = this.parameters;\n    if ( parameters !== undefined ) {\n    const values = [];\n    for ( const key in parameters ) {\n    values.push( parameters[ key ] );\n    }\n    const geometry = Object.create( this.constructor.prototype );\n    this.constructor.apply( geometry, values );\n    return geometry;\n    }\n    return new this.constructor().copy( this );\n    */\n    return new Geometry().copy(this);\n  }\n\n  copy(source) {\n    // reset\n    this.vertices = [];\n    this.colors = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n    this.morphTargets = [];\n    this.morphNormals = [];\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.lineDistances = [];\n    this.boundingBox = null;\n    this.boundingSphere = null; // name\n\n    this.name = source.name; // vertices\n\n    const vertices = source.vertices;\n\n    for (let i = 0, il = vertices.length; i < il; i++) {\n      this.vertices.push(vertices[i].clone());\n    } // colors\n\n\n    const colors = source.colors;\n\n    for (let i = 0, il = colors.length; i < il; i++) {\n      this.colors.push(colors[i].clone());\n    } // faces\n\n\n    const faces = source.faces;\n\n    for (let i = 0, il = faces.length; i < il; i++) {\n      this.faces.push(faces[i].clone());\n    } // face vertex uvs\n\n\n    for (let i = 0, il = source.faceVertexUvs.length; i < il; i++) {\n      const faceVertexUvs = source.faceVertexUvs[i];\n\n      if (this.faceVertexUvs[i] === undefined) {\n        this.faceVertexUvs[i] = [];\n      }\n\n      for (let j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n        const uvs = faceVertexUvs[j],\n              uvsCopy = [];\n\n        for (let k = 0, kl = uvs.length; k < kl; k++) {\n          const uv = uvs[k];\n          uvsCopy.push(uv.clone());\n        }\n\n        this.faceVertexUvs[i].push(uvsCopy);\n      }\n    } // morph targets\n\n\n    const morphTargets = source.morphTargets;\n\n    for (let i = 0, il = morphTargets.length; i < il; i++) {\n      const morphTarget = {};\n      morphTarget.name = morphTargets[i].name; // vertices\n\n      if (morphTargets[i].vertices !== undefined) {\n        morphTarget.vertices = [];\n\n        for (let j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {\n          morphTarget.vertices.push(morphTargets[i].vertices[j].clone());\n        }\n      } // normals\n\n\n      if (morphTargets[i].normals !== undefined) {\n        morphTarget.normals = [];\n\n        for (let j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {\n          morphTarget.normals.push(morphTargets[i].normals[j].clone());\n        }\n      }\n\n      this.morphTargets.push(morphTarget);\n    } // morph normals\n\n\n    const morphNormals = source.morphNormals;\n\n    for (let i = 0, il = morphNormals.length; i < il; i++) {\n      const morphNormal = {}; // vertex normals\n\n      if (morphNormals[i].vertexNormals !== undefined) {\n        morphNormal.vertexNormals = [];\n\n        for (let j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {\n          const srcVertexNormal = morphNormals[i].vertexNormals[j];\n          const destVertexNormal = {};\n          destVertexNormal.a = srcVertexNormal.a.clone();\n          destVertexNormal.b = srcVertexNormal.b.clone();\n          destVertexNormal.c = srcVertexNormal.c.clone();\n          morphNormal.vertexNormals.push(destVertexNormal);\n        }\n      } // face normals\n\n\n      if (morphNormals[i].faceNormals !== undefined) {\n        morphNormal.faceNormals = [];\n\n        for (let j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {\n          morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());\n        }\n      }\n\n      this.morphNormals.push(morphNormal);\n    } // skin weights\n\n\n    const skinWeights = source.skinWeights;\n\n    for (let i = 0, il = skinWeights.length; i < il; i++) {\n      this.skinWeights.push(skinWeights[i].clone());\n    } // skin indices\n\n\n    const skinIndices = source.skinIndices;\n\n    for (let i = 0, il = skinIndices.length; i < il; i++) {\n      this.skinIndices.push(skinIndices[i].clone());\n    } // line distances\n\n\n    const lineDistances = source.lineDistances;\n\n    for (let i = 0, il = lineDistances.length; i < il; i++) {\n      this.lineDistances.push(lineDistances[i]);\n    } // bounding box\n\n\n    const boundingBox = source.boundingBox;\n\n    if (boundingBox !== null) {\n      this.boundingBox = boundingBox.clone();\n    } // bounding sphere\n\n\n    const boundingSphere = source.boundingSphere;\n\n    if (boundingSphere !== null) {\n      this.boundingSphere = boundingSphere.clone();\n    } // update flags\n\n\n    this.elementsNeedUpdate = source.elementsNeedUpdate;\n    this.verticesNeedUpdate = source.verticesNeedUpdate;\n    this.uvsNeedUpdate = source.uvsNeedUpdate;\n    this.normalsNeedUpdate = source.normalsNeedUpdate;\n    this.colorsNeedUpdate = source.colorsNeedUpdate;\n    this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n    this.groupsNeedUpdate = source.groupsNeedUpdate;\n    return this;\n  }\n\n  toBufferGeometry() {\n    const geometry = new DirectGeometry().fromGeometry(this);\n    const buffergeometry = new BufferGeometry();\n    const positions = new Float32Array(geometry.vertices.length * 3);\n    buffergeometry.setAttribute('position', new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n\n    if (geometry.normals.length > 0) {\n      const normals = new Float32Array(geometry.normals.length * 3);\n      buffergeometry.setAttribute('normal', new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n    }\n\n    if (geometry.colors.length > 0) {\n      const colors = new Float32Array(geometry.colors.length * 3);\n      buffergeometry.setAttribute('color', new BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n    }\n\n    if (geometry.uvs.length > 0) {\n      const uvs = new Float32Array(geometry.uvs.length * 2);\n      buffergeometry.setAttribute('uv', new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n    }\n\n    if (geometry.uvs2.length > 0) {\n      const uvs2 = new Float32Array(geometry.uvs2.length * 2);\n      buffergeometry.setAttribute('uv2', new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n    } // groups\n\n\n    buffergeometry.groups = geometry.groups; // morphs\n\n    for (let name in geometry.morphTargets) {\n      const array = [];\n      const morphTargets = geometry.morphTargets[name];\n\n      for (let i = 0, l = morphTargets.length; i < l; i++) {\n        const morphTarget = morphTargets[i];\n        const attribute = new Float32BufferAttribute(morphTarget.data.length * 3, 3);\n        attribute.name = morphTarget.name;\n        array.push(attribute.copyVector3sArray(morphTarget.data));\n      }\n\n      buffergeometry.morphAttributes[name] = array;\n    } // skinning\n\n\n    if (geometry.skinIndices.length > 0) {\n      const skinIndices = new Float32BufferAttribute(geometry.skinIndices.length * 4, 4);\n      buffergeometry.setAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));\n    }\n\n    if (geometry.skinWeights.length > 0) {\n      const skinWeights = new Float32BufferAttribute(geometry.skinWeights.length * 4, 4);\n      buffergeometry.setAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));\n    } //\n\n\n    if (geometry.boundingSphere !== null) {\n      buffergeometry.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    if (geometry.boundingBox !== null) {\n      buffergeometry.boundingBox = geometry.boundingBox.clone();\n    }\n\n    return buffergeometry;\n  }\n\n  computeTangents() {\n    console.error('THREE.Geometry: .computeTangents() has been removed.');\n  }\n\n  computeLineDistances() {\n    console.error('THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.');\n  }\n\n  applyMatrix(matrix) {\n    console.warn('THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().');\n    return this.applyMatrix4(matrix);\n  }\n\n  dispose() {\n    this.dispatchEvent({\n      type: 'dispose'\n    });\n  }\n\n}\n\nGeometry.createBufferGeometryFromObject = object => {\n  let buffergeometry = new BufferGeometry();\n  const geometry = object.geometry;\n\n  if (object.isPoints || object.isLine) {\n    const positions = new Float32BufferAttribute(geometry.vertices.length * 3, 3);\n    const colors = new Float32BufferAttribute(geometry.colors.length * 3, 3);\n    buffergeometry.setAttribute('position', positions.copyVector3sArray(geometry.vertices));\n    buffergeometry.setAttribute('color', colors.copyColorsArray(geometry.colors));\n\n    if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n      const lineDistances = new Float32BufferAttribute(geometry.lineDistances.length, 1);\n      buffergeometry.setAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));\n    }\n\n    if (geometry.boundingSphere !== null) {\n      buffergeometry.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    if (geometry.boundingBox !== null) {\n      buffergeometry.boundingBox = geometry.boundingBox.clone();\n    }\n  } else if (object.isMesh) {\n    buffergeometry = geometry.toBufferGeometry();\n  }\n\n  return buffergeometry;\n};\n\nclass DirectGeometry {\n  constructor() {\n    this.vertices = [];\n    this.normals = [];\n    this.colors = [];\n    this.uvs = [];\n    this.uvs2 = [];\n    this.groups = [];\n    this.morphTargets = {};\n    this.skinWeights = [];\n    this.skinIndices = []; // this.lineDistances = [];\n\n    this.boundingBox = null;\n    this.boundingSphere = null; // update flags\n\n    this.verticesNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  }\n\n  computeGroups(geometry) {\n    const groups = [];\n    let group, i;\n    let materialIndex = undefined;\n    const faces = geometry.faces;\n\n    for (i = 0; i < faces.length; i++) {\n      const face = faces[i]; // materials\n\n      if (face.materialIndex !== materialIndex) {\n        materialIndex = face.materialIndex;\n\n        if (group !== undefined) {\n          group.count = i * 3 - group.start;\n          groups.push(group);\n        }\n\n        group = {\n          start: i * 3,\n          materialIndex\n        };\n      }\n    }\n\n    if (group !== undefined) {\n      group.count = i * 3 - group.start;\n      groups.push(group);\n    }\n\n    this.groups = groups;\n  }\n\n  fromGeometry(geometry) {\n    const faces = geometry.faces;\n    const vertices = geometry.vertices;\n    const faceVertexUvs = geometry.faceVertexUvs;\n    const hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n    const hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0; // morphs\n\n    const morphTargets = geometry.morphTargets;\n    const morphTargetsLength = morphTargets.length;\n    let morphTargetsPosition;\n\n    if (morphTargetsLength > 0) {\n      morphTargetsPosition = [];\n\n      for (let i = 0; i < morphTargetsLength; i++) {\n        morphTargetsPosition[i] = {\n          name: morphTargets[i].name,\n          data: []\n        };\n      }\n\n      this.morphTargets.position = morphTargetsPosition;\n    }\n\n    const morphNormals = geometry.morphNormals;\n    const morphNormalsLength = morphNormals.length;\n    let morphTargetsNormal;\n\n    if (morphNormalsLength > 0) {\n      morphTargetsNormal = [];\n\n      for (let i = 0; i < morphNormalsLength; i++) {\n        morphTargetsNormal[i] = {\n          name: morphNormals[i].name,\n          data: []\n        };\n      }\n\n      this.morphTargets.normal = morphTargetsNormal;\n    } // skins\n\n\n    const skinIndices = geometry.skinIndices;\n    const skinWeights = geometry.skinWeights;\n    const hasSkinIndices = skinIndices.length === vertices.length;\n    const hasSkinWeights = skinWeights.length === vertices.length; //\n\n    if (vertices.length > 0 && faces.length === 0) {\n      console.error('THREE.DirectGeometry: Faceless geometries are not supported.');\n    }\n\n    for (let i = 0; i < faces.length; i++) {\n      const face = faces[i];\n      this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n      const vertexNormals = face.vertexNormals;\n\n      if (vertexNormals.length === 3) {\n        this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n      } else {\n        const normal = face.normal;\n        this.normals.push(normal, normal, normal);\n      }\n\n      const vertexColors = face.vertexColors;\n\n      if (vertexColors.length === 3) {\n        this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n      } else {\n        const color = face.color;\n        this.colors.push(color, color, color);\n      }\n\n      if (hasFaceVertexUv === true) {\n        const vertexUvs = faceVertexUvs[0][i];\n\n        if (vertexUvs !== undefined) {\n          this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i);\n          this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n        }\n      }\n\n      if (hasFaceVertexUv2 === true) {\n        const vertexUvs = faceVertexUvs[1][i];\n\n        if (vertexUvs !== undefined) {\n          this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n        } else {\n          console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i);\n          this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n        }\n      } // morphs\n\n\n      for (let j = 0; j < morphTargetsLength; j++) {\n        const morphTarget = morphTargets[j].vertices;\n        morphTargetsPosition[j].data.push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n      }\n\n      for (let j = 0; j < morphNormalsLength; j++) {\n        const morphNormal = morphNormals[j].vertexNormals[i];\n        morphTargetsNormal[j].data.push(morphNormal.a, morphNormal.b, morphNormal.c);\n      } // skins\n\n\n      if (hasSkinIndices) {\n        this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n      }\n\n      if (hasSkinWeights) {\n        this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n      }\n    }\n\n    this.computeGroups(geometry);\n    this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n    this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n    this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n    this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n    this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n    if (geometry.boundingSphere !== null) {\n      this.boundingSphere = geometry.boundingSphere.clone();\n    }\n\n    if (geometry.boundingBox !== null) {\n      this.boundingBox = geometry.boundingBox.clone();\n    }\n\n    return this;\n  }\n\n}\n\nclass Face3 {\n  constructor(a, b, c, normal, color, materialIndex = 0) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = normal && normal.isVector3 ? normal : new Vector3();\n    this.vertexNormals = Array.isArray(normal) ? normal : [];\n    this.color = color && color.isColor ? color : new Color();\n    this.vertexColors = Array.isArray(color) ? color : [];\n    this.materialIndex = materialIndex;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  copy(source) {\n    this.a = source.a;\n    this.b = source.b;\n    this.c = source.c;\n    this.normal.copy(source.normal);\n    this.color.copy(source.color);\n    this.materialIndex = source.materialIndex;\n\n    for (let i = 0, il = source.vertexNormals.length; i < il; i++) {\n      this.vertexNormals[i] = source.vertexNormals[i].clone();\n    }\n\n    for (let i = 0, il = source.vertexColors.length; i < il; i++) {\n      this.vertexColors[i] = source.vertexColors[i].clone();\n    }\n\n    return this;\n  }\n\n}\n\nexport { Face3, Geometry };\n"]},"metadata":{},"sourceType":"module"}