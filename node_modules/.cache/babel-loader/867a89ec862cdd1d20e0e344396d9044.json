{"ast":null,"code":"import { Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4, BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute } from 'three';\n\nvar Lensflare = function Lensflare() {\n  Mesh.call(this, Lensflare.Geometry, new MeshBasicMaterial({\n    opacity: 0,\n    transparent: true\n  }));\n  this.type = 'Lensflare';\n  this.frustumCulled = false;\n  this.renderOrder = Infinity; //\n\n  var positionScreen = new Vector3();\n  var positionView = new Vector3(); // textures\n\n  var tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  tempMap.minFilter = NearestFilter;\n  tempMap.magFilter = NearestFilter;\n  tempMap.wrapS = ClampToEdgeWrapping;\n  tempMap.wrapT = ClampToEdgeWrapping;\n  var occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  occlusionMap.minFilter = NearestFilter;\n  occlusionMap.magFilter = NearestFilter;\n  occlusionMap.wrapS = ClampToEdgeWrapping;\n  occlusionMap.wrapT = ClampToEdgeWrapping; // material\n\n  var geometry = Lensflare.Geometry;\n  var material1a = new RawShaderMaterial({\n    uniforms: {\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'void main() {', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'void main() {', '\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );', '}'].join('\\n'),\n    depthTest: true,\n    depthWrite: false,\n    transparent: false\n  });\n  var material1b = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: tempMap\n      },\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'void main() {', '\tvUV = uv;', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'varying vec2 vUV;', 'void main() {', '\tgl_FragColor = texture2D( map, vUV );', '}'].join('\\n'),\n    depthTest: false,\n    depthWrite: false,\n    transparent: false\n  }); // the following object is used for occlusionMap generation\n\n  var mesh1 = new Mesh(geometry, material1a); //\n\n  var elements = [];\n  var shader = LensflareElement.Shader;\n  var material2 = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: null\n      },\n      occlusionMap: {\n        value: occlusionMap\n      },\n      color: {\n        value: new Color(0xffffff)\n      },\n      scale: {\n        value: new Vector2()\n      },\n      screenPosition: {\n        value: new Vector3()\n      }\n    },\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    blending: AdditiveBlending,\n    transparent: true,\n    depthWrite: false\n  });\n  var mesh2 = new Mesh(geometry, material2);\n\n  this.addElement = function (element) {\n    elements.push(element);\n  }; //\n\n\n  var scale = new Vector2();\n  var screenPositionPixels = new Vector2();\n  var validArea = new Box2();\n  var viewport = new Vector4();\n\n  this.onBeforeRender = function (renderer, scene, camera) {\n    renderer.getCurrentViewport(viewport);\n    var invAspect = viewport.w / viewport.z;\n    var halfViewportWidth = viewport.z / 2.0;\n    var halfViewportHeight = viewport.w / 2.0;\n    var size = 16 / viewport.w;\n    scale.set(size * invAspect, size);\n    validArea.min.set(viewport.x, viewport.y);\n    validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16)); // calculate position in screen space\n\n    positionView.setFromMatrixPosition(this.matrixWorld);\n    positionView.applyMatrix4(camera.matrixWorldInverse);\n    if (positionView.z > 0) return; // lensflare is behind the camera\n\n    positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix); // horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n    screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8; // screen cull\n\n    if (validArea.containsPoint(screenPositionPixels)) {\n      // save current RGB to temp texture\n      renderer.copyFramebufferToTexture(screenPositionPixels, tempMap); // render pink quad\n\n      var uniforms = material1a.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null); // copy result to occlusionMap\n\n      renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap); // restore graphics\n\n      var uniforms = material1b.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null); // render elements\n\n      var vecX = -positionScreen.x * 2;\n      var vecY = -positionScreen.y * 2;\n\n      for (var i = 0, l = elements.length; i < l; i++) {\n        var element = elements[i];\n        var uniforms = material2.uniforms;\n        uniforms['color'].value.copy(element.color);\n        uniforms['map'].value = element.texture;\n        uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n        uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n        var size = element.size / viewport.w;\n        var invAspect = viewport.w / viewport.z;\n        uniforms['scale'].value.set(size * invAspect, size);\n        material2.uniformsNeedUpdate = true;\n        renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n      }\n    }\n  };\n\n  this.dispose = function () {\n    material1a.dispose();\n    material1b.dispose();\n    material2.dispose();\n    tempMap.dispose();\n    occlusionMap.dispose();\n\n    for (var i = 0, l = elements.length; i < l; i++) {\n      elements[i].texture.dispose();\n    }\n  };\n};\n\nLensflare.prototype = Object.create(Mesh.prototype);\nLensflare.prototype.constructor = Lensflare;\nLensflare.prototype.isLensflare = true; //\n\nvar LensflareElement = function LensflareElement(texture, size, distance, color) {\n  this.texture = texture;\n  this.size = size || 1;\n  this.distance = distance || 0;\n  this.color = color || new Color(0xffffff);\n};\n\nLensflareElement.Shader = {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'uniform sampler2D occlusionMap;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvUV = uv;', '\tvec2 pos = position.xy;', '\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );', '\tvVisibility =        visibility.r / 9.0;', '\tvVisibility *= 1.0 - visibility.g / 9.0;', '\tvVisibility *=       visibility.b / 9.0;', '\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'uniform vec3 color;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvec4 texture = texture2D( map, vUV );', '\ttexture.a *= vVisibility;', '\tgl_FragColor = texture;', '\tgl_FragColor.rgb *= color;', '}'].join('\\n')\n};\n\nLensflare.Geometry = function () {\n  var geometry = new BufferGeometry();\n  var float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\n  var interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n  geometry.setIndex([0, 1, 2, 0, 2, 3]);\n  geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n  geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n  return geometry;\n}();\n\nexport { Lensflare, LensflareElement };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/objects/Lensflare.js"],"names":["Mesh","MeshBasicMaterial","Vector3","DataTexture","RGBFormat","NearestFilter","ClampToEdgeWrapping","RawShaderMaterial","Color","Vector2","AdditiveBlending","Box2","Vector4","BufferGeometry","InterleavedBuffer","InterleavedBufferAttribute","Lensflare","call","Geometry","opacity","transparent","type","frustumCulled","renderOrder","Infinity","positionScreen","positionView","tempMap","Uint8Array","minFilter","magFilter","wrapS","wrapT","occlusionMap","geometry","material1a","uniforms","scale","value","screenPosition","vertexShader","join","fragmentShader","depthTest","depthWrite","material1b","map","mesh1","elements","shader","LensflareElement","Shader","material2","color","blending","mesh2","addElement","element","push","screenPositionPixels","validArea","viewport","onBeforeRender","renderer","scene","camera","getCurrentViewport","invAspect","w","z","halfViewportWidth","halfViewportHeight","size","set","min","x","y","max","setFromMatrixPosition","matrixWorld","applyMatrix4","matrixWorldInverse","copy","projectionMatrix","containsPoint","copyFramebufferToTexture","renderBufferDirect","vecX","vecY","i","l","length","texture","distance","uniformsNeedUpdate","dispose","prototype","Object","create","constructor","isLensflare","float32Array","Float32Array","interleavedBuffer","setIndex","setAttribute"],"mappings":"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","sourcesContent":["import { Mesh, MeshBasicMaterial, Vector3, DataTexture, RGBFormat, NearestFilter, ClampToEdgeWrapping, RawShaderMaterial, Color, Vector2, AdditiveBlending, Box2, Vector4, BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute } from 'three';\n\nvar Lensflare = function () {\n  Mesh.call(this, Lensflare.Geometry, new MeshBasicMaterial({\n    opacity: 0,\n    transparent: true\n  }));\n  this.type = 'Lensflare';\n  this.frustumCulled = false;\n  this.renderOrder = Infinity; //\n\n  var positionScreen = new Vector3();\n  var positionView = new Vector3(); // textures\n\n  var tempMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  tempMap.minFilter = NearestFilter;\n  tempMap.magFilter = NearestFilter;\n  tempMap.wrapS = ClampToEdgeWrapping;\n  tempMap.wrapT = ClampToEdgeWrapping;\n  var occlusionMap = new DataTexture(new Uint8Array(16 * 16 * 3), 16, 16, RGBFormat);\n  occlusionMap.minFilter = NearestFilter;\n  occlusionMap.magFilter = NearestFilter;\n  occlusionMap.wrapS = ClampToEdgeWrapping;\n  occlusionMap.wrapT = ClampToEdgeWrapping; // material\n\n  var geometry = Lensflare.Geometry;\n  var material1a = new RawShaderMaterial({\n    uniforms: {\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'void main() {', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'void main() {', '\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 1.0 );', '}'].join('\\n'),\n    depthTest: true,\n    depthWrite: false,\n    transparent: false\n  });\n  var material1b = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: tempMap\n      },\n      scale: {\n        value: null\n      },\n      screenPosition: {\n        value: null\n      }\n    },\n    vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'void main() {', '\tvUV = uv;', '\tgl_Position = vec4( position.xy * scale + screenPosition.xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'varying vec2 vUV;', 'void main() {', '\tgl_FragColor = texture2D( map, vUV );', '}'].join('\\n'),\n    depthTest: false,\n    depthWrite: false,\n    transparent: false\n  }); // the following object is used for occlusionMap generation\n\n  var mesh1 = new Mesh(geometry, material1a); //\n\n  var elements = [];\n  var shader = LensflareElement.Shader;\n  var material2 = new RawShaderMaterial({\n    uniforms: {\n      map: {\n        value: null\n      },\n      occlusionMap: {\n        value: occlusionMap\n      },\n      color: {\n        value: new Color(0xffffff)\n      },\n      scale: {\n        value: new Vector2()\n      },\n      screenPosition: {\n        value: new Vector3()\n      }\n    },\n    vertexShader: shader.vertexShader,\n    fragmentShader: shader.fragmentShader,\n    blending: AdditiveBlending,\n    transparent: true,\n    depthWrite: false\n  });\n  var mesh2 = new Mesh(geometry, material2);\n\n  this.addElement = function (element) {\n    elements.push(element);\n  }; //\n\n\n  var scale = new Vector2();\n  var screenPositionPixels = new Vector2();\n  var validArea = new Box2();\n  var viewport = new Vector4();\n\n  this.onBeforeRender = function (renderer, scene, camera) {\n    renderer.getCurrentViewport(viewport);\n    var invAspect = viewport.w / viewport.z;\n    var halfViewportWidth = viewport.z / 2.0;\n    var halfViewportHeight = viewport.w / 2.0;\n    var size = 16 / viewport.w;\n    scale.set(size * invAspect, size);\n    validArea.min.set(viewport.x, viewport.y);\n    validArea.max.set(viewport.x + (viewport.z - 16), viewport.y + (viewport.w - 16)); // calculate position in screen space\n\n    positionView.setFromMatrixPosition(this.matrixWorld);\n    positionView.applyMatrix4(camera.matrixWorldInverse);\n    if (positionView.z > 0) return; // lensflare is behind the camera\n\n    positionScreen.copy(positionView).applyMatrix4(camera.projectionMatrix); // horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n    screenPositionPixels.x = viewport.x + positionScreen.x * halfViewportWidth + halfViewportWidth - 8;\n    screenPositionPixels.y = viewport.y + positionScreen.y * halfViewportHeight + halfViewportHeight - 8; // screen cull\n\n    if (validArea.containsPoint(screenPositionPixels)) {\n      // save current RGB to temp texture\n      renderer.copyFramebufferToTexture(screenPositionPixels, tempMap); // render pink quad\n\n      var uniforms = material1a.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1a, mesh1, null); // copy result to occlusionMap\n\n      renderer.copyFramebufferToTexture(screenPositionPixels, occlusionMap); // restore graphics\n\n      var uniforms = material1b.uniforms;\n      uniforms['scale'].value = scale;\n      uniforms['screenPosition'].value = positionScreen;\n      renderer.renderBufferDirect(camera, null, geometry, material1b, mesh1, null); // render elements\n\n      var vecX = -positionScreen.x * 2;\n      var vecY = -positionScreen.y * 2;\n\n      for (let i = 0, l = elements.length; i < l; i++) {\n        var element = elements[i];\n        var uniforms = material2.uniforms;\n        uniforms['color'].value.copy(element.color);\n        uniforms['map'].value = element.texture;\n        uniforms['screenPosition'].value.x = positionScreen.x + vecX * element.distance;\n        uniforms['screenPosition'].value.y = positionScreen.y + vecY * element.distance;\n        var size = element.size / viewport.w;\n        var invAspect = viewport.w / viewport.z;\n        uniforms['scale'].value.set(size * invAspect, size);\n        material2.uniformsNeedUpdate = true;\n        renderer.renderBufferDirect(camera, null, geometry, material2, mesh2, null);\n      }\n    }\n  };\n\n  this.dispose = function () {\n    material1a.dispose();\n    material1b.dispose();\n    material2.dispose();\n    tempMap.dispose();\n    occlusionMap.dispose();\n\n    for (let i = 0, l = elements.length; i < l; i++) {\n      elements[i].texture.dispose();\n    }\n  };\n};\n\nLensflare.prototype = Object.create(Mesh.prototype);\nLensflare.prototype.constructor = Lensflare;\nLensflare.prototype.isLensflare = true; //\n\nvar LensflareElement = function (texture, size, distance, color) {\n  this.texture = texture;\n  this.size = size || 1;\n  this.distance = distance || 0;\n  this.color = color || new Color(0xffffff);\n};\n\nLensflareElement.Shader = {\n  uniforms: {\n    map: {\n      value: null\n    },\n    occlusionMap: {\n      value: null\n    },\n    color: {\n      value: null\n    },\n    scale: {\n      value: null\n    },\n    screenPosition: {\n      value: null\n    }\n  },\n  vertexShader: ['precision highp float;', 'uniform vec3 screenPosition;', 'uniform vec2 scale;', 'uniform sampler2D occlusionMap;', 'attribute vec3 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvUV = uv;', '\tvec2 pos = position.xy;', '\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );', '\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );', '\tvVisibility =        visibility.r / 9.0;', '\tvVisibility *= 1.0 - visibility.g / 9.0;', '\tvVisibility *=       visibility.b / 9.0;', '\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['precision highp float;', 'uniform sampler2D map;', 'uniform vec3 color;', 'varying vec2 vUV;', 'varying float vVisibility;', 'void main() {', '\tvec4 texture = texture2D( map, vUV );', '\ttexture.a *= vVisibility;', '\tgl_FragColor = texture;', '\tgl_FragColor.rgb *= color;', '}'].join('\\n')\n};\n\nLensflare.Geometry = function () {\n  var geometry = new BufferGeometry();\n  var float32Array = new Float32Array([-1, -1, 0, 0, 0, 1, -1, 0, 1, 0, 1, 1, 0, 1, 1, -1, 1, 0, 0, 1]);\n  var interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n  geometry.setIndex([0, 1, 2, 0, 2, 3]);\n  geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n  geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n  return geometry;\n}();\n\nexport { Lensflare, LensflareElement };\n"]},"metadata":{},"sourceType":"module"}