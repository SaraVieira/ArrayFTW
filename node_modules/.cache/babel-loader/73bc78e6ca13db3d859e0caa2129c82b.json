{"ast":null,"code":"import { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, LinearFilter, RGBAFormat, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from '../shaders/SSRShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SSRPass = function SSRPass(_ref) {\n  var renderer = _ref.renderer,\n      scene = _ref.scene,\n      camera = _ref.camera,\n      width = _ref.width,\n      height = _ref.height,\n      selects = _ref.selects,\n      encoding = _ref.encoding,\n      _ref$isPerspectiveCam = _ref.isPerspectiveCamera,\n      isPerspectiveCamera = _ref$isPerspectiveCam === void 0 ? true : _ref$isPerspectiveCam,\n      _ref$isBouncing = _ref.isBouncing,\n      isBouncing = _ref$isBouncing === void 0 ? false : _ref$isBouncing,\n      _ref$morphTargets = _ref.morphTargets,\n      morphTargets = _ref$morphTargets === void 0 ? false : _ref$morphTargets,\n      groundReflector = _ref.groundReflector;\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.renderer = renderer;\n  this.scene = scene;\n  this.camera = camera;\n  this.groundReflector = groundReflector;\n  this.opacity = SSRShader.uniforms.opacity.value;\n  this.output = 0;\n  this.maxDistance = SSRShader.uniforms.maxDistance.value;\n  this.surfDist = SSRShader.uniforms.surfDist.value;\n  this.encoding = encoding;\n  this.tempColor = new Color();\n  this._selects = selects;\n  this.isSelective = Array.isArray(this._selects);\n  Object.defineProperty(this, 'selects', {\n    get: function get() {\n      return this._selects;\n    },\n    set: function set(val) {\n      if (this._selects === val) return;\n      this._selects = val;\n\n      if (Array.isArray(val)) {\n        this.isSelective = true;\n        this.ssrMaterial.defines.isSelective = true;\n        this.ssrMaterial.needsUpdate = true;\n      } else {\n        this.isSelective = false;\n        this.ssrMaterial.defines.isSelective = false;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    }\n  });\n  this._isBouncing = isBouncing; ///todo: don't need defineProperty\n\n  Object.defineProperty(this, 'isBouncing', {\n    get: function get() {\n      return this._isBouncing;\n    },\n    set: function set(val) {\n      if (this._isBouncing === val) return;\n      this._isBouncing = val;\n\n      if (val) {\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n      } else {\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n      }\n    }\n  });\n  this.isBlur = true;\n  this._isDistanceAttenuation = SSRShader.defines.isDistanceAttenuation;\n  Object.defineProperty(this, 'isDistanceAttenuation', {\n    get: function get() {\n      return this._isDistanceAttenuation;\n    },\n    set: function set(val) {\n      if (this._isDistanceAttenuation === val) return;\n      this._isDistanceAttenuation = val;\n      this.ssrMaterial.defines.isDistanceAttenuation = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n  });\n  this._isFresnel = SSRShader.defines.isFresnel;\n  Object.defineProperty(this, 'isFresnel', {\n    get: function get() {\n      return this._isFresnel;\n    },\n    set: function set(val) {\n      if (this._isFresnel === val) return;\n      this._isFresnel = val;\n      this.ssrMaterial.defines.isFresnel = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n  });\n  this._isInfiniteThick = SSRShader.defines.isInfiniteThick;\n  Object.defineProperty(this, 'isInfiniteThick', {\n    get: function get() {\n      return this._isInfiniteThick;\n    },\n    set: function set(val) {\n      if (this._isInfiniteThick === val) return;\n      this._isInfiniteThick = val;\n      this.ssrMaterial.defines.isInfiniteThick = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n  });\n  this.thickTolerance = SSRShader.uniforms.thickTolerance.value; // beauty render target with depth buffer\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  depthTexture.minFilter = NearestFilter;\n  depthTexture.maxFilter = NearestFilter;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture,\n    depthBuffer: true\n  }); //for bouncing\n\n  this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    type: HalfFloatType\n  }); // metalness render target\n  // if (this.isSelective) {\n\n  this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  }); // }\n  // ssr render target\n\n  this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssrRenderTarget.clone();\n  this.blurRenderTarget2 = this.ssrRenderTarget.clone(); // this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n  // ssr material\n\n  if (SSRShader === undefined) {\n    console.error('THREE.SSRPass: The pass relies on SSRShader.');\n  }\n\n  this.ssrMaterial = new ShaderMaterial({\n    defines: Object.assign({\n      MAX_STEP: Math.sqrt(window.innerWidth * window.innerWidth + window.innerHeight * window.innerHeight)\n    }, SSRShader.defines),\n    uniforms: UniformsUtils.clone(SSRShader.uniforms),\n    vertexShader: SSRShader.vertexShader,\n    fragmentShader: SSRShader.fragmentShader,\n    blending: NoBlending\n  });\n\n  if (!isPerspectiveCamera) {\n    this.ssrMaterial.defines.isPerspectiveCamera = isPerspectiveCamera;\n    this.ssrMaterial.needsUpdate = true;\n  }\n\n  this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssrMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture; // if (this.isSelective) {\n\n  this.ssrMaterial.defines.isSelective = this.isSelective;\n  this.ssrMaterial.needsUpdate = true;\n  this.ssrMaterial.uniforms['tMetalness'].value = this.metalnessRenderTarget.texture; // }\n\n  this.ssrMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.ssrMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssrMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\n  this.ssrMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial({\n    morphTargets: morphTargets\n  });\n  this.normalMaterial.blending = NoBlending; // if (this.isSelective) {\n  // metalnessOn material\n\n  this.metalnessOnMaterial = new MeshBasicMaterial({\n    color: 'white'\n  }); // metalnessOff material\n\n  this.metalnessOffMaterial = new MeshBasicMaterial({\n    color: 'black'\n  }); // }\n  // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSRBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    vertexShader: SSRBlurShader.vertexShader,\n    fragmentShader: SSRBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // blur material 2\n\n  this.blurMaterial2 = new ShaderMaterial({\n    defines: Object.assign({}, SSRBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    vertexShader: SSRBlurShader.vertexShader,\n    fragmentShader: SSRBlurShader.fragmentShader\n  });\n  this.blurMaterial2.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n  this.blurMaterial2.uniforms['resolution'].value.set(this.width, this.height); // // blur material 3\n  // this.blurMaterial3 = new ShaderMaterial({\n  //   defines: Object.assign({}, SSRBlurShader.defines),\n  //   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n  //   vertexShader: SSRBlurShader.vertexShader,\n  //   fragmentShader: SSRBlurShader.fragmentShader\n  // });\n  // this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n  // this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n  // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSRDepthShader.defines),\n    uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n    vertexShader: SSRDepthShader.vertexShader,\n    fragmentShader: SSRDepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: SrcAlphaFactor,\n    blendDst: OneMinusSrcAlphaFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: SrcAlphaFactor,\n    blendDstAlpha: OneMinusSrcAlphaFactor,\n    blendEquationAlpha: AddEquation // premultipliedAlpha:true,\n\n  });\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\n\nSSRPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSRPass,\n  dispose: function dispose() {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose(); // if (this.isSelective)\n\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose(); // this.blurRenderTarget3.dispose();\n    // dispose materials\n\n    this.normalMaterial.dispose(); // if (this.isSelective) {\n\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose(); // }\n\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function render(renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty and depth\n    if (this.encoding) this.beautyRenderTarget.texture.encoding = this.encoding;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n\n    if (this.groundReflector) {\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector) this.groundReflector.visible = false; // render normals\n\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0); // render metalnesses\n\n    if (this.isSelective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    } // render SSR\n\n\n    this.ssrMaterial.uniforms['opacity'].value = this.opacity;\n    this.ssrMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\n    this.ssrMaterial.uniforms['thickTolerance'].value = this.thickTolerance;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget); // render blur\n\n    if (this.isBlur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2); // this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n    } // output result to screen\n\n\n    switch (this.output) {\n      case SSRPass.OUTPUT.Default:\n        if (this.isBouncing) {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n\n        break;\n\n      case SSRPass.OUTPUT.SSR:\n        if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n\n        if (this.isBouncing) {\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n\n        break;\n\n      case SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSRPass: Unknown output type.');\n    }\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderMetalness: function renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    var _this = this;\n\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.traverseVisible(function (child) {\n      child._SSRPassMaterialBack = child.material;\n\n      if (_this._selects.includes(child)) {\n        child.material = _this.metalnessOnMaterial;\n      } else {\n        child.material = _this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible(function (child) {\n      child.material = child._SSRPassMaterialBack;\n    }); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height); // if (this.isSelective)\n\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height); // this.blurRenderTarget3.setSize(width, height);\n\n    this.ssrMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n    this.blurMaterial2.uniforms['resolution'].value.set(width, height);\n  }\n});\nSSRPass.OUTPUT = {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n};\nexport { SSRPass };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/postprocessing/SSRPass.js"],"names":["Color","DepthTexture","UnsignedShortType","NearestFilter","WebGLRenderTarget","LinearFilter","RGBAFormat","HalfFloatType","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","MeshBasicMaterial","SrcAlphaFactor","OneMinusSrcAlphaFactor","AddEquation","NormalBlending","FullScreenQuad","Pass","SSRShader","SSRBlurShader","SSRDepthShader","CopyShader","SSRPass","renderer","scene","camera","width","height","selects","encoding","isPerspectiveCamera","isBouncing","morphTargets","groundReflector","undefined","clear","opacity","uniforms","value","output","maxDistance","surfDist","tempColor","_selects","isSelective","Array","isArray","Object","defineProperty","get","set","val","ssrMaterial","defines","needsUpdate","_isBouncing","prevRenderTarget","texture","beautyRenderTarget","isBlur","_isDistanceAttenuation","isDistanceAttenuation","_isFresnel","isFresnel","_isInfiniteThick","isInfiniteThick","thickTolerance","depthTexture","type","minFilter","maxFilter","magFilter","format","depthBuffer","normalRenderTarget","metalnessRenderTarget","ssrRenderTarget","blurRenderTarget","clone","blurRenderTarget2","console","error","assign","MAX_STEP","Math","sqrt","window","innerWidth","innerHeight","vertexShader","fragmentShader","blending","near","far","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","metalnessOnMaterial","color","metalnessOffMaterial","blurMaterial","blurMaterial2","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","prototype","create","constructor","dispose","render","writeBuffer","setRenderTarget","doRender","visible","renderOverride","renderMetalness","renderPass","OUTPUT","Default","renderToScreen","SSR","Beauty","Depth","Normal","Metalness","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","traverseVisible","child","_SSRPassMaterialBack","includes","setSize"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,YAAhB,EAA8BC,iBAA9B,EAAiDC,aAAjD,EAAgEC,iBAAhE,EAAmFC,YAAnF,EAAiGC,UAAjG,EAA6GC,aAA7G,EAA4HC,cAA5H,EAA4IC,aAA5I,EAA2JC,UAA3J,EAAuKC,kBAAvK,EAA2LC,iBAA3L,EAA8MC,cAA9M,EAA8NC,sBAA9N,EAAsPC,WAAtP,EAAmQC,cAAnQ,QAAyR,OAAzR;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,WAArC;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,cAAnC,QAAyD,yBAAzD;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,IAAIC,OAAO,GAAG,SAAVA,OAAU,OAYX;AAAA,MAXDC,QAWC,QAXDA,QAWC;AAAA,MAVDC,KAUC,QAVDA,KAUC;AAAA,MATDC,MASC,QATDA,MASC;AAAA,MARDC,KAQC,QARDA,KAQC;AAAA,MAPDC,MAOC,QAPDA,MAOC;AAAA,MANDC,OAMC,QANDA,OAMC;AAAA,MALDC,QAKC,QALDA,QAKC;AAAA,mCAJDC,mBAIC;AAAA,MAJDA,mBAIC,sCAJqB,IAIrB;AAAA,6BAHDC,UAGC;AAAA,MAHDA,UAGC,gCAHY,KAGZ;AAAA,+BAFDC,YAEC;AAAA,MAFDA,YAEC,kCAFc,KAEd;AAAA,MADDC,eACC,QADDA,eACC;AACD,OAAKP,KAAL,GAAaA,KAAK,KAAKQ,SAAV,GAAsBR,KAAtB,GAA8B,GAA3C;AACA,OAAKC,MAAL,GAAcA,MAAM,KAAKO,SAAX,GAAuBP,MAAvB,GAAgC,GAA9C;AACA,OAAKQ,KAAL,GAAa,IAAb;AACA,OAAKZ,QAAL,GAAgBA,QAAhB;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKQ,eAAL,GAAuBA,eAAvB;AACA,OAAKG,OAAL,GAAelB,SAAS,CAACmB,QAAV,CAAmBD,OAAnB,CAA2BE,KAA1C;AACA,OAAKC,MAAL,GAAc,CAAd;AACA,OAAKC,WAAL,GAAmBtB,SAAS,CAACmB,QAAV,CAAmBG,WAAnB,CAA+BF,KAAlD;AACA,OAAKG,QAAL,GAAgBvB,SAAS,CAACmB,QAAV,CAAmBI,QAAnB,CAA4BH,KAA5C;AACA,OAAKT,QAAL,GAAgBA,QAAhB;AACA,OAAKa,SAAL,GAAiB,IAAI3C,KAAJ,EAAjB;AACA,OAAK4C,QAAL,GAAgBf,OAAhB;AACA,OAAKgB,WAAL,GAAmBC,KAAK,CAACC,OAAN,CAAc,KAAKH,QAAnB,CAAnB;AACAI,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,SAA5B,EAAuC;AACrCC,IAAAA,GADqC,iBAC/B;AACJ,aAAO,KAAKN,QAAZ;AACD,KAHoC;AAKrCO,IAAAA,GALqC,eAKjCC,GALiC,EAK5B;AACP,UAAI,KAAKR,QAAL,KAAkBQ,GAAtB,EAA2B;AAC3B,WAAKR,QAAL,GAAgBQ,GAAhB;;AAEA,UAAIN,KAAK,CAACC,OAAN,CAAcK,GAAd,CAAJ,EAAwB;AACtB,aAAKP,WAAL,GAAmB,IAAnB;AACA,aAAKQ,WAAL,CAAiBC,OAAjB,CAAyBT,WAAzB,GAAuC,IAAvC;AACA,aAAKQ,WAAL,CAAiBE,WAAjB,GAA+B,IAA/B;AACD,OAJD,MAIO;AACL,aAAKV,WAAL,GAAmB,KAAnB;AACA,aAAKQ,WAAL,CAAiBC,OAAjB,CAAyBT,WAAzB,GAAuC,KAAvC;AACA,aAAKQ,WAAL,CAAiBE,WAAjB,GAA+B,IAA/B;AACD;AACF;AAlBoC,GAAvC;AAqBA,OAAKC,WAAL,GAAmBxB,UAAnB,CArCC,CAqC8B;;AAE/BgB,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,YAA5B,EAA0C;AACxCC,IAAAA,GADwC,iBAClC;AACJ,aAAO,KAAKM,WAAZ;AACD,KAHuC;AAKxCL,IAAAA,GALwC,eAKpCC,GALoC,EAK/B;AACP,UAAI,KAAKI,WAAL,KAAqBJ,GAAzB,EAA8B;AAC9B,WAAKI,WAAL,GAAmBJ,GAAnB;;AAEA,UAAIA,GAAJ,EAAS;AACP,aAAKC,WAAL,CAAiBf,QAAjB,CAA0B,UAA1B,EAAsCC,KAAtC,GAA8C,KAAKkB,gBAAL,CAAsBC,OAApE;AACD,OAFD,MAEO;AACL,aAAKL,WAAL,CAAiBf,QAAjB,CAA0B,UAA1B,EAAsCC,KAAtC,GAA8C,KAAKoB,kBAAL,CAAwBD,OAAtE;AACD;AACF;AAduC,GAA1C;AAiBA,OAAKE,MAAL,GAAc,IAAd;AACA,OAAKC,sBAAL,GAA8B1C,SAAS,CAACmC,OAAV,CAAkBQ,qBAAhD;AACAd,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,uBAA5B,EAAqD;AACnDC,IAAAA,GADmD,iBAC7C;AACJ,aAAO,KAAKW,sBAAZ;AACD,KAHkD;AAKnDV,IAAAA,GALmD,eAK/CC,GAL+C,EAK1C;AACP,UAAI,KAAKS,sBAAL,KAAgCT,GAApC,EAAyC;AACzC,WAAKS,sBAAL,GAA8BT,GAA9B;AACA,WAAKC,WAAL,CAAiBC,OAAjB,CAAyBQ,qBAAzB,GAAiDV,GAAjD;AACA,WAAKC,WAAL,CAAiBE,WAAjB,GAA+B,IAA/B;AACD;AAVkD,GAArD;AAaA,OAAKQ,UAAL,GAAkB5C,SAAS,CAACmC,OAAV,CAAkBU,SAApC;AACAhB,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,WAA5B,EAAyC;AACvCC,IAAAA,GADuC,iBACjC;AACJ,aAAO,KAAKa,UAAZ;AACD,KAHsC;AAKvCZ,IAAAA,GALuC,eAKnCC,GALmC,EAK9B;AACP,UAAI,KAAKW,UAAL,KAAoBX,GAAxB,EAA6B;AAC7B,WAAKW,UAAL,GAAkBX,GAAlB;AACA,WAAKC,WAAL,CAAiBC,OAAjB,CAAyBU,SAAzB,GAAqCZ,GAArC;AACA,WAAKC,WAAL,CAAiBE,WAAjB,GAA+B,IAA/B;AACD;AAVsC,GAAzC;AAaA,OAAKU,gBAAL,GAAwB9C,SAAS,CAACmC,OAAV,CAAkBY,eAA1C;AACAlB,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,iBAA5B,EAA+C;AAC7CC,IAAAA,GAD6C,iBACvC;AACJ,aAAO,KAAKe,gBAAZ;AACD,KAH4C;AAK7Cd,IAAAA,GAL6C,eAKzCC,GALyC,EAKpC;AACP,UAAI,KAAKa,gBAAL,KAA0Bb,GAA9B,EAAmC;AACnC,WAAKa,gBAAL,GAAwBb,GAAxB;AACA,WAAKC,WAAL,CAAiBC,OAAjB,CAAyBY,eAAzB,GAA2Cd,GAA3C;AACA,WAAKC,WAAL,CAAiBE,WAAjB,GAA+B,IAA/B;AACD;AAV4C,GAA/C;AAaA,OAAKY,cAAL,GAAsBhD,SAAS,CAACmB,QAAV,CAAmB6B,cAAnB,CAAkC5B,KAAxD,CAnGC,CAmG8D;;AAE/D,MAAI6B,YAAY,GAAG,IAAInE,YAAJ,EAAnB;AACAmE,EAAAA,YAAY,CAACC,IAAb,GAAoBnE,iBAApB;AACAkE,EAAAA,YAAY,CAACE,SAAb,GAAyBnE,aAAzB;AACAiE,EAAAA,YAAY,CAACG,SAAb,GAAyBpE,aAAzB;AACA,OAAKwD,kBAAL,GAA0B,IAAIvD,iBAAJ,CAAsB,KAAKuB,KAA3B,EAAkC,KAAKC,MAAvC,EAA+C;AACvE0C,IAAAA,SAAS,EAAEjE,YAD4D;AAEvEmE,IAAAA,SAAS,EAAEnE,YAF4D;AAGvEoE,IAAAA,MAAM,EAAEnE,UAH+D;AAIvE8D,IAAAA,YAAY,EAAEA,YAJyD;AAKvEM,IAAAA,WAAW,EAAE;AAL0D,GAA/C,CAA1B,CAzGC,CA+GG;;AAEJ,OAAKjB,gBAAL,GAAwB,IAAIrD,iBAAJ,CAAsB,KAAKuB,KAA3B,EAAkC,KAAKC,MAAvC,EAA+C;AACrE0C,IAAAA,SAAS,EAAEjE,YAD0D;AAErEmE,IAAAA,SAAS,EAAEnE,YAF0D;AAGrEoE,IAAAA,MAAM,EAAEnE;AAH6D,GAA/C,CAAxB,CAjHC,CAqHG;;AAEJ,OAAKqE,kBAAL,GAA0B,IAAIvE,iBAAJ,CAAsB,KAAKuB,KAA3B,EAAkC,KAAKC,MAAvC,EAA+C;AACvE0C,IAAAA,SAAS,EAAEnE,aAD4D;AAEvEqE,IAAAA,SAAS,EAAErE,aAF4D;AAGvEsE,IAAAA,MAAM,EAAEnE,UAH+D;AAIvE+D,IAAAA,IAAI,EAAE9D;AAJiE,GAA/C,CAA1B,CAvHC,CA4HG;AACJ;;AAEA,OAAKqE,qBAAL,GAA6B,IAAIxE,iBAAJ,CAAsB,KAAKuB,KAA3B,EAAkC,KAAKC,MAAvC,EAA+C;AAC1E0C,IAAAA,SAAS,EAAEnE,aAD+D;AAE1EqE,IAAAA,SAAS,EAAErE,aAF+D;AAG1EsE,IAAAA,MAAM,EAAEnE;AAHkE,GAA/C,CAA7B,CA/HC,CAmIG;AACJ;;AAEA,OAAKuE,eAAL,GAAuB,IAAIzE,iBAAJ,CAAsB,KAAKuB,KAA3B,EAAkC,KAAKC,MAAvC,EAA+C;AACpE0C,IAAAA,SAAS,EAAEjE,YADyD;AAEpEmE,IAAAA,SAAS,EAAEnE,YAFyD;AAGpEoE,IAAAA,MAAM,EAAEnE;AAH4D,GAA/C,CAAvB;AAKA,OAAKwE,gBAAL,GAAwB,KAAKD,eAAL,CAAqBE,KAArB,EAAxB;AACA,OAAKC,iBAAL,GAAyB,KAAKH,eAAL,CAAqBE,KAArB,EAAzB,CA5IC,CA4IsD;AACvD;;AAEA,MAAI5D,SAAS,KAAKgB,SAAlB,EAA6B;AAC3B8C,IAAAA,OAAO,CAACC,KAAR,CAAc,8CAAd;AACD;;AAED,OAAK7B,WAAL,GAAmB,IAAI7C,cAAJ,CAAmB;AACpC8C,IAAAA,OAAO,EAAEN,MAAM,CAACmC,MAAP,CAAc;AACrBC,MAAAA,QAAQ,EAAEC,IAAI,CAACC,IAAL,CAAUC,MAAM,CAACC,UAAP,GAAoBD,MAAM,CAACC,UAA3B,GAAwCD,MAAM,CAACE,WAAP,GAAqBF,MAAM,CAACE,WAA9E;AADW,KAAd,EAENtE,SAAS,CAACmC,OAFJ,CAD2B;AAIpChB,IAAAA,QAAQ,EAAE7B,aAAa,CAACsE,KAAd,CAAoB5D,SAAS,CAACmB,QAA9B,CAJ0B;AAKpCoD,IAAAA,YAAY,EAAEvE,SAAS,CAACuE,YALY;AAMpCC,IAAAA,cAAc,EAAExE,SAAS,CAACwE,cANU;AAOpCC,IAAAA,QAAQ,EAAElF;AAP0B,GAAnB,CAAnB;;AAUA,MAAI,CAACqB,mBAAL,EAA0B;AACxB,SAAKsB,WAAL,CAAiBC,OAAjB,CAAyBvB,mBAAzB,GAA+CA,mBAA/C;AACA,SAAKsB,WAAL,CAAiBE,WAAjB,GAA+B,IAA/B;AACD;;AAED,OAAKF,WAAL,CAAiBf,QAAjB,CAA0B,UAA1B,EAAsCC,KAAtC,GAA8C,KAAKoB,kBAAL,CAAwBD,OAAtE;AACA,OAAKL,WAAL,CAAiBf,QAAjB,CAA0B,SAA1B,EAAqCC,KAArC,GAA6C,KAAKoC,kBAAL,CAAwBjB,OAArE,CAnKC,CAmK6E;;AAE9E,OAAKL,WAAL,CAAiBC,OAAjB,CAAyBT,WAAzB,GAAuC,KAAKA,WAA5C;AACA,OAAKQ,WAAL,CAAiBE,WAAjB,GAA+B,IAA/B;AACA,OAAKF,WAAL,CAAiBf,QAAjB,CAA0B,YAA1B,EAAwCC,KAAxC,GAAgD,KAAKqC,qBAAL,CAA2BlB,OAA3E,CAvKC,CAuKmF;;AAEpF,OAAKL,WAAL,CAAiBf,QAAjB,CAA0B,QAA1B,EAAoCC,KAApC,GAA4C,KAAKoB,kBAAL,CAAwBS,YAApE;AACA,OAAKf,WAAL,CAAiBf,QAAjB,CAA0B,YAA1B,EAAwCC,KAAxC,GAAgD,KAAKb,MAAL,CAAYmE,IAA5D;AACA,OAAKxC,WAAL,CAAiBf,QAAjB,CAA0B,WAA1B,EAAuCC,KAAvC,GAA+C,KAAKb,MAAL,CAAYoE,GAA3D;AACA,OAAKzC,WAAL,CAAiBf,QAAjB,CAA0B,UAA1B,EAAsCC,KAAtC,GAA8C,KAAKG,QAAnD;AACA,OAAKW,WAAL,CAAiBf,QAAjB,CAA0B,YAA1B,EAAwCC,KAAxC,CAA8CY,GAA9C,CAAkD,KAAKxB,KAAvD,EAA8D,KAAKC,MAAnE;AACA,OAAKyB,WAAL,CAAiBf,QAAjB,CAA0B,wBAA1B,EAAoDC,KAApD,CAA0DwD,IAA1D,CAA+D,KAAKrE,MAAL,CAAYsE,gBAA3E;AACA,OAAK3C,WAAL,CAAiBf,QAAjB,CAA0B,+BAA1B,EAA2DC,KAA3D,CAAiEwD,IAAjE,CAAsE,KAAKrE,MAAL,CAAYuE,uBAAlF,EA/KC,CA+K2G;;AAE5G,OAAKC,cAAL,GAAsB,IAAIvF,kBAAJ,CAAuB;AAC3CsB,IAAAA,YAAY,EAAZA;AAD2C,GAAvB,CAAtB;AAGA,OAAKiE,cAAL,CAAoBN,QAApB,GAA+BlF,UAA/B,CApLC,CAoL0C;AAC3C;;AAEA,OAAKyF,mBAAL,GAA2B,IAAIvF,iBAAJ,CAAsB;AAC/CwF,IAAAA,KAAK,EAAE;AADwC,GAAtB,CAA3B,CAvLC,CAyLG;;AAEJ,OAAKC,oBAAL,GAA4B,IAAIzF,iBAAJ,CAAsB;AAChDwF,IAAAA,KAAK,EAAE;AADyC,GAAtB,CAA5B,CA3LC,CA6LG;AACJ;;AAEA,OAAKE,YAAL,GAAoB,IAAI9F,cAAJ,CAAmB;AACrC8C,IAAAA,OAAO,EAAEN,MAAM,CAACmC,MAAP,CAAc,EAAd,EAAkB/D,aAAa,CAACkC,OAAhC,CAD4B;AAErChB,IAAAA,QAAQ,EAAE7B,aAAa,CAACsE,KAAd,CAAoB3D,aAAa,CAACkB,QAAlC,CAF2B;AAGrCoD,IAAAA,YAAY,EAAEtE,aAAa,CAACsE,YAHS;AAIrCC,IAAAA,cAAc,EAAEvE,aAAa,CAACuE;AAJO,GAAnB,CAApB;AAMA,OAAKW,YAAL,CAAkBhE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKsC,eAAL,CAAqBnB,OAApE;AACA,OAAK4C,YAAL,CAAkBhE,QAAlB,CAA2B,YAA3B,EAAyCC,KAAzC,CAA+CY,GAA/C,CAAmD,KAAKxB,KAAxD,EAA+D,KAAKC,MAApE,EAvMC,CAuM4E;;AAE7E,OAAK2E,aAAL,GAAqB,IAAI/F,cAAJ,CAAmB;AACtC8C,IAAAA,OAAO,EAAEN,MAAM,CAACmC,MAAP,CAAc,EAAd,EAAkB/D,aAAa,CAACkC,OAAhC,CAD6B;AAEtChB,IAAAA,QAAQ,EAAE7B,aAAa,CAACsE,KAAd,CAAoB3D,aAAa,CAACkB,QAAlC,CAF4B;AAGtCoD,IAAAA,YAAY,EAAEtE,aAAa,CAACsE,YAHU;AAItCC,IAAAA,cAAc,EAAEvE,aAAa,CAACuE;AAJQ,GAAnB,CAArB;AAMA,OAAKY,aAAL,CAAmBjE,QAAnB,CAA4B,UAA5B,EAAwCC,KAAxC,GAAgD,KAAKuC,gBAAL,CAAsBpB,OAAtE;AACA,OAAK6C,aAAL,CAAmBjE,QAAnB,CAA4B,YAA5B,EAA0CC,KAA1C,CAAgDY,GAAhD,CAAoD,KAAKxB,KAAzD,EAAgE,KAAKC,MAArE,EAhNC,CAgN6E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAK4E,mBAAL,GAA2B,IAAIhG,cAAJ,CAAmB;AAC5C8C,IAAAA,OAAO,EAAEN,MAAM,CAACmC,MAAP,CAAc,EAAd,EAAkB9D,cAAc,CAACiC,OAAjC,CADmC;AAE5ChB,IAAAA,QAAQ,EAAE7B,aAAa,CAACsE,KAAd,CAAoB1D,cAAc,CAACiB,QAAnC,CAFkC;AAG5CoD,IAAAA,YAAY,EAAErE,cAAc,CAACqE,YAHe;AAI5CC,IAAAA,cAAc,EAAEtE,cAAc,CAACsE,cAJa;AAK5CC,IAAAA,QAAQ,EAAElF;AALkC,GAAnB,CAA3B;AAOA,OAAK8F,mBAAL,CAAyBlE,QAAzB,CAAkC,QAAlC,EAA4CC,KAA5C,GAAoD,KAAKoB,kBAAL,CAAwBS,YAA5E;AACA,OAAKoC,mBAAL,CAAyBlE,QAAzB,CAAkC,YAAlC,EAAgDC,KAAhD,GAAwD,KAAKb,MAAL,CAAYmE,IAApE;AACA,OAAKW,mBAAL,CAAyBlE,QAAzB,CAAkC,WAAlC,EAA+CC,KAA/C,GAAuD,KAAKb,MAAL,CAAYoE,GAAnE,CApOC,CAoOuE;;AAExE,OAAKW,YAAL,GAAoB,IAAIjG,cAAJ,CAAmB;AACrC8B,IAAAA,QAAQ,EAAE7B,aAAa,CAACsE,KAAd,CAAoBzD,UAAU,CAACgB,QAA/B,CAD2B;AAErCoD,IAAAA,YAAY,EAAEpE,UAAU,CAACoE,YAFY;AAGrCC,IAAAA,cAAc,EAAErE,UAAU,CAACqE,cAHU;AAIrCe,IAAAA,WAAW,EAAE,IAJwB;AAKrCC,IAAAA,SAAS,EAAE,KAL0B;AAMrCC,IAAAA,UAAU,EAAE,KANyB;AAOrCC,IAAAA,QAAQ,EAAEhG,cAP2B;AAQrCiG,IAAAA,QAAQ,EAAEhG,sBAR2B;AASrCiG,IAAAA,aAAa,EAAEhG,WATsB;AAUrCiG,IAAAA,aAAa,EAAEnG,cAVsB;AAWrCoG,IAAAA,aAAa,EAAEnG,sBAXsB;AAYrCoG,IAAAA,kBAAkB,EAAEnG,WAZiB,CAYL;;AAZK,GAAnB,CAApB;AAeA,OAAKoG,MAAL,GAAc,IAAIlG,cAAJ,CAAmB,IAAnB,CAAd;AACA,OAAKmG,kBAAL,GAA0B,IAAIpH,KAAJ,EAA1B;AACD,CAnQD;;AAqQAuB,OAAO,CAAC8F,SAAR,GAAoBrE,MAAM,CAACmC,MAAP,CAAcnC,MAAM,CAACsE,MAAP,CAAcpG,IAAI,CAACmG,SAAnB,CAAd,EAA6C;AAC/DE,EAAAA,WAAW,EAAEhG,OADkD;AAE/DiG,EAAAA,OAAO,EAAE,mBAAY;AACnB;AACA,SAAK7D,kBAAL,CAAwB6D,OAAxB;AACA,SAAK/D,gBAAL,CAAsB+D,OAAtB;AACA,SAAK7C,kBAAL,CAAwB6C,OAAxB,GAJmB,CAIgB;;AAEnC,SAAK5C,qBAAL,CAA2B4C,OAA3B;AACA,SAAK3C,eAAL,CAAqB2C,OAArB;AACA,SAAK1C,gBAAL,CAAsB0C,OAAtB;AACA,SAAKxC,iBAAL,CAAuBwC,OAAvB,GATmB,CASe;AAClC;;AAEA,SAAKtB,cAAL,CAAoBsB,OAApB,GAZmB,CAYY;;AAE/B,SAAKrB,mBAAL,CAAyBqB,OAAzB;AACA,SAAKnB,oBAAL,CAA0BmB,OAA1B,GAfmB,CAekB;;AAErC,SAAKlB,YAAL,CAAkBkB,OAAlB;AACA,SAAKjB,aAAL,CAAmBiB,OAAnB;AACA,SAAKf,YAAL,CAAkBe,OAAlB;AACA,SAAKhB,mBAAL,CAAyBgB,OAAzB,GApBmB,CAoBiB;;AAEpC,SAAKL,MAAL,CAAYK,OAAZ;AACD,GAzB8D;AA0B/DC,EAAAA,MAAM,EAAE,gBAAUjG,QAAV,EAAoBkG;AAC5B;AADQ,IAEN;AACA;AACA,QAAI,KAAK5F,QAAT,EAAmB,KAAK6B,kBAAL,CAAwBD,OAAxB,CAAgC5B,QAAhC,GAA2C,KAAKA,QAAhD;AACnBN,IAAAA,QAAQ,CAACmG,eAAT,CAAyB,KAAKhE,kBAA9B;AACAnC,IAAAA,QAAQ,CAACY,KAAT;;AAEA,QAAI,KAAKF,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqB0F,QAArB,CAA8B,KAAKpG,QAAnC,EAA6C,KAAKC,KAAlD,EAAyD,KAAKC,MAA9D;AACA,WAAKQ,eAAL,CAAqB2F,OAArB,GAA+B,IAA/B;AACD;;AAEDrG,IAAAA,QAAQ,CAACiG,MAAT,CAAgB,KAAKhG,KAArB,EAA4B,KAAKC,MAAjC;AACA,QAAI,KAAKQ,eAAT,EAA0B,KAAKA,eAAL,CAAqB2F,OAArB,GAA+B,KAA/B,CAZ1B,CAYgE;;AAEhE,SAAKC,cAAL,CAAoBtG,QAApB,EAA8B,KAAK0E,cAAnC,EAAmD,KAAKvB,kBAAxD,EAA4E,CAA5E,EAA+E,CAA/E,EAdA,CAcmF;;AAEnF,QAAI,KAAK9B,WAAT,EAAsB;AACpB,WAAKkF,eAAL,CAAqBvG,QAArB,EAA+B,KAAK2E,mBAApC,EAAyD,KAAKvB,qBAA9D,EAAqF,CAArF,EAAwF,CAAxF;AACD,KAlBD,CAkBE;;;AAGF,SAAKvB,WAAL,CAAiBf,QAAjB,CAA0B,SAA1B,EAAqCC,KAArC,GAA6C,KAAKF,OAAlD;AACA,SAAKgB,WAAL,CAAiBf,QAAjB,CAA0B,aAA1B,EAAyCC,KAAzC,GAAiD,KAAKE,WAAtD;AACA,SAAKY,WAAL,CAAiBf,QAAjB,CAA0B,UAA1B,EAAsCC,KAAtC,GAA8C,KAAKG,QAAnD;AACA,SAAKW,WAAL,CAAiBf,QAAjB,CAA0B,gBAA1B,EAA4CC,KAA5C,GAAoD,KAAK4B,cAAzD;AACA,SAAK6D,UAAL,CAAgBxG,QAAhB,EAA0B,KAAK6B,WAA/B,EAA4C,KAAKwB,eAAjD,EAzBA,CAyBmE;;AAEnE,QAAI,KAAKjB,MAAT,EAAiB;AACf,WAAKoE,UAAL,CAAgBxG,QAAhB,EAA0B,KAAK8E,YAA/B,EAA6C,KAAKxB,gBAAlD;AACA,WAAKkD,UAAL,CAAgBxG,QAAhB,EAA0B,KAAK+E,aAA/B,EAA8C,KAAKvB,iBAAnD,EAFe,CAEwD;AACxE,KA9BD,CA8BE;;;AAGF,YAAQ,KAAKxC,MAAb;AACE,WAAKjB,OAAO,CAAC0G,MAAR,CAAeC,OAApB;AACE,YAAI,KAAKlG,UAAT,EAAqB;AACnB,eAAKyE,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKoB,kBAAL,CAAwBD,OAAvE;AACA,eAAK+C,YAAL,CAAkBb,QAAlB,GAA6BlF,UAA7B;AACA,eAAKsH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAKhD,gBAAlD;AACA,cAAI,KAAKG,MAAT,EAAiB,KAAK6C,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKyC,iBAAL,CAAuBtB,OAAtE,CAAjB,KAAoG,KAAK+C,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKsC,eAAL,CAAqBnB,OAApE;AACpG,eAAK+C,YAAL,CAAkBb,QAAlB,GAA6B5E,cAA7B;AACA,eAAKgH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAKhD,gBAAlD;AACA,eAAKgD,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKkB,gBAAL,CAAsBC,OAArE;AACA,eAAK+C,YAAL,CAAkBb,QAAlB,GAA6BlF,UAA7B;AACA,eAAKsH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAK0B,cAAL,GAAsB,IAAtB,GAA6BT,WAA1E;AACD,SAVD,MAUO;AACL,eAAKjB,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKoB,kBAAL,CAAwBD,OAAvE;AACA,eAAK+C,YAAL,CAAkBb,QAAlB,GAA6BlF,UAA7B;AACA,eAAKsH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAK0B,cAAL,GAAsB,IAAtB,GAA6BT,WAA1E;AACA,cAAI,KAAK9D,MAAT,EAAiB,KAAK6C,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKyC,iBAAL,CAAuBtB,OAAtE,CAAjB,KAAoG,KAAK+C,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKsC,eAAL,CAAqBnB,OAApE;AACpG,eAAK+C,YAAL,CAAkBb,QAAlB,GAA6B5E,cAA7B;AACA,eAAKgH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAK0B,cAAL,GAAsB,IAAtB,GAA6BT,WAA1E;AACD;;AAED;;AAEF,WAAKnG,OAAO,CAAC0G,MAAR,CAAeG,GAApB;AACE,YAAI,KAAKxE,MAAT,EAAiB,KAAK6C,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKyC,iBAAL,CAAuBtB,OAAtE,CAAjB,KAAoG,KAAK+C,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKsC,eAAL,CAAqBnB,OAApE;AACpG,aAAK+C,YAAL,CAAkBb,QAAlB,GAA6BlF,UAA7B;AACA,aAAKsH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAK0B,cAAL,GAAsB,IAAtB,GAA6BT,WAA1E;;AAEA,YAAI,KAAK1F,UAAT,EAAqB;AACnB,cAAI,KAAK4B,MAAT,EAAiB,KAAK6C,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKyC,iBAAL,CAAuBtB,OAAtE,CAAjB,KAAoG,KAAK+C,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKoB,kBAAL,CAAwBD,OAAvE;AACpG,eAAK+C,YAAL,CAAkBb,QAAlB,GAA6BlF,UAA7B;AACA,eAAKsH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAKhD,gBAAlD;AACA,eAAKgD,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKsC,eAAL,CAAqBnB,OAApE;AACA,eAAK+C,YAAL,CAAkBb,QAAlB,GAA6B5E,cAA7B;AACA,eAAKgH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAKhD,gBAAlD;AACD;;AAED;;AAEF,WAAKlC,OAAO,CAAC0G,MAAR,CAAeI,MAApB;AACE,aAAK5B,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKoB,kBAAL,CAAwBD,OAAvE;AACA,aAAK+C,YAAL,CAAkBb,QAAlB,GAA6BlF,UAA7B;AACA,aAAKsH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAK0B,cAAL,GAAsB,IAAtB,GAA6BT,WAA1E;AACA;;AAEF,WAAKnG,OAAO,CAAC0G,MAAR,CAAeK,KAApB;AACE,aAAKN,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKgF,mBAA/B,EAAoD,KAAK2B,cAAL,GAAsB,IAAtB,GAA6BT,WAAjF;AACA;;AAEF,WAAKnG,OAAO,CAAC0G,MAAR,CAAeM,MAApB;AACE,aAAK9B,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKoC,kBAAL,CAAwBjB,OAAvE;AACA,aAAK+C,YAAL,CAAkBb,QAAlB,GAA6BlF,UAA7B;AACA,aAAKsH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAK0B,cAAL,GAAsB,IAAtB,GAA6BT,WAA1E;AACA;;AAEF,WAAKnG,OAAO,CAAC0G,MAAR,CAAeO,SAApB;AACE,aAAK/B,YAAL,CAAkBnE,QAAlB,CAA2B,UAA3B,EAAuCC,KAAvC,GAA+C,KAAKqC,qBAAL,CAA2BlB,OAA1E;AACA,aAAK+C,YAAL,CAAkBb,QAAlB,GAA6BlF,UAA7B;AACA,aAAKsH,UAAL,CAAgBxG,QAAhB,EAA0B,KAAKiF,YAA/B,EAA6C,KAAK0B,cAAL,GAAsB,IAAtB,GAA6BT,WAA1E;AACA;;AAEF;AACEzC,QAAAA,OAAO,CAACwD,IAAR,CAAa,qCAAb;AA9DJ;AAgED,GA7H8D;AA8H/DT,EAAAA,UAAU,EAAE,oBAAUxG,QAAV,EAAoBkH,YAApB,EAAkCC,YAAlC,EAAgDC,UAAhD,EAA4DC,UAA5D,EAAwE;AAClF;AACA,SAAKzB,kBAAL,CAAwBrB,IAAxB,CAA6BvE,QAAQ,CAACsH,aAAT,CAAuB,KAAKnG,SAA5B,CAA7B;AACA,QAAIoG,kBAAkB,GAAGvH,QAAQ,CAACwH,aAAT,CAAuB,KAAKrG,SAA5B,CAAzB;AACA,QAAIsG,iBAAiB,GAAGzH,QAAQ,CAAC0H,SAAjC;AACA1H,IAAAA,QAAQ,CAACmG,eAAT,CAAyBgB,YAAzB,EALkF,CAK1C;;AAExCnH,IAAAA,QAAQ,CAAC0H,SAAT,GAAqB,KAArB;;AAEA,QAAIN,UAAU,KAAKzG,SAAf,IAA4ByG,UAAU,KAAK,IAA/C,EAAqD;AACnDpH,MAAAA,QAAQ,CAAC2H,aAAT,CAAuBP,UAAvB;AACApH,MAAAA,QAAQ,CAAC4H,aAAT,CAAuBP,UAAU,IAAI,GAArC;AACArH,MAAAA,QAAQ,CAACY,KAAT;AACD;;AAED,SAAK+E,MAAL,CAAYkC,QAAZ,GAAuBX,YAAvB;AACA,SAAKvB,MAAL,CAAYM,MAAZ,CAAmBjG,QAAnB,EAhBkF,CAgBpD;;AAE9BA,IAAAA,QAAQ,CAAC0H,SAAT,GAAqBD,iBAArB;AACAzH,IAAAA,QAAQ,CAAC2H,aAAT,CAAuB,KAAK/B,kBAA5B;AACA5F,IAAAA,QAAQ,CAAC4H,aAAT,CAAuBL,kBAAvB;AACD,GAnJ8D;AAoJ/DjB,EAAAA,cAAc,EAAE,wBAAUtG,QAAV,EAAoB8H,gBAApB,EAAsCX,YAAtC,EAAoDC,UAApD,EAAgEC,UAAhE,EAA4E;AAC1F,SAAKzB,kBAAL,CAAwBrB,IAAxB,CAA6BvE,QAAQ,CAACsH,aAAT,CAAuB,KAAKnG,SAA5B,CAA7B;AACA,QAAIoG,kBAAkB,GAAGvH,QAAQ,CAACwH,aAAT,CAAuB,KAAKrG,SAA5B,CAAzB;AACA,QAAIsG,iBAAiB,GAAGzH,QAAQ,CAAC0H,SAAjC;AACA1H,IAAAA,QAAQ,CAACmG,eAAT,CAAyBgB,YAAzB;AACAnH,IAAAA,QAAQ,CAAC0H,SAAT,GAAqB,KAArB;AACAN,IAAAA,UAAU,GAAGU,gBAAgB,CAACV,UAAjB,IAA+BA,UAA5C;AACAC,IAAAA,UAAU,GAAGS,gBAAgB,CAACT,UAAjB,IAA+BA,UAA5C;;AAEA,QAAID,UAAU,KAAKzG,SAAf,IAA4ByG,UAAU,KAAK,IAA/C,EAAqD;AACnDpH,MAAAA,QAAQ,CAAC2H,aAAT,CAAuBP,UAAvB;AACApH,MAAAA,QAAQ,CAAC4H,aAAT,CAAuBP,UAAU,IAAI,GAArC;AACArH,MAAAA,QAAQ,CAACY,KAAT;AACD;;AAED,SAAKX,KAAL,CAAW6H,gBAAX,GAA8BA,gBAA9B;AACA9H,IAAAA,QAAQ,CAACiG,MAAT,CAAgB,KAAKhG,KAArB,EAA4B,KAAKC,MAAjC;AACA,SAAKD,KAAL,CAAW6H,gBAAX,GAA8B,IAA9B,CAjB0F,CAiBtD;;AAEpC9H,IAAAA,QAAQ,CAAC0H,SAAT,GAAqBD,iBAArB;AACAzH,IAAAA,QAAQ,CAAC2H,aAAT,CAAuB,KAAK/B,kBAA5B;AACA5F,IAAAA,QAAQ,CAAC4H,aAAT,CAAuBL,kBAAvB;AACD,GA1K8D;AA2K/DhB,EAAAA,eAAe,EAAE,yBAAUvG,QAAV,EAAoB8H,gBAApB,EAAsCX,YAAtC,EAAoDC,UAApD,EAAgEC,UAAhE,EAA4E;AAAA;;AAC3F,SAAKzB,kBAAL,CAAwBrB,IAAxB,CAA6BvE,QAAQ,CAACsH,aAAT,CAAuB,KAAKnG,SAA5B,CAA7B;AACA,QAAIoG,kBAAkB,GAAGvH,QAAQ,CAACwH,aAAT,CAAuB,KAAKrG,SAA5B,CAAzB;AACA,QAAIsG,iBAAiB,GAAGzH,QAAQ,CAAC0H,SAAjC;AACA1H,IAAAA,QAAQ,CAACmG,eAAT,CAAyBgB,YAAzB;AACAnH,IAAAA,QAAQ,CAAC0H,SAAT,GAAqB,KAArB;AACAN,IAAAA,UAAU,GAAGU,gBAAgB,CAACV,UAAjB,IAA+BA,UAA5C;AACAC,IAAAA,UAAU,GAAGS,gBAAgB,CAACT,UAAjB,IAA+BA,UAA5C;;AAEA,QAAID,UAAU,KAAKzG,SAAf,IAA4ByG,UAAU,KAAK,IAA/C,EAAqD;AACnDpH,MAAAA,QAAQ,CAAC2H,aAAT,CAAuBP,UAAvB;AACApH,MAAAA,QAAQ,CAAC4H,aAAT,CAAuBP,UAAU,IAAI,GAArC;AACArH,MAAAA,QAAQ,CAACY,KAAT;AACD;;AAED,SAAKX,KAAL,CAAW8H,eAAX,CAA2B,UAAAC,KAAK,EAAI;AAClCA,MAAAA,KAAK,CAACC,oBAAN,GAA6BD,KAAK,CAACH,QAAnC;;AAEA,UAAI,KAAI,CAACzG,QAAL,CAAc8G,QAAd,CAAuBF,KAAvB,CAAJ,EAAmC;AACjCA,QAAAA,KAAK,CAACH,QAAN,GAAiB,KAAI,CAAClD,mBAAtB;AACD,OAFD,MAEO;AACLqD,QAAAA,KAAK,CAACH,QAAN,GAAiB,KAAI,CAAChD,oBAAtB;AACD;AACF,KARD;AASA7E,IAAAA,QAAQ,CAACiG,MAAT,CAAgB,KAAKhG,KAArB,EAA4B,KAAKC,MAAjC;AACA,SAAKD,KAAL,CAAW8H,eAAX,CAA2B,UAAAC,KAAK,EAAI;AAClCA,MAAAA,KAAK,CAACH,QAAN,GAAiBG,KAAK,CAACC,oBAAvB;AACD,KAFD,EAzB2F,CA2BvF;;AAEJjI,IAAAA,QAAQ,CAAC0H,SAAT,GAAqBD,iBAArB;AACAzH,IAAAA,QAAQ,CAAC2H,aAAT,CAAuB,KAAK/B,kBAA5B;AACA5F,IAAAA,QAAQ,CAAC4H,aAAT,CAAuBL,kBAAvB;AACD,GA3M8D;AA4M/DY,EAAAA,OAAO,EAAE,iBAAUhI,KAAV,EAAiBC,MAAjB,EAAyB;AAChC,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKyB,WAAL,CAAiBC,OAAjB,CAAyB8B,QAAzB,GAAoCC,IAAI,CAACC,IAAL,CAAU3D,KAAK,GAAGA,KAAR,GAAgBC,MAAM,GAAGA,MAAnC,CAApC;AACA,SAAKyB,WAAL,CAAiBE,WAAjB,GAA+B,IAA/B;AACA,SAAKI,kBAAL,CAAwBgG,OAAxB,CAAgChI,KAAhC,EAAuCC,MAAvC;AACA,SAAK6B,gBAAL,CAAsBkG,OAAtB,CAA8BhI,KAA9B,EAAqCC,MAArC;AACA,SAAKiD,eAAL,CAAqB8E,OAArB,CAA6BhI,KAA7B,EAAoCC,MAApC;AACA,SAAK+C,kBAAL,CAAwBgF,OAAxB,CAAgChI,KAAhC,EAAuCC,MAAvC,EARgC,CAQgB;;AAEhD,SAAKgD,qBAAL,CAA2B+E,OAA3B,CAAmChI,KAAnC,EAA0CC,MAA1C;AACA,SAAKkD,gBAAL,CAAsB6E,OAAtB,CAA8BhI,KAA9B,EAAqCC,MAArC;AACA,SAAKoD,iBAAL,CAAuB2E,OAAvB,CAA+BhI,KAA/B,EAAsCC,MAAtC,EAZgC,CAYe;;AAE/C,SAAKyB,WAAL,CAAiBf,QAAjB,CAA0B,YAA1B,EAAwCC,KAAxC,CAA8CY,GAA9C,CAAkDxB,KAAlD,EAAyDC,MAAzD;AACA,SAAKyB,WAAL,CAAiBf,QAAjB,CAA0B,wBAA1B,EAAoDC,KAApD,CAA0DwD,IAA1D,CAA+D,KAAKrE,MAAL,CAAYsE,gBAA3E;AACA,SAAK3C,WAAL,CAAiBf,QAAjB,CAA0B,+BAA1B,EAA2DC,KAA3D,CAAiEwD,IAAjE,CAAsE,KAAKrE,MAAL,CAAYuE,uBAAlF;AACA,SAAKK,YAAL,CAAkBhE,QAAlB,CAA2B,YAA3B,EAAyCC,KAAzC,CAA+CY,GAA/C,CAAmDxB,KAAnD,EAA0DC,MAA1D;AACA,SAAK2E,aAAL,CAAmBjE,QAAnB,CAA4B,YAA5B,EAA0CC,KAA1C,CAAgDY,GAAhD,CAAoDxB,KAApD,EAA2DC,MAA3D;AACD;AA/N8D,CAA7C,CAApB;AAiOAL,OAAO,CAAC0G,MAAR,GAAiB;AACfC,EAAAA,OAAO,EAAE,CADM;AAEfE,EAAAA,GAAG,EAAE,CAFU;AAGfC,EAAAA,MAAM,EAAE,CAHO;AAIfC,EAAAA,KAAK,EAAE,CAJQ;AAKfC,EAAAA,MAAM,EAAE,CALO;AAMfC,EAAAA,SAAS,EAAE;AANI,CAAjB;AASA,SAASjH,OAAT","sourcesContent":["import { Color, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, LinearFilter, RGBAFormat, HalfFloatType, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, MeshBasicMaterial, SrcAlphaFactor, OneMinusSrcAlphaFactor, AddEquation, NormalBlending } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SSRShader, SSRBlurShader, SSRDepthShader } from '../shaders/SSRShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SSRPass = function ({\n  renderer,\n  scene,\n  camera,\n  width,\n  height,\n  selects,\n  encoding,\n  isPerspectiveCamera = true,\n  isBouncing = false,\n  morphTargets = false,\n  groundReflector\n}) {\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 512;\n  this.clear = true;\n  this.renderer = renderer;\n  this.scene = scene;\n  this.camera = camera;\n  this.groundReflector = groundReflector;\n  this.opacity = SSRShader.uniforms.opacity.value;\n  this.output = 0;\n  this.maxDistance = SSRShader.uniforms.maxDistance.value;\n  this.surfDist = SSRShader.uniforms.surfDist.value;\n  this.encoding = encoding;\n  this.tempColor = new Color();\n  this._selects = selects;\n  this.isSelective = Array.isArray(this._selects);\n  Object.defineProperty(this, 'selects', {\n    get() {\n      return this._selects;\n    },\n\n    set(val) {\n      if (this._selects === val) return;\n      this._selects = val;\n\n      if (Array.isArray(val)) {\n        this.isSelective = true;\n        this.ssrMaterial.defines.isSelective = true;\n        this.ssrMaterial.needsUpdate = true;\n      } else {\n        this.isSelective = false;\n        this.ssrMaterial.defines.isSelective = false;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    }\n\n  });\n  this._isBouncing = isBouncing; ///todo: don't need defineProperty\n\n  Object.defineProperty(this, 'isBouncing', {\n    get() {\n      return this._isBouncing;\n    },\n\n    set(val) {\n      if (this._isBouncing === val) return;\n      this._isBouncing = val;\n\n      if (val) {\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n      } else {\n        this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n      }\n    }\n\n  });\n  this.isBlur = true;\n  this._isDistanceAttenuation = SSRShader.defines.isDistanceAttenuation;\n  Object.defineProperty(this, 'isDistanceAttenuation', {\n    get() {\n      return this._isDistanceAttenuation;\n    },\n\n    set(val) {\n      if (this._isDistanceAttenuation === val) return;\n      this._isDistanceAttenuation = val;\n      this.ssrMaterial.defines.isDistanceAttenuation = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n\n  });\n  this._isFresnel = SSRShader.defines.isFresnel;\n  Object.defineProperty(this, 'isFresnel', {\n    get() {\n      return this._isFresnel;\n    },\n\n    set(val) {\n      if (this._isFresnel === val) return;\n      this._isFresnel = val;\n      this.ssrMaterial.defines.isFresnel = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n\n  });\n  this._isInfiniteThick = SSRShader.defines.isInfiniteThick;\n  Object.defineProperty(this, 'isInfiniteThick', {\n    get() {\n      return this._isInfiniteThick;\n    },\n\n    set(val) {\n      if (this._isInfiniteThick === val) return;\n      this._isInfiniteThick = val;\n      this.ssrMaterial.defines.isInfiniteThick = val;\n      this.ssrMaterial.needsUpdate = true;\n    }\n\n  });\n  this.thickTolerance = SSRShader.uniforms.thickTolerance.value; // beauty render target with depth buffer\n\n  var depthTexture = new DepthTexture();\n  depthTexture.type = UnsignedShortType;\n  depthTexture.minFilter = NearestFilter;\n  depthTexture.maxFilter = NearestFilter;\n  this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat,\n    depthTexture: depthTexture,\n    depthBuffer: true\n  }); //for bouncing\n\n  this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  }); // normal render target\n\n  this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat,\n    type: HalfFloatType\n  }); // metalness render target\n  // if (this.isSelective) {\n\n  this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  }); // }\n  // ssr render target\n\n  this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurRenderTarget = this.ssrRenderTarget.clone();\n  this.blurRenderTarget2 = this.ssrRenderTarget.clone(); // this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n  // ssr material\n\n  if (SSRShader === undefined) {\n    console.error('THREE.SSRPass: The pass relies on SSRShader.');\n  }\n\n  this.ssrMaterial = new ShaderMaterial({\n    defines: Object.assign({\n      MAX_STEP: Math.sqrt(window.innerWidth * window.innerWidth + window.innerHeight * window.innerHeight)\n    }, SSRShader.defines),\n    uniforms: UniformsUtils.clone(SSRShader.uniforms),\n    vertexShader: SSRShader.vertexShader,\n    fragmentShader: SSRShader.fragmentShader,\n    blending: NoBlending\n  });\n\n  if (!isPerspectiveCamera) {\n    this.ssrMaterial.defines.isPerspectiveCamera = isPerspectiveCamera;\n    this.ssrMaterial.needsUpdate = true;\n  }\n\n  this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n  this.ssrMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture; // if (this.isSelective) {\n\n  this.ssrMaterial.defines.isSelective = this.isSelective;\n  this.ssrMaterial.needsUpdate = true;\n  this.ssrMaterial.uniforms['tMetalness'].value = this.metalnessRenderTarget.texture; // }\n\n  this.ssrMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.ssrMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.ssrMaterial.uniforms['cameraFar'].value = this.camera.far;\n  this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\n  this.ssrMaterial.uniforms['resolution'].value.set(this.width, this.height);\n  this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n  this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\n\n  this.normalMaterial = new MeshNormalMaterial({\n    morphTargets\n  });\n  this.normalMaterial.blending = NoBlending; // if (this.isSelective) {\n  // metalnessOn material\n\n  this.metalnessOnMaterial = new MeshBasicMaterial({\n    color: 'white'\n  }); // metalnessOff material\n\n  this.metalnessOffMaterial = new MeshBasicMaterial({\n    color: 'black'\n  }); // }\n  // blur material\n\n  this.blurMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSRBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    vertexShader: SSRBlurShader.vertexShader,\n    fragmentShader: SSRBlurShader.fragmentShader\n  });\n  this.blurMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n  this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // blur material 2\n\n  this.blurMaterial2 = new ShaderMaterial({\n    defines: Object.assign({}, SSRBlurShader.defines),\n    uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    vertexShader: SSRBlurShader.vertexShader,\n    fragmentShader: SSRBlurShader.fragmentShader\n  });\n  this.blurMaterial2.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n  this.blurMaterial2.uniforms['resolution'].value.set(this.width, this.height); // // blur material 3\n  // this.blurMaterial3 = new ShaderMaterial({\n  //   defines: Object.assign({}, SSRBlurShader.defines),\n  //   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n  //   vertexShader: SSRBlurShader.vertexShader,\n  //   fragmentShader: SSRBlurShader.fragmentShader\n  // });\n  // this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n  // this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n  // material for rendering the depth\n\n  this.depthRenderMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SSRDepthShader.defines),\n    uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n    vertexShader: SSRDepthShader.vertexShader,\n    fragmentShader: SSRDepthShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n  this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n  this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\n\n  this.copyMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    blendSrc: SrcAlphaFactor,\n    blendDst: OneMinusSrcAlphaFactor,\n    blendEquation: AddEquation,\n    blendSrcAlpha: SrcAlphaFactor,\n    blendDstAlpha: OneMinusSrcAlphaFactor,\n    blendEquationAlpha: AddEquation // premultipliedAlpha:true,\n\n  });\n  this.fsQuad = new FullScreenQuad(null);\n  this.originalClearColor = new Color();\n};\n\nSSRPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SSRPass,\n  dispose: function () {\n    // dispose render targets\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose(); // if (this.isSelective)\n\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose(); // this.blurRenderTarget3.dispose();\n    // dispose materials\n\n    this.normalMaterial.dispose(); // if (this.isSelective) {\n\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose(); // }\n\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  },\n  render: function (renderer, writeBuffer\n  /*, readBuffer, deltaTime, maskActive */\n  ) {\n    // render beauty and depth\n    if (this.encoding) this.beautyRenderTarget.texture.encoding = this.encoding;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n\n    if (this.groundReflector) {\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector) this.groundReflector.visible = false; // render normals\n\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0); // render metalnesses\n\n    if (this.isSelective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    } // render SSR\n\n\n    this.ssrMaterial.uniforms['opacity'].value = this.opacity;\n    this.ssrMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.ssrMaterial.uniforms['surfDist'].value = this.surfDist;\n    this.ssrMaterial.uniforms['thickTolerance'].value = this.thickTolerance;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget); // render blur\n\n    if (this.isBlur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2); // this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n    } // output result to screen\n\n\n    switch (this.output) {\n      case SSRPass.OUTPUT.Default:\n        if (this.isBouncing) {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n\n        break;\n\n      case SSRPass.OUTPUT.SSR:\n        if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n\n        if (this.isBouncing) {\n          if (this.isBlur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n\n        break;\n\n      case SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      case SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n\n      default:\n        console.warn('THREE.SSRPass: Unknown output type.');\n    }\n  },\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderMetalness: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    var originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.traverseVisible(child => {\n      child._SSRPassMaterialBack = child.material;\n\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible(child => {\n      child.material = child._SSRPassMaterialBack;\n    }); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function (width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height); // if (this.isSelective)\n\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height); // this.blurRenderTarget3.setSize(width, height);\n\n    this.ssrMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n    this.blurMaterial2.uniforms['resolution'].value.set(width, height);\n  }\n});\nSSRPass.OUTPUT = {\n  Default: 0,\n  SSR: 1,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5,\n  Metalness: 7\n};\n\nexport { SSRPass };\n"]},"metadata":{},"sourceType":"module"}