{"ast":null,"code":"import { Color } from 'three';\n\nvar Lut = function Lut(colormap, numberofcolors) {\n  this.lut = [];\n  this.setColorMap(colormap, numberofcolors);\n  return this;\n};\n\nLut.prototype = {\n  constructor: Lut,\n  lut: [],\n  map: [],\n  n: 256,\n  minV: 0,\n  maxV: 1,\n  set: function set(value) {\n    if (value instanceof Lut) {\n      this.copy(value);\n    }\n\n    return this;\n  },\n  setMin: function setMin(min) {\n    this.minV = min;\n    return this;\n  },\n  setMax: function setMax(max) {\n    this.maxV = max;\n    return this;\n  },\n  setColorMap: function setColorMap(colormap, numberofcolors) {\n    this.map = ColorMapKeywords[colormap] || ColorMapKeywords.rainbow;\n    this.n = numberofcolors || 32;\n    var step = 1.0 / this.n;\n    this.lut.length = 0;\n\n    for (var i = 0; i <= 1; i += step) {\n      for (var j = 0; j < this.map.length - 1; j++) {\n        if (i >= this.map[j][0] && i < this.map[j + 1][0]) {\n          var min = this.map[j][0];\n          var max = this.map[j + 1][0];\n          var minColor = new Color(this.map[j][1]);\n          var maxColor = new Color(this.map[j + 1][1]);\n          var color = minColor.lerp(maxColor, (i - min) / (max - min));\n          this.lut.push(color);\n        }\n      }\n    }\n\n    return this;\n  },\n  copy: function copy(lut) {\n    this.lut = lut.lut;\n    this.map = lut.map;\n    this.n = lut.n;\n    this.minV = lut.minV;\n    this.maxV = lut.maxV;\n    return this;\n  },\n  getColor: function getColor(alpha) {\n    if (alpha <= this.minV) {\n      alpha = this.minV;\n    } else if (alpha >= this.maxV) {\n      alpha = this.maxV;\n    }\n\n    alpha = (alpha - this.minV) / (this.maxV - this.minV);\n    var colorPosition = Math.round(alpha * this.n);\n    colorPosition == this.n ? colorPosition -= 1 : colorPosition;\n    return this.lut[colorPosition];\n  },\n  addColorMap: function addColorMap(colormapName, arrayOfColors) {\n    ColorMapKeywords[colormapName] = arrayOfColors;\n  },\n  createCanvas: function createCanvas() {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = this.n;\n    this.updateCanvas(canvas);\n    return canvas;\n  },\n  updateCanvas: function updateCanvas(canvas) {\n    var ctx = canvas.getContext('2d', {\n      alpha: false\n    });\n    var imageData = ctx.getImageData(0, 0, 1, this.n);\n    var data = imageData.data;\n    var k = 0;\n    var step = 1.0 / this.n;\n\n    for (var i = 1; i >= 0; i -= step) {\n      for (var j = this.map.length - 1; j >= 0; j--) {\n        if (i < this.map[j][0] && i >= this.map[j - 1][0]) {\n          var min = this.map[j - 1][0];\n          var max = this.map[j][0];\n          var minColor = new Color(this.map[j - 1][1]);\n          var maxColor = new Color(this.map[j][1]);\n          var color = minColor.lerp(maxColor, (i - min) / (max - min));\n          data[k * 4] = Math.round(color.r * 255);\n          data[k * 4 + 1] = Math.round(color.g * 255);\n          data[k * 4 + 2] = Math.round(color.b * 255);\n          data[k * 4 + 3] = 255;\n          k += 1;\n        }\n      }\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n};\nvar ColorMapKeywords = {\n  rainbow: [[0.0, 0x0000ff], [0.2, 0x00ffff], [0.5, 0x00ff00], [0.8, 0xffff00], [1.0, 0xff0000]],\n  cooltowarm: [[0.0, 0x3c4ec2], [0.2, 0x9bbcff], [0.5, 0xdcdcdc], [0.8, 0xf6a385], [1.0, 0xb40426]],\n  blackbody: [[0.0, 0x000000], [0.2, 0x780000], [0.5, 0xe63200], [0.8, 0xffff00], [1.0, 0xffffff]],\n  grayscale: [[0.0, 0x000000], [0.2, 0x404040], [0.5, 0x7f7f80], [0.8, 0xbfbfbf], [1.0, 0xffffff]]\n};\nexport { ColorMapKeywords, Lut };","map":{"version":3,"sources":["/Projects/arrayftw/node_modules/three-stdlib/math/Lut.js"],"names":["Color","Lut","colormap","numberofcolors","lut","setColorMap","prototype","constructor","map","n","minV","maxV","set","value","copy","setMin","min","setMax","max","ColorMapKeywords","rainbow","step","length","i","j","minColor","maxColor","color","lerp","push","getColor","alpha","colorPosition","Math","round","addColorMap","colormapName","arrayOfColors","createCanvas","canvas","document","createElement","width","height","updateCanvas","ctx","getContext","imageData","getImageData","data","k","r","g","b","putImageData","cooltowarm","blackbody","grayscale"],"mappings":"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","sourcesContent":["import { Color } from 'three';\n\nvar Lut = function (colormap, numberofcolors) {\n  this.lut = [];\n  this.setColorMap(colormap, numberofcolors);\n  return this;\n};\n\nLut.prototype = {\n  constructor: Lut,\n  lut: [],\n  map: [],\n  n: 256,\n  minV: 0,\n  maxV: 1,\n  set: function (value) {\n    if (value instanceof Lut) {\n      this.copy(value);\n    }\n\n    return this;\n  },\n  setMin: function (min) {\n    this.minV = min;\n    return this;\n  },\n  setMax: function (max) {\n    this.maxV = max;\n    return this;\n  },\n  setColorMap: function (colormap, numberofcolors) {\n    this.map = ColorMapKeywords[colormap] || ColorMapKeywords.rainbow;\n    this.n = numberofcolors || 32;\n    var step = 1.0 / this.n;\n    this.lut.length = 0;\n\n    for (let i = 0; i <= 1; i += step) {\n      for (let j = 0; j < this.map.length - 1; j++) {\n        if (i >= this.map[j][0] && i < this.map[j + 1][0]) {\n          var min = this.map[j][0];\n          var max = this.map[j + 1][0];\n          var minColor = new Color(this.map[j][1]);\n          var maxColor = new Color(this.map[j + 1][1]);\n          var color = minColor.lerp(maxColor, (i - min) / (max - min));\n          this.lut.push(color);\n        }\n      }\n    }\n\n    return this;\n  },\n  copy: function (lut) {\n    this.lut = lut.lut;\n    this.map = lut.map;\n    this.n = lut.n;\n    this.minV = lut.minV;\n    this.maxV = lut.maxV;\n    return this;\n  },\n  getColor: function (alpha) {\n    if (alpha <= this.minV) {\n      alpha = this.minV;\n    } else if (alpha >= this.maxV) {\n      alpha = this.maxV;\n    }\n\n    alpha = (alpha - this.minV) / (this.maxV - this.minV);\n    var colorPosition = Math.round(alpha * this.n);\n    colorPosition == this.n ? colorPosition -= 1 : colorPosition;\n    return this.lut[colorPosition];\n  },\n  addColorMap: function (colormapName, arrayOfColors) {\n    ColorMapKeywords[colormapName] = arrayOfColors;\n  },\n  createCanvas: function () {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = this.n;\n    this.updateCanvas(canvas);\n    return canvas;\n  },\n  updateCanvas: function (canvas) {\n    var ctx = canvas.getContext('2d', {\n      alpha: false\n    });\n    var imageData = ctx.getImageData(0, 0, 1, this.n);\n    var data = imageData.data;\n    var k = 0;\n    var step = 1.0 / this.n;\n\n    for (let i = 1; i >= 0; i -= step) {\n      for (let j = this.map.length - 1; j >= 0; j--) {\n        if (i < this.map[j][0] && i >= this.map[j - 1][0]) {\n          var min = this.map[j - 1][0];\n          var max = this.map[j][0];\n          var minColor = new Color(this.map[j - 1][1]);\n          var maxColor = new Color(this.map[j][1]);\n          var color = minColor.lerp(maxColor, (i - min) / (max - min));\n          data[k * 4] = Math.round(color.r * 255);\n          data[k * 4 + 1] = Math.round(color.g * 255);\n          data[k * 4 + 2] = Math.round(color.b * 255);\n          data[k * 4 + 3] = 255;\n          k += 1;\n        }\n      }\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n    return canvas;\n  }\n};\nvar ColorMapKeywords = {\n  rainbow: [[0.0, 0x0000ff], [0.2, 0x00ffff], [0.5, 0x00ff00], [0.8, 0xffff00], [1.0, 0xff0000]],\n  cooltowarm: [[0.0, 0x3c4ec2], [0.2, 0x9bbcff], [0.5, 0xdcdcdc], [0.8, 0xf6a385], [1.0, 0xb40426]],\n  blackbody: [[0.0, 0x000000], [0.2, 0x780000], [0.5, 0xe63200], [0.8, 0xffff00], [1.0, 0xffffff]],\n  grayscale: [[0.0, 0x000000], [0.2, 0x404040], [0.5, 0x7f7f80], [0.8, 0xbfbfbf], [1.0, 0xffffff]]\n};\n\nexport { ColorMapKeywords, Lut };\n"]},"metadata":{},"sourceType":"module"}